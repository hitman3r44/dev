!SESSION 2015-04-15 09:09:18.660 -----------------------------------------------
eclipse.buildId=M20110210-1200
java.version=1.7.0_17
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_CA
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product

This is a continuation of log file C:\dev\WORKSPACE\.metadata\.bak_0.log
Created Time: 2015-04-15 11:36:27.108

!ENTRY org.eclipse.jdt.ui 4 2 2015-04-15 11:36:27.108
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:233)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:255)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:190)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:89)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:728)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:788)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1244)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:102)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2015-04-15 11:36:27.108
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2015-04-15 11:36:27.108
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 0 2015-04-15 11:36:27.108
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:233)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:255)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:190)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:89)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:728)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:788)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1244)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:102)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2015-04-15 11:36:27.118
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.core 4 4 2015-04-15 11:40:05.414
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.loyauty.model;

import java.util.Date;
import java.util.List;

import lombok.Data;
import lombok.ToString;

import com.loyauty.enums.PriceType;
import com.loyauty.enums.ProductStatus;
import com.loyauty.enums.UserProductStatus;
/**
 * 
 * @author Manuel
 *
 */
@Data @ToString(callSuper=true) 
public class Product extends AbstractEntity{
		  
	private String upc;
	private Translation name;
	private Translation description;
	private Image image;
	private ProductStatus status;
	private String msrp;
	private String cost;
	private Brand brand;
	private String loyaltySourceProductId;
	private String productWidth;
	private String productHigh;
	private String productLong;
	private String weight;
	private Date creationDate;
	private Long typeId;
	private Long valueSpecificationId;
	private Long userId;
	private String userPrice;
	private Category category;
	private Translation specification;
	private List<ProductModelNumber> modelNumberList;
	private List<User> activeClientsList;	
	private Integer priceType;
	private Translation other;
	private UserProductStatus userProductStatus;
	
	private String link;
	private List<ProductLink> linkList;
	private String note;
	private Date discontinuedStartDate;
	private String loyaltyProductIdSub;
	
	private Translation warranty;
	
	private String length;
	private String width;
	private String height;
	
	private Boolean wereWgtDimChanged;
	private Boolean consideredForXML;
	private String oldImageRealName;
	
	private Double stock;
	//Added by Sumit Sarkar
	private Double orderAmount;

	private String actualWidth;
	private String actualLength;
	private String actualHeight;
	private String actualWeight;
	
	private Double boxLength;
	private Double boxWidth;
	private Double boxHeight;
	private Double boxTotalWeight;

	private String descriptiProduct;
	private Double classification;
	private String discount;
	private String profit;
	private Double qtSold;

	//sale attributes
	private Double  qtMax;
	private Double  saleQt;
	private Date    startDate;
	private Date    endDate;
	private Double  regularPrice;
	private Double  regularPercentProfit;
	private Double  regularPercentDiscount;
	private Boolean active;
	private String  messageForClient;
	private String  saleNote;
	private Long productSaleId;
	
	private Double salePrice; 
	private Double salePercentProfit;
	private Double salePercentDiscount;
	
	
	
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 2 2015-04-15 11:40:05.414
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:233)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:255)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:190)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:89)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:728)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:788)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1244)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1205)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:133)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:102)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2015-04-15 11:40:05.414
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2015-04-15 11:40:05.414
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 0 2015-04-15 11:40:05.568
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:233)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:255)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:190)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:89)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:728)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:788)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1244)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1205)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:133)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:102)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2015-04-15 11:40:05.568
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.core 4 4 2015-04-15 11:40:05.568
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.loyauty.web.struts.action.orders;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.List;

import javax.servlet.http.HttpSession;
import lombok.Getter;
import lombok.Setter;

import com.loyauty.exception.ServiceException;
import com.loyauty.exception.ServiceLocatorException;
import com.loyauty.model.OrdersRows;
import com.loyauty.model.User;
import com.loyauty.service.core.DTOFactory;
import com.loyauty.service.core.dto.BasicUserDTO;
import com.loyauty.service.core.dto.OperationsDTO;
import com.loyauty.service.core.dto.OrdersDTO;
import com.loyauty.service.core.dto.ProvinceDTO;
import com.loyauty.service.core.dto.UserProductPriceDTO;
import com.loyauty.service.core.dto.UserSessionDTO;
import com.loyauty.service.core.dto.UsersPrivilegesDTO;
import com.loyauty.service.operations.OperationsService;
import com.loyauty.service.orders.OrdersService;
import com.loyauty.service.product.ProductService;
import com.loyauty.service.user.UserService;
import com.loyauty.web.struts.action.LoyautyAction;

public class ReportOrders extends LoyautyAction {
	private static final long serialVersionUID = -3811760851445730062L;
	private UserService userService;
	private ProductService productService;
	private OrdersService orderService;
	private OperationsService operationsService;
	@Getter
	@Setter
	private String userLogin;
	@Getter
	@Setter
	private List<User> usersList;
	private static int USER_TYPE = 2;
	@Getter
	@Setter
	List<OrdersDTO> listOrdersDTO;
	@Getter
	@Setter
	List<OrdersDTO> listStatus;
	@Getter
	@Setter
	private String lsOrderId;
	@Getter
	@Setter
	Long poYpop;
	@Getter
	@Setter
	Long poXpop;
	@Getter
	@Setter
	private Long pageTop = 0L;
	@Getter
	@Setter
	private Date creationDate;
	@Getter
	@Setter
	private Long findOrdersSignal;
	private String status;
	@Getter
	@Setter
	private Long sizeResult = 0L;
	@Getter
	@Setter
	private Long sorting;
	@Getter
	@Setter
	private Long sortingOrdersSignal;
	@Getter
	@Setter
	private Integer fieldForSorting;
	@Getter
	@Setter
	private Integer asc;
	@Getter
	@Setter
	private Integer scrollDivRowsLeft;
	@Getter
	@Setter
	private Integer scrollPageLeft;
	@Getter
	@Setter
	private Integer scrollDivRowsTop;
	@Getter
	@Setter
	private String strCreationDateStart;
	@Getter
	@Setter
	private String strCreationDateEnd;
	@Getter
	@Setter
	private Date creationDateStart;
	@Getter
	@Setter
	private Date creationDateEnd;
	private Date creationDateStartArg;
	private Date creationDateEndArg;
	@Getter
	@Setter
	private Integer selectedStatus;
	@Getter
	@Setter
	private Long editOrderSignal;
	@Getter
	@Setter
	private Long cancelSignal;
	@Getter
	@Setter
	private Integer indexOrder;
	@Getter
	@Setter
	private OrdersDTO orderToEdit;
	@Getter
	@Setter
	private String strProductOrderDate;
	@Getter
	@Setter
	private String lsProductID;
	@Getter
	@Setter
	Integer indexRow;
	@Getter
	@Setter
	private String showOrderDetailPop;
	@Getter
	@Setter
	private Long userId;
	@Getter
	@Setter
	private Long checkProductPriceSignal;
	@Getter
	@Setter
	private Long saveTemporaryRowSignal;
	@Getter
	@Setter
	private Long addSimilarRowSignal;
	@Getter
	@Setter
	private Long deleteRowSignal;
	@Getter
	@Setter
	private Long saveOrdersSignal;
	@Getter
	@Setter
	private Boolean checkBoxPrint;

	// recovery Data Order
	@Getter
	@Setter
	private String clientLastName;
	@Getter
	@Setter
	private String clientFirstName;
	@Getter
	@Setter
	private String clientOtherNames;
	@Getter
	@Setter
	private String clientStreet;
	@Getter
	@Setter
	private String clientOtherStreet;
	@Getter
	@Setter
	private String clientCity;
	@Getter
	@Setter
	private String clientProvince;
	@Getter
	@Setter
	private String clientPostalCode;
	@Getter
	@Setter
	private String clientPhone;
	@Getter
	@Setter
	private String clientEmail;
//	@Getter
//	@Setter
//	private String productOrderNumber;
	@Getter
	@Setter
	private String strRequiredDate;

	// recovery data row
	@Getter
	@Setter
	private Double quantity;
	@Getter
	@Setter
	private String notes;
	@Getter
	@Setter
	private Double quantityToChange;
	@Getter
	@Setter
	private Double stock;
	@Getter
	@Setter
	private String productDescription;
	@Getter
	@Setter
	private Double unitPrice;
	@Getter
	@Setter
	private Double shippingFee;
	@Getter
	@Setter
	private String shippingCompany;
	@Getter
	@Setter
	private String companyHeader;

	@Getter
	@Setter
	private Long quantityToChangeSignal;
	@Getter
	@Setter
	private Long duplicateOrderSignal;
	@Getter
	@Setter
	private String strCreationDate;
	@Getter
	@Setter
	private String strCreationOrderDate;
	@Getter
	@Setter
	private User usr;
	@Getter
	@Setter
	private String showSaveSuccessPop;
	// showSaveSuccessPop="display:block;visibility:visible;";
	// showSaveSuccessPop="visibility:hidden;display:none;";
	@Getter
	@Setter
	private String message;
	@Getter
	@Setter
	private Long okSaveSuccessPopSignal;
	@Getter
	@Setter
	private Long showRowShipping;
	@Getter
	@Setter
	private Long showOnlyEditNote;
	@Getter
	@Setter
	private Long saveShippingSignal;
	@Getter
	@Setter
	private Long saveOnlyNoteSignal;
	@Getter
	@Setter
	private String code;
	@Getter
	@Setter
	private Long cityId;
	@Getter
	@Setter
	private List<ProvinceDTO> listProvinces;
	private Hashtable<String, ProvinceDTO> hashProvinces;
	@Getter
	@Setter
	private Boolean orderNotSavedAtFirst;
	@Getter
	@Setter
	private String strShippedDate;
	@Getter
	@Setter
	private String strShippingPrice;
	@Getter
	@Setter
	private String showConfirmDeleteOrderPop;
	@Getter
	@Setter
	private Long deleteOrderSignal;
	@Getter
	@Setter
	private Long confirmDeleteSignal;
	@Getter
	@Setter
	private UsersPrivilegesDTO userPrivileges;
	@Getter
	@Setter
	private UsersPrivilegesDTO usersPrivShippedToInvoiced;
	@Getter
	@Setter
	private UsersPrivilegesDTO usersPrivChangeShippedStatus;
	@Getter
	@Setter
	private HashMap<Integer, String> hashStatus;
	@Getter
	@Setter
	private Long statusId;
	@Getter
	@Setter
	private String strPrint;
	@Getter
	@Setter
	private Integer testSignal;
	@Getter
	@Setter
	private String newStatus;
	Long invoicedOrdersRefresh;
	@Getter
	@Setter
	private Integer reportDateBetween;
	@Getter
	@Setter
	private Long dateBetweenSignal;
	@Getter
	@Setter
	private Long selectAllOrdersSignal;
	@Getter
	@Setter
	private Boolean checkBoxItem;
	// ------Pagination
	@Getter
	@Setter
	Long pageIndexSignal;
	@Getter
	@Setter
	Long prevListPagesSignal;
	@Getter
	@Setter
	Long nextListPagesSignal;
	@Getter
	@Setter
	Long totalOrders;
	@Getter
	@Setter
	Integer nextListPages;
	@Getter
	@Setter
	Integer prevListPages;
	@Getter
	@Setter
	Integer indexSet = 0;
	@Getter
	@Setter
	Integer indexList;
	@Getter
	@Setter
	List<OrdersDTO> listIndexSet;
	@Getter
	@Setter
	Integer PAGE_ITEMS_COUNT = 100;
	
	//New Added Field in the search option as toggle functionality
	@Getter
	@Setter
	private String productOrderNumberSearch;
	@Getter
	@Setter
	private String trakingNumber;
	@Getter
	@Setter
	private String  clientOther;
	@Getter	@Setter
	private String	 clientOrderNumber;
	
	@Getter	@Setter
	private Integer switchBetweenClientLoginAndPoNumberSignal;
	@Getter	@Setter
	private Integer switchBetweenClientLoginAndPoNumber;
	//New Added Field in the search option as toggle functionality
	@Getter	@Setter
	private Integer switchBetweenLsOrderAndClientOrderIdSignal;
	@Getter	@Setter
	private Integer switchBetweenLsOrderAndClientOrderId;
	@Getter	@Setter
	private Integer switchBetweenStatusAndClientOtherSignal;
	@Getter	@Setter
	private Integer switchBetweenStatusAndClientOther;
	//Added for the multiple functionality in switching  
	@Getter	@Setter
	private Integer switchBetweenOptionFieldsSignal;
	@Getter	@Setter
	private Integer switchBetweenOptionFields;
	
	switchBetweenOptionFieldsSignal

	// ------Pagination

	/*
	 * ==========================================================================
	 * =============== Default constructor
	 * ======================================
	 * ===================================================
	 */
	public ReportOrders() throws ServiceLocatorException {
		super();
		userService = getServiceLocator().getUserService();
		orderService = getServiceLocator().getOrderService();
		productService = getServiceLocator().getProductService();
		operationsService = getServiceLocator().getOperationsService();
	}

	/*
	 * ==========================================================================
	 * =============== method execute
	 * ============================================
	 * =============================================
	 */
	@SuppressWarnings({ "rawtypes", "unchecked" })
	@Override
	public String execute() throws Exception {
		System.out.println("Product Order Number: "+ productOrderNumberSearch);
		System.out.println("Tracking Number: "+ trakingNumber);
		System.out.println("Client Order ID: "+ clientOrderNumber);
		System.out.println("Client Other ID: "+ clientOther);
		
		//Create new object or Order to modify the search functionality
		OrdersDTO orderDTOObj=new OrdersDTO();
		orderDTOObj.setLsOrderId(lsOrderId);
		orderDTOObj.setUserLogin(userLogin);
		orderDTOObj.setStatus(status);
		orderDTOObj.setProductOrderNumber(productOrderNumberSearch);
		orderDTOObj.setClientOrderNumber(clientOrderNumber);
		orderDTOObj.setClientOtherId(clientOther);
		
		HttpSession session = request.getSession(true);

		if (showOrderDetailPop == null)
			showOrderDetailPop = "visibility:hidden;display:none;";
		if (showConfirmDeleteOrderPop == null)
			showConfirmDeleteOrderPop = "visibility:hidden;display:none;";
		if (showSaveSuccessPop == null)
			showSaveSuccessPop = "visibility:hidden;display:none;";
		if (poYpop == null)
			poYpop = 100L;
		if (poXpop == null)
			poXpop = 100L;
		Hashtable<String, OrdersDTO> hashOrders;
		if (selectedStatus == null)
			selectedStatus = -1;
		sizeResult = (Long) session.getAttribute("sizeResult");
		totalOrders = (Long) session.getAttribute("totalOrders");
		if (totalOrders == null)
			totalOrders = 0L;
		asc = (Integer) session.getAttribute("asc");
		if (asc == null)
			asc = 0;
		if (sizeResult == null)
			sizeResult = 0L;
		if (indexOrder == null)
			indexOrder = 0;
		userPrivileges = (UsersPrivilegesDTO) session.getAttribute("userPrivileges");
		usersPrivShippedToInvoiced = (UsersPrivilegesDTO) session.getAttribute("usersPrivShippedToInvoiced");
		usersPrivChangeShippedStatus = (UsersPrivilegesDTO) session
				.getAttribute("usersPrivChangeShippedStatus");
		hashStatus = (HashMap<Integer, String>) session
				.getAttribute("hashStatus");
		if (hashStatus == null) {
			hashStatus = new HashMap<Integer, String>();
			hashStatus.put(0, "");
			hashStatus.put(1, "open");
			hashStatus.put(2, "progress");
		}
		List<Integer> listIndexColumn = new ArrayList<Integer>();
		// fill list status
		listStatus = (ArrayList<OrdersDTO>) session.getAttribute("listStatus");
		if (listStatus == null) {
			listStatus = new ArrayList<OrdersDTO>();
			OrdersDTO orderDTOOpen = new OrdersDTO();
			orderDTOOpen.setStatus("open");
			orderDTOOpen.setId(0L);
			listStatus.add(orderDTOOpen);
			OrdersDTO orderDTOProgress = new OrdersDTO();
			orderDTOProgress.setStatus("progress");
			orderDTOProgress.setId(1L);
			listStatus.add(orderDTOProgress);
			if (usersPrivChangeShippedStatus != null) {
				OrdersDTO orderDTOShipped = new OrdersDTO();
				orderDTOShipped.setStatus("shipped");
				orderDTOShipped.setId(2L);
				listStatus.add(orderDTOShipped);
			}

		}

		try {

			/*-------------------- recovery users list -----------------------------------
							Recovery users list in session
			 -----------------------------------------------------------------------------*/
			// recovery provinces
			listProvinces = (List<ProvinceDTO>) session
					.getAttribute("listProvinces");
			if (listProvinces == null)
				listProvinces = productService.getAllProvinces();
			orderNotSavedAtFirst = (Boolean) session
					.getAttribute("listNotSavedAtFirst");
			BasicUserDTO basicUserDTO = new BasicUserDTO();
			basicUserDTO.setTypeId(USER_TYPE);
			List<User> usersListSession = (List<User>) session
					.getAttribute("usersListSession");
			if (usersListSession == null) {
				List<UserSessionDTO> listAllUsers = userService
						.getAllUsers(basicUserDTO);
				usersList = new ArrayList<User>();
				for (UserSessionDTO userDTO : listAllUsers) {
					User user = new User();
					user.setId(userDTO.getId());
					user.setLogin(userDTO.getLogin());
					usersList.add(user);
				}
				session.setAttribute("usersListSession", usersList);
			} else{
				usersList = usersListSession;
			}
			
			listOrdersDTO = (ArrayList<OrdersDTO>) session.getAttribute("listOrdersDTOReport");
			
			reportDateBetween = (Integer) session.getAttribute("reportDateBetween");
			if (reportDateBetween == null) {
				reportDateBetween = 0;
				session.setAttribute("reportDateBetween", reportDateBetween);
			}

			//Added for the new field
			switchBetweenClientLoginAndPoNumber = (Integer) session.getAttribute("switchBetweenClientLoginAndPoNumber");
			if (switchBetweenClientLoginAndPoNumber == null) {
				switchBetweenClientLoginAndPoNumber = 0;
				session.setAttribute("switchBetweenClientLoginAndPoNumber", switchBetweenClientLoginAndPoNumber);
			}
			switchBetweenLsOrderAndClientOrderId = (Integer) session.getAttribute("switchBetweenLsOrderAndClientOrderId");
			if (switchBetweenLsOrderAndClientOrderId == null) {
				switchBetweenLsOrderAndClientOrderId = 0;
				session.setAttribute("switchBetweenLsOrderAndClientOrderId", switchBetweenLsOrderAndClientOrderId);
			}
			switchBetweenStatusAndClientOther = (Integer) session.getAttribute("switchBetweenStatusAndClientOther");
			if (switchBetweenStatusAndClientOther == null) {
				switchBetweenStatusAndClientOther = 0;
				session.setAttribute("switchBetweenStatusAndClientOther", switchBetweenStatusAndClientOther);
			}

			/*------ always check if the Admin select all orders ------------
					if The Admin select all orders change checkBoxItem value 
			  ---------------------------------------------------------------*/
			if (selectAllOrdersSignal != null && selectAllOrdersSignal != 0L) {
				if (checkBoxItem != null) {
					session.setAttribute("checkBoxItem", checkBoxItem);
					session.setAttribute("allOrdersSelectedSignal", 0L);
					if (checkBoxItem)
						session.setAttribute("allOrdersSelectedSignal", 1L);
				}
			}
			checkBoxItem = (Boolean) session.getAttribute("checkBoxItem");
			if (checkBoxItem == null)
				checkBoxItem = false;
			/*------ always recovery creationDate from strCreationDate ------
						always keep the user search options
			  ---------------------------------------------------------------*/
			creationDateStart = null;
			SimpleDateFormat frm = new SimpleDateFormat("dd/MM/yyyy");
			if (((strCreationDateStart) != null)
					&& (!"".equals(strCreationDateStart))) {
				try {
					Date date = frm.parse(strCreationDateStart);
					creationDateStart = date;
					creationDateStartArg = date;
				} catch (Exception pe) {
					creationDateStart = null;
					addActionError("Please enter a date in the correct format");
				}
			}
			if (creationDateStart == null) {
				Date date = frm.parse("01/01/1900");
				creationDateStartArg = date;
			}
			creationDateEnd = null;
			if (((strCreationDateEnd) != null)
					&& (!"".equals(strCreationDateEnd))) {
				frm = new SimpleDateFormat("dd/MM/yyyy");
				try {
					Date date = frm.parse(strCreationDateEnd);
					creationDateEnd = date;
					creationDateEndArg = date;
				} catch (Exception pe) {
					creationDateEnd = null;
					addActionError("Please enter a date in the correct format");
				}
			}
			if (creationDateEnd == null) {
				creationDateEndArg = new Date();
			}

			/*------ always recovery Status from selectedStatus key ------
						always keep the status search options
			  ---------------------------------------------------------------*/
			status = getStatusSelected(selectedStatus);

			/*----------- always initialized listPages if not done ----------
				   		    and check if is there next listPages
			  ---------------------------------------------------------------*/
			nextListPages = (Integer) session.getAttribute("nextListPages");
			if (nextListPages == null)
				nextListPages = 0;
			if (indexSet == null || indexSet == -1) {
				indexSet = (Integer) session.getAttribute("indexSet");
				if (indexSet == null)
					indexSet = 0;
			}
			listIndexSet = (List<OrdersDTO>) session
					.getAttribute("listIndexSet");
			if (listIndexSet == null)
				initalizeListIndexSet(session, orderService);

			/*----------------- When Admin Click on the pageIndex ----------------------------------
										catch  page index
			 ---------------------------------------------------------------------------------------*/
			//Toggle Switch between PO Date and Shipping date
			if (dateBetweenSignal != null && dateBetweenSignal != 0L) {
				reportDateBetween = ((reportDateBetween == null || reportDateBetween == 0) ? 1: 0);
				listOrdersDTO = new ArrayList<OrdersDTO>();
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				session.setAttribute("reportDateBetween", reportDateBetween);
				return SUCCESS;
			}
		
			//Toggle Switch between Client Login and PO Number	
//			switchBetweenClientLoginAndPoNumber=(Integer)session.getAttribute("switchBetweenClientLoginAndPoNumber");
			
			if (switchBetweenClientLoginAndPoNumberSignal != null && switchBetweenClientLoginAndPoNumberSignal != 0L) {
				switchBetweenClientLoginAndPoNumber = ((switchBetweenClientLoginAndPoNumber == null 
						|| switchBetweenClientLoginAndPoNumber == 0) ? 1: 0);
				listOrdersDTO = new ArrayList<OrdersDTO>();
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				session.setAttribute("switchBetweenClientLoginAndPoNumber", switchBetweenClientLoginAndPoNumber);
				return SUCCESS;
			}
			
			//Switching between "ls_Order" and "Client Order Id"	
//			switchBetweenLsOrderAndClientOrderId = (Integer)session.getAttribute("switchBetweenLsOrderAndClientOrderId");
			
			if (switchBetweenLsOrderAndClientOrderIdSignal != null && switchBetweenLsOrderAndClientOrderIdSignal != 0L) {
				switchBetweenLsOrderAndClientOrderId = ((switchBetweenLsOrderAndClientOrderId == null 
						|| switchBetweenLsOrderAndClientOrderId == 0) ? 1: 0);
				listOrdersDTO = new ArrayList<OrdersDTO>();
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				session.setAttribute("switchBetweenLsOrderAndClientOrderId", switchBetweenLsOrderAndClientOrderId);
				return SUCCESS;
			}
			
			//Switching between "Status" and "Client Other Id"
//			switchBetweenStatusAndClientOther = (Integer)session.getAttribute("switchBetweenStatusAndClientOther");
			
			if (switchBetweenStatusAndClientOtherSignal != null && switchBetweenStatusAndClientOtherSignal != 0L) {
				switchBetweenStatusAndClientOther = ((switchBetweenStatusAndClientOther == null 
						|| switchBetweenStatusAndClientOther == 0) ? 1: 0);
				listOrdersDTO = new ArrayList<OrdersDTO>();
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				session.setAttribute("switchBetweenStatusAndClientOther", switchBetweenStatusAndClientOther);
				return SUCCESS;
			}
			
			if (switchBetweenOptionFieldsSignal != null && switchBetweenOptionFields != 0L) {
				switchBetweenOptionFields++;
				if (switchBetweenOptionFields == 4) switchBetweenOptionFields = 0;
				
			}
			

			
			
			/*----------------- When Admin Click on the pageIndex ----------------------------------
										catch  page index
			 ---------------------------------------------------------------------------------------*/
			if (pageIndexSignal != null && pageIndexSignal != 0L) {
				OrdersDTO orderDTO = (OrdersDTO) session.getAttribute("orderPageSelected");
				if (orderDTO != null)
					orderDTO.setCssStyle("");
				OrdersDTO orderPageSelected = listIndexSet.get(indexList);
				orderPageSelected
						.setCssStyle("background-color:#FFFF99;border:1px solid #CCCCCC;");
				indexSet = orderPageSelected.getIndex() - 1;
				indexSet = indexSet * PAGE_ITEMS_COUNT;
				session.setAttribute("indexSet", indexSet);
				session.setAttribute("listIndexSet", listIndexSet);
				session.setAttribute("orderPageSelected", orderPageSelected);
			}

			/*----------------- When Admin Click on the nextListPages ------------------------------
						recreate listIndexSet started with index>index+10 and indexSet>indexSet+10
			 ---------------------------------------------------------------------------------------*/
			if (nextListPagesSignal != null && nextListPagesSignal != 0L
					&& listIndexSet.size() > 0) {
				OrdersDTO orderDTOPrevious = (OrdersDTO) session
						.getAttribute("orderPageSelected");
				if (orderDTOPrevious != null)
					orderDTOPrevious.setCssStyle("");
				OrdersDTO orderDTO = listIndexSet.get(listIndexSet.size() - 1);
				if (orderDTO != null)
					nextListPages = orderDTO.getIndex() + 1;
				
				Long totalOrders = orderService.getCountOrders(creationDateStartArg,
						creationDateEndArg, reportDateBetween, userLogin, lsOrderId,
						status,productOrderNumberSearch,clientOrderNumber,clientOther);
				
				String strcount = totalOrders.toString();
				Integer sizeList = Integer.parseInt(strcount)
						/ PAGE_ITEMS_COUNT;
				if (nextListPages <= sizeList + 1) {
					listIndexSet = new ArrayList<OrdersDTO>();
					for (int i = nextListPages; i <= sizeList + 1
							&& i <= nextListPages + 10; i++) {
						OrdersDTO ord = new OrdersDTO();
						ord.setCssStyle("");
						ord.setIndex(i);
						listIndexSet.add(ord);
					}
					if (nextListPages <= sizeList + 1) {
						indexSet = nextListPages - 1;
						OrdersDTO orderPageSelected = listIndexSet.get(0);
						orderPageSelected
								.setCssStyle("background-color:#FFFF99;border:1px solid #CCCCCC;");
						indexSet = indexSet * PAGE_ITEMS_COUNT;
						session.setAttribute("indexSet", indexSet);
						session.setAttribute("nextListPages", nextListPages);
						session.setAttribute("listIndexSet", listIndexSet);
						session.setAttribute("orderPageSelected",
								orderPageSelected);
					}
				}
			}

			/*----------------- When Admin Click on the previousListPages --------------------------
					recreate listIndexSet started with index< index-10 and indexSet<indexSet-10
			 ---------------------------------------------------------------------------------------*/
			if (prevListPagesSignal != null && prevListPagesSignal != 0L
					&& listIndexSet.size() > 0) {
				OrdersDTO orderDTOPrevious = (OrdersDTO) session
						.getAttribute("orderPageSelected");
				if (orderDTOPrevious != null)
					orderDTOPrevious.setCssStyle("");
				nextListPages = (Integer) session.getAttribute("nextListPages");
				if (nextListPages != null && nextListPages >= 11) {
					prevListPages = nextListPages - 11;
					listIndexSet = new ArrayList<OrdersDTO>();
					for (int i = prevListPages; i < nextListPages; i++) {
						OrdersDTO ord = new OrdersDTO();
						ord.setCssStyle("");
						ord.setIndex(i);
						listIndexSet.add(ord);
					}
					indexSet = prevListPages - 1;
					OrdersDTO orderPageSelected = listIndexSet.get(0);
					orderPageSelected
							.setCssStyle("background-color:#FFFF99;border:1px solid #CCCCCC;");
					indexSet = indexSet * PAGE_ITEMS_COUNT;
					nextListPages = prevListPages;
					session.setAttribute("nextListPages", nextListPages);
					session.setAttribute("indexSet", indexSet);
					session.setAttribute("listIndexSet", listIndexSet);
					session.setAttribute("orderPageSelected", orderPageSelected);
				}
			}

			/*----------------- When Admin change province -----------------------------------------
								Check a list off this province
			 ---------------------------------------------------------------------------------------*/
			hashProvinces = (Hashtable<String, ProvinceDTO>) session
					.getAttribute("hashProvinces");
			if (hashProvinces == null) {
				listProvinces = productService.getAllProvinces();
				Hashtable<String, ProvinceDTO> hashProvinces = new Hashtable<String, ProvinceDTO>();
				for (ProvinceDTO prov : listProvinces) {
					hashProvinces.put(prov.getCode(), prov);
				}
				session.setAttribute("hashProvinces", hashProvinces);
			}
			if (code != null && !code.equals("") && listOrdersDTO != null) {
				ProvinceDTO provinceDTO = hashProvinces.get(code);
				if (provinceDTO != null) {
					clientProvince = provinceDTO.getCode();
				}
			}// else listCities=new ArrayList<CityDTO>();
			if (listOrdersDTO != null && indexOrder != -1) {
				orderToEdit = listOrdersDTO.get(indexOrder);
				if (orderToEdit != null) {
					orderToEdit.setClientProvince(code);
					session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				}
			}

			/*------------------------------- Refresh listOrdersDTO------------------------------------
						Refresh listOrders before generation of invoiced orders XLS file 
				 ------------------------------------------------------------------------------------------*/
			invoicedOrdersRefresh = (Long) session
					.getAttribute("invoicedOrdersRefresh");
			if (invoicedOrdersRefresh != null && invoicedOrdersRefresh != 0L) {
				listIndexColumn = (ArrayList<Integer>) session
						.getAttribute("listIndexColumn");
				if (listIndexColumn == null)
					listIndexColumn = getNewListIndexColumn();
				lsOrderId = lsOrderId.toUpperCase();
				
				//New Searching Functionality
				listOrdersDTO = orderService.searchOrdersWithOptionsAndSorting(
						creationDateStartArg, creationDateEndArg,
						reportDateBetween,orderDTOObj,listIndexColumn, PAGE_ITEMS_COUNT, indexSet);
				//Old Searching Functionality				
//				listOrdersDTO = orderService.searchOrdersWithOptionsAndSorting(
//						creationDateStartArg, creationDateEndArg,
//						reportDateBetween, userLogin, lsOrderId, status,
//						listIndexColumn, PAGE_ITEMS_COUNT, indexSet);
				
				if (findOrdersSignal != null && findOrdersSignal != 0L)
					initalizeListIndexSet(session, orderService);
				// Color in RED rows containing a GroupItems
				for (OrdersDTO orderDTO : listOrdersDTO) {
					if (orderDTO != null && orderDTO.getStatus() != null
							&& orderDTO.getStatus().equals("shipped")) {
						Long count = productService.isGroupProductID(orderDTO
								.getProductId());
						if (count != null && count >= 1) {
							orderDTO.setCssStyle("background-color: rgb(248,150,140); border-right:1px solid #CCCCCC;border-left:1px solid #CCCCCC;border-top:1px solid #CCCCCC;");
						}
					}
				}

				// keep search parameters to use in other
				// classes(PrintOrdersToPDF, ...)
				indexSet = 0;
				session.setAttribute("indexSet", indexSet);
				nextListPages = 0;
				session.setAttribute("nextListPages", nextListPages);
				session.setAttribute("selectedStatus", selectedStatus);
				session.setAttribute("creationDateStartArg",creationDateStartArg);
				session.setAttribute("creationDateEndArg", creationDateEndArg);
				session.setAttribute("reportDateBetween", reportDateBetween);
				session.setAttribute("lsOrderId", lsOrderId);
				session.setAttribute("userLogin", userLogin);
				session.setAttribute("status", status);
				session.setAttribute("listIndexColumn", listIndexColumn);
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				session.setAttribute("invoicedOrdersRefresh", 0L);
				
				session.setAttribute("productOrderNumberSearch", productOrderNumberSearch);
				session.setAttribute("clientOrderNumber", clientOrderNumber);
				session.setAttribute("clientOther", clientOther);
				return SUCCESS;
			}

			/*------------ When Admin click on the Button "Delete Order" in The OrderDtailPop --------------
								show other pop to confirm Order Delete
			  ----------------------------------------------------------------------------------------------*/
			if (deleteOrderSignal != null && deleteOrderSignal != 0L) {
				message = "Attention! if you click on \"Delete Order\" you can not restore it.";
				orderToEdit = listOrdersDTO.get(indexOrder);
				if (confirmDeleteSignal != null && confirmDeleteSignal == 0L) { // Delete
																				// Order
																				// Request
					showOrderDetailPop = "display:block;visibility:visible;";
					showConfirmDeleteOrderPop = "display:block;visibility:visible;";
				} else if (confirmDeleteSignal == 1L) { // Delete Order
														// Confirmed
					orderService.deleteOrderByLsOrderId(orderToEdit);
					// Save this operation in table operation
					OperationsDTO operationDTO = new OperationsDTO();
					User userAdmin = (User) session.getAttribute("userAdmin");
					if (userAdmin != null)
						operationDTO.setUserId(userAdmin.getId());
					operationDTO.setOperationDate(new Date());
					operationDTO.setOperationType("Delete Order");
					String dataBefore = "[PARTNER NAME:"
							+ orderToEdit.getUserLogin() + "];";
					dataBefore += " [LS_ORDER_ID:" + orderToEdit.getLsOrderId()
							+ "];";
					dataBefore += " [PRODUCT_ORDER_NUMBER:"
							+ orderToEdit.getProductOrderNumber() + "];";
					dataBefore += " [CLIENT_FIRST_NAME:"
							+ orderToEdit.getClientFirstName() + "];";
					dataBefore += " [CLIENT_LAST_NAME:"
							+ orderToEdit.getClientLastName() + "];";
					dataBefore += " [CLIENT_POSTAL_CODE:"
							+ orderToEdit.getClientPostalCode() + "];";
					dataBefore += " [LS_PRODUCT_ID:"
							+ orderToEdit.getLsProductID() + "];";
					dataBefore += " [UNIT_PRICE:" + orderToEdit.getUnitPrice()
							+ "];";
					dataBefore += " [STATUS:" + orderToEdit.getStatus() + "];";
					operationDTO.setDataBefore(dataBefore);
					operationDTO.setDataBefore(operationDTO.getDataBefore());
					operationDTO.setDataAfter("");
					operationsService.insertOperation(operationDTO);
					// Remove order from the list orders
					listOrdersDTO.remove(orderToEdit);
					session.setAttribute("listOrdersDTOReport", listOrdersDTO);
					showOrderDetailPop = "visibility:hidden;display:none;";
					showConfirmDeleteOrderPop = "visibility:hidden;display:none;";
					// initialize index orders
					int indexOrder = 0;
					int indexRow = 0;
					for (OrdersDTO orderDTO : listOrdersDTO) {
						orderDTO.setIndex(indexOrder);
						indexOrder++;
						indexRow = 0;
						for (OrdersRows orderRows : orderDTO.getRowsList()) {
							orderRows.setIndex(indexRow);
							indexRow++;
						}
					}
					session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				} else { // Cancel Order Delete
					showOrderDetailPop = "display:block;visibility:visible;";
					showConfirmDeleteOrderPop = "visibility:hidden;display:none;";
				}
				return SUCCESS;
			}

			/*------ When Admin click the "Edit link" in the Order Table for Edit NOTE -----
							show only field Edit Note
			  ------------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& showOnlyEditNote != null && showOnlyEditNote != 0L) {
				orderToEdit = listOrdersDTO.get(indexOrder);
				for (OrdersDTO order : listOrdersDTO) {
					order.setShowOnlyEditNote(0L);
					order.setCssRow("");
				}
				orderToEdit.setShowOnlyEditNote(1L);
				orderToEdit.setCssRow("background-color:#FF9966;");
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				listOrdersDTO = (ArrayList<OrdersDTO>) session
						.getAttribute("listOrdersDTOReport");
				return SUCCESS;
			}

			/*------------ When Admin click on link "Save Edit Note in the Orders Table" ----------
													save Only  notes
			  -------------------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& saveOnlyNoteSignal != null && saveOnlyNoteSignal != 0L) {
				if (indexOrder != null) {
					orderToEdit = listOrdersDTO.get(indexOrder);
					if (orderToEdit != null) {
						orderToEdit.setNotes(notes);
						orderToEdit.setShowRowShipping(0L);
						orderToEdit.setShowOnlyEditNote(0L);
						orderToEdit.setCssRow("");
						// Save Note
						Boolean sucess = orderService
								.updateShippingOrderElements(orderToEdit);
						session.setAttribute("listOrdersDTOReport",
								listOrdersDTO);
					}
				}
				return SUCCESS;
			}

			/*------------ When Admin click the "Edit link" in the Order Table -------------
								show fields to edit shipping parameters
			  ------------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& showRowShipping != null && showRowShipping != 0L) {

				orderToEdit = listOrdersDTO.get(indexOrder);
				for (OrdersDTO order : listOrdersDTO) {
					order.setShowRowShipping(0L);
					order.setCssRow("");
				}
				// only Admins who has Active = true of action name='All' can
				// change shipping settings
				// of orders shipped or invoiced
				if (usersPrivChangeShippedStatus == null
						&& orderToEdit.getStatus() != null
						&& (orderToEdit.getStatus().equals("shipped") || orderToEdit
								.getStatus().equals("invoiced"))) {
					showRowShipping = 0L;
					return SUCCESS;
				}

				if (orderToEdit != null) {
					orderToEdit.setShowRowShipping(1L);
					orderToEdit.setShowOnlyEditNote(1L);
					orderToEdit.setCssRow("background-color:#FF9966;");
					session.setAttribute("listOrdersDTOReport", listOrdersDTO);
					listOrdersDTO = (ArrayList<OrdersDTO>) session
							.getAttribute("listOrdersDTOReport");
				}
				if (orderToEdit.getStatus().equals("open")) {
					statusId = 0L;
				} else if (orderToEdit.getStatus().equals("progress")) {
					statusId = 1L;
				} else if (orderToEdit.getStatus().equals("shipped")) {
					statusId = 2L;
				} else if (orderToEdit.getStatus().equals("invoiced")) {
					statusId = 3L;
				} else if (orderToEdit.getStatus().equals("canceled")) {
					statusId = 4L;
				}
				return SUCCESS;
			}

			/*------------ When Admin click on link "Save in the Orders Table" ----------
							save all shipping parameters and notes
			 ----------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& saveShippingSignal != null && saveShippingSignal != 0L) {
				if (indexOrder != null) {
					orderToEdit = listOrdersDTO.get(indexOrder);
					if (orderToEdit != null) {
						Date shippedDateToEdit = null;
						frm = new SimpleDateFormat("dd/MM/yyyy");
						if (((strShippedDate) != null)
								&& (!"".equals(strShippedDate))) {
							strShippedDate = strShippedDate.replaceAll(" ", "");
							try {
								Date date = frm.parse(strShippedDate);
								shippedDateToEdit = date;
							} catch (Exception pe) {
								shippedDateToEdit = null;
							}
						}
						if (((strShippedDate) != null)
								&& (!"".equals(strShippedDate))
								&& strShippedDate.length() <= 8)
							shippedDateToEdit = orderToEdit.getShippedDate();
						Double shippingPrice = null;
						// Double currencyShippingPrice=null;
						if (strShippingPrice != null
								&& !strShippingPrice.equals("")) {
							strShippingPrice = strShippingPrice.replaceAll(" ",
									"");
							int index = strShippingPrice.indexOf(",");
							if (index >= 0) {
								String strUnitPrice1 = strShippingPrice
										.substring(0, index);
								String strUnitPrice2 = strShippingPrice
										.substring(index + 1,
												strShippingPrice.length());
								strShippingPrice = strUnitPrice1 + "."
										+ strUnitPrice2;
							}

							try {
								shippingPrice = Double
										.parseDouble(strShippingPrice);
								/*
								 * if(shippingPrice!=null &&
								 * orderToEdit.getCurrencyId()!=null &&
								 * orderToEdit.getCurrencyId()!=1 &&
								 * orderToEdit.getCurrencyRate()!=null) {
								 * currencyShippingPrice = shippingPrice *
								 * orderToEdit.getCurrencyRate();
								 * currencyShippingPrice = (double)
								 * Math.round(currencyShippingPrice*100)/100; }
								 */
							} catch (Exception pe) {
								shippingPrice = null;
							}
						}

						if (trakingNumber != null)
							trakingNumber = trakingNumber.replaceAll(
									"^ +| +$|( )+", "$1");
						if (shippingCompany != null)
							shippingCompany = shippingCompany.replaceAll(
									"^ +| +$|( )+", "$1");
						orderToEdit.setShippingPrice(shippingPrice);
						// orderToEdit.setCurrencyShippingPrice(currencyShippingPrice);
						// orderToEdit.getRowsList().get(0).setCurrencyShippingPrice(currencyShippingPrice);
						orderToEdit.setShippedDate(shippedDateToEdit);
						orderToEdit.setNotes(notes);
						if (newStatus != null && !newStatus.equals(""))
							orderToEdit.setStatus(newStatus);
						orderToEdit.setShippingCompany(shippingCompany);
						orderToEdit.setTrackingNumber(trakingNumber);
						orderToEdit.setShowRowShipping(0L);
						orderToEdit.setShowOnlyEditNote(0L);
						OrdersRows row = orderToEdit.getRowsList().get(0);
						row.setShippingPrice(shippingPrice);
						row.setShippingCompany(shippingCompany);
						row.setTrackingNumber(trakingNumber);
						orderToEdit.setCssRow("");

						if (newStatus != null && !newStatus.equals("")) { // if
																			// admin
																			// click
																			// on
																			// the
																			// save
																			// behind
																			// status
							orderService.updateStatusByLsOrderId(
									orderToEdit.getLsOrderId(), newStatus);
							orderToEdit.setStatus(newStatus);
							if (!newStatus.equals("shipped")
									&& !newStatus.equals("invoiced")
									&& !newStatus.equals("canceled")) {
								orderToEdit.setShippingPrice(null);
								orderToEdit.setTrackingNumber(null);
								orderToEdit.setShippedDate(null);
							}

						} else {// if admin click on the save other than Status
							if (orderToEdit.getShippedDate() != null
									&& orderToEdit.getTrackingNumber() != null
									&& !orderToEdit.getTrackingNumber().equals(
											"")
									&& orderToEdit.getShippingCompany() != null
									&& !orderToEdit.getShippingCompany()
											.equals("")
									&& orderToEdit.getShippingPrice() != null
									&& orderToEdit.getStatus() != null) {
								if (orderToEdit.getStatus().equals("open")
										|| orderToEdit.getStatus().equals(
												"progress")) {
									orderService.updateStatusByLsOrderId(
											orderToEdit.getLsOrderId(),
											"shipped");
									orderToEdit.setStatus("shipped");
								}
							} else {
								if (usersPrivChangeShippedStatus != null
										&& !orderToEdit.getStatus().equals(
												"open")
										&& !orderToEdit.getStatus().equals(
												"progress")) {
									orderService.updateStatusByLsOrderId(
											orderToEdit.getLsOrderId(),
											"progress");
									orderToEdit.setStatus("progress");
								}
							}
						}
						// if admin click on the save other then status(save
						// notes, save shipping company ...)
						Boolean sucess = orderService
								.updateShippingOrderElements(orderToEdit);
						session.setAttribute("listOrdersDTOReport",
								listOrdersDTO);
					}
				}
				return SUCCESS;
			}

			/*------------ When Admin click on icon findOrders.png ----------
								check user and complete infos client
			 ----------------------------------------------------------------*/
			if (findOrdersSignal != null
					&& findOrdersSignal != 0L
					|| (pageIndexSignal != null && pageIndexSignal != 0L)
					|| (nextListPagesSignal != null && nextListPagesSignal != 0L)
					|| (prevListPagesSignal != null && prevListPagesSignal != 0L)) {
				// session.setAttribute("allOrdersSelectedSignal",0L);
				// if admin click on search icon initialize checkBoxItem to
				// false
				if (findOrdersSignal != null && findOrdersSignal != 0L) {
					session.setAttribute("allOrdersSelectedSignal", 0L);
					checkBoxItem = false;
					session.setAttribute("checkBoxItem", checkBoxItem);
					indexSet = 0;
					session.setAttribute("indexSet", indexSet);
					nextListPages = 0;
					session.setAttribute("nextListPages", nextListPages);
					session.setAttribute("selectedStatus", selectedStatus);

				}
				// if admin navigate on pages keep the previous sorting
				if (((pageIndexSignal != null && pageIndexSignal != 0L)
						|| (nextListPagesSignal != null && nextListPagesSignal != 0L) || (prevListPagesSignal != null && prevListPagesSignal != 0L))) {
					listIndexColumn = (ArrayList<Integer>) session
							.getAttribute("listIndexColumn");
					if (listIndexColumn == null)
						listIndexColumn = getNewListIndexColumn();
				} else { // prepare new sorting
					listIndexColumn = getNewListIndexColumn();
				}

				lsOrderId = lsOrderId.toUpperCase();
				// if(findOrdersSignal!=null &&
				// findOrdersSignal!=0L)initalizeListIndexSet(session,orderService
				// );
				
				//Old Working Methods
//				listOrdersDTO = orderService.searchOrdersWithOptionsAndSorting(
//						creationDateStartArg, creationDateEndArg,
//						reportDateBetween, userLogin, lsOrderId, status,
//						listIndexColumn, PAGE_ITEMS_COUNT, indexSet);
				
				//New Functionality with same mapping
				listOrdersDTO = orderService.searchOrdersWithOptionsAndSortingNew(
								creationDateStartArg, creationDateEndArg,
								reportDateBetween, userLogin, lsOrderId,
								status, listIndexColumn, PAGE_ITEMS_COUNT,
								indexSet, productOrderNumberSearch,clientOrderNumber,
								clientOther);

//				//New Searching Functionality
//				listOrdersDTO = orderService.searchOrdersWithOptionsAndSorting(
//						creationDateStartArg, creationDateEndArg,
//						reportDateBetween, orderDTOObj, listIndexColumn,
//						PAGE_ITEMS_COUNT, indexSet);
				
				
				// Color in RED rows containing a GroupItems
				for (OrdersDTO orderDTO : listOrdersDTO) {
					if (orderDTO != null && orderDTO.getStatus() != null
							&& orderDTO.getStatus().equals("shipped")) {
						Long count = productService.isGroupProductID(orderDTO
								.getProductId());
						if (count != null && count >= 1) {
							orderDTO.setCssStyle("background-color: rgb(248,150,140); border-right:1px solid #CCCCCC;border-left:1px solid #CCCCCC;border-top:1px solid #CCCCCC;");
						}
					}
				}

				// keep search parameters to use in other
				// classes(PrintOrdersToPDF, ...)
				session.setAttribute("creationDateStartArg",
						creationDateStartArg);
				session.setAttribute("creationDateEndArg", creationDateEndArg);
				session.setAttribute("reportDateBetween", reportDateBetween);
				session.setAttribute("lsOrderId", lsOrderId);
				session.setAttribute("userLogin", userLogin);
				session.setAttribute("status", status);
				//For newly added field
				session.setAttribute("productOrderNumberSearch", productOrderNumberSearch);

				session.setAttribute("listIndexColumn", listIndexColumn);
				session.setAttribute("sizeResult", sizeResult);
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				if (findOrdersSignal != null && findOrdersSignal != 0L)
					initalizeListIndexSet(session, orderService);
				return SUCCESS;
			}

			/*------------ When Admin click on the icon sorting of column ----------
							seach result with option of sorting list
			 -----------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& sortingOrdersSignal != null && sortingOrdersSignal != 0L) {
				listIndexColumn = (List<Integer>) session
						.getAttribute("listIndexColumn");
				asc = (asc == 1 ? -1 : 1);
				int nextElement = listIndexColumn.get(0);
				fieldForSorting = asc * fieldForSorting;
				listIndexColumn.set(0, fieldForSorting);
				for (int i = 1; i < listIndexColumn.size(); i++) {
					int element = listIndexColumn.get(i);
					listIndexColumn.set(i, nextElement);
					nextElement = element;
				}
				
				//New Functionality with same mapping
				listOrdersDTO = orderService.searchOrdersWithOptionsAndSortingNew(
								creationDateStartArg, creationDateEndArg,
								reportDateBetween, userLogin, lsOrderId,
								status, listIndexColumn, PAGE_ITEMS_COUNT,
								indexSet, productOrderNumberSearch,clientOrderNumber,
								clientOther);
				
//				listOrdersDTO = orderService.searchOrdersWithOptionsAndSorting(
//						creationDateStartArg, creationDateEndArg,
//						reportDateBetween, userLogin, lsOrderId, status,
//						listIndexColumn, PAGE_ITEMS_COUNT, indexSet);
				
//				// New Searching Functionality
//				listOrdersDTO = orderService.searchOrdersWithOptionsAndSorting(
//						creationDateStartArg, creationDateEndArg,
//						reportDateBetween, orderDTOObj, listIndexColumn,
//						PAGE_ITEMS_COUNT, indexSet);
				
				int balance = 0;
				int OrderIndex = 0;
				for (OrdersDTO orDTO : listOrdersDTO) {
					balance = (balance == 1 ? 0 : 1);
					if (balance == 1) {
						orDTO.setCssStyle("background-color: rgb(245,249,252);border-right: 1px solid #CCCCCC;border-left:1px solid #CCCCCC;border-top:  1px solid #CCCCCC;");
					} else {
						orDTO.setCssStyle("background-color: color:white;border-right:1px solid #CCCCCC;border-left:1px solid #CCCCCC;border-top:1px solid #CCCCCC;");
					}
					orDTO.setIndex(OrderIndex);
					OrderIndex++;
				}
				session.setAttribute("listIndexColumn", listIndexColumn);
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				session.setAttribute("asc", asc);
				return SUCCESS;
			}

			/*------ when Admin click on the lsOrder link in table -----------
					show popup detail and allow admin to update Order
			  ---------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& editOrderSignal != null && editOrderSignal != 0L) {
				orderToEdit = listOrdersDTO.get(indexOrder);
				if (orderToEdit == null)
					orderToEdit = new OrdersDTO();
				if (orderToEdit.getProductOrderDate() == null)
					strProductOrderDate = "";
				showOrderDetailPop = "display:block;visibility:visible;";
				return SUCCESS;
			}

			/*--- when Admin click on the cancel Button of orderDetailPop ---
					we mast just hide popup OrderDetail
			  ---------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& cancelSignal != null && cancelSignal != 0L) {
				showOrderDetailPop = "visibility:hidden;display:none;";
				return SUCCESS;
			}

			/*-------------------- When Admin left lsProduct TextField -------------
								check userPrice in DB, and write it in web view
			 -----------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& checkProductPriceSignal != null
					&& checkProductPriceSignal != 0L) {
				OrdersDTO orderDTOToUpdate = listOrdersDTO.get(indexOrder);
				orderDTOToUpdate = fillDataOrderDTO(orderDTOToUpdate);
				OrdersRows orderRowToUpadate = orderDTOToUpdate.getRowsList()
						.get(indexRow);
				UserProductPriceDTO userProductPrice = productService
						.getUsrPPriceByLsproductId(userId, lsProductID);
				orderRowToUpadate.setCss("");
				orderRowToUpadate.setCssPrice("");
				if (userProductPrice == null) {
					orderRowToUpadate.setCss("background-color:red;");
					orderRowToUpadate.setProductDescription("");
					orderRowToUpadate.setStock(null);
					orderRowToUpadate.setProductId(null);
					orderRowToUpadate.setLsProductID(lsProductID);
					orderRowToUpadate.setLsPrice(null);
				} else {
					Double usrPrice = orderRowToUpadate.getUnitPrice();
					if (usrPrice == null)
						usrPrice = 0D;
					if (usrPrice < userProductPrice.getPriceNum()) {
						orderRowToUpadate.setCssPrice("background-color:red;");
					}
					orderRowToUpadate.setProductDescription(userProductPrice
							.getProductTitle());
					orderRowToUpadate.setStock(userProductPrice.getStock());
					orderRowToUpadate.setProductId(userProductPrice
							.getProductId());
					orderRowToUpadate.setLsProductID(userProductPrice
							.getLsProductId());
					orderRowToUpadate
							.setLsPrice(userProductPrice.getPriceNum());
				}
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				orderToEdit = orderDTOToUpdate;
				listOrdersDTO = (List<OrdersDTO>) session
						.getAttribute("listOrdersDTOReport");
				showOrderDetailPop = "display:block;visibility:visible;";
				return SUCCESS;
			}

			/*----------------- When Admin check on saveTemporaryRow Icon --------------------------
					we must first obtained the object that contains the list of rows,
					after we accede to the row by index recovered by web view and change it
			 ---------------------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& saveTemporaryRowSignal != null
					&& saveTemporaryRowSignal != 0L) {
				OrdersDTO orderDTOToUpdate = listOrdersDTO.get(indexOrder);
				orderDTOToUpdate = fillDataOrderDTO(orderDTOToUpdate);
				OrdersRows orderRowToSaveMemory = orderDTOToUpdate
						.getRowsList().get(indexRow);
				orderRowToSaveMemory.setIcon("images/orders/itemValidated.png");
				if (orderRowToSaveMemory != null) {
					orderRowToSaveMemory.setQuantity(quantity);
					orderRowToSaveMemory.setLsProductID(lsProductID);
					orderRowToSaveMemory
							.setProductDescription(productDescription);
					orderRowToSaveMemory.setUnitPrice(unitPrice);
					orderRowToSaveMemory
							.setCssPrice("background-color:#FF6666;");
					orderRowToSaveMemory
							.setCssQuantity("background-color:#FF6666;");
					if (quantity != null && quantity > 0D)
						orderRowToSaveMemory.setCssQuantity("");
					if (unitPrice != null
							&& orderRowToSaveMemory.getLsPrice() != null
							&& unitPrice >= orderRowToSaveMemory.getLsPrice())
						orderRowToSaveMemory.setCssPrice("");
					orderRowToSaveMemory.setShippingFee(shippingFee);
					orderRowToSaveMemory.setShippingPrice(shippingFee);
					orderRowToSaveMemory.setShippingCompany(shippingCompany);
					orderRowToSaveMemory.setTrackingNumber(trakingNumber);
					if (orderRowToSaveMemory.getCurrencyId() != null
							&& orderRowToSaveMemory.getCurrencyId() != 1
							&& orderRowToSaveMemory.getCurrencyRate() != null) {
						if (unitPrice != null) {
							orderRowToSaveMemory
									.setCurrencyUnitPrice(unitPrice);
							unitPrice = unitPrice
									/ orderRowToSaveMemory.getCurrencyRate();
							unitPrice = (double) Math.round(unitPrice * 100) / 100;
							orderRowToSaveMemory.setUnitPrice(unitPrice);
						}
						/*
						 * if(shippingFee!=null) {
						 * orderRowToSaveMemory.setCurrencyShippingPrice
						 * (shippingFee); shippingFee =
						 * shippingFee/orderRowToSaveMemory.getCurrencyRate();
						 * shippingFee = (double)
						 * Math.round(shippingFee*100)/100;
						 * orderRowToSaveMemory.setShippingPrice(shippingFee); }
						 */
					}
					int indexOrder = 0;
					int indexRow = 0;
					for (OrdersDTO orderDTO : listOrdersDTO) {
						orderDTO.setIndex(indexOrder);
						indexOrder++;
						indexRow = 0;
						for (OrdersRows orderRows : orderDTO.getRowsList()) {
							orderRows.setIndex(indexRow);
							indexRow++;
						}
					}
					session.setAttribute("listOrdersDTOReport", listOrdersDTO);
					listOrdersDTO = (List<OrdersDTO>) session
							.getAttribute("listOrdersDTOReport");
				}
				orderToEdit = listOrdersDTO.get(indexOrder);
				// Change totalPrice also
				if (orderToEdit.getRowsList().get(0) != null
						&& orderToEdit.getRowsList().get(0).getQuantity() != null
						&& orderToEdit.getRowsList().get(0)
								.getQuantityToSplit() != null
						&& orderToEdit.getRowsList().get(0).getUnitPrice() != null) {
					Double priceTotal = orderToEdit.getRowsList().get(0)
							.getUnitPrice()
							* orderToEdit.getRowsList().get(0)
									.getQuantityToSplit();
					priceTotal = (double) Math.round(priceTotal * 100) / 100;
					orderToEdit.setTotalPrice(priceTotal);
				}
				showOrderDetailPop = "display:block;visibility:visible;";
				return SUCCESS;
			}

			/*------- When Admin click on addSimilarRow Icon on the OrderDetailPop --------
								Add one Row Similar at the previews
			  -----------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& addSimilarRowSignal != null && addSimilarRowSignal != 0L) {
				OrdersDTO orderDTOToUpdate = listOrdersDTO.get(indexOrder);
				// generate lsOrderId to new order
				orderDTOToUpdate = fillDataOrderDTO(orderDTOToUpdate);
				OrdersRows orderRowToClone = orderDTOToUpdate.getRowsList()
						.get(indexRow);
				if (orderRowToClone != null) {
					if (!orderRowToClone.getIcon().equals(
							"images/orders/itemValidated.png")) {
						orderRowToClone.setQuantity(quantity);
						orderRowToClone.setLsProductID(lsProductID);
						orderRowToClone.setStock(stock);
						orderRowToClone
								.setProductDescription(productDescription);
						orderRowToClone.setUnitPrice(unitPrice);
						orderRowToClone.setShippingFee(shippingFee);
						orderRowToClone.setShippingCompany(shippingCompany);
						orderRowToClone.setTrackingNumber(trakingNumber);
					}
					orderRowToClone.setIcon("images/orders/itemValidated.png");
					OrdersRows orderRowToAdd = DTOFactory
							.getOrderRowClone(orderRowToClone);
					orderRowToAdd.setId(-1L);
					// Add currencyId
					if (orderRowToClone.getCurrencyId() != null)
						orderRowToAdd.setCurrencyId(orderRowToClone
								.getCurrencyId());

					orderDTOToUpdate.getRowsList().add(indexRow + 1,
							orderRowToAdd);
					int indexOrder = 0;
					int indexRow = 0;
					for (OrdersDTO orderDTO : listOrdersDTO) {
						orderDTO.setIndex(indexOrder);
						indexOrder++;
						indexRow = 0;
						for (OrdersRows orderRows : orderDTO.getRowsList()) {
							orderRows.setIndex(indexRow);
							indexRow++;
						}
					}
					session.setAttribute("listOrdersDTOReport", listOrdersDTO);
					listOrdersDTO = (List<OrdersDTO>) session
							.getAttribute("listOrdersDTOReport");
				}
				orderToEdit = listOrdersDTO.get(indexOrder);
				showOrderDetailPop = "display:block;visibility:visible;";
				return SUCCESS;
			}

			/*-------- When Admin click on Delete Row Icon of orderDetail Popup-----------
									Delete this row using index
			 -----------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& deleteRowSignal != null && deleteRowSignal != 0L) {
				OrdersDTO orderDTO = listOrdersDTO.get(indexOrder);
				orderDTO = fillDataOrderDTO(orderDTO);
				int nb = orderService.nbOrderRowsNotDeleted(orderDTO
						.getRowsList());
				if (orderDTO != null && orderDTO.getRowsList().size() > 1) {
					for (int i = 0; i < orderDTO.getRowsList().size(); i++) {
						if (i == indexRow && nb > 1) {
							orderDTO.getRowsList().get(i).setToDelete(1);
							break;
						}
					}
				}
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				orderToEdit = listOrdersDTO.get(indexOrder);
				showOrderDetailPop = "display:block;visibility:visible;";
				return SUCCESS;
			}

			/*------ when Admin click on the button save of orderDetail ------------------
					 save order and hide pup  
			  ----------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& saveOrdersSignal != null && saveOrdersSignal != 0L) {
				session.setAttribute("orderNotSavedAtFirst", null);
				orderToEdit = listOrdersDTO.get(indexOrder);
				orderToEdit = fillDataOrderDTO(orderToEdit);

				// add special handling shipping
				User user = null;
				if (orderToEdit.getUserLogin() != null)
					user = userService.getUserByLogin(orderToEdit
							.getUserLogin());
				if (user != null) {
					Double totalPrice = null;
					orderToEdit.setSpecialHandlingName(user
							.getSpecialHandlingName());
					orderToEdit.setSpecialHandlingFee(user
							.getSpecialHandlingFee());
					if (orderToEdit.getRowsList().get(0).getQuantity() != null
							&& orderToEdit.getRowsList().get(0).getUnitPrice() != null) {
						totalPrice = orderToEdit.getRowsList().get(0)
								.getQuantity()
								* orderToEdit.getRowsList().get(0)
										.getUnitPrice();
						totalPrice = (double) Math.round(totalPrice * 100) / 100;
					}

					orderToEdit.setTotalPrice(totalPrice);
				}

				orderService.updateOrderByLsOrderId(orderToEdit);
				for (OrdersRows row : orderToEdit.getRowsList()) {
					if (row.getId() == -1)
						row.setId(0L);
				}
				OrdersRows row = orderToEdit.getRowsList().get(0);
				if (row != null) {
					orderToEdit.getShippedDate();
					orderToEdit.setLsPrice(row.getLsPrice());
					orderToEdit.setLsProductID(row.getLsProductID());
					orderToEdit.setProductDescription(row
							.getProductDescription());
					orderToEdit.setQuantity(row.getQuantity());
				}
				orderToEdit = DTOFactory.getOrderDTOConsideredMissingInfo(
						orderToEdit, hashProvinces);
				listIndexColumn = (List<Integer>) session
						.getAttribute("listIndexColumn");
				
//				listOrdersDTO = orderService.searchOrdersWithOptionsAndSorting(
//						creationDateStartArg, creationDateEndArg,
//						reportDateBetween, userLogin, lsOrderId, status,
//						listIndexColumn, PAGE_ITEMS_COUNT, indexSet);
				

				//New Functionality with same mapping
				listOrdersDTO = orderService.searchOrdersWithOptionsAndSortingNew(
								creationDateStartArg, creationDateEndArg,
								reportDateBetween, userLogin, lsOrderId,
								status, listIndexColumn, PAGE_ITEMS_COUNT,
								indexSet, productOrderNumberSearch,clientOrderNumber,
								clientOther);				
				
				// New Searching Functionality
//				listOrdersDTO = orderService.searchOrdersWithOptionsAndSorting(
//						creationDateStartArg, creationDateEndArg,
//						reportDateBetween, orderDTOObj, listIndexColumn,
//						PAGE_ITEMS_COUNT, indexSet);
				
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				message = "Saving has completed successfuly";
				showSaveSuccessPop = "display:block;visibility:visible;";
				showOrderDetailPop = "display:block;visibility:visible;";
				return SUCCESS;
			}

			/*------ When user change Quantity to split in orderDetailPop -----------
					 prepare order to split from two other orders witch
				 	 one must have a lsOrder with underscore 
			 ------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& quantityToChangeSignal != null
					&& quantityToChangeSignal != 0L) {
				OrdersDTO orderToChangeQt = listOrdersDTO.get(indexOrder);
				OrdersRows orderRow = orderToChangeQt.getRowsList().get(
						indexRow);
				orderToChangeQt = fillDataOrderDTO(orderToChangeQt);
				if (quantityToChange < orderRow.getQuantity())
					orderRow.setQuantityToSplit(quantityToChange);
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				listOrdersDTO = (List<OrdersDTO>) session
						.getAttribute("listOrdersDTOReport");
				orderToEdit = listOrdersDTO.get(indexOrder);
				showOrderDetailPop = "display:block;visibility:visible;";
				return SUCCESS;
			}

			/*-------------------- Duplicate Order ----------------------------------------
							Create order in just in memory
			 -----------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& duplicateOrderSignal != null
					&& duplicateOrderSignal != 0L) {
				OrdersDTO orderToClone = listOrdersDTO.get(indexOrder);
				orderToClone = fillDataOrderDTO(orderToClone);
				hashOrders = new Hashtable<String, OrdersDTO>();
				for (OrdersDTO ord : listOrdersDTO) {
					hashOrders.put(ord.getLsOrderId(), ord);
				}
				OrdersDTO orderClone = DTOFactory
						.getOrderDTOSplitted(orderToClone);
				if (orderClone != null) {
					orderClone.setDuplicate(true);
					String lsOrder = orderClone.getLsOrderId();
					String strlsOrder = orderService.generateLsOrderId(lsOrder,
							hashOrders);
					orderClone.setLsOrderId(strlsOrder);// rgb(116,180,209)
					orderClone
							.setCssStyle("background-color:#FFFF99;border-right: 1px solid #CCCCCC;border-left:1px solid #CCCCCC;border-top:  1px solid #CCCCCC;");
					orderToEdit = orderClone;
					orderToEdit.setBackgroundColor("background-color:#FFFF99;");
					listOrdersDTO.add(indexOrder + 1, orderClone);
					indexOrder = 0;
					for (OrdersDTO ord : listOrdersDTO) {
						ord.setIndex(indexOrder);
						indexOrder++;
					}
					orderService.updateOrderByLsOrderId(orderToClone);
					orderService.insertOrderWithRows(orderClone);
					orderClone.setDuplicate(false);
					for (OrdersRows row : orderClone.getRowsList()) {
						if (row.getId() < 0L)
							row.setId(0L);
					}
					if (listOrdersDTO.size() > 0) {
						session.setAttribute("listOrdersDTOReport",
								listOrdersDTO);
					}
				} else
					orderToEdit = orderToClone;
				showOrderDetailPop = "display:block;visibility:visible;";
				return SUCCESS;
			}

			/*-------------------- When user check print item -----------------------------
					Add or remove this element from the orders to print
			 -----------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& okSaveSuccessPopSignal != null
					&& okSaveSuccessPopSignal != 0L) {
				showSaveSuccessPop = "visibility:hidden;display:none;";
				showOrderDetailPop = "visibility:hidden;display:none;";
				return SUCCESS;
			}
		} catch (Exception e) {
			e.printStackTrace();
			return "input";
		}
		return SUCCESS;
	}

	/*
	 * ==========================================================================
	 * =============== fill all fields of order without rows
	 * ====================
	 * =====================================================================
	 */
	public OrdersDTO fillDataOrderDTO(OrdersDTO orderDTO) {
		SimpleDateFormat frm = new SimpleDateFormat("dd/MM/yyyy");
		orderDTO.setClientLastName(clientLastName);
		orderDTO.setClientFirstName(clientFirstName);
		orderDTO.setClientOtherNames(clientOtherNames);
		orderDTO.setClientStreet(clientStreet);
		orderDTO.setClientOtherStreet(clientOtherStreet);
		orderDTO.setClientCity(clientCity);
		orderDTO.setClientProvince(code);
		orderDTO.setClientPostalCode(clientPostalCode);
		orderDTO.setClientPhone(clientPhone);
		orderDTO.setClientEmail(clientEmail);
		orderDTO.setProductOrderNumber(productOrderNumberSearch);
		orderDTO.setCompanyHeader(companyHeader);
		if (((strProductOrderDate) != null)
				&& (!"".equals(strProductOrderDate))) {
			frm = new SimpleDateFormat("dd/MM/yyyy");
			try {
				Date date = frm.parse(strProductOrderDate);
				orderDTO.setProductOrderDate(date);
			} catch (Exception pe) {
				addActionError("Please enter a date in the correct format");
			}
		}

		if (((strCreationOrderDate) != null)
				&& (!"".equals(strCreationOrderDate))) {
			frm = new SimpleDateFormat("dd/MM/yyyy");
			try {
				Date date = frm.parse(strCreationOrderDate);
				orderDTO.setCreationDate(date);
			} catch (Exception pe) {
				addActionError("Please enter a date in the correct format");
			}
		}

		if (((strRequiredDate) != null) && (!"".equals(strRequiredDate))) {
			frm = new SimpleDateFormat("dd/MM/yyyy");
			try {
				Date date = frm.parse(strRequiredDate);
				orderDTO.setRequiredDate(date);
			} catch (Exception pe) {
				addActionError("Please enter a date in the correct format");
			}
		}
		return orderDTO;
	}

	/*
	 * ==========================================================================
	 * =============== initialize ListIndexSet
	 * ==================================
	 * =======================================================
	 */
	public void initalizeListIndexSet(HttpSession session,
			OrdersService orderService) throws ServiceException {
		listIndexSet = new ArrayList<OrdersDTO>();
		totalOrders = orderService.getCountOrders(creationDateStartArg,
				creationDateEndArg, reportDateBetween, userLogin, lsOrderId,
				status,productOrderNumberSearch,clientOrderNumber,clientOther);
		
		String strcount = totalOrders.toString();
		Integer sizeList = Integer.parseInt(strcount) / PAGE_ITEMS_COUNT;
		nextListPages = 1;
		session.setAttribute("nextListPages", nextListPages);
		for (int i = 1; i <= sizeList + 1 && i <= 11; i++) {
			OrdersDTO ord = new OrdersDTO();
			ord.setCssStyle("");
			ord.setIndex(i);
			listIndexSet.add(ord);
		}
		indexSet = 0;
		session.setAttribute("indexSet", indexSet);
		session.setAttribute("totalOrders", totalOrders);
		session.setAttribute("listIndexSet", listIndexSet);
		session.setAttribute("productOrderNumberSearch", productOrderNumberSearch);

	}

	/*
	 * ==========================================================================
	 * =============== initialize listIndexColumn
	 * ================================
	 * =========================================================
	 */
	List<Integer> getNewListIndexColumn() {
		List<Integer> reult = new ArrayList<Integer>();
		for (int i = 0; i <= 34; i++) {
			if (i != 2 && i <= 13) {
				reult.add(i);
				if (i != 0)
					reult.add(-i);
			}
			if (i == 30 || i == 31 || i == 34) {
				reult.add(i);
				reult.add(-i);
			}
		}
		return reult;
	}

	/*
	 * ==========================================================================
	 * =============== getStatus Selected by Admin for searching
	 * ================
	 * =========================================================================
	 */
	public String getStatusSelected(Integer StatusIndex) {
		String result = "";
		switch (StatusIndex) {
		case 0:
			result = "open";
			break;
		case 1:
			result = "progress";
			break;
		case 2:
			result = "shipped";
			break;
		case 3:
			result = "invoiced";
			break;
		case 4:
			result = "canceled";
			break;
		default:
			result = "";
		}
		return result;
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 2 2015-04-15 11:40:05.568
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:233)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:255)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:190)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:89)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:728)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:788)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1244)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:102)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2015-04-15 11:40:05.568
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2015-04-15 11:40:05.568
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 0 2015-04-15 11:40:05.568
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:233)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:255)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:190)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:89)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:728)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:788)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1244)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:102)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2015-04-15 11:40:05.568
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.core 4 4 2015-04-15 11:40:05.568
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.loyauty.service.product;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

import jxl.Cell;
import jxl.Sheet;
import jxl.Workbook;
import jxl.format.Alignment;
import jxl.format.Border;
import jxl.format.BorderLineStyle;
import jxl.format.Colour;
import jxl.format.VerticalAlignment;
import jxl.write.Label;
import jxl.write.WritableCell;
import jxl.write.WritableCellFormat;
import jxl.write.WritableFont;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;

import lombok.Getter;
import lombok.Setter;

import org.apache.log4j.Logger;

import com.loyauty.dao.core.DaoCommand;
import com.loyauty.dao.core.DaoManager;
import com.loyauty.dao.core.DaoManagerFactory;
import com.loyauty.enums.Language;
import com.loyauty.enums.PriceType;
import com.loyauty.enums.ProductStatus;
import com.loyauty.enums.Type;
import com.loyauty.exception.DaoException;
import com.loyauty.exception.ServiceException;
import com.loyauty.model.AlterProductXML;
import com.loyauty.model.AlterUserProductXML;
import com.loyauty.model.Box;
import com.loyauty.model.Brand;
import com.loyauty.model.Category;
import com.loyauty.model.City;
import com.loyauty.model.Currency;
import com.loyauty.model.Image;
import com.loyauty.model.LoyaltyEnum;
import com.loyauty.model.Orders;
import com.loyauty.model.Product;
import com.loyauty.model.Province;
import com.loyauty.model.Query;
import com.loyauty.model.ProductLink;
import com.loyauty.model.ProductModelNumber;
import com.loyauty.model.Select;
import com.loyauty.model.ShippingCity;
import com.loyauty.model.ShippingProvince;
import com.loyauty.model.ShippingTotal;
import com.loyauty.model.Specification;
import com.loyauty.model.Translation;
import com.loyauty.model.TranslationEntry;
import com.loyauty.model.User;
import com.loyauty.model.UserBrandDiscount;
import com.loyauty.model.UserCategoryDiscount;
import com.loyauty.model.UserProductPrice;
import com.loyauty.model.UserProvincePopulation;
import com.loyauty.service.ServiceImpl;
import com.loyauty.service.core.DTOFactory;
import com.loyauty.service.core.dto.AlterProductXMLDTO;
import com.loyauty.service.core.dto.AlterUserProductXMLDTO;
import com.loyauty.service.core.dto.BoxDTO;
import com.loyauty.service.core.dto.CityDTO;
import com.loyauty.service.core.dto.CommonDTO;
import com.loyauty.service.core.dto.CommonUserDiscountDTO;
import com.loyauty.service.core.dto.CurrencyDTO;
import com.loyauty.service.core.dto.ImageDTO;
import com.loyauty.service.core.dto.OrdersDTO;
import com.loyauty.service.core.dto.ProductDTO;
import com.loyauty.service.core.dto.ProvinceDTO;
import com.loyauty.service.core.dto.QueryDTO;
import com.loyauty.service.core.dto.ProductModelDTO;
import com.loyauty.service.core.dto.SearchRequestDTO;
import com.loyauty.service.core.dto.UserSessionDTO;
import com.loyauty.service.core.dto.SearchRequestDTO.SearchType;
import com.loyauty.service.core.dto.ShippingCityDTO;
import com.loyauty.service.core.dto.ShippingProvinceDTO;
import com.loyauty.service.core.dto.ShippingTotalDTO;
import com.loyauty.service.core.dto.SpecificationDTO;
import com.loyauty.service.core.dto.UserDTO;
import com.loyauty.service.core.dto.UserProductDTO;
import com.loyauty.service.core.dto.UserProductPriceDTO;
import com.loyauty.service.core.dto.UserProvincePopulationDTO;
import com.loyauty.service.image.ImageService;
import com.loyauty.service.image.ImageServiceImpl;
import com.loyauty.util.CommonUtils;

public class ProductServiceImpl extends ServiceImpl implements ProductService {
	
	private static final Logger log = Logger.getLogger(ProductServiceImpl.class);
	
	@Setter @Getter

	protected DaoManager daoManager;
	
	public ProductServiceImpl() {
		setDaoManager(DaoManagerFactory.getDaoManager());
	}
	 
	@SuppressWarnings("unchecked")
	@Override
	public List<SpecificationDTO> getMainSpecificationByCategory(final long categoryId)
			throws ServiceException {
		List<Specification> list = null;
		try {
			list = (List<Specification>) daoManager.executeAndHandle(new DaoCommand() {
				@Override
				public Object execute(DaoManager daoManager) throws DaoException {
					return daoManager.getSpecificationDao().getMainSpecificationByCategory(categoryId);
				}
			});
		} catch (DaoException e) {
			throw (new ServiceException(e));
		}
		return DTOFactory.getSpecificationListDTO(list);
	}
	
 	@Override
	public Long createProduct(final ProductDTO productDTO) throws ServiceException {
		Product productResult = new Product();
		
		try {
			daoManager.setCommitTransaction(true);
			productResult = (Product) daoManager.executeAndHandle(new DaoCommand() {
				/* (non-Javadoc)
				 * @see com.loyauty.dao.core.DaoCommand#execute(com.loyauty.dao.core.DaoManager)
				 */
				@Override
				public Object execute(com.loyauty.dao.core.DaoManager daoManager)
				throws DaoException {
					
					Product product = new Product();
					
					//Name
					Translation translationName = new Translation();
					daoManager.getTranslationDao().insertTranslation(translationName);	
					//Eng Name
					TranslationEntry entryNameEng = new TranslationEntry(translationName.getId(), productDTO.getNameEng().getName() );
					entryNameEng.setLanguage(Language.ENGLISH);
					daoManager.getTranslationDao().insertEntry(entryNameEng);
					//Fr Name
					TranslationEntry entryNameFr = new TranslationEntry(translationName.getId(), productDTO.getNameFr().getName());
					entryNameFr.setLanguage(Language.FRENCH);
					daoManager.getTranslationDao().insertEntry(entryNameFr);
					
					//Description
					Translation translationDescription = new Translation();
					daoManager.getTranslationDao().insertTranslation(translationDescription);
					//Eng Description
					TranslationEntry entryDescriptionEng = new TranslationEntry(translationDescription.getId(), productDTO.getDescriptionEng().getName());
					entryDescriptionEng.setLanguage(Language.ENGLISH);
					daoManager.getTranslationDao().insertEntry(entryDescriptionEng);
					//Fr Description
					TranslationEntry entryDescriptionFr = new TranslationEntry(translationDescription.getId(), productDTO.getDescriptionFr().getName());
					entryDescriptionFr.setLanguage(Language.FRENCH);
					daoManager.getTranslationDao().insertEntry(entryDescriptionFr);
					
					//Specification
					Translation translationSpecification = new Translation();			
					daoManager.getTranslationDao().insertTranslation(translationSpecification);	
					//Eng Name
					TranslationEntry entrySpecificationEng = new TranslationEntry(translationSpecification.getId(), productDTO.getSpecificationEng().getName() );
					entrySpecificationEng.setLanguage(Language.ENGLISH);
					daoManager.getTranslationDao().insertEntry(entrySpecificationEng);
					//Fr Name
					TranslationEntry entrySpecificationFr = new TranslationEntry(translationSpecification.getId(), productDTO.getSpecificationFr().getName());
					entrySpecificationFr.setLanguage(Language.FRENCH);
					daoManager.getTranslationDao().insertEntry(entrySpecificationFr);					
					
					// Others
					Translation translationOther = new Translation();					
					daoManager.getTranslationDao().insertTranslation(translationOther);
					// Eng Others
					TranslationEntry entryOtherEng = new TranslationEntry(translationOther.getId(), productDTO.getOtherEng().getName());
					entryOtherEng.setLanguage(Language.ENGLISH);
					daoManager.getTranslationDao().insertEntry(entryOtherEng);
					// Fr Name
					TranslationEntry entryOtherFr = new TranslationEntry(translationOther.getId(), productDTO.getOtherFr().getName());
					entryOtherFr.setLanguage(Language.FRENCH);
					daoManager.getTranslationDao().insertEntry(entryOtherFr);
					
					// Warranty
					Translation translationWarranty = new Translation();
					daoManager.getTranslationDao().insertTranslation(translationWarranty);
					// Eng Others
					TranslationEntry entryWarrantyEng = new TranslationEntry(translationWarranty.getId(), productDTO.getWarrantyEng().getName());
					entryWarrantyEng.setLanguage(Language.ENGLISH);
					daoManager.getTranslationDao().insertEntry(entryWarrantyEng);
					// Fr Name
					TranslationEntry entryWarrantyFr = new TranslationEntry(translationWarranty.getId(), productDTO.getWarrantyFr().getName());
					entryWarrantyFr.setLanguage(Language.FRENCH);
					daoManager.getTranslationDao().insertEntry(entryWarrantyFr);					
										
					//Insert Image product
					Image imageProduct = new Image();
					if(productDTO.getImage() != null) {
						imageProduct.setName(productDTO.getImage().getName());
						imageProduct.setRealNameImg(productDTO.getImage().getRealName());
						imageProduct.setType(Type.PRODUCT);
						imageProduct.setSize(productDTO.getImage().getSize());
						imageProduct.setHeight(productDTO.getImage().getHeight());
						imageProduct.setWidth(productDTO.getImage().getWidth());
						imageProduct.setLarge(productDTO.getImage().isLarge());
						imageProduct.setResolution(productDTO.getImage().getResolution());
						imageProduct.setScore(productDTO.getImage().getScore());
						daoManager.getImageDao().insertEntity(imageProduct);
					}
					
					//Brand 
					Brand brand = new Brand();
					brand.setId(productDTO.getBrand().getId());
					//Category
					Category category = new Category();
					category.setId(productDTO.getCategory().getId());
					
					product.setName(translationName);
					product.setDescription(translationDescription);
					product.setImage(imageProduct);
					product.setStatus(ProductStatus.AVAILABLE);
					product.setMsrp(productDTO.getMsrp());
					product.setCost(productDTO.getCost());
					product.setBrand(brand);
					product.setLoyaltySourceProductId(productDTO.getLoyaltyProductId());
					product.setProductHigh(productDTO.getHigh());
					product.setProductLong(productDTO.getLarge());
					product.setProductWidth(productDTO.getWidth());
					product.setWeight(productDTO.getWeight());
					product.setActualHeight(productDTO.getActualHeight());
					product.setActualLength(productDTO.getActualLength());
					product.setActualWidth(productDTO.getActualWidth());
					product.setActualWeight(productDTO.getActualWeight());
					product.setCategory(category);
					product.setSpecification(translationSpecification);
					product.setOther(translationOther);
					product.setNote(productDTO.getNote());
					product.setWereWgtDimChanged(productDTO.getWereWgtDimChanged());
					product.setConsideredForXML(productDTO.getConsideredForXML());
					product.setWarranty(translationWarranty);
					product.setUpc(productDTO.getUpc());
					//51 is N/A. To allow don't pick any option in edit product page in Admin
					//I do this trick
					if(productDTO.getMainFilterTypeId() != -1) {
						product.setTypeId(productDTO.getMainFilterTypeId());
					} else {
						product.setTypeId(new Long(51));
					}
					daoManager.getProductDao().insertProduct(product);
					
					//Manufacture Product Id
					Iterator<ProductModelDTO> stringIterator = productDTO.getManufactureProductList().iterator();
					ProductModelNumber productModelNumber;
					ProductModelDTO productModelDTO;
					while(stringIterator.hasNext()) {
						productModelNumber = new ProductModelNumber();
						productModelDTO = (ProductModelDTO)stringIterator.next();
						productModelNumber.setModelNumber(productModelDTO.getName());
						productModelNumber.setQuantity(productModelDTO.getQuantity());
						productModelNumber.setProductId(product.getId());
						productModelNumber.setSupplier(productModelDTO.getSupplier());
						productModelNumber.setPrice(productModelDTO.getPrice());
						productModelNumber.setMsrp(productModelDTO.getMsrp());
						daoManager.getProductDao().insertProductModelNumber(productModelNumber);
					}
					
					//insert url link
					if(productDTO.getLinkList().size() > 0)
					{
						ProductLink productLink = new ProductLink();
						productLink.setProductId(product.getId());
						productLink.setLink(productDTO.getLinkList().get(0).getLink());
						daoManager.getProductDao().insertProductLink(productLink);
					}
					return product;
				}
			});
			return(productResult.getId());
		} catch (DaoException e) {
			throw (new ServiceException(e));
		}
	}
	
	@Override
	public ProductDTO getProductInformation(final Long productId, final Long userId) throws ServiceException {

		Product productResult = new Product();
		
		try {
			daoManager.setCommitTransaction(true);
			productResult = (Product) daoManager.executeAndHandle(new DaoCommand() {
				@Override
				public Object execute(com.loyauty.dao.core.DaoManager daoManager)
						throws DaoException {
					Product product = new Product();
					Select select = new Select();
					select.setQuery(String.valueOf(productId));
					select.setUserId(userId);
					product = daoManager.getProductDao().getProduct(select);
					return product;
				}
			});			
		} catch (DaoException de) {
			throw (new ServiceException(de));
		}
		return(DTOFactory.getProductDTO(productResult));
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public List<UserProductDTO> getAllProdcutForProfit(final UserProductDTO userProducDTO) throws ServiceException{

		List <Product> productList = new ArrayList<Product>();
		
		try {
			daoManager.setCommitTransaction(true);
			productList = (List <Product>) daoManager.executeAndHandle(new DaoCommand() {
						@Override
						public Object execute(com.loyauty.dao.core.DaoManager daoManager)
								throws DaoException {
							//Brand
							Brand brand = null;
							if(userProducDTO.getBrandId() != null){
								brand = new Brand();
								brand.setId(userProducDTO.getBrandId());
							}
							
							//Category
							Category category = null;
							if(userProducDTO.getCategoryId() != null){
								category = new Category();
								category.setId(userProducDTO.getCategoryId());
							}
														
							Product product = new Product();
							product.setBrand(brand);
							product.setCategory(category);	
							product.setUserProductStatus(userProducDTO.getUserProductStatus());
							product.setUserId(userProducDTO.getUserId());
							product.setLoyaltySourceProductId(userProducDTO.getLsProductId());
							
							return daoManager.getProductDao().getAllProdcutForProfit(product);
						}
					});
		} catch (DaoException de) {
			throw (new ServiceException(de));
		}
		
		return(DTOFactory.getUserProductDTOList(productList));
	}	
	
	@Override
	public ImageDTO addProductImage(File file, String fileName, String applicationPath, long uploaderId,
			 int width, int height, int miniCoverWidth, boolean large) throws ServiceException, IOException {
	
		ImageService ish = new ImageServiceImpl();
		Long tempId = new Long(0);
		Image image = new Image();
		image.setId(tempId);
		image.setUploaderId(uploaderId);
		
		// Validate if the name is already present in the DB
		String normalizedName= CommonUtils.getNormalizedProductImage(fileName);
		//TODO: we must create a validation in action //Validate if the image extension is JPEG or PNG
		int i = ish.isJPEGPNGImage(file);
		if (i==1) {
			image.addImageJps(file,normalizedName,fileName);
		}else if (i==2) {
			image.addImagePNG(file,normalizedName,fileName);
		}else{
			throw new ServiceException("Game Logo Image Format not supported " + file.getName() );
		}
		image.setName(normalizedName);
		image.setRealNameImg(fileName);
		//Variables Initialization 
		image.setType(Type.PRODUCT);
		image.setLarge(large);
		
		// Transfer the cover to the server cover/large/ directory			
		if (!ish.transferProductImage(file, normalizedName, applicationPath, width, height, miniCoverWidth, large)){
			throw new ServiceException("Could not transfer the image" + 
					"\nimageName:" + file.getName() 
					+ "\nNormalized image:" + normalizedName);
		}
		
		return DTOFactory.getImageDTO(image); 
	}		
	
	@Override
	public void updateProduct(final ProductDTO productDTO) throws ServiceException {
		try {
			daoManager.setCommitTransaction(true);
		    daoManager.executeAndHandle(new DaoCommand() {
				@Override
				public Object execute(com.loyauty.dao.core.DaoManager daoManager)
				throws DaoException {
					Product product = new Product();
					product.setUpc(productDTO.getUpc());
					//Eng Name
					daoManager.getTranslationDao().updateEntry(new TranslationEntry(productDTO.getNameEng()));
					//Fr Name
					daoManager.getTranslationDao().updateEntry(new TranslationEntry(productDTO.getNameFr()));
					
					//Eng Description
					daoManager.getTranslationDao().updateEntry(new TranslationEntry(productDTO.getDescriptionEng()));
					//Fr Description
					daoManager.getTranslationDao().updateEntry(new TranslationEntry(productDTO.getDescriptionFr()));
					
					//Eng Specification
					daoManager.getTranslationDao().updateEntry(new TranslationEntry(productDTO.getSpecificationEng()));
					//Fr Specification
					daoManager.getTranslationDao().updateEntry(new TranslationEntry(productDTO.getSpecificationFr()));
					
					//Eng Others
					if(productDTO.getOtherEng().getName() != null)
						daoManager.getTranslationDao().updateEntry(new TranslationEntry(productDTO.getOtherEng()));
					//Fr Others
					if(productDTO.getOtherFr().getName() != null)
						daoManager.getTranslationDao().updateEntry(new TranslationEntry(productDTO.getOtherFr()));
					
					//If the productDTO.getWarrantyEng is null that means that bothe warranty are null
					//So I have to insert the warranty instead of update them.
					// Warranty
					Translation translationWarranty = new Translation();
					if(productDTO.getWarrantyEng().getId() != 0){
						//Eng Warranty
						daoManager.getTranslationDao().updateEntry(new TranslationEntry(productDTO.getWarrantyEng()));
						//Fr Warranty
						daoManager.getTranslationDao().updateEntry(new TranslationEntry(productDTO.getWarrantyFr()));
						
						translationWarranty.setId(productDTO.getWarrantyTranslationId());
					}
					else{
						
						if(productDTO.getWarrantyEng() != null)
						{
							daoManager.getTranslationDao().insertTranslation(translationWarranty);
							// Eng Others
							TranslationEntry entryWarrantyEng = new TranslationEntry(translationWarranty.getId(), productDTO.getWarrantyEng().getName());
							entryWarrantyEng.setLanguage(Language.ENGLISH);
							daoManager.getTranslationDao().insertEntry(entryWarrantyEng);
							// Fr Name
							TranslationEntry entryWarrantyFr = new TranslationEntry(translationWarranty.getId(), productDTO.getWarrantyFr().getName());
							entryWarrantyFr.setLanguage(Language.FRENCH);
							daoManager.getTranslationDao().insertEntry(entryWarrantyFr);
						}
					}
					product.setWarranty(translationWarranty);	
					
					//Insert Image product
					Image imageProduct = new Image();
					//If the id image is null that means that the image is new.
					//So, Insert the image and update the product.
					if(productDTO.getImage() != null) {
						if (productDTO.getImage().getId() > 0L) {						
							imageProduct.setId(productDTO.getImage().getId());
							imageProduct.setName(productDTO.getImage().getName());
							imageProduct.setRealNameImg(productDTO.getImage().getRealName());
							imageProduct.setType(Type.PRODUCT);
							imageProduct.setSize(productDTO.getImage().getSize());
							imageProduct.setHeight(productDTO.getImage().getHeight());
							imageProduct.setWidth(productDTO.getImage().getWidth());
							imageProduct.setLarge(productDTO.getImage().isLarge());
							imageProduct.setResolution(productDTO.getImage().getResolution());
							imageProduct.setScore(productDTO.getImage().getScore());
							
							//For the image, I use the plugin and the insert or update of 
							//the image is done in AjaxUploadFile So if I insert here the 
							//image again, I'll get a duplicate key exception. 
							//I update all the time.
							//daoManager.getImageDao().updateEntity(imageProduct);		
							//I do nothing.
						}
					}
					
					//Brand 
					Brand brand = new Brand();
					brand.setId(productDTO.getBrand().getId());
					
					//Category
					Category category = new Category();
					category.setId(productDTO.getCategory().getId());
					product.setId(productDTO.getId());
						
					 if (imageProduct != null) {
						product.setImage(imageProduct);
					}
					
					product.setMsrp(productDTO.getMsrp());
					product.setCost(productDTO.getCost());
					product.setBrand(brand);
					product.setLoyaltySourceProductId(productDTO.getLoyaltyProductId());
					product.setProductHigh(productDTO.getHigh());
					product.setProductLong(productDTO.getLarge());
					product.setProductWidth(productDTO.getWidth());
					product.setWeight(productDTO.getWeight());
					product.setActualHeight(productDTO.getActualHeight());
					product.setActualLength(productDTO.getActualLength());
					product.setActualWidth(productDTO.getActualWidth());
					product.setActualWeight(productDTO.getActualWeight());
					product.setCategory(category);
					product.setStatus(productDTO.getStatus());
					product.setNote(productDTO.getNote());
					product.setWereWgtDimChanged(productDTO.getWereWgtDimChanged());
					product.setConsideredForXML(productDTO.getConsideredForXML());

					if (productDTO.getStatus() == ProductStatus.DISCONTINUED) {
						product.setDiscontinuedStartDate(productDTO.getDiscontinuedStartDate());
						String productSubstitute = productDTO.getLoyaltyProductIdSub();
						if (productSubstitute != null) {
							if (productSubstitute.length() > 0 && !productSubstitute.matches("^\\s*$")) {
								product.setLoyaltyProductIdSub(productDTO.getLoyaltyProductIdSub());
							}
						}
					} else if (productDTO.getStatus() == ProductStatus.DISABLED) {						
						Date discontinuedStartDate = productDTO.getDiscontinuedStartDate();
						if (discontinuedStartDate != null) {
							product.setDiscontinuedStartDate(discontinuedStartDate);
						}
						String productSubstitute = productDTO.getLoyaltyProductIdSub();
						if (productSubstitute != null) {
							product.setLoyaltyProductIdSub(productDTO.getLoyaltyProductIdSub());
						}
					}
					//51 is N/A. To allow don't pick any option in edit product page in Admin
					//I do this trick
					if(productDTO.getMainFilterTypeId() != -1)
						product.setTypeId(productDTO.getMainFilterTypeId());
					else
						product.setTypeId(new Long(51));
					
					daoManager.getProductDao().updateProduct(product);
					
					//Manufacture Product Id
					Iterator<ProductModelDTO> stringIterator = productDTO.getManufactureProductList().iterator();
					ProductModelNumber productModelNumber;
					ProductModelDTO productModelDTO;
					while(stringIterator.hasNext()) {
						productModelNumber = new ProductModelNumber();
						productModelDTO = (ProductModelDTO)stringIterator.next();
						productModelNumber.setModelNumber(productModelDTO.getName());
						productModelNumber.setQuantity(productModelDTO.getQuantity());
						productModelNumber.setSupplier(productModelDTO.getSupplier());
						productModelNumber.setPrice(productModelDTO.getPrice());
						productModelNumber.setMsrp(productModelDTO.getMsrp());
						productModelNumber.setId(productModelDTO.getId());
						productModelNumber.setProductId(product.getId());
						if(productModelNumber.getId() != 0) {
						    if(!productModelDTO.getName().trim().equals(""))
						    	daoManager.getProductDao().updateProductModelNumber(productModelNumber);
						    else
						    	daoManager.getProductDao().deleteProductModelNumber(productModelNumber);
						} else {
						    if(!productModelDTO.getName().trim().equals("") )
							 daoManager.getProductDao().insertProductModelNumber(productModelNumber);
						} 
					}
					
					//link url
					if(productDTO.getLinkList() != null)
					{
						ProductLink productLink = new ProductLink();
						productLink.setId(productDTO.getLinkList().get(0).getId());
						productLink.setLink(productDTO.getLinkList().get(0).getLink());
						productLink.setProductId(productDTO.getLinkList().get(0).getProductId());
						if(productLink.getId() !=0 )
							daoManager.getProductDao().updateProductLink(productLink);
						else
							daoManager.getProductDao().insertProductLink(productLink);
					}
					return product;
				}
			});
		} catch (DaoException e) {
			throw (new ServiceException(e));
		}
	}
	
	
	@SuppressWarnings("unchecked")
	@Override
	public List<ProductDTO> getAllProdcut() throws ServiceException{

		List <Product> productList = new ArrayList<Product>();
		
		try {
			daoManager.setCommitTransaction(true);
			productList = (List <Product>) daoManager.executeAndHandle(new DaoCommand() {
						@Override
						public Object execute(com.loyauty.dao.core.DaoManager daoManager)
								throws DaoException {
							return daoManager.getProductDao().getAllProdcut();
						}
					});
		} catch (DaoException de) {
			throw (new ServiceException(de));
		}
		return(DTOFactory.getProductDTOList(productList));
	}	

	@Override
	public void updateSellingPriceBrand(final UserProductDTO userProductDTO)
			throws ServiceException {

		try {
			daoManager.setCommitTransaction(true);
			daoManager.executeAndHandle(new DaoCommand() {
					@Override
					public Object execute(com.loyauty.dao.core.DaoManager daoManager)
							throws DaoException {
													
						UserBrandDiscount userBrandDiscount = new UserBrandDiscount();
						userBrandDiscount.setBrandId(userProductDTO.getBrandId());
						userBrandDiscount.setDiscount(userProductDTO.getBrandDiscount());
						userBrandDiscount.setUserId(userProductDTO.getUserId());
						//update selling price by brand
						daoManager.getProductDao().updateSellingPriceBrand(userBrandDiscount);
						// insert user brand discount or category
						UserBrandDiscount ubd = daoManager.getUserBrandDiscountDao().getUserBrandDiscount(userBrandDiscount);
						if( ubd == null)
							daoManager.getUserBrandDiscountDao().insertEntity(userBrandDiscount);
						else {
							ubd.setDiscount(userBrandDiscount.getDiscount());
							daoManager.getUserBrandDiscountDao().updateEntity(ubd);
						}
						return null;
						
					}
			});
		} catch (DaoException de) {
			throw (new ServiceException(de));
		}
	}
	
	@Override
	public void updateSellingPriceCategory(final UserProductDTO userProductDTO)
			throws ServiceException {

		try {
			daoManager.setCommitTransaction(true);
			daoManager.executeAndHandle(new DaoCommand() {
					@Override
					public Object execute(com.loyauty.dao.core.DaoManager daoManager)
							throws DaoException {
													
						UserCategoryDiscount userCatDiscount = new UserCategoryDiscount();
						userCatDiscount.setCategoryId(userProductDTO.getCategoryId());
						userCatDiscount.setDiscount(userProductDTO.getCategoryDiscount());
						userCatDiscount.setUserId(userProductDTO.getUserId());
						//update selling price by brand
						daoManager.getProductDao().updateSellingPriceCategory(userCatDiscount);
						// insert user brand discount or category
						UserCategoryDiscount  ucd = daoManager.getUserCategoryDiscountDao().getUserCategoryDiscount(userCatDiscount);
						if( ucd == null)
							daoManager.getUserCategoryDiscountDao().insertEntity(userCatDiscount);
						else {
							ucd.setDiscount(userCatDiscount.getDiscount());
							daoManager.getUserCategoryDiscountDao().updateEntity(ucd);							
						}
						return null;
						
					}
			});
		} catch (DaoException de) {
			throw (new ServiceException(de));
		}
	}
	
	@Override
	public CommonUserDiscountDTO getUserBrandDiscount(final CommonUserDiscountDTO userBrandDiscountDTO)
			throws ServiceException {
		UserBrandDiscount discountResult = null;
		try {
			discountResult = (UserBrandDiscount) daoManager.executeAndHandle(new DaoCommand() {
				@Override
				public Object execute(DaoManager daoManager) throws DaoException {
					
					UserBrandDiscount userBrandDiscount = new UserBrandDiscount();
					userBrandDiscount.setBrandId(userBrandDiscountDTO.getBrandId());				
					userBrandDiscount.setUserId(userBrandDiscountDTO.getUserId());

					return daoManager.getUserBrandDiscountDao().getUserBrandDiscount(userBrandDiscount);
				}
			});
		}catch (DaoException de) {
			throw (new ServiceException(de));
		}
		
		if(discountResult != null){
			CommonUserDiscountDTO udDTO = new CommonUserDiscountDTO();
			udDTO.setCategoryId(discountResult.getBrandId());
			udDTO.setUserId(discountResult.getUserId());
			udDTO.setDiscount(discountResult.getDiscount());
			return udDTO;									
		}		
		return null;
	}

	@Override
	public CommonUserDiscountDTO getUserCategoryDiscount(final CommonUserDiscountDTO userDiscountDTO) 
			throws ServiceException {
		UserCategoryDiscount discountResult = null;
		try {
			discountResult = (UserCategoryDiscount) daoManager.executeAndHandle(new DaoCommand() {
				@Override
				public Object execute(DaoManager daoManager) throws DaoException {
					
					UserCategoryDiscount userCatDiscount = new UserCategoryDiscount();
					userCatDiscount.setCategoryId(userDiscountDTO.getCategoryId());				
					userCatDiscount.setUserId(userDiscountDTO.getUserId());

					return daoManager.getUserCategoryDiscountDao().getUserCategoryDiscount(userCatDiscount);
				}
			});
		}catch (DaoException de) {
			throw (new ServiceException(de));
		}
		
		if(discountResult != null){
			CommonUserDiscountDTO udDTO = new CommonUserDiscountDTO();
			udDTO.setCategoryId(discountResult.getCategoryId());
			udDTO.setUserId(discountResult.getUserId());
			udDTO.setDiscount(discountResult.getDiscount());
			return udDTO;									
		}
		
		return null;
	}

	@Override
	public void updateSellingPriceProduct(final UserProductDTO producDTO)
			throws ServiceException {
		try {
			daoManager.setCommitTransaction(true);
			daoManager.executeAndHandle(new DaoCommand() {
					@Override
					public Object execute(com.loyauty.dao.core.DaoManager daoManager)
							throws DaoException {
													
						Product product = new Product();
						product.setUserId(producDTO.getUserId());
						product.setId(producDTO.getId());
						product.setUserPrice(producDTO.getUserPrice());
						product.setPriceType(PriceType.MANUEL_PRICE_SET.getValue());
						//update selling price by product
						daoManager.getProductDao().updateSellingPriceProduct(product);
						
						
						return null;
						
					}
			});
		} catch (DaoException de) {
			throw (new ServiceException(de));
		}		
	}
	
	@Override
	public void updateUserProductStatus(final UserProductDTO producDTO)
			throws ServiceException {
		try {
			daoManager.setCommitTransaction(true);
			daoManager.executeAndHandle(new DaoCommand() {
					@Override
					public Object execute(com.loyauty.dao.core.DaoManager daoManager)
							throws DaoException {
													
						Product product = new Product();
						product.setUserId(producDTO.getUserId());
						product.setId(producDTO.getId());
						product.setUserProductStatus(producDTO.getUserProductStatus());
						daoManager.getProductDao().updateUserProductStatus(product);
						
						return null;
						
					}
			});
		} catch (DaoException de) {
			throw (new ServiceException(de));
		}		
	}
	
	
	@SuppressWarnings("unchecked")
	@Override
	public List<CommonDTO> getAllMainSpecification(LoyaltyEnum language)
			throws ServiceException {
		List<Specification> list = null;
		try {
			list = (List<Specification>) daoManager.executeAndHandle(new DaoCommand() {
				@Override
				public Object execute(DaoManager daoManager) throws DaoException {
					return daoManager.getSpecificationDao().getAllMainSpecification();
				}
			});
		} catch (DaoException e) {
			throw (new ServiceException(e));			
		} 
		
		return DTOFactory.getAllCommonDTOFromSpecification(list, language);
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public List<ProductDTO> getAllProductQuery(final QueryDTO dto)
			throws ServiceException {
		List <Product> productList = new ArrayList<Product>();
		
		try {
			daoManager.setCommitTransaction(true);
			productList = (List<Product>) daoManager.executeAndHandle(new DaoCommand() {
						@Override
						public Object execute(com.loyauty.dao.core.DaoManager daoManager)
								throws DaoException {
							
							Query qry = new Query();
							Brand brand = null;
							if(dto.getBrand().getId()>0){
								brand = new Brand();
								brand.setId(dto.getBrand().getId());
							}
							Category cat = null;
							if(dto.getCategory().getId()>0){
								cat = new Category();
								cat.setId(dto.getCategory().getId());
							}
							
							qry.setBrand(brand);
							qry.setCategory(cat);
							qry.setTypeId(null);
							qry.setDiscontinued(dto.isDiscontinued());
							qry.setDisabled(dto.isDisabled());
							
							return daoManager.getProductDao().getAllProductQuery(qry);
						}
					});
		} catch (DaoException de) {
			throw (new ServiceException(de));
		}
		return(DTOFactory.getBasicProductDTOList(productList));
	}


	@SuppressWarnings("unchecked")
	@Override
	public List<ProductDTO> getProductList(final SearchRequestDTO searchRequest) throws ServiceException {
		List <Product> productList = new ArrayList<Product>();
		try {
			daoManager.setCommitTransaction(true);
			productList = (List <Product>) daoManager.executeAndHandle(new DaoCommand() {
						@Override
						public Object execute(com.loyauty.dao.core.DaoManager daoManager)
								throws DaoException {
							
							Select select = new Select();
							select.setQuery(searchRequest.getQuery());
							select.setUserId(searchRequest.getUserId());
							
							if(searchRequest.getSearchType() == SearchType.NAME.getValue()){								
								return daoManager.getProductDao().getProductByName(select);
							}
							if(searchRequest.getSearchType() == SearchType.BRAND.getValue()){
								return daoManager.getProductDao().getAllProdcutByBrand(select);	
							}
							if(searchRequest.getSearchType() == SearchType.CATEGORY.getValue()){
								return daoManager.getProductDao().getAllProdcutByCategory(select);
							}
							if(searchRequest.getSearchType() == SearchType.MAIN_SPECIFICATION.getValue()){
								return daoManager.getProductDao().getAllProdcutBySpecification(select);
							}
							if(searchRequest.getSearchType() == SearchType.CATEGORY_GROUP.getValue()){
								return daoManager.getProductDao().getAllProdcutByCategoryGroup(select);
							}
							return daoManager.getProductDao().getAllProdcut();

						}
					});
		} catch (DaoException de) {
			throw (new ServiceException(de));
		}		
		return DTOFactory.getProductDTOList(productList);
 
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public List<UserDTO> getAllActiveClients(final Long productId) throws ServiceException {

		List<User> activeClientsList = new ArrayList<User>();
		
		try {
			daoManager.setCommitTransaction(true);
			activeClientsList = (List<User>) daoManager.executeAndHandle(new DaoCommand() {
				@Override
				public Object execute(com.loyauty.dao.core.DaoManager daoManager)
						throws DaoException {
					Product product = new Product();
					Select select = new Select();
					select.setQuery(String.valueOf(productId));
					product = daoManager.getProductDao().getProduct(select);
					return product.getActiveClientsList();
				}
			});
		} catch (DaoException de) {
			throw (new ServiceException(de));
		}
		return(DTOFactory.getActiveClients(activeClientsList));
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public List<ProductDTO> getAllDiscontinuedProducts() throws ServiceException {

		List <Product> productList = new ArrayList<Product>();
		
		try {
			daoManager.setCommitTransaction(true);
			productList = (List <Product>) daoManager.executeAndHandle(new DaoCommand() {
						@Override
						public Object execute(com.loyauty.dao.core.DaoManager daoManager)
								throws DaoException {
							return daoManager.getProductDao().getAllDiscontinuedProducts();
						}
					});
		} catch (DaoException de) {
			throw (new ServiceException(de));
		}
		return(DTOFactory.getProductDTOList(productList));
	}
	
	@Override
	public void updateStatusToDisabled(final ProductDTO productDTO) throws ServiceException {
		try {
			daoManager.setCommitTransaction(true);
			daoManager.executeAndHandle(new DaoCommand() {
					@Override
					public Object execute(com.loyauty.dao.core.DaoManager daoManager)
							throws DaoException {
													
						Product product = new Product();
						product.setId(productDTO.getId());
						daoManager.getProductDao().updateStatusToDisabled(product);
						return null;
						
					}
			});
		} catch (DaoException de) {
			throw (new ServiceException(de));
		}		
	}
	
	@Override
	public ProductDTO getProductIdFromLSProductId(final String lSProductId) throws ServiceException {
		Product productResult = new Product();
		
		try {
			daoManager.setCommitTransaction(true);
			productResult = (Product) daoManager.executeAndHandle(new DaoCommand() {
				@Override
				public Object execute(com.loyauty.dao.core.DaoManager daoManager)
						throws DaoException {
					Product product = daoManager.getProductDao().getProductIdFromLSProductId(lSProductId);
					return product;
				}
			});			
		} catch (DaoException de) {
			throw (new ServiceException(de));
		}		
		if(productResult == null) return (null);
		return (DTOFactory.getProductDTO(productResult));				
	}
	
	
	
	@Override
	public ProductDTO getProductByLsProductId(final String lSProductId) throws ServiceException {
		Product productResult = new Product();
		
		try {
			daoManager.setCommitTransaction(true);
			productResult = (Product) daoManager.executeAndHandle(new DaoCommand() {
				@Override
				public Object execute(com.loyauty.dao.core.DaoManager daoManager)
						throws DaoException {
					Product product = daoManager.getProductDao().getProductByLsProductId(lSProductId);
					return product;
				}
			});			
		} catch (DaoException de) {
			throw (new ServiceException(de));
		}		
		if(productResult == null) return (null);
		return (DTOFactory.getProductDTO(productResult));				
	}
	
	
	
	
	
	
	@Override 
	public Long createUserProductPrice(final UserProductPriceDTO userProductPriceDTO) throws ServiceException {
		UserProductPrice userProductPriceResult = new UserProductPrice();		
		try {
			daoManager.setCommitTransaction(true);
			userProductPriceResult = (UserProductPrice) daoManager.executeAndHandle(new DaoCommand() {
				@Override
				public Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {					
					UserProductPrice userProductPrice = new UserProductPrice();					
					userProductPrice.setUserId(userProductPriceDTO.getUserId());				
					userProductPrice.setProductId(userProductPriceDTO.getProductId());					
					userProductPrice.setPrice(userProductPriceDTO.getPrice());
					userProductPrice.setProfit(userProductPriceDTO.getProfit());
					userProductPrice.setDiscount(userProductPriceDTO.getDiscount());
					userProductPrice.setExcluded(userProductPriceDTO.getExcluded());					
					userProductPrice.setUserStatus(userProductPriceDTO.getUserStatus());
					userProductPrice.setPriceType(userProductPriceDTO.getPriceType());					
					daoManager.getProductDao().insertUserProductPrice(userProductPrice);					
					return userProductPrice;
				}
			});
			return userProductPriceResult.getId();
		} catch (DaoException de) {
			throw (new ServiceException(de));
		}		
	}	
	
	@SuppressWarnings("unchecked")
	@Override
	public List<UserProductPriceDTO> getUserProductPriceList(final Long productId) throws ServiceException {
		List<UserProductPrice> userProductPriceList = new ArrayList<UserProductPrice>();		
		try {
			daoManager.setCommitTransaction(true);
			userProductPriceList = (List<UserProductPrice>) daoManager.executeAndHandle(new DaoCommand() {
				@Override
				public Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {
					List<UserProductPrice> userProductPriceListing = new ArrayList<UserProductPrice>();
					Select select = new Select();
					select.setProductId(productId);
					userProductPriceListing = daoManager.getProductDao().getUserProductPriceList(select);					
					return userProductPriceListing;
				}
			});			
		} catch (DaoException de) {
			throw (new ServiceException(de));
		}
		return(DTOFactory.getUserProductPriceDTOList(userProductPriceList));
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public List<UserProductPriceDTO> getUserProductPriceForActiveUsersList(final Long productId) throws ServiceException {
		List<UserProductPrice> userProductPriceList = new ArrayList<UserProductPrice>();		
		try {
			daoManager.setCommitTransaction(true);
			userProductPriceList = (List<UserProductPrice>) daoManager.executeAndHandle(new DaoCommand() {
				@Override
				public Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {
					List<UserProductPrice> userProductPriceListing = new ArrayList<UserProductPrice>();
					Select select = new Select();
					select.setProductId(productId);
					userProductPriceListing = daoManager.getProductDao().getUserProductPriceForActiveUsersList(select);					
					return userProductPriceListing;
				}
			});			
		} catch (DaoException de) {
			throw (new ServiceException(de));
		}
		return(DTOFactory.getUserProductPriceDTOList(userProductPriceList));
	}
	
	
	@Override
	public void updateUserProductPrice(final UserProductPriceDTO userProductPriceDTO) throws ServiceException {
		try {
			daoManager.setCommitTransaction(true);
			daoManager.executeAndHandle(new DaoCommand() {
					@Override
					public Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {	
						UserProductPrice userProductPrice = new UserProductPrice();						
						userProductPrice.setUserId(userProductPriceDTO.getUserId());				
						userProductPrice.setProductId(userProductPriceDTO.getProductId());	
						userProductPrice.setPrice(userProductPriceDTO.getPrice());
						userProductPrice.setProfit(userProductPriceDTO.getProfit());
						userProductPrice.setDiscount(userProductPriceDTO.getDiscount());
						userProductPrice.setExcluded(userProductPriceDTO.getExcluded());					
						userProductPrice.setPriceType(userProductPriceDTO.getPriceType());
						daoManager.getProductDao().updateUserProductPrice(userProductPrice);
						return null;
					}
			});
		} catch (DaoException de) {
			throw (new ServiceException(de));
		}		
	}	
	
	@Override
	public UserProductPriceDTO getUserProductPriceInformation(final Long productId, final Long userId) throws ServiceException {
		UserProductPrice userProductPriceResult = new UserProductPrice();		
		try {
			daoManager.setCommitTransaction(true);
			userProductPriceResult = (UserProductPrice) daoManager.executeAndHandle(new DaoCommand() {
				@Override
				public Object execute(com.loyauty.dao.core.DaoManager daoManager)
						throws DaoException {
					UserProductPrice userProductPrice = new UserProductPrice();
					Select select = new Select();
					select.setProductId(productId);
					select.setUserId(userId);
					userProductPrice = daoManager.getProductDao().getUserProductPrice(select);
					return userProductPrice;
				}
			});
		} catch (DaoException de) {
			throw (new ServiceException(de));
		}
		return (DTOFactory.getUserProductPriceDTO(userProductPriceResult));
	}

	@Override
	public UserProductPriceDTO getUsrPPriceByLsproductId(final Long userId, final String lsProductId) throws ServiceException {
		UserProductPrice userProductPriceResult = null;	
		try {			
			daoManager.setCommitTransaction(true);
			userProductPriceResult = (UserProductPrice) daoManager.executeAndHandle(new DaoCommand() {
				@Override
				public Object execute(com.loyauty.dao.core.DaoManager daoManager)
						throws DaoException {
					return daoManager.getProductDao().getUsrPPriceByLsproductId(userId,lsProductId);
				}
			});
		} catch (DaoException de) {
			throw (new ServiceException(de));
		}
		return (DTOFactory.getUserProductPriceDTO(userProductPriceResult));
	}

	
	
	@Override
	public UserProductPriceDTO getUsrPPriceByProductId(final Long userId, final Long productId) throws ServiceException {
		UserProductPrice userProductPriceResult = null;	
		try {			
			daoManager.setCommitTransaction(true);
			userProductPriceResult = (UserProductPrice) daoManager.executeAndHandle(new DaoCommand() {
				@Override
				public Object execute(com.loyauty.dao.core.DaoManager daoManager)
						throws DaoException {
					return daoManager.getProductDao().getUsrPPriceByProductId(userId,productId);
				}
			});
		} catch (DaoException de) {
			throw (new ServiceException(de));
		}
		return (DTOFactory.getUserProductPriceDTO(userProductPriceResult));
	}

	
	
	
	
	@SuppressWarnings("unchecked")
	@Override
	public List<ProvinceDTO> getAllProvinces() throws ServiceException {
		List<Province> provinceList = new ArrayList<Province>();		
		try {
			daoManager.setCommitTransaction(true);
			provinceList = (List<Province>) daoManager.executeAndHandle(new DaoCommand() {
				@Override
				public Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {
					return daoManager.getProductDao().getAllProvinces();
				}
			});			
		} catch (DaoException de) {
			throw (new ServiceException(de));
		}
		return(DTOFactory.getProvinceDTOList(provinceList));
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public List<CityDTO> getAllCities(final Long provinceId) throws ServiceException {
		List<City> cityList = new ArrayList<City>();		
		try {
			daoManager.setCommitTransaction(true);
			cityList = (List<City>) daoManager.executeAndHandle(new DaoCommand() {
				@Override
				public Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {
					List<City> userProductPriceListing = new ArrayList<City>();
					Select select = new Select();
					select.setProvinceId(provinceId);
					userProductPriceListing = daoManager.getProductDao().getAllCities(select);			
					return userProductPriceListing;
				}
			});			
		} catch (DaoException de) {
			throw (new ServiceException(de));
		}
		return(DTOFactory.getCityDTOList(cityList));
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public CityDTO getMostPopularCitie(final Long provinceId) throws ServiceException {
		City city = new City();		
		try {
			daoManager.setCommitTransaction(true);
			city = (City) daoManager.executeAndHandle(new DaoCommand() {
				@Override
				public Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {
					City userProductPrice= new City();
					Select select = new Select();
					select.setProvinceId(provinceId);
					userProductPrice = daoManager.getProductDao().getMostPopularCitie(select);			
					return userProductPrice;
				}
			});			
		} catch (DaoException de) {
			throw (new ServiceException(de));
		}
		return(DTOFactory.getCityDTO(city));
	}
	
	
	@SuppressWarnings("unchecked")
	@Override
	public List<CityDTO> getCities() throws ServiceException {
		List<City> cityList = new ArrayList<City>();		
		try {
			daoManager.setCommitTransaction(true);
			cityList = (List<City>) daoManager.executeAndHandle(new DaoCommand() {
				@Override
				public Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {
					return daoManager.getProductDao().getCities();
				}
			});			
		} catch (DaoException de) {
			throw (new ServiceException(de));
		}
		return(DTOFactory.getCityDTOList(cityList));
	}
	
	
	@SuppressWarnings("unchecked")
	@Override
	public List<CityDTO> getMostPopularCitiesList() throws ServiceException {
		List<City> cityList = new ArrayList<City>();		
		try {
			daoManager.setCommitTransaction(true);
			cityList = (List<City>) daoManager.executeAndHandle(new DaoCommand() {
				@Override
				public Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {
					return daoManager.getProductDao().getMostPopularCitiesList();
				}
			});			
		} catch (DaoException de) {
			throw (new ServiceException(de));
		}
		return(DTOFactory.getCityDTOList(cityList));
	}
	
	
	
	@Override
	public Long createShippingCity(final ShippingCityDTO shippingCityDTO) throws ServiceException {
		ShippingCity shippingCityResult = new ShippingCity();
		try {
			daoManager.setCommitTransaction(true);
			shippingCityResult = (ShippingCity) daoManager.executeAndHandle(new DaoCommand() {
				@Override
				public Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {				
					ShippingCity shippingCity = new ShippingCity();
					shippingCity.setProductId(shippingCityDTO.getProductId());
					shippingCity.setCityId(shippingCityDTO.getCityId());
					shippingCity.setExpeditedParcelPrice(shippingCityDTO.getExpeditedParcelPrice());
					daoManager.getProductDao().insertShippingCity(shippingCity);
					return shippingCity;
				}
			});
			return shippingCityResult.getId();
		} catch (DaoException de) {
			throw (new ServiceException(de));
		}
	}
	
	@Override
	public Long createShippingProvince(final ShippingProvinceDTO shippingProvinceDTO) throws ServiceException {
		ShippingProvince shippingProvinceResult = new ShippingProvince();
		try {
			daoManager.setCommitTransaction(true);
			shippingProvinceResult = (ShippingProvince) daoManager.executeAndHandle(new DaoCommand() {
				@Override
				public Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {					
					ShippingProvince shippingProvince = new ShippingProvince();
					shippingProvince.setProductId(shippingProvinceDTO.getProductId());
					shippingProvince.setProvinceId(shippingProvinceDTO.getProvinceId());
					shippingProvince.setWeightedTotalProvince(shippingProvinceDTO.getWeightedTotalProvince());
					daoManager.getProductDao().insertShippingProvince(shippingProvince);
					return shippingProvince;
				}
			});
			return shippingProvinceResult.getId();
		} catch (DaoException de) {
			throw (new ServiceException(de));
		}
	}
	
	@Override
	public Long createShippingTotal(final ShippingTotalDTO shippingTotalDTO) throws ServiceException {
		ShippingTotal shippingTotalResult = new ShippingTotal();
		try {
			daoManager.setCommitTransaction(true);
			shippingTotalResult = (ShippingTotal) daoManager.executeAndHandle(new DaoCommand() {
				@Override
				public Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {					
					ShippingTotal shippingTotal = new ShippingTotal();
					shippingTotal.setProductId(shippingTotalDTO.getProductId());
					shippingTotal.setProvinceId(shippingTotalDTO.getProvinceId());
					shippingTotal.setUserId(shippingTotalDTO.getUserId());
					shippingTotal.setWeightedProvinceTotalWithCoverage(shippingTotalDTO.getWeightedProvinceTotalWithCoverage());
					shippingTotal.setAverageShippingTotal(shippingTotalDTO.getAverageShippingTotal());
					daoManager.getProductDao().insertShippingTotal(shippingTotal);
					return shippingTotal;
				}
			});
			return shippingTotalResult.getId();
		} catch (DaoException de) {
			throw (new ServiceException(de));
		}
	}
	
	@Override
	public void updateUPPShippingCoverage(final UserProductPriceDTO userProductPriceDTO) throws ServiceException {
		try {
			daoManager.setCommitTransaction(true);
			daoManager.executeAndHandle(new DaoCommand() {
					@Override
					public Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {	
						UserProductPrice userProductPrice = new UserProductPrice();
						userProductPrice.setUserId(userProductPriceDTO.getUserId());				
						userProductPrice.setProductId(userProductPriceDTO.getProductId());
						userProductPrice.setShippingCoverage(userProductPriceDTO.getShippingCoverage());
						daoManager.getProductDao().updateUPPShippingCoverage(userProductPrice);
						return null;
					}
			});
		} catch (DaoException de) {
			throw (new ServiceException(de));
		}
	}
	
	@Override
	public void updateUPPShippingTotalCanada(final UserProductPriceDTO userProductPriceDTO) throws ServiceException {
		try {
			daoManager.setCommitTransaction(true);
			daoManager.executeAndHandle(new DaoCommand() {
					@Override
					public Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {	
						UserProductPrice userProductPrice = new UserProductPrice();
						userProductPrice.setUserId(userProductPriceDTO.getUserId());				
						userProductPrice.setProductId(userProductPriceDTO.getProductId());
						userProductPrice.setShippingTotalCanada(userProductPriceDTO.getShippingTotalCanada());
						daoManager.getProductDao().updateUPPShippingTotalCanada(userProductPrice);
						return null;
					}
			});
		} catch (DaoException de) {
			throw (new ServiceException(de));
		}
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public List<ProductDTO> getProductListByCategoryGroupId(final Long categoryGroupId) throws ServiceException {
		List<Product> productList = new ArrayList<Product>();		
		try {
			daoManager.setCommitTransaction(true);
			productList = (List<Product>) daoManager.executeAndHandle(new DaoCommand() {
				@Override
				public Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {
					List<Product> productListing = new ArrayList<Product>();
					Select select = new Select();
					select.setCategoryGoupeId(categoryGroupId);
					productListing = daoManager.getProductDao().getProductListByCategoryGroupId(select);			
					return productListing;
				}
			});			
		} catch (DaoException de) {
			throw (new ServiceException(de));
		}
		return(DTOFactory.getProductDTOList(productList));
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public List<ProductDTO> getAllValidStatusProducts(final Long userId) throws ServiceException {
		List<Product> productList = new ArrayList<Product>();		
		try {
			daoManager.setCommitTransaction(true);
			productList = (List<Product>) daoManager.executeAndHandle(new DaoCommand() {
				@Override
				public Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {
					List<Product> productListing = new ArrayList<Product>();
					Select select = new Select();
					select.setUserId(userId);
					productListing = daoManager.getProductDao().getAllValidStatusProducts(select);			
					return productListing;
				}
			});			
		} catch (DaoException de) {
			throw (new ServiceException(de));
		}
		return(DTOFactory.getProductDTOList(productList));		
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public List<ProductDTO> getAllValidStatusProductsForAllUsers() throws ServiceException {
		List<Product> productList = new ArrayList<Product>();		
		try {
			daoManager.setCommitTransaction(true);
			productList = (List<Product>) daoManager.executeAndHandle(new DaoCommand() {
				@Override
				public Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {
					return daoManager.getProductDao().getAllValidStatusProductsForAllUsers();			

				}
			});			
		} catch (DaoException de) {
			throw (new ServiceException(de));
		}
		return(DTOFactory.getProductDTOList(productList));		
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public List<ProductDTO> getAllValidStatusProductsG(final Long userId, 
														final Long categoryGroupId) throws ServiceException {
		List<Product> productList = new ArrayList<Product>();
		try {
			daoManager.setCommitTransaction(true);
			productList = (List<Product>) daoManager.executeAndHandle(new DaoCommand() {
				@Override
				public Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {
					List<Product> productListing = new ArrayList<Product>();
					Select select = new Select();
					select.setUserId(userId);
					select.setCategoryGoupeId(categoryGroupId);
					productListing = daoManager.getProductDao().getAllValidStatusProductsG(select);			
					return productListing;
				}
			});			
		} catch (DaoException de) {
			throw (new ServiceException(de));
		}
		return(DTOFactory.getProductDTOList(productList));		
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public List<ProductDTO> getAllValidStatusProductsGC(final Long userId, 
														final Long categoryGroupId, 
														final Long categoryId) throws ServiceException {
		List<Product> productList = new ArrayList<Product>();
		try {
			daoManager.setCommitTransaction(true);
			productList = (List<Product>) daoManager.executeAndHandle(new DaoCommand() {
				@Override
				public Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {
					List<Product> productListing = new ArrayList<Product>();
					Select select = new Select();
					select.setUserId(userId);
					select.setCategoryGoupeId(categoryGroupId);
					select.setCategoryId(categoryId);
					productListing = daoManager.getProductDao().getAllValidStatusProductsGC(select);			
					return productListing;
				}
			});			
		} catch (DaoException de) {
			throw (new ServiceException(de));
		}
		return(DTOFactory.getProductDTOList(productList));		
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public List<ProductDTO> getAllValidStatusProductsGCT(final Long userId, 
														final Long categoryGroupId, 
														final Long categoryId, 
														final Long typeId) throws ServiceException {
		List<Product> productList = new ArrayList<Product>();
		try {
			daoManager.setCommitTransaction(true);
			productList = (List<Product>) daoManager.executeAndHandle(new DaoCommand() {
				@Override
				public Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {
					List<Product> productListing = new ArrayList<Product>();
					Select select = new Select();
					select.setUserId(userId);
					select.setCategoryGoupeId(categoryGroupId);
					select.setCategoryId(categoryId);
					select.setTypeId(typeId);
					productListing = daoManager.getProductDao().getAllValidStatusProductsGCT(select);			
					return productListing;
				}
			});			
		} catch (DaoException de) {
			throw (new ServiceException(de));
		}
		return(DTOFactory.getProductDTOList(productList));		
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public List<ProductDTO> getAllValidStatusProductsGCTB(final Long userId, 
															final Long categoryGroupId, 
															final Long categoryId, 
															final Long typeId,
															final Long brandId) throws ServiceException {
		List<Product> productList = new ArrayList<Product>();
		try {
			daoManager.setCommitTransaction(true);
			productList = (List<Product>) daoManager.executeAndHandle(new DaoCommand() {
				@Override
				public Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {
					List<Product> productListing = new ArrayList<Product>();
					Select select = new Select();
					select.setUserId(userId);
					select.setCategoryGoupeId(categoryGroupId);
					select.setCategoryId(categoryId);
					select.setTypeId(typeId);
					select.setBrandId(brandId);
					productListing = daoManager.getProductDao().getAllValidStatusProductsGCTB(select);		
					return productListing;
				}
			});			
		} catch (DaoException de) {
			throw (new ServiceException(de));
		}
		return(DTOFactory.getProductDTOList(productList));		
	}	
	
	@SuppressWarnings("unchecked")
	@Override
	public List<ProductDTO> getAllValidStatusProductsGCB(final Long userId, 
															final Long categoryGroupId, 
															final Long categoryId,
															final Long brandId) throws ServiceException {
		List<Product> productList = new ArrayList<Product>();
		try {
			daoManager.setCommitTransaction(true);
			productList = (List<Product>) daoManager.executeAndHandle(new DaoCommand() {
				@Override
				public Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {
					List<Product> productListing = new ArrayList<Product>();
					Select select = new Select();
					select.setUserId(userId);
					select.setCategoryGoupeId(categoryGroupId);
					select.setCategoryId(categoryId);
					select.setBrandId(brandId);
					productListing = daoManager.getProductDao().getAllValidStatusProductsGCB(select);
					return productListing;
				}
			});			
		} catch (DaoException de) {
			throw (new ServiceException(de));
		}
		return(DTOFactory.getProductDTOList(productList));		
	}
	/*
	@Override
	public ProductDTO getProductById(final Long productId) throws ServiceException {
		Product productResult = new Product();
		
		try {
			daoManager.setCommitTransaction(true);
			productResult = (Product) daoManager.executeAndHandle(new DaoCommand() {
				@Override
				public Object execute(com.loyauty.dao.core.DaoManager daoManager)
						throws DaoException {
					Select select = new Select();
					select.setProductId(productId);
					Product product = daoManager.getProductDao().getProductById(select);
					return product;
				}
			});			
		} catch (DaoException de) {
			throw (new ServiceException(de));
		}		
		if(productResult == null) return (null);
			return (DTOFactory.getProductDTO(productResult));				
	}
	*/
	
	@Override
	public ProductDTO getProductById(final Long productId) throws ServiceException {
		Product productResult = new Product();
		
		try {
			daoManager.setCommitTransaction(true);
			productResult = (Product) daoManager.executeAndHandle(new DaoCommand() {
				@Override
				public Object execute(com.loyauty.dao.core.DaoManager daoManager)
						throws DaoException {
					Select select = new Select();
					select.setProductId(productId);
					Product product = daoManager.getProductDao().getProductById(productId);
					return product;
				}
			});			
		} catch (DaoException de) {
			throw (new ServiceException(de));
		}		
		if(productResult == null) return (null);
			return (DTOFactory.getProductDTO(productResult));				
	}
	
	
	@Override
	public void updateShippingCityToExpeditedParcelPrice(final ShippingCityDTO shippingCityDTO) throws ServiceException {
		try {
			daoManager.setCommitTransaction(true);
			daoManager.executeAndHandle(new DaoCommand() {
					@Override
					public Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {	
						ShippingCity shippingCity = new ShippingCity();
						shippingCity.setProductId(shippingCityDTO.getProductId());
						shippingCity.setCityId(shippingCityDTO.getCityId());
						shippingCity.setExpeditedParcelPrice(shippingCityDTO.getExpeditedParcelPrice());
						daoManager.getProductDao().updateShippingCityToExpeditedParcelPrice(shippingCity);
						return null;
					}
			});
		} catch (DaoException de) {
			throw (new ServiceException(de));
		}
	}
	
	@Override
	public ShippingCityDTO getShippingCity(final Long productId, final Long cityId) throws ServiceException {
		ShippingCity shippingCityResult = new ShippingCity();		
		try {			
			daoManager.setCommitTransaction(true);
			shippingCityResult = (ShippingCity) daoManager.executeAndHandle(new DaoCommand() {
				@Override
				public Object execute(com.loyauty.dao.core.DaoManager daoManager)
						throws DaoException {
					ShippingCity shippingCity = new ShippingCity();
					Select select = new Select();
					select.setProductId(productId);
					select.setCityId(cityId);
					shippingCity = daoManager.getProductDao().getShippingCity(select);
					return shippingCity;
				}
			});
		} catch (DaoException de) {
			throw (new ServiceException(de));
		}
		return(DTOFactory.getShippingCityDTO(shippingCityResult));
	}
	
	@Override
	public void updateShippingProvince(final ShippingProvinceDTO shippingProvinceDTO) throws ServiceException {
		try {
			daoManager.setCommitTransaction(true);
			daoManager.executeAndHandle(new DaoCommand() {
					@Override
					public Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {	
						ShippingProvince shippingProvince = new ShippingProvince();
						shippingProvince.setProductId(shippingProvinceDTO.getProductId());
						shippingProvince.setProvinceId(shippingProvinceDTO.getProvinceId());
						shippingProvince.setWeightedTotalProvince(shippingProvinceDTO.getWeightedTotalProvince());
						daoManager.getProductDao().updateShippingProvince(shippingProvince);
						return null;
					}
			});
		} catch (DaoException de) {
			throw (new ServiceException(de));
		}
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public List<ProductDTO> getValidProductIdByDim(final ProductDTO productDTO) throws ServiceException {
		List<Product> productList = new ArrayList<Product>();
		try {
			daoManager.setCommitTransaction(true);
			productList = (List<Product>) daoManager.executeAndHandle(new DaoCommand() {
				@Override
				public Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {
					Product product = new Product();
					product.setId(productDTO.getId());
					product.setWeight(productDTO.getWeight());
					product.setLength(productDTO.getLarge());
					product.setWidth(productDTO.getWidth());
					product.setHeight(productDTO.getHigh());
					return daoManager.getProductDao().getValidProductIdByDim(product);
				}
			});			
		} catch (DaoException de) {
			throw (new ServiceException(de));
		}
		return(DTOFactory.getProductDTOList(productList));		
	}	
	
	@SuppressWarnings("unchecked")
	@Override
	public List<ShippingCityDTO> getShippingCityListWithZeroParcelPriceByCityId(final Long cityId) throws ServiceException {
		List<ShippingCity> shippingCityList = new ArrayList<ShippingCity>();
		try {
			daoManager.setCommitTransaction(true);
			shippingCityList = (List<ShippingCity>) daoManager.executeAndHandle(new DaoCommand() {
				@Override
				public Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {
					List<ShippingCity> shippingCityListing = new ArrayList<ShippingCity>();
					Select select = new Select();
					select.setCityId(cityId);
					shippingCityListing = daoManager.getProductDao().getShippingCityListWithZeroParcelPriceByCityId(select);
					return shippingCityListing;
				}
			});			
		} catch (DaoException de) {
			throw (new ServiceException(de));
		}
		return(DTOFactory.getShippingCityDTOList(shippingCityList));
	}
	
	@Override
	public CityDTO getCity(final Long cityId) throws ServiceException {
		City cityResult = new City();		
		try {			
			daoManager.setCommitTransaction(true);
			cityResult = (City) daoManager.executeAndHandle(new DaoCommand() {
				@Override
				public Object execute(com.loyauty.dao.core.DaoManager daoManager)
						throws DaoException {
					City city = new City();
					Select select = new Select();
					select.setCityId(cityId);
					city = daoManager.getProductDao().getCity(select);
					return city;
				}
			});
		} catch (DaoException de) {
			throw (new ServiceException(de));
		}
		return(DTOFactory.getCityDTO(cityResult));
	}
	
	
	@Override
	public CityDTO getCityByName(final String nameCity) throws ServiceException {	
		City city=null;
		try {			
			daoManager.setCommitTransaction(true);
			city = (City) daoManager.executeAndHandle(new DaoCommand() {
				@Override
				public Object execute(com.loyauty.dao.core.DaoManager daoManager)
						throws DaoException {
					return daoManager.getProductDao().getCityByName(nameCity);
				}
			});
		} catch (DaoException de) {
			throw (new ServiceException(de));
		}
		CityDTO cityDTO=null;
		if(city!=null)cityDTO=DTOFactory.getCityDTO(city);
		return cityDTO;
	}
	
	
	
	
	
	@Override
	public ProvinceDTO getProvince(final Long provinceId) throws ServiceException {
		Province provinceResult = new Province();		
		try {			
			daoManager.setCommitTransaction(true);
			provinceResult = (Province) daoManager.executeAndHandle(new DaoCommand() {
				@Override
				public Object execute(com.loyauty.dao.core.DaoManager daoManager)
						throws DaoException {
					Province province = new Province();
					Select select = new Select();
					select.setProvinceId(provinceId);
					province = daoManager.getProductDao().getProvince(select);
					return province;
				}
			});
		} catch (DaoException de) {
			throw (new ServiceException(de));
		}
		return(DTOFactory.getProvinceDTO(provinceResult));
	}	

	
	
	@Override
	public ProvinceDTO getProvinceByCode(final String code) throws ServiceException {
		Province provinceResult = new Province();		
		try {			
			daoManager.setCommitTransaction(true);
			provinceResult = (Province) daoManager.executeAndHandle(new DaoCommand() {
				@Override
				public Object execute(com.loyauty.dao.core.DaoManager daoManager)
					throws DaoException {
					return daoManager.getProductDao().getProvinceByCode(code);
				}
			});
		} catch (DaoException de) {
			throw (new ServiceException(de));
		}
		return(DTOFactory.getProvinceDTO(provinceResult));
	}
	
	
	@Override
	public ShippingProvinceDTO getWeightedTotalProvinceFromShippingProvince(final Long productId, final Long provinceId) throws ServiceException {
		ShippingProvince shippingProvinceResult = new ShippingProvince();		
		try {			
			daoManager.setCommitTransaction(true);
			shippingProvinceResult = (ShippingProvince) daoManager.executeAndHandle(new DaoCommand() {
				@Override
				public Object execute(com.loyauty.dao.core.DaoManager daoManager)
						throws DaoException {
					ShippingProvince shippingProvince = new ShippingProvince();
					Select select = new Select();
					select.setProductId(productId);
					select.setProvinceId(provinceId);
					shippingProvince = daoManager.getProductDao().getWeightedTotalProvinceFromShippingProvince(select);
					return shippingProvince;
				}
			});
		} catch (DaoException de) {
			throw (new ServiceException(de));
		}
		return(DTOFactory.getShippingProvinceDTO(shippingProvinceResult));
	}
	
	@Override
	public void updateShippingTotal(final ShippingTotalDTO shippingTotalDTO) throws ServiceException {
		try {
			daoManager.setCommitTransaction(true);
			daoManager.executeAndHandle(new DaoCommand() {
					@Override
					public Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {	
						ShippingTotal shippingTotal = new ShippingTotal();
						shippingTotal.setProductId(shippingTotalDTO.getProductId());
						shippingTotal.setProvinceId(shippingTotalDTO.getProvinceId());
						shippingTotal.setUserId(shippingTotalDTO.getUserId());
						shippingTotal.setWeightedProvinceTotalWithCoverage(shippingTotalDTO.getWeightedProvinceTotalWithCoverage());
						shippingTotal.setAverageShippingTotal(shippingTotalDTO.getAverageShippingTotal());
						daoManager.getProductDao().updateShippingTotal(shippingTotal);
						return null;
					}
			});
		} catch (DaoException de) {
			throw (new ServiceException(de));
		}
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public List<ShippingTotalDTO> getShippingTotalList(final Long productId, final Long userId) throws ServiceException {
		List<ShippingTotal> shippingTotalList = new ArrayList<ShippingTotal>();
		try {
			daoManager.setCommitTransaction(true);
			shippingTotalList = (List<ShippingTotal>) daoManager.executeAndHandle(new DaoCommand() {
				@Override
				public Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {
					List<ShippingTotal> shippingTotalListing = new ArrayList<ShippingTotal>();
					Select select = new Select();
					select.setProductId(productId);
					select.setUserId(userId);
					shippingTotalListing = daoManager.getProductDao().getShippingTotalList(select);
					return shippingTotalListing;
				}
			});			
		} catch (DaoException de) {
			throw (new ServiceException(de));
		}
		return(DTOFactory.getShippingTotalDTOList(shippingTotalList));
	}
	
	@Override
	public Long createUserProvincePopulation(final UserProvincePopulationDTO userProvincePopulationDTO) throws ServiceException {
		UserProvincePopulation userProvincePopulationResult = new UserProvincePopulation();
		try {
			daoManager.setCommitTransaction(true);
			userProvincePopulationResult = (UserProvincePopulation) daoManager.executeAndHandle(new DaoCommand() {
				@Override
				public Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {					
					UserProvincePopulation userProvincePopulation = new UserProvincePopulation();
					userProvincePopulation.setProvinceId(userProvincePopulationDTO.getProvinceId());
					userProvincePopulation.setUserId(userProvincePopulationDTO.getUserId());
					userProvincePopulation.setPopulationPercent(userProvincePopulationDTO.getPopulationPercent());
					daoManager.getProductDao().insertUserProvincePopulation(userProvincePopulation);
					return userProvincePopulation;
				}
			});
			return userProvincePopulationResult.getId();
		} catch (DaoException de) {
			throw (new ServiceException(de));
		}
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public List<UserProvincePopulationDTO> getUserProvincePopulationList(final Long userId) throws ServiceException {
		List<UserProvincePopulation> userProvincePopulationList = new ArrayList<UserProvincePopulation>();
		try {
			daoManager.setCommitTransaction(true);
			userProvincePopulationList = (List<UserProvincePopulation>) daoManager.executeAndHandle(new DaoCommand() {
				@Override
				public Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {
					List<UserProvincePopulation> userProvincePopulationListing = new ArrayList<UserProvincePopulation>();
					Select select = new Select();
					select.setUserId(userId);
					userProvincePopulationListing = daoManager.getProductDao().getUserProvincePopulationList(select);
					return userProvincePopulationListing;
				}
			});			
		} catch (DaoException de) {
			throw (new ServiceException(de));
		}
		return(DTOFactory.getUserProvincePopulationDTOList(userProvincePopulationList));		
	}	
	
	@Override
	public void updateUserProvincePopulation(final UserProvincePopulationDTO userProvincePopulationDTO) throws ServiceException {
		try {
			daoManager.setCommitTransaction(true);
			daoManager.executeAndHandle(new DaoCommand() {
					@Override
					public Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {	
						UserProvincePopulation userProvincePopulation = new UserProvincePopulation();
						userProvincePopulation.setUserId(userProvincePopulationDTO.getUserId());
						userProvincePopulation.setProvinceId(userProvincePopulationDTO.getProvinceId());
						userProvincePopulation.setPopulationPercent(userProvincePopulationDTO.getPopulationPercent());
						daoManager.getProductDao().updateUserProvincePopulation(userProvincePopulation);
						return null;
					}
			});
		} catch (DaoException de) {
			throw (new ServiceException(de));
		}
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public List<ShippingCityDTO> getAllShippingCity() throws ServiceException {
		List<ShippingCity> shippingCityList = new ArrayList<ShippingCity>();
		try {
			daoManager.setCommitTransaction(true);
			shippingCityList = (List<ShippingCity>) daoManager.executeAndHandle(new DaoCommand() {
				@Override
				public Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {
					return daoManager.getProductDao().getAllShippingCity();
				}
			});			
		} catch (DaoException de) {
			throw (new ServiceException(de));
		}
		return(DTOFactory.getShippingCityDTOList(shippingCityList));
	}	
	
	@SuppressWarnings("unchecked")
	@Override
	public List<ShippingProvinceDTO> getAllShippingProvince() throws ServiceException {
		List<ShippingProvince> shippingProvinceList = new ArrayList<ShippingProvince>();
		try {
			daoManager.setCommitTransaction(true);
			shippingProvinceList = (List<ShippingProvince>) daoManager.executeAndHandle(new DaoCommand() {
				@Override
				public Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {
					return daoManager.getProductDao().getAllShippingProvince();
				}
			});			
		} catch (DaoException de) {
			throw (new ServiceException(de));
		}
		return(DTOFactory.getShippingProvinceDTOList(shippingProvinceList));
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public List<ShippingTotalDTO> getAllShippingTotal() throws ServiceException {
		List<ShippingTotal> shippingTotalList = new ArrayList<ShippingTotal>();
		try {
			daoManager.setCommitTransaction(true);
			shippingTotalList = (List<ShippingTotal>) daoManager.executeAndHandle(new DaoCommand() {
				@Override
				public Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {
					return daoManager.getProductDao().getAllShippingTotal();
				}
			});			
		} catch (DaoException de) {
			throw (new ServiceException(de));
		}
		return(DTOFactory.getShippingTotalDTOList(shippingTotalList));
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public List<UserProvincePopulationDTO> getAllUserProvincePopulation() throws ServiceException {
		List<UserProvincePopulation> userProvincePopulationList = new ArrayList<UserProvincePopulation>();
		try {
			daoManager.setCommitTransaction(true);
			userProvincePopulationList = (List<UserProvincePopulation>) daoManager.executeAndHandle(new DaoCommand() {
				@Override
				public Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {
					return daoManager.getProductDao().getAllUserProvincePopulation();
				}
			});			
		} catch (DaoException de) {
			throw (new ServiceException(de));
		}
		return(DTOFactory.getUserProvincePopulationDTOList(userProvincePopulationList));
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public List<UserProductPriceDTO> getAllUserProductPrice() throws ServiceException {
		List<UserProductPrice> userProductPriceList = new ArrayList<UserProductPrice>();
		try {
			daoManager.setCommitTransaction(true);
			userProductPriceList = (List<UserProductPrice>) daoManager.executeAndHandle(new DaoCommand() {
				@Override
				public Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {
					return daoManager.getProductDao().getAllUserProductPrice();
				}
			});			
		} catch (DaoException de) {
			throw (new ServiceException(de));
		}
		return(DTOFactory.getUserProductPriceDTOList(userProductPriceList));
	}	
	
	@SuppressWarnings("unchecked")
	@Override
	public List<ShippingTotalDTO> getShippingTotalListByUserId(final Long userId) throws ServiceException {
		List<ShippingTotal> shippingTotalList = new ArrayList<ShippingTotal>();
		try {
			daoManager.setCommitTransaction(true);
			shippingTotalList = (List<ShippingTotal>) daoManager.executeAndHandle(new DaoCommand() {
				@Override
				public Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {
					List<ShippingTotal> shippingTotalListing = new ArrayList<ShippingTotal>();
					Select select = new Select();
					select.setUserId(userId);
					shippingTotalListing = daoManager.getProductDao().getShippingTotalListByUserId(select);
					return shippingTotalListing;
				}
			});			
		} catch (DaoException de) {
			throw (new ServiceException(de));
		}
		return(DTOFactory.getShippingTotalDTOList(shippingTotalList));	
		
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public List<UserProductPriceDTO> getUserProductPriceByUserId(final Long userId) throws ServiceException {
		List<UserProductPrice> userProductPriceList = new ArrayList<UserProductPrice>();
		try {
			daoManager.setCommitTransaction(true);
			userProductPriceList = (List<UserProductPrice>) daoManager.executeAndHandle(new DaoCommand() {
				@Override
				public Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {
					List<UserProductPrice> userProductPriceListing = new ArrayList<UserProductPrice>();
					Select select = new Select();
					select.setUserId(userId);
					userProductPriceListing = daoManager.getProductDao().getUserProductPriceByUserId(select);
					return userProductPriceListing;
				}
			});			
		} catch (DaoException de) {
			throw (new ServiceException(de));
		}
		return(DTOFactory.getUserProductPriceDTOList(userProductPriceList));
	}	
	
	@Override
	public UserProvincePopulationDTO getUserProvincePopulation(final Long userId, final Long provinceId) throws ServiceException {
		UserProvincePopulation userProvincePopulationResult = new UserProvincePopulation();
		try {			
			daoManager.setCommitTransaction(true);
			userProvincePopulationResult = (UserProvincePopulation) daoManager.executeAndHandle(new DaoCommand() {
				@Override
				public Object execute(com.loyauty.dao.core.DaoManager daoManager)
						throws DaoException {
					UserProvincePopulation userProvincePopulation = new UserProvincePopulation();
					Select select = new Select();
					select.setUserId(userId);
					select.setProvinceId(provinceId);
					userProvincePopulation = daoManager.getProductDao().getUserProvincePopulation(select);
					return userProvincePopulation;
				}
			});
		} catch (DaoException de) {
			throw (new ServiceException(de));
		}
		return(DTOFactory.getUserProvincePopulation(userProvincePopulationResult));
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public List<ShippingCityDTO> getShippingCityByIDGreaterThan(final Long id) throws ServiceException {
		List<ShippingCity> shippingCityList = new ArrayList<ShippingCity>();
		try {
			daoManager.setCommitTransaction(true);
			shippingCityList = (List<ShippingCity>) daoManager.executeAndHandle(new DaoCommand() {
				@Override
				public Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {
					return daoManager.getProductDao().getShippingCityByIDGreaterThan(id);
				}
			});
		} catch (DaoException de) {
			throw (new ServiceException(de));
		}
		return(DTOFactory.getShippingCityDTOList(shippingCityList));
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public List<ShippingProvinceDTO> getShippingProvinceByIDGreaterThan(final Long id) throws ServiceException {
		List<ShippingProvince> shippingProvinceList = new ArrayList<ShippingProvince>();
		try {
			daoManager.setCommitTransaction(true);
			shippingProvinceList = (List<ShippingProvince>) daoManager.executeAndHandle(new DaoCommand() {
				@Override
				public Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {
					return daoManager.getProductDao().getShippingProvinceByIDGreaterThan(id);
				}
			});
		} catch (DaoException de) {
			throw (new ServiceException(de));
		}
		return(DTOFactory.getShippingProvinceDTOList(shippingProvinceList));
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public List<ShippingTotalDTO> getShippingTotalByIDGreaterThan(final Long id) throws ServiceException {
		List<ShippingTotal> shippingTotalList = new ArrayList<ShippingTotal>();
		try {
			daoManager.setCommitTransaction(true);
			shippingTotalList = (List<ShippingTotal>) daoManager.executeAndHandle(new DaoCommand() {
				@Override
				public Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {
					return daoManager.getProductDao().getShippingTotalByIDGreaterThan(id);
				}
			});
		} catch (DaoException de) {
			throw (new ServiceException(de));
		}
		return(DTOFactory.getShippingTotalDTOList(shippingTotalList));
	}	
		
	@SuppressWarnings("unchecked")
	@Override
	public List<Long> getAllValidProductIds() throws ServiceException {
		List<Product> productList = new ArrayList<Product>();
		try {
			daoManager.setCommitTransaction(true);
			productList = (List<Product>) daoManager.executeAndHandle(new DaoCommand() {
				@Override
				public Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {
					return daoManager.getProductDao().getAllValidProductIds();
				}
			});
		} catch (DaoException de) {
			throw (new ServiceException(de));
		}
		return(DTOFactory.getProductDTOLightList(productList));	
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public List<ProductDTO> getValidProductsByUserIdAndExcluded(final Long userId) throws ServiceException {
		List<Product> productList = new ArrayList<Product>();
		try {
			daoManager.setCommitTransaction(true);
			productList = (List<Product>) daoManager.executeAndHandle(new DaoCommand() {
				@Override
				public Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {
					List<Product> productListing = new ArrayList<Product>();
					Select select = new Select();
					select.setUserId(userId);
					productListing = daoManager.getProductDao().getValidProductsByUserIdAndExcluded(select);
					return productListing;
				}
			});			
		} catch (DaoException de) {
			throw (new ServiceException(de));
		}
		return(DTOFactory.getProductDTOList(productList));
	}

	@SuppressWarnings("unchecked")
	@Override
	public List<ProductDTO> getProductsClassification(final Long userId) throws ServiceException {
		List<Product> productList = new ArrayList<Product>();
		try {
			daoManager.setCommitTransaction(true);
			productList = (List<Product>) daoManager.executeAndHandle(new DaoCommand() {
				@Override
				public Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {
					List<Product> ProductsClassificationList = new ArrayList<Product>();
					ProductsClassificationList = daoManager.getProductDao().getProductsClassification(userId);
					return ProductsClassificationList;
				}
			});			
		} catch (DaoException de) {
			throw (new ServiceException(de));  
		}
		return(DTOFactory.getProductDTOClassification(productList)); 
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public List<ProductDTO> getValidProductsGreaterThanId(final Long productId) throws ServiceException {
		List<Product> productList = new ArrayList<Product>();
		try {
			daoManager.setCommitTransaction(true);
			productList = (List<Product>) daoManager.executeAndHandle(new DaoCommand() {
				@Override
				public Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {
					List<Product> productListing = new ArrayList<Product>();
					Select select = new Select();
					select.setProductId(productId);
					productListing = daoManager.getProductDao().getValidProductsGreaterThanId(select);
					return productListing;
				}
			});			
		} catch (DaoException de) {
			throw (new ServiceException(de));
		}
		return(DTOFactory.getProductDTOList(productList));
	}

	@SuppressWarnings("unchecked")
	@Override
	public List<ShippingTotalDTO> getShippingTotalListByProductId(final Long productId) throws ServiceException {
		List<ShippingTotal> shippingTotalList = new ArrayList<ShippingTotal>();
		try {
			daoManager.setCommitTransaction(true);
			shippingTotalList = (List<ShippingTotal>) daoManager.executeAndHandle(new DaoCommand() {
				@Override
				public Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {
					Select select = new Select();
					select.setProductId(productId);
					return daoManager.getProductDao().getShippingTotalListByProductId(select);
				}
			});
		} catch (DaoException de) {
			throw (new ServiceException(de));
		}
		return(DTOFactory.getShippingTotalDTOList(shippingTotalList));
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public List<UserProductPriceDTO> getNullsShippingTotalCanadaOnUserProductPrice(final Long productId) throws ServiceException {
		List<UserProductPrice> userProductPriceList = new ArrayList<UserProductPrice>();
		try {
			daoManager.setCommitTransaction(true);
			userProductPriceList = (List<UserProductPrice>) daoManager.executeAndHandle(new DaoCommand() {
				@Override
				public Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {
					List<UserProductPrice> userProductPriceListing = new ArrayList<UserProductPrice>();
					Select select = new Select();
					select.setProductId(productId);
					userProductPriceListing = daoManager.getProductDao().getNullsShippingTotalCanadaOnUserProductPrice(select);
					return userProductPriceListing;
				}
			});			
		} catch (DaoException de) {
			throw (new ServiceException(de));
		}
		return(DTOFactory.getUserProductPriceDTOList(userProductPriceList));	
	}
	
	@Override
	public void updateAmendingProduct(final ProductDTO productDTO) throws ServiceException {
		try {
			daoManager.setCommitTransaction(true);
		    daoManager.executeAndHandle(new DaoCommand() {
				@Override
				public Object execute(com.loyauty.dao.core.DaoManager daoManager)
				throws DaoException {
					Product product = new Product();
					product.setId(productDTO.getId());
					daoManager.getTranslationDao().updateEntry(new TranslationEntry(productDTO.getNameEng()));
					daoManager.getTranslationDao().updateEntry(new TranslationEntry(productDTO.getNameFr()));
					daoManager.getTranslationDao().updateEntry(new TranslationEntry(productDTO.getDescriptionEng()));
					daoManager.getTranslationDao().updateEntry(new TranslationEntry(productDTO.getDescriptionFr()));
					daoManager.getTranslationDao().updateEntry(new TranslationEntry(productDTO.getSpecificationEng()));
					daoManager.getTranslationDao().updateEntry(new TranslationEntry(productDTO.getSpecificationFr()));
					if(productDTO.getOtherEng().getName() != null) {
						daoManager.getTranslationDao().updateEntry(new TranslationEntry(productDTO.getOtherEng()));
					}
					
					if(productDTO.getOtherFr().getName() != null) {
						daoManager.getTranslationDao().updateEntry(new TranslationEntry(productDTO.getOtherFr()));
					}					
					product.setNote(productDTO.getNote());
					daoManager.getProductDao().updateAmendingProduct(product);
					return product;
				}
			});
		} catch (DaoException e) {
			throw (new ServiceException(e));
		}
	}
	
	@Override
	public Boolean existsOnAlterProductXML(final Long productId) throws ServiceException {
		Boolean outcome = false;
		try {
			daoManager.setCommitTransaction(true);
			outcome = (Boolean) daoManager.executeAndHandle(new DaoCommand() {
				@Override
				public Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {
					Select select = new Select();
					select.setProductId(productId);
					return (daoManager.getProductDao().getAlterProductXMLByProductId(select) != null);
				}
			});			
		} catch (DaoException de) {
			throw (new ServiceException(de));
		}
		return outcome;
	}
	
	@Override
	public Boolean existsOnAlterUserProductXML(final Long productId, final Long userId) throws ServiceException {
		Boolean outcome = false;
		try {
			daoManager.setCommitTransaction(true);
			outcome = (Boolean) daoManager.executeAndHandle(new DaoCommand() {
				@Override
				public Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {
					Select select = new Select();
					select.setUserId(userId);
					select.setProductId(productId);
					return (daoManager.getProductDao().getAlterUserProductXMLByProductIdAndUserId(select) != null);
				}
			});			
		} catch (DaoException de) {
			throw (new ServiceException(de));
		}
		return outcome;
	}
	
	@Override
	public void updateAlterUserProductXML(final AlterUserProductXMLDTO alterUserProductXMLDTO) throws ServiceException {
		try {
			daoManager.setCommitTransaction(true);
			daoManager.executeAndHandle(new DaoCommand() {
					@Override
					public Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {	
						AlterUserProductXML alterUserProductXML = new AlterUserProductXML();
						alterUserProductXML.setUserId(alterUserProductXMLDTO.getUserId());
						alterUserProductXML.setProductId(alterUserProductXMLDTO.getProductId());
						alterUserProductXML.setPriceDiscount(alterUserProductXMLDTO.getPriceDiscount());
						alterUserProductXML.setExcluded(alterUserProductXMLDTO.getExcluded());
						alterUserProductXML.setShipping(alterUserProductXMLDTO.getShipping());
						alterUserProductXML.setUserProductToBeExecuted(alterUserProductXMLDTO.getUserProductToBeExecuted());
						alterUserProductXML.setExcludedMeaning(alterUserProductXMLDTO.getExcludedMeaning());
						alterUserProductXML.setPrice(alterUserProductXMLDTO.getPrice());
						daoManager.getProductDao().updateAlterUserProductXML(alterUserProductXML);
						return null;
					}
			});
		} catch (DaoException de) {
			throw (new ServiceException(de));
		}
	}
	
	@Override
	public void updateAlterProductXML(final AlterProductXMLDTO alterProductXMLDTO) throws ServiceException {
		try {
			daoManager.setCommitTransaction(true);
			daoManager.executeAndHandle(new DaoCommand() {
					@Override
					public Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {	
						AlterProductXML alterProductXML = new AlterProductXML();
						alterProductXML.setProductId(alterProductXMLDTO.getProductId());
						alterProductXML.setBrandId(alterProductXMLDTO.getBrandId());
						alterProductXML.setCategoryId(alterProductXMLDTO.getCategoryId());
						alterProductXML.setTypeId(alterProductXMLDTO.getTypeId());
						alterProductXML.setImageId(alterProductXMLDTO.getImageId());
						alterProductXML.setStatusId(alterProductXMLDTO.getStatusId());
						alterProductXML.setNameEn(alterProductXMLDTO.getNameEn());
						alterProductXML.setNameFr(alterProductXMLDTO.getNameFr());
						alterProductXML.setDescriptionEn(alterProductXMLDTO.getDescriptionEn());
						alterProductXML.setDescriptionFr(alterProductXMLDTO.getDescriptionFr());
						alterProductXML.setSpecificationEn(alterProductXMLDTO.getSpecificationEn());
						alterProductXML.setSpecificationFr(alterProductXMLDTO.getSpecificationFr());
						alterProductXML.setOtherEn(alterProductXMLDTO.getOtherEn());
						alterProductXML.setOtherFr(alterProductXMLDTO.getOtherFr());
						alterProductXML.setWarrantyEn(alterProductXMLDTO.getWarrantyEn());
						alterProductXML.setWarrantyFr(alterProductXMLDTO.getWarrantyFr());
						alterProductXML.setDimensions(alterProductXMLDTO.getDimensions());
						alterProductXML.setWeight(alterProductXMLDTO.getWeight());
						alterProductXML.setModelNumber(alterProductXMLDTO.getModelNumber());
						alterProductXML.setMsrp(alterProductXMLDTO.getMsrp());
						alterProductXML.setShipping(alterProductXMLDTO.getShipping());
						alterProductXML.setShipment(alterProductXMLDTO.getShipment());
						alterProductXML.setProductToBeExecuted(alterProductXMLDTO.getProductToBeExecuted());
						daoManager.getProductDao().updateAlterProductXML(alterProductXML);
						return null;
					}
			});
		} catch (DaoException de) {
			throw (new ServiceException(de));
		}		
	}	
	
	@Override
	public Long createAlterUserProductXML(final AlterUserProductXMLDTO alterUserProductXMLDTO) throws ServiceException {
		AlterUserProductXML alterUserProductXMLResult = new AlterUserProductXML();
		try {
			daoManager.setCommitTransaction(true);
			alterUserProductXMLResult = (AlterUserProductXML) daoManager.executeAndHandle(new DaoCommand() {
				@Override
				public Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {					
					AlterUserProductXML alterUserProductXML = new AlterUserProductXML();
					alterUserProductXML.setUserId(alterUserProductXMLDTO.getUserId());
					alterUserProductXML.setProductId(alterUserProductXMLDTO.getProductId());
					alterUserProductXML.setPriceDiscount(alterUserProductXMLDTO.getPriceDiscount());
					alterUserProductXML.setExcluded(alterUserProductXMLDTO.getExcluded());
					alterUserProductXML.setShipping(alterUserProductXMLDTO.getShipping());
					alterUserProductXML.setUserProductToBeExecuted(alterUserProductXMLDTO.getUserProductToBeExecuted());
					alterUserProductXML.setExcludedMeaning(alterUserProductXMLDTO.getExcludedMeaning());
					alterUserProductXML.setPrice(alterUserProductXMLDTO.getPrice());
					daoManager.getProductDao().insertAlterUserProductXML(alterUserProductXML);
					return alterUserProductXML;
				}
			});
			return alterUserProductXMLResult.getId();
		} catch (DaoException de) {
			throw (new ServiceException(de));
		}
	}

	@Override
	public Long createAlterProductXML(final AlterProductXMLDTO alterProductXMLDTO) throws ServiceException {
		AlterProductXML alterProductXMLResult = new AlterProductXML();
		try {
			daoManager.setCommitTransaction(true);
			alterProductXMLResult = (AlterProductXML) daoManager.executeAndHandle(new DaoCommand() {
				@Override
				public Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {					
					AlterProductXML alterProductXML = new AlterProductXML();
					alterProductXML.setProductId(alterProductXMLDTO.getProductId());
					alterProductXML.setBrandId(alterProductXMLDTO.getBrandId());
					alterProductXML.setCategoryId(alterProductXMLDTO.getCategoryId());
					alterProductXML.setTypeId(alterProductXMLDTO.getTypeId());
					alterProductXML.setImageId(alterProductXMLDTO.getImageId());
					alterProductXML.setStatusId(alterProductXMLDTO.getStatusId());
					alterProductXML.setNameEn(alterProductXMLDTO.getNameEn());
					alterProductXML.setNameFr(alterProductXMLDTO.getNameFr());
					alterProductXML.setDescriptionEn(alterProductXMLDTO.getDescriptionEn());
					alterProductXML.setDescriptionFr(alterProductXMLDTO.getDescriptionFr());
					alterProductXML.setSpecificationEn(alterProductXMLDTO.getSpecificationEn());
					alterProductXML.setSpecificationFr(alterProductXMLDTO.getSpecificationFr());
					alterProductXML.setOtherEn(alterProductXMLDTO.getOtherEn());
					alterProductXML.setOtherFr(alterProductXMLDTO.getOtherFr());
					alterProductXML.setWarrantyEn(alterProductXMLDTO.getWarrantyEn());
					alterProductXML.setWarrantyFr(alterProductXMLDTO.getWarrantyFr());
					alterProductXML.setDimensions(alterProductXMLDTO.getDimensions());
					alterProductXML.setWeight(alterProductXMLDTO.getWeight());
					alterProductXML.setModelNumber(alterProductXMLDTO.getModelNumber());
					alterProductXML.setMsrp(alterProductXMLDTO.getMsrp());
					alterProductXML.setShipping(alterProductXMLDTO.getShipping());
					alterProductXML.setShipment(alterProductXMLDTO.getShipment());
					alterProductXML.setProductToBeExecuted(alterProductXMLDTO.getProductToBeExecuted());
					daoManager.getProductDao().insertAlterProductXML(alterProductXML);
					return alterProductXML;
				}
			});
			return alterProductXMLResult.getId();
		} catch (DaoException de) {
			throw (new ServiceException(de));
		}
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public List<ProductDTO> getProductsAsOfConsideredForXML() throws ServiceException {
		List<Product> productList = new ArrayList<Product>();
		try {
			daoManager.setCommitTransaction(true);
			productList = (List<Product>) daoManager.executeAndHandle(new DaoCommand() {
				@Override
				public Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {
					return daoManager.getProductDao().getProductsAsOfConsideredForXML();
				}
			});
		} catch (DaoException de) {
			throw (new ServiceException(de));
		}
		return(DTOFactory.getProductDTOList(productList));
	}
		
	@Override
	public AlterUserProductXMLDTO getAlterUserProductXML(final Long userId, final Long productId) throws ServiceException {
		AlterUserProductXML alterUserProductXMLResult = new AlterUserProductXML();
		try {			
			daoManager.setCommitTransaction(true);
			alterUserProductXMLResult = (AlterUserProductXML) daoManager.executeAndHandle(new DaoCommand() {
				@Override
				public Object execute(com.loyauty.dao.core.DaoManager daoManager)
						throws DaoException {
					Select select = new Select();
					select.setUserId(userId);
					select.setProductId(productId);
					return daoManager.getProductDao().getAlterUserProductXMLByProductIdAndUserId(select);
				}
			});
		} catch (DaoException de) {
			throw (new ServiceException(de));
		}
		return(DTOFactory.getAlterUserProductXML(alterUserProductXMLResult));
	}
	
	@Override
	public AlterProductXMLDTO getAlterProductXML(final Long productId) throws ServiceException {
		AlterProductXML alterProductXMLResult = new AlterProductXML();
		try {			
			daoManager.setCommitTransaction(true);
			alterProductXMLResult = (AlterProductXML) daoManager.executeAndHandle(new DaoCommand() {
				@Override
				public Object execute(com.loyauty.dao.core.DaoManager daoManager)
						throws DaoException {
					Select select = new Select();
					select.setProductId(productId);
					return daoManager.getProductDao().getAlterProductXMLByProductId(select);
				}
			});
		} catch (DaoException de) {
			throw (new ServiceException(de));
		}
		return(DTOFactory.getAlterProductXML(alterProductXMLResult));
	}
	
	@Override
	public void closeProductConsideredForXML(final Long productId) throws ServiceException {
		try {
			daoManager.setCommitTransaction(true);
			daoManager.executeAndHandle(new DaoCommand() {
					@Override
					public Object execute(com.loyauty.dao.core.DaoManager daoManager) 
						throws DaoException {
						Select select = new Select();
						select.setProductId(productId);
						daoManager.getProductDao().closeProductConsideredForXML(select);
						return null;
					}
			});
		} catch (DaoException de) {
			throw (new ServiceException(de));
		}
	}

	@Override
	public void closeAlterProductXML(final Long productId) throws ServiceException {
		try {
			daoManager.setCommitTransaction(true);
			daoManager.executeAndHandle(new DaoCommand() {
					@Override
					public Object execute(com.loyauty.dao.core.DaoManager daoManager) 
						throws DaoException {
						Select select = new Select();
						select.setProductId(productId);
						daoManager.getProductDao().closeAlterProductXML(select);
						return null;
					}
			});
		} catch (DaoException de) {
			throw (new ServiceException(de));
		}
	}

	@Override
	public void closeAlterUserProductXML(final Long userId, final Long productId) throws ServiceException {
		try {
			daoManager.setCommitTransaction(true);
			daoManager.executeAndHandle(new DaoCommand() {
					@Override
					public Object execute(com.loyauty.dao.core.DaoManager daoManager) 
						throws DaoException {
						Select select = new Select();
						select.setUserId(userId);
						select.setProductId(productId);
						daoManager.getProductDao().closeAlterUserProductXML(select);
						return null;
					}
			});
		} catch (DaoException de) {
			throw (new ServiceException(de));
		}
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public List<ProductDTO> getWereWgtDimChangedFromProduct() throws ServiceException {
		List<Product> productList = new ArrayList<Product>();
		try {
			daoManager.setCommitTransaction(true);
			productList = (List<Product>) daoManager.executeAndHandle(new DaoCommand() {
				@Override
				public Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {
					return daoManager.getProductDao().getWereWgtDimChangedFromProduct();
				}
			});
		} catch (DaoException de) {
			throw (new ServiceException(de));
		}
		return(DTOFactory.getProductDTOList(productList));
	}
	
	@Override
	public void closeProductWereWgtDimChanged(final Long productId) throws ServiceException {
		try {
			daoManager.setCommitTransaction(true);
			daoManager.executeAndHandle(new DaoCommand() {
				@Override
				public Object execute(com.loyauty.dao.core.DaoManager daoManager) 
				throws DaoException {
					Select select = new Select();
					select.setProductId(productId);
					daoManager.getProductDao().closeProductWereWgtDimChanged(select);
					return null;
				}
			});
		} catch (DaoException de) {
			throw (new ServiceException(de));
		}
	}
	
	@Override
	public Boolean existsShippingCity(final Long productId, final Long cityId) throws ServiceException {
		return (getShippingCity(productId, cityId) != null);
	}
	
	@Override
	public ShippingProvinceDTO getShippingProvince(final Long productId, final Long provinceId) throws ServiceException {
		ShippingProvince shippingProvinceResult = new ShippingProvince();
		try {
			daoManager.setCommitTransaction(true);
			shippingProvinceResult = (ShippingProvince) daoManager.executeAndHandle(new DaoCommand() {
				@Override
				public Object execute(com.loyauty.dao.core.DaoManager daoManager)
						throws DaoException {
					Select select = new Select();
					select.setProductId(productId);
					select.setProvinceId(provinceId);
					return daoManager.getProductDao().getShippingProvince(select);
				}
			});
		} catch (DaoException de) {
			throw (new ServiceException(de));
		}
		return(DTOFactory.getShippingProvinceDTO(shippingProvinceResult));
	}
	
	@Override
	public Boolean existsShippingProvince(final Long productId, final Long provinceId) throws ServiceException {
		ShippingProvinceDTO shippingProvinceDTO = getShippingProvince(productId, provinceId);
		return (shippingProvinceDTO != null);
	}

	@Override
	public ShippingTotalDTO getShippingTotal(final Long productId, final Long provinceId, final Long userId) throws ServiceException {
		ShippingTotal shippingTotalResult = new ShippingTotal();
		try {			
			daoManager.setCommitTransaction(true);
			shippingTotalResult = (ShippingTotal) daoManager.executeAndHandle(new DaoCommand() {
				@Override
				public Object execute(com.loyauty.dao.core.DaoManager daoManager)
						throws DaoException {
					Select select = new Select();
					select.setProductId(productId);
					select.setProvinceId(provinceId);
					select.setUserId(userId);
					return daoManager.getProductDao().getShippingTotal(select);
				}
			});
		} catch (DaoException de) {
			throw (new ServiceException(de));
		}
		return(DTOFactory.getShippingTotalDTO(shippingTotalResult));
	}
	
	@Override
	public Boolean existsShippingTotal(final Long productId, final Long provinceId, final Long userId) throws ServiceException {
		ShippingTotalDTO shippingTotalDTO = getShippingTotal(productId, provinceId, userId);
		return (shippingTotalDTO != null);
	}
	
	@Override
	public void saveOldImageIdBeforeUpdate(final Long productId) throws ServiceException {
		try {
			daoManager.setCommitTransaction(true);
			daoManager.executeAndHandle(new DaoCommand() {
				@Override
				public Object execute(com.loyauty.dao.core.DaoManager daoManager) 
				throws DaoException {
					Select select = new Select();
					select.setProductId(productId);
					daoManager.getProductDao().saveOldImageIdBeforeUpdate(select);
					return null;
				}
			});
		} catch (DaoException de) {
			throw (new ServiceException(de));
		}
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public List<ProductDTO> getProductBetween(final Long lower, final Long upper) throws ServiceException {
		List<Product> productList = new ArrayList<Product>();
		try {
			daoManager.setCommitTransaction(true);
			productList = (List<Product>) daoManager.executeAndHandle(new DaoCommand() {
				@Override
				public Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {
					List<Product> productListing = new ArrayList<Product>();					
					Select select = new Select();
					select.setLower(lower);
					select.setUpper(upper);				
					productListing = daoManager.getProductDao().getProductBetween(select);
					return productListing;
				}
			});
		} catch (DaoException de) {
			throw (new ServiceException(de));
		}
		return(DTOFactory.getProductDTOList(productList));
	}
	
	@SuppressWarnings("unchecked")	
	@Override	
	public List<Long> getShippingRepeats(final ProductDTO productDTO) throws ServiceException {
		List<Product> productList = new ArrayList<Product>();
		try {
			daoManager.setCommitTransaction(true);
			productList = (List<Product>) daoManager.executeAndHandle(new DaoCommand() {
				@Override
				public Object execute(com.loyauty.dao.core.DaoManager daoManager) 
					throws DaoException {
						Product product = new Product();
						product.setId(productDTO.getId());
						product.setWeight(productDTO.getWeight());
						product.setLength(productDTO.getLarge());
						product.setWidth(productDTO.getWidth());
						product.setHeight(productDTO.getHigh());
						return daoManager.getProductDao().getShippingRepeats(product);
				}
			});
		} catch (DaoException de) {
			throw (new ServiceException(de));
		}
		return (DTOFactory.getProductDTOLightList(productList));			
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public List<Long> getWereWgtDimChanged() throws ServiceException {
		List<Product> productList = new ArrayList<Product>();
		try {
			daoManager.setCommitTransaction(true);
			productList = (List<Product>) daoManager.executeAndHandle(new DaoCommand() {
				@Override
				public Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {
					return daoManager.getProductDao().getWereWgtDimChanged();
				}
			});
		} catch (DaoException de) {
			throw (new ServiceException(de));
		}
		return(DTOFactory.getProductDTOLightList(productList));	
	}

	@Override
	public boolean excludeProductsByBrandAndUser(final Long brandId, final Long userId,final Boolean exclude)
				   throws ServiceException {
		boolean result=false;		
		try{
			daoManager.setCommitTransaction(true);
			result = (Boolean) daoManager.executeAndHandle(new DaoCommand() {
				@Override
				public Object execute(DaoManager daoManager) throws DaoException {			
					return daoManager.getProductDao().excludeProductsByBrandAndUser(brandId, userId,exclude);
				}
			});
		}catch (DaoException de) {
			try {
				throw new ServiceException(de);
			} catch (ServiceException e) {
				e.printStackTrace();
			}
		}
		return result;
	}

	@Override
	public boolean isUserBrandExcluded(final Long brandId, final Long userId)throws ServiceException {
		
		Boolean result=false;		
		try{
			daoManager.setCommitTransaction(true);
			result = (Boolean) daoManager.executeAndHandle(new DaoCommand() {
				@Override
				public Object execute(DaoManager daoManager) throws DaoException {			
					return daoManager.getProductDao().isUserBrandExcluded(brandId, userId);
				}
			});
		}catch (DaoException de) {
			try {
				throw new ServiceException(de);
			} catch (ServiceException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		return result;
	}
	
	@Override
	public boolean generatProfitByBrand(final Long brandId, final Long userId, final String percentProfit)
			throws ServiceException {
		boolean result=false;		
		try{
			daoManager.setCommitTransaction(true);
			result = (Boolean) daoManager.executeAndHandle(new DaoCommand() {
				@Override
				public Object execute(DaoManager daoManager) throws DaoException {			
					return daoManager.getProductDao().generatProfitByBrand(brandId, userId, percentProfit);
				}
			});
		}catch (DaoException de) {
			try {
				throw new ServiceException(de);
			} catch (ServiceException e) {
				e.printStackTrace();
			}
		}
		return result;
	}
	
	@Override
	public boolean generatProfitByCategory(final Long categoryId, final Long userId, final String percentProfit)
			throws ServiceException {
		boolean result=false;		
		try{
			daoManager.setCommitTransaction(true);
			result = (Boolean) daoManager.executeAndHandle(new DaoCommand() {
				@Override
				public Object execute(DaoManager daoManager) throws DaoException {			
					return daoManager.getProductDao().generatProfitByCategory(categoryId, userId,percentProfit);
				}
			});
		}catch (DaoException de) {
			try {
				throw new ServiceException(de);
			} catch (ServiceException e) {
				e.printStackTrace();
			}
		}
		return result;
	}
	
	@Override
	public Long nbProductActiveByBrand(final Long brandId, final Long userId)
			throws ServiceException {
		Long result=1L;		
		try{
			daoManager.setCommitTransaction(true);
			result = (Long) daoManager.executeAndHandle(new DaoCommand() {
				@Override
				public Object execute(DaoManager daoManager) throws DaoException {			
					return daoManager.getProductDao().nbProductActiveByBrand(brandId, userId);
				}
			});
		}catch (DaoException de) {
			try {
				throw new ServiceException(de);
			} catch (ServiceException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		return result;
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public List<ProductDTO> getAllProdcutAnyStatus() throws ServiceException{
		
		List <Product> productList = new ArrayList<Product>();
		
		try {
			daoManager.setCommitTransaction(true);
			productList = (List <Product>) daoManager.executeAndHandle(new DaoCommand() {
						@Override
						public Object execute(com.loyauty.dao.core.DaoManager daoManager)
								throws DaoException {
							return daoManager.getProductDao().getAllProdcutAnyStatus();
						}
					});
		} catch (DaoException de) {
			throw (new ServiceException(de));
		}
		return(DTOFactory.getProductDTOList(productList));
	}
	
	@Override
	public void transferToUser(final Long from, final Long to) throws ServiceException {	
		try {
			daoManager.setCommitTransaction(true);
			daoManager.executeAndHandle(new DaoCommand() {
					@Override
					public Object execute(com.loyauty.dao.core.DaoManager daoManager)
							throws DaoException {
						
						Select selectFrom = new Select();
						selectFrom.setFrom(from);
						selectFrom.setTo(to);
						selectFrom.setUserId(from);					
						Select selectToUserProvincePopulation = new Select();
						selectToUserProvincePopulation.setFrom(from);
						selectToUserProvincePopulation.setTo(to);
						selectToUserProvincePopulation.setUserId(to);				
						List<UserProvincePopulation> userProvincePopulationListFrom = daoManager.getProductDao().getUserProvincePopulationByUserId(selectFrom);
						UserProvincePopulation userProvincePopulationTo = null;
						if (userProvincePopulationListFrom != null && userProvincePopulationListFrom.size() > 0) {
							for (UserProvincePopulation userProvincePopulationFrom : userProvincePopulationListFrom) { 
								if (userProvincePopulationFrom != null) {									
									selectToUserProvincePopulation.setProvinceId(userProvincePopulationFrom.getProvinceId());									
									userProvincePopulationTo = daoManager.getProductDao().getUserProvincePopulation(selectToUserProvincePopulation);									
									userProvincePopulationFrom.setUserId(to);							
									if (userProvincePopulationTo != null) {
										userProvincePopulationFrom.setId(userProvincePopulationTo.getId());
										daoManager.getProductDao().updateUserProvincePopulation(userProvincePopulationFrom);
									} else {
										daoManager.getProductDao().insertUserProvincePopulation(userProvincePopulationFrom);																			
									}
								}
							}
						}
						userProvincePopulationListFrom = null;
						userProvincePopulationTo = null;												
						Select selectToShippingTotal = new Select();
						selectToShippingTotal.setFrom(from);
						selectToShippingTotal.setTo(to);
						selectToShippingTotal.setUserId(to);						
						List<ShippingTotal> shippingTotalListFrom = daoManager.getProductDao().getShippingTotalListByUserId(selectFrom);						
						ShippingTotal shippingTotalTo = null;						
						if (shippingTotalListFrom != null && shippingTotalListFrom.size() > 0) {
							for (ShippingTotal shippingTotalFrom : shippingTotalListFrom) {
								if (shippingTotalFrom != null) {								
									selectToShippingTotal.setProductId(shippingTotalFrom.getProductId());
									selectToShippingTotal.setProvinceId(shippingTotalFrom.getProvinceId());									
									shippingTotalTo = daoManager.getProductDao().getShippingTotal(selectToShippingTotal);
									shippingTotalFrom.setUserId(to);
									if (shippingTotalTo != null) {
										shippingTotalFrom.setId(shippingTotalTo.getId());
										daoManager.getProductDao().updateShippingTotal(shippingTotalFrom);
									} else {
										daoManager.getProductDao().insertShippingTotal(shippingTotalFrom);
									}
								}
							}
						}
						shippingTotalListFrom = null;
						shippingTotalTo = null;
						Select selectToUserProductPrice = new Select();
						selectToUserProductPrice.setFrom(from);
						selectToUserProductPrice.setTo(to);
						selectToUserProductPrice.setUserId(to);			
						List<UserProductPrice> userProductPriceListFrom = daoManager.getProductDao().getUserProductPriceByUserId(selectFrom);
						UserProductPrice userProductPriceTo = null;						
						if (userProductPriceListFrom != null && userProductPriceListFrom.size() > 0) {
							for (UserProductPrice userProductPriceFrom : userProductPriceListFrom) { 
								if (userProductPriceFrom != null) {									
									selectToUserProductPrice.setProductId(userProductPriceFrom.getProductId());
									userProductPriceTo = daoManager.getProductDao().getUserProductPrice(selectToUserProductPrice);
									userProductPriceFrom.setUserId(to);
									if (userProductPriceTo != null) {
										userProductPriceFrom.setId(userProductPriceTo.getId());
										daoManager.getProductDao().updateUserProductPrice(userProductPriceFrom);
									} else {
										daoManager.getProductDao().insertUserProductPriceShipping(userProductPriceFrom);
									}
								}
							}
						}
						userProductPriceListFrom = null;
						userProductPriceTo = null;
						selectFrom = null;
						selectToUserProvincePopulation = null;
						selectToShippingTotal = null;
						selectToUserProductPrice = null;						
						return null;
					}
			});
		} catch (DaoException de) {
			throw (new ServiceException(de));
		}		
	}
/*
	@Override
	public void transferToUserByCreationDate(final Long from, final Long to, final Date updateDate) throws ServiceException {
		try {
			daoManager.setCommitTransaction(true);
			daoManager.executeAndHandle(new DaoCommand() {
					@Override
					public Object execute(com.loyauty.dao.core.DaoManager daoManager)
							throws DaoException {
						
						Select selectFrom = new Select();
						selectFrom.setFrom(from);
						selectFrom.setTo(to);
						selectFrom.setUserId(from);
						selectFrom.setUpdateDate(updateDate);
						
						Select selectToShippingTotal = new Select();
						selectToShippingTotal.setFrom(from);
						selectToShippingTotal.setTo(to);
						selectToShippingTotal.setUserId(to);
						List<ShippingTotal> shippingTotalListFrom = daoManager.getProductDao().getShippingTotalListByUserId(selectFrom);					
						ShippingTotal shippingTotalTo = null;						
						if (shippingTotalListFrom != null && shippingTotalListFrom.size() > 0) {
							for (ShippingTotal shippingTotalFrom : shippingTotalListFrom) {
								if (shippingTotalFrom != null) {								
									selectToShippingTotal.setProductId(shippingTotalFrom.getProductId());
									selectToShippingTotal.setProvinceId(shippingTotalFrom.getProvinceId());									
									shippingTotalTo = daoManager.getProductDao().getShippingTotal(selectToShippingTotal);
									shippingTotalFrom.setUserId(to);
									if (shippingTotalTo != null) {
										shippingTotalFrom.setId(shippingTotalTo.getId());
										daoManager.getProductDao().updateShippingTotal(shippingTotalFrom);
									} else {
										daoManager.getProductDao().insertShippingTotal(shippingTotalFrom);
									}
								}
							}
						}
						
						shippingTotalListFrom = null;
						shippingTotalTo = null;
						Select selectToUserProductPrice = new Select();
						selectToUserProductPrice.setFrom(from);
						selectToUserProductPrice.setTo(to);
						selectToUserProductPrice.setUserId(to);
						List<UserProductPrice> userProductPriceListFrom = daoManager.getProductDao().getUserProductPriceByUserId(selectFrom);
						UserProductPrice userProductPriceTo = null;						
						if (userProductPriceListFrom != null && userProductPriceListFrom.size() > 0) {
							for (UserProductPrice userProductPriceFrom : userProductPriceListFrom) { 
								if (userProductPriceFrom != null) {									
									selectToUserProductPrice.setProductId(userProductPriceFrom.getProductId());
									userProductPriceTo = daoManager.getProductDao().getUserProductPrice(selectToUserProductPrice);
									userProductPriceFrom.setUserId(to);
									if (userProductPriceTo != null) {
										userProductPriceFrom.setId(userProductPriceTo.getId());
										daoManager.getProductDao().updateUserProductPrice(userProductPriceFrom);
									} else {
										daoManager.getProductDao().insertUserProductPriceShipping(userProductPriceFrom);
									}
								}
							}
						}
						
						userProductPriceListFrom = null;
						userProductPriceTo = null;
						selectFrom = null;
						selectToShippingTotal = null;
						selectToUserProductPrice = null;						
						return null;
					}
			});
		} catch (DaoException de) {
			throw (new ServiceException(de));
		}
	}
	
	*/

	@Override
	public void transferToUserByCreationDate(final Long from, final Long to,final Long managerId,final Date updateDate) throws ServiceException {

		boolean result=false;
		try{
			daoManager.setCommitTransaction(true);
			result = (Boolean) daoManager.executeAndHandle(new DaoCommand() {
				@Override
				public Object execute(DaoManager daoManager) throws DaoException {			
					return daoManager.getProductDao().transferToUserByCreationDate(from,to,managerId,updateDate);
				}
			});
		}catch (DaoException de) {
			try {
				throw new ServiceException(de);
			} catch (ServiceException e) {
				e.printStackTrace();
			}
		}

	}
	

	@Override
	public void transferSQLtheUserToNewTemplate(final Long from, final Long to) throws ServiceException {
		try {
			daoManager.setCommitTransaction(true);
			daoManager.executeAndHandle(new DaoCommand() {
					@Override
					public Object execute(com.loyauty.dao.core.DaoManager daoManager)
							throws DaoException {
						Select select = new Select();
						select.setFrom(from);
						select.setTo(to);
						daoManager.getProductDao().transferUserOnProfile(select);
						daoManager.getProductDao().transferUserOnUserProvincePopulation(select);
						daoManager.getProductDao().transferUserOnShippingTotal(select);
						daoManager.getProductDao().transferUserOnUserProductPrice(select);
						return null;
					}
			});
		} catch (DaoException de) {
			throw (new ServiceException(de));
		}
	}


	@Override
	public Long isGroupProductID(final Long productId) throws ServiceException {
		Long count= 0L; 
		try{
			daoManager.setCommitTransaction(true);
			count = (Long) daoManager.executeAndHandle(new DaoCommand() {
				@Override
				public Object execute(DaoManager daoManager) throws DaoException {			
					return daoManager.getProductDao().isGroupProductID(productId);
				}
			});
		}catch (DaoException de) {
			try {
				throw new ServiceException(de);
			} catch (ServiceException e) {
				e.printStackTrace();
			}
		}
		return count;
	}		
	
	/**----------------------------------------------------------
	 *CREATE XLS FILE FROM THE LIST PRODUCT CLASSIFICATION*
	  -----------------------------------------------------------*/
	@Override
	public void generateAdminXLS(List<ProductDTO> ProductListDTO,String productAdminDataFolder){
		final String sheetName = "Sheet1";
		final int ROW_TO_BEGIN=1;
		//COLUMNS NUMBER
		final int COL_PRODUCT_ID=1;
		final int COL_LS_PRODUCT_ID=2;
		final int COL_CATEGORY_NAME=3;
		final int COL_BRAND_NAME=4;
		final int COL_MSRP=5;
		final int COL_OUT_COST=6;
		final int COL_PRICE=7;
		final int COL_PROFIT=8;
		final int COL_DISCOUNT=9;
		final int COL_QT_3MONTHS=10;
		final int COL_CLASSIFICATION=11;
		final int COL_TITLE=12;
		//COLUMNS Data
		Long PRODUCT_ID=null;
		String LS_PRODUCT_ID;
		String CATEGORY_NAME;
		String BRAND_NAME;
		String MSRP;
		String OUT_COST;
		String PRICE;
		Double PROFIT;
		Double DISCOUNT;
		Double QT_3MONTHS;
		Double CLASSIFICATION;
		String TITLE="";
		int row = 0;
		try {
			File OldProductClassificat=new File(productAdminDataFolder+"productClassificat.xls");
			if(OldProductClassificat.exists())OldProductClassificat.delete();
			Workbook existingWorkbook = Workbook.getWorkbook(new File(productAdminDataFolder+"productClassificatTemplate.xls"));
			WritableWorkbook workbookCopy = Workbook.createWorkbook(new File(productAdminDataFolder+"productClassificat.xls"), existingWorkbook);
			WritableSheet sheetToEdit = workbookCopy.getSheet(sheetName);

			int heightInPoints = 27*27;

			// Create cell font and format
			WritableFont cellFont = new WritableFont(WritableFont.TIMES, 12);
			cellFont.setColour(Colour.BLACK);

			WritableCellFormat cellFormatNormal = new WritableCellFormat(cellFont);
			//cellFormatOrange.setBackground(Colour.ORANGE);
			cellFormatNormal.setBackground(Colour.LIGHT_TURQUOISE);
			cellFormatNormal.setVerticalAlignment(VerticalAlignment.CENTRE);
			cellFormatNormal.setAlignment(Alignment.CENTRE);
			cellFormatNormal.setWrap(true);
			cellFormatNormal.setBorder(Border.ALL, BorderLineStyle.THIN);

			//WritableFont cellFont = new WritableFont(WritableFont.TIMES, 12);
			cellFont.setColour(Colour.BLACK);
			WritableCellFormat cellFormatWhite = new WritableCellFormat(cellFont);
			cellFormatWhite.setBackground(Colour.WHITE);
			cellFormatWhite.setVerticalAlignment(VerticalAlignment.CENTRE);
			cellFormatWhite.setAlignment(Alignment.CENTRE);
			cellFormatWhite.setWrap(true);
			cellFormatWhite.setBorder(Border.ALL, BorderLineStyle.THIN);
			WritableCellFormat cellFormat=null;
			
			//CellS
			WritableCell cellPRODUCT_ID=null;
			WritableCell cellLS_PRODUCT_ID=null;
			WritableCell cellCATEGORY_NAME=null;
			WritableCell cellBRAND_NAME=null;
			WritableCell cellMSRP=null;
			WritableCell cellOUT_COST=null;
			WritableCell cellPRICE=null;
			WritableCell cellPROFIT=null;
			WritableCell cellDISCOUNT=null;
			WritableCell cellCLASSIFICATION=null;
			WritableCell cellTITLE=null;
			WritableCell cellQT_3MONTHS=null;
			
			//LABELS
			Label labelPRODUCT_ID=null;
			Label labelLS_PRODUCT_ID=null;
			Label labelCATEGORY_NAME=null;
			Label labelBRAND_NAME=null;
			Label labelMSRP=null;
			Label labelOUT_COST=null;
			Label labelPRICE=null;
			Label labelPROFIT=null;
			Label labelDISCOUNT=null;
			Label labelQT_3MONTHS=null;
			Label labelCLASSIFICATION=null;
			Label labelTITLE=null;

			//START FROM ROW_TO_BEGIN
			row = ROW_TO_BEGIN;
			int orderIndex=0;
			int pair=0;
			for (ProductDTO productDTO : ProductListDTO) {

				orderIndex++;
				pair=orderIndex%2;
				switch (pair) {
				case 0:
					cellFormat=cellFormatWhite;
					break;
				case 1:
					cellFormat=cellFormatNormal;
					break;
				}

				PRODUCT_ID=null;
				LS_PRODUCT_ID="";
				CATEGORY_NAME="";
				BRAND_NAME="";
				MSRP="";
				OUT_COST="";
				PRICE="";
				PROFIT=0D;
				DISCOUNT=0D;
				QT_3MONTHS=0D;
				CLASSIFICATION=0D;
				TITLE="";

				//1:  COL_PRODUCT_ID
				PRODUCT_ID = productDTO.getId();
				labelPRODUCT_ID = new Label(COL_PRODUCT_ID-1, row, PRODUCT_ID.toString(),cellFormat);
				cellPRODUCT_ID = (WritableCell) labelPRODUCT_ID;
				sheetToEdit.addCell(cellPRODUCT_ID);
				
				//2:  COL_LS_PRODUCT_ID
				if (productDTO.getLoyaltyProductId() != null)LS_PRODUCT_ID = productDTO.getLoyaltyProductId();
				labelLS_PRODUCT_ID = new Label(COL_LS_PRODUCT_ID-1, row, LS_PRODUCT_ID,cellFormat);
				cellLS_PRODUCT_ID = (WritableCell) labelLS_PRODUCT_ID;
				sheetToEdit.addCell(cellLS_PRODUCT_ID);
				
				//3:  COL_CATEGORY_NAME
				if (productDTO.getCategory()!=null && productDTO.getCategory().getName() != null)CATEGORY_NAME = productDTO.getCategory().getName();
				labelCATEGORY_NAME = new Label(COL_CATEGORY_NAME-1, row, CATEGORY_NAME,cellFormat);
				cellCATEGORY_NAME = (WritableCell) labelCATEGORY_NAME;
				sheetToEdit.addCell(cellCATEGORY_NAME);

				//4:  COL_BRAND_NAME
				if (productDTO.getBrand()!=null && productDTO.getBrand().getName() != null)BRAND_NAME = productDTO.getBrand().getName();
				labelBRAND_NAME = new Label(COL_BRAND_NAME-1, row, BRAND_NAME,cellFormat);
				cellBRAND_NAME = (WritableCell) labelBRAND_NAME;
				sheetToEdit.addCell(cellBRAND_NAME);

				//5:  COL_MSRP
				if (productDTO.getMsrp() != null)MSRP = productDTO.getMsrp();
				labelMSRP= new Label(COL_MSRP-1, row, MSRP,cellFormat);
				cellMSRP = (WritableCell) labelMSRP;
				sheetToEdit.addCell(cellMSRP);

				//6:  COL_OUT_COST
				if (productDTO.getCost() != null)OUT_COST = productDTO.getCost();
				labelOUT_COST= new Label(COL_OUT_COST-1, row, OUT_COST,cellFormat);
				cellOUT_COST = (WritableCell) labelOUT_COST;
				sheetToEdit.addCell(cellOUT_COST);
				
				//7:  COL_PRICE
				if (productDTO.getPriceProduct() != null)PRICE = productDTO.getPriceProduct();
				labelPRICE= new Label(COL_PRICE-1, row, PRICE,cellFormat);
				cellPRICE = (WritableCell) labelPRICE;
				sheetToEdit.addCell(cellPRICE);
				
				//8:  COL_PROFIT
				if (productDTO.getProfit() != null)PROFIT = productDTO.getProfit();
				labelPROFIT= new Label(COL_PROFIT-1, row, PROFIT.toString()+"%",cellFormat);
				cellPROFIT = (WritableCell) labelPROFIT;
				sheetToEdit.addCell(cellPROFIT);

				//9:  COL_DISCOUNT
				if (productDTO.getDiscount() != null)DISCOUNT = productDTO.getDiscount();
				labelDISCOUNT= new Label(COL_DISCOUNT-1, row, DISCOUNT.toString(),cellFormat);
				cellDISCOUNT = (WritableCell) labelDISCOUNT;
				sheetToEdit.addCell(cellDISCOUNT);
				
				//10:COL_QT_3MONTHS
				if (productDTO.getQtSold() != null)QT_3MONTHS = (double) Math.round(productDTO.getQtSold() * 100) / 100;;
				labelQT_3MONTHS= new Label(COL_QT_3MONTHS-1, row, QT_3MONTHS.toString(),cellFormat);
				cellQT_3MONTHS = (WritableCell) labelQT_3MONTHS;
				sheetToEdit.addCell(cellQT_3MONTHS);
				
				//11:  COL_CLASSIFICATION
				if (productDTO.getClassification() != null)CLASSIFICATION = (double) Math.round(productDTO.getClassification() * 100) / 100;;
				labelCLASSIFICATION= new Label(COL_CLASSIFICATION-1, row, CLASSIFICATION.toString(),cellFormat);
				cellCLASSIFICATION = (WritableCell) labelCLASSIFICATION;
				sheetToEdit.addCell(cellCLASSIFICATION);
				
				//12: COL_TITLE
				if (productDTO.getDescriptiProduct()!= null)TITLE = productDTO.getDescriptiProduct();
				labelTITLE= new Label(COL_TITLE-1, row, TITLE,cellFormat);
				cellTITLE = (WritableCell) labelTITLE;
				sheetToEdit.addCell(cellTITLE);
				//change height row 32px
				sheetToEdit.setRowView(row,heightInPoints);
				++row;
			}
			workbookCopy.write();
			workbookCopy.close();
			existingWorkbook.close();

		} catch (Exception x) {
			x.printStackTrace();
		}
	}
	
	
	/**----------------------------------------------------------
	 * getBoxByProductId*
	  -----------------------------------------------------------*/
	@Override
	public BoxDTO getBoxByProductId(final Long productId)
			throws ServiceException {
		Box boxResult = new Box();
		try {
			daoManager.setCommitTransaction(true);
			boxResult = (Box) daoManager.executeAndHandle(new DaoCommand() {
				@Override
				public Object execute(com.loyauty.dao.core.DaoManager daoManager)
						throws DaoException {
					Box box = new Box();
					box = daoManager.getProductDao().getBoxByProductId(productId);
					return box;
				}
			});
		} catch (DaoException de) {
			throw (new ServiceException(de));
		}
		return (DTOFactory.getBoxDTO(boxResult));
	}
	

	
	/**----------------------------------------------------------
	 * insertBoxAndProductBox*
	  -----------------------------------------------------------*/	
		@Override
	public Long insertBoxAndProductBox(final BoxDTO boxDTO)
			throws ServiceException {
		Box boxResult = new Box();
		try {
			daoManager.setCommitTransaction(true);
			boxResult = (Box) daoManager.executeAndHandle(new DaoCommand() {
				@Override
				public Object execute(com.loyauty.dao.core.DaoManager daoManager)
						throws DaoException {

					Box box = new Box();
					box.setProductId(boxDTO.getProductId());
					box.setLength(boxDTO.getLength());
					box.setWidth(boxDTO.getWidth());
					box.setHeight(boxDTO.getHeight());
					box.setTotalWeight(boxDTO.getTotalWeight());
					box.setStatusId(boxDTO.getStatusId());

					daoManager.getProductDao().insertBoxAndProductBox(box);

					return box;
				}
			});
			return (boxResult.getId());

		} catch (DaoException e) {
			throw (new ServiceException(e));
		}
	}
	
		
	/**----------------------------------------------------------
	 *updateProductBox*
	  -----------------------------------------------------------*/	
		@Override
	public void updateProductBox(final BoxDTO boxDTO)
			throws ServiceException {
		try {
			daoManager.setCommitTransaction(true);
			daoManager.executeAndHandle(new DaoCommand() {
				@Override
				public Object execute(com.loyauty.dao.core.DaoManager daoManager)
						throws DaoException {

					Box box = new Box();
					box.setId(boxDTO.getId());
					box.setProductId(boxDTO.getProductId());
					box.setLength(boxDTO.getLength());
					box.setWidth(boxDTO.getWidth());
					box.setHeight(boxDTO.getHeight());
					box.setTotalWeight(boxDTO.getTotalWeight());
					box.setCreationDate(boxDTO.getCreationDate());
					box.setStatusId(boxDTO.getStatusId());

					daoManager.getProductDao().updateProductBox(box);
					return null;
				}
			});
		} catch (DaoException de) {
			throw (new ServiceException(de));
		}
	}
			
	/**----------------------------------------------------------
	 *updateProductBoxIfCpNotVerified*
	  -----------------------------------------------------------*/	
	@Override
	public void updateProductBoxIfCpNotVerified(final BoxDTO boxDTO)
			throws ServiceException {
		try {
			daoManager.setCommitTransaction(true);
			daoManager.executeAndHandle(new DaoCommand() {
				@Override
				public Object execute(com.loyauty.dao.core.DaoManager daoManager)
						throws DaoException {

					Box box = new Box();
					box.setId(boxDTO.getId());
					box.setProductId(boxDTO.getProductId());
					box.setLength(boxDTO.getLength());
					box.setWidth(boxDTO.getWidth());
					box.setHeight(boxDTO.getHeight());
					box.setTotalWeight(boxDTO.getTotalWeight());
					box.setCreationDate(boxDTO.getCreationDate());
					box.setStatusId(boxDTO.getStatusId());

					daoManager.getProductDao().updateProductBoxIfCpNotVerified(box);
					return null;
				}
			});
		} catch (DaoException de) {
			throw (new ServiceException(de));
		}
	}
	
	
	/**----------------------------------------------------------
	 *UPDATE TABLE STOCK IN DATABASES FROM XLS FILE*
	  -----------------------------------------------------------*/
	@Override
	public List<ProductDTO> listStockFromXLS(String userAdminLogin,String destFileStockXLS)throws Exception{
		String errorReport="";
		//variable indicating the numbers of columns in the XLS file
		int ROW_TO_START = 1;
		final int COL_LS_PRODUCT_ID=1;
		final int COL_STOCK=2;
		
		//Added by Sumit Sarkar
		final int COL_PRODUCT_ORDER=3;

		String  strSTOCK="";
		String  strORDER="";

		//Values of cells
		String  LS_PRODUCT_ID="";
		Double STOCK = null;
		Double ORDER = null;

		//Cells
		Cell cellLS_PRODUCT_ID= null;
		Cell cellSTOCK= null;
		Cell cellORDER= null;
		
		Workbook existingWorkbook = Workbook.getWorkbook(new File(destFileStockXLS+"stock.xls"));
		Sheet sheetToRead=existingWorkbook.getSheet(0);
		int ROW_MAX = sheetToRead.getRows();
		List<ProductDTO> listStock = new ArrayList<ProductDTO>() ;
		ProductDTO productDTO;
		for(int row=ROW_TO_START; row< ROW_MAX;row++) {

			//--------------- 1: LS_PRODUCT_ID
			cellLS_PRODUCT_ID = sheetToRead.getCell(COL_LS_PRODUCT_ID-1, row);			
			if(cellLS_PRODUCT_ID!=null)LS_PRODUCT_ID = cellLS_PRODUCT_ID.getContents();
			if(LS_PRODUCT_ID==null || LS_PRODUCT_ID.equals("")){
				errorReport+=" "+(row+1)+" ,LS_PRODUCT_ID:"+LS_PRODUCT_ID+" ,|---->dosen't exist \n";
			}else{
				int index=LS_PRODUCT_ID.indexOf("/");
				if(index>0)LS_PRODUCT_ID=LS_PRODUCT_ID.substring(0, index);

			}
			//--------------- 2:STOCK
			cellSTOCK = sheetToRead.getCell(COL_STOCK-1, row);			
			if(cellSTOCK!=null){
				strSTOCK = cellSTOCK.getContents();
				strSTOCK=strSTOCK.replaceAll(" ", "");
				
				if(strSTOCK!=null && !strSTOCK.equals("")){
					int index=strSTOCK.indexOf(",");
					if(index>=0){
						String strSTOCK1=strSTOCK.substring(0, index);
						String strSTOCK2= strSTOCK.substring(index+1, strSTOCK.length());
						strSTOCK=strSTOCK1+"."+strSTOCK2;
					}
				}else errorReport+=" "+(row+1)+" ,STOCK:"+strSTOCK+" ,|---->is null \n";
				STOCK=null;
				try {
					STOCK = Double.parseDouble(strSTOCK);
				}
				catch (Exception pe) {
					STOCK=null;
				}
			}
			// --------------- START 3:ORDER
			cellORDER = sheetToRead.getCell(COL_PRODUCT_ORDER - 1, row);
			if (cellORDER != null) {
				strORDER = cellORDER.getContents();
				strORDER = strORDER.replaceAll(" ", "");

				if (strORDER != null && !strORDER.equals("")) {
					int index = strORDER.indexOf(",");
					if (index >= 0) {
						String strORDER1 = strORDER.substring(0, index);
						String strORDER2 = strORDER.substring(index + 1,strORDER.length());
						strORDER = strORDER1 + "." + strORDER2;
					}
				} else
					errorReport += " " + (row + 1) + " ,ORDER:" + strORDER + " ,|---->is null \n";
				ORDER = null;
				try {
					ORDER = Double.parseDouble(strORDER);
				} catch (Exception pe) {
					ORDER = null;
				}
			}
			// --------------- END 3:ORDER
			
			// Check all those variable is empty or null value
			if((LS_PRODUCT_ID==null || LS_PRODUCT_ID.equals("") 
					&& 
					(strSTOCK==null  || strSTOCK.equals("")) 
					&& 
					(strORDER==null  || strORDER.equals("")))){
				break;
			}
			// Check all those variable is empty or null value
			
			if(LS_PRODUCT_ID!=null){
				// Clean LS_PRODUCT_ID
				LS_PRODUCT_ID = LS_PRODUCT_ID.replaceAll(" SELECT ",""); 
				LS_PRODUCT_ID = LS_PRODUCT_ID.replaceAll("\\s","");
				LS_PRODUCT_ID=LS_PRODUCT_ID.replaceAll("\'","");
				LS_PRODUCT_ID=LS_PRODUCT_ID.replaceAll("\"","");
				LS_PRODUCT_ID=LS_PRODUCT_ID.replaceAll(";","");
				LS_PRODUCT_ID=LS_PRODUCT_ID.replaceAll(",","");
			}
			//Set all the values to ProductDTO Object
			productDTO = new ProductDTO();
			
			productDTO.setLoyaltyProductId(LS_PRODUCT_ID);
			productDTO.setStock(STOCK);
			productDTO.setOrderAmount(ORDER);
			
			listStock.add(productDTO);

		}
		return listStock;

	}

	// Update Stock
	@Override
	public boolean updateStock(final List<ProductDTO> listStock) throws ServiceException {
		boolean result=false;
		final List<Product>listProduct=DTOFactory.getProductListFromProductListDTO(listStock);
		try{
			daoManager.setCommitTransaction(true);
			result = (Boolean) daoManager.executeAndHandle(new DaoCommand() {
				@Override
				public Object execute(DaoManager daoManager) throws DaoException {			
					return daoManager.getProductDao().updateStock(listProduct);
				}
			});
		}catch (DaoException de) {
			try {
				throw new ServiceException(de);
			} catch (ServiceException e) {
				e.printStackTrace();
			}
		}
		return result;
	}

	// calculate Shipping Rate using shipping_city	
	@Override
	public boolean calculateShippingRate(final Long userId,final Long productId) throws ServiceException {
		boolean result=false;
		try{
			daoManager.setCommitTransaction(true);
			result = (Boolean) daoManager.executeAndHandle(new DaoCommand() {
				@Override
				public Object execute(DaoManager daoManager) throws DaoException {			
					return daoManager.getProductDao().calculateShippingRate(userId,productId) ; 
				}
			});
		}catch (DaoException de) {
			try {
				throw new ServiceException(de);
			} catch (ServiceException e) {
				e.printStackTrace();
			}
		}
		return result;
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public List<ProductDTO> getProductNotFound(List<ProductDTO>listProductDTO) throws ServiceException{
		final List <Product> productList = DTOFactory.getProductListFromProductListDTO(listProductDTO);
		List <Product> productListResult;
		try {
			daoManager.setCommitTransaction(true);
			productListResult = (List <Product>) daoManager.executeAndHandle(new DaoCommand() {
						@Override
						public Object execute(com.loyauty.dao.core.DaoManager daoManager)
								throws DaoException {
							return daoManager.getProductDao().getProductNotFound(productList);
						}
					});
		} catch (DaoException de) {
			throw (new ServiceException(de));
		}
		return(DTOFactory.getProductListDTOFromProductList(productListResult));
	}
	

	/**----------------------------------------------------------
	 *UPDATE STOCK IN TABLE STOCK BY LSPRODUCT*
	  -----------------------------------------------------------*/
	@Override
	public boolean updateStockByLsProductId(final ProductDTO productDTO){
		boolean result=false;
		final Product product=new Product();
		product.setLoyaltySourceProductId(productDTO.getLoyaltyProductId());
		product.setStock(productDTO.getStock());
		try{
			daoManager.setCommitTransaction(true);
			result = (Boolean) daoManager.executeAndHandle(new DaoCommand() {
				@Override
				public Object execute(DaoManager daoManager) throws DaoException {			
					return daoManager.getProductDao().updateStockByLsProductId(product);
				}
			});
		}catch (DaoException de) {
			try { 
				throw new ServiceException(de);
			} catch (ServiceException e) {
				e.printStackTrace();
			}
		}
		return result;	
	}

	/**----------------------------------------------------------
	 * getCurrencySymbols*
	  -----------------------------------------------------------*/
	@SuppressWarnings("unchecked")
	@Override
	public List<CurrencyDTO> getCurrencySymbols() throws ServiceException{
		List <Currency> currencyList = new ArrayList<Currency>();
		
		try {
			daoManager.setCommitTransaction(true);
			currencyList = (List <Currency>) daoManager.executeAndHandle(new DaoCommand() {
						@Override
						public Object execute(com.loyauty.dao.core.DaoManager daoManager)
								throws DaoException {
							return daoManager.getProductDao().getCurrencySymbols();
						}
					});
		} catch (DaoException de) {
			throw (new ServiceException(de));
		}
		return(DTOFactory.getCurrencySymbolsDTO(currencyList));
	}
	
	/**----------------------------------------------------------
	 * getCurrenciesButNotCAD*
	  -----------------------------------------------------------*/
	@SuppressWarnings("unchecked")
	@Override
	public List<CurrencyDTO> getCurrenciesButNotCAD() throws ServiceException{
		List <Currency> currencyList = new ArrayList<Currency>();
		
		try {
			daoManager.setCommitTransaction(true);
			currencyList = (List <Currency>) daoManager.executeAndHandle(new DaoCommand() {
						@Override
						public Object execute(com.loyauty.dao.core.DaoManager daoManager)
								throws DaoException {
							return daoManager.getProductDao().getCurrenciesButNotCAD();
						}
					});
		} catch (DaoException de) {
			throw (new ServiceException(de));
		}
		return(DTOFactory.getCurrencySymbolsDTO(currencyList));
	}
	
	/**----------------------------------------------------------
	 * getCurrencyBySymbol*
	  -----------------------------------------------------------*/
	@Override
	public CurrencyDTO getCurrencyBySymbol(final CurrencyDTO currencyDTO) throws ServiceException {
		Currency currencyResult = new Currency();
		try {
			daoManager.setCommitTransaction(true);
			currencyResult = (Currency) daoManager.executeAndHandle(new DaoCommand() {
				@Override
				public Object execute(com.loyauty.dao.core.DaoManager daoManager)
						throws DaoException {
					Currency currency = new Currency();
					if(currencyDTO!=null && currencyDTO.getSymbol()!=null)
						currency.setSymbol(currencyDTO.getSymbol());
					currency = daoManager.getProductDao().getCurrencyBySymbol(currency);
					return currency;
				}
			});
		} catch (DaoException de) {
			throw (new ServiceException(de));
		}
		return (DTOFactory.getCurrencyDTOBySymbol(currencyResult));
	}

	/**----------------------------------------------------------
	 *updateCurrency*
	  -----------------------------------------------------------*/	
	@Override
	public void updateCurrency(final CurrencyDTO currencyDTO) throws ServiceException {
		try {
			daoManager.setCommitTransaction(true);
			daoManager.executeAndHandle(new DaoCommand() {
				@Override
				public Object execute(com.loyauty.dao.core.DaoManager daoManager)
						throws DaoException {

					Currency currency = new Currency();
					currency.setId(currencyDTO.getId());
					currency.setRate(currencyDTO.getRate());
					currency.setSymbol(currencyDTO.getSymbol());
					//currency.setCreationDate(currencyDTO.getCreationDate());
					
					daoManager.getProductDao().updateCurrency(currency);
					return null;
				}
			});
		} catch (DaoException de) {
			throw (new ServiceException(de));
		}
	}
	
	
	/**----------------------------------------------------------
	 * calculateShippingRateForAllProducts*
	  -----------------------------------------------------------*/
	@Override
	public boolean calculateShippingRateForAllProducts(final Long userId) throws ServiceException{
		boolean result=false;
		try{
			daoManager.setCommitTransaction(true);
			result = (Boolean) daoManager.executeAndHandle(new DaoCommand() {
				@Override
				public Object execute(DaoManager daoManager) throws DaoException {			
					return daoManager.getProductDao().calculateShippingRateForAllProducts(userId) ; 
				}
			});
		}catch (DaoException de) {
			try {
				throw new ServiceException(de);
			} catch (ServiceException e) {
				e.printStackTrace();
			}
		}
		return result;
	}
	
	
	
	/**----------------------------------------------------------
	 * isCurrencyExists*
	  -----------------------------------------------------------*/
	@Override
	public CurrencyDTO isCurrencyExists(final CurrencyDTO currencyDTO) throws ServiceException {
		Currency currencyResult = new Currency();
		try {
			daoManager.setCommitTransaction(true);
			currencyResult = (Currency) daoManager.executeAndHandle(new DaoCommand() {
				@Override
				public Object execute(com.loyauty.dao.core.DaoManager daoManager)
						throws DaoException {
					Currency currency = new Currency();
					if(currencyDTO!=null && currencyDTO.getSymbol()!=null)
						currency.setSymbol(currencyDTO.getSymbol());
					currency = daoManager.getProductDao().getCurrencyBySymbol(currency);
					return currency;
				}
			});
		} catch (DaoException de) {
			throw (new ServiceException(de));
		}
		return (DTOFactory.getCurrencyDTOBySymbol(currencyResult));
	}

	/**----------------------------------------------------------
	 * insertNewCurrency*
	  -----------------------------------------------------------*/
	@Override 
	public Long insertNewCurrency(final CurrencyDTO currencyDTO) throws ServiceException {
		Currency currencyResult = new Currency();
		//Long currencyId = 0L;
		try {
			daoManager.setCommitTransaction(true);
			currencyResult = (Currency) daoManager.executeAndHandle(new DaoCommand() {
				@Override
				public Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {					
					Currency currency = new Currency();
					if(currencyDTO!=null && currencyDTO.getSymbol()!=null)
						currency.setSymbol(currencyDTO.getSymbol());
					if(currencyDTO!=null && currencyDTO.getRate()!=null)
						currency.setRate(currencyDTO.getRate());
					
					daoManager.getProductDao().insertNewCurrency(currency);					
					return currency;
				}
			});
			//return currencyResult.getId();
		} catch (DaoException de) {
			throw (new ServiceException(de));
		}
		return currencyResult.getId();
	}
	

	/**----------------------------------------------------------
	 				getSaleActiveByUserId
	  -----------------------------------------------------------*/
	@SuppressWarnings("unchecked")
	@Override 
	public List<ProductDTO>getSaleActiveByUserId(final Long userId) throws ServiceException{
		
		List <Product> productList = new ArrayList<Product>();
		
		try {
			daoManager.setCommitTransaction(true);
			productList = (List <Product>) daoManager.executeAndHandle(new DaoCommand() {
						@Override
						public Object execute(com.loyauty.dao.core.DaoManager daoManager)
								throws DaoException {
							return daoManager.getProductDao().getSaleActiveByUserId(userId);
						}
					});
		} catch (DaoException de) {
			throw (new ServiceException(de));
		}
		return(DTOFactory.getProductDTOList(productList));
	}
	
	

	/**----------------------------------------------------------
	 				getSaleActiveByUserId
	  -----------------------------------------------------------*/
	@SuppressWarnings("unchecked")
	@Override 
	public ProductDTO getSaleActiveByProductIdAndUserId(final Long productId,final Long userId) throws ServiceException{
		
		Product result;
		
		try {
			daoManager.setCommitTransaction(true);
			result = (Product) daoManager.executeAndHandle(new DaoCommand() {
						@Override
						public Object execute(com.loyauty.dao.core.DaoManager daoManager)
								throws DaoException {
							return daoManager.getProductDao().getSaleActiveByProductIdAndUserId(productId,userId);
						}
					});
		} catch (DaoException de) {
			throw (new ServiceException(de));
		}
		return(DTOFactory.getProductDTO(result));
	}
	
	

	/**----------------------------------------------------------
	 				getSaleActiveByUserId
	  -----------------------------------------------------------*/
	@SuppressWarnings("unchecked")
	@Override 
	public ProductDTO getSaleByProductId(final Long productId) throws ServiceException{
		
		Product product = new Product();
		
		try {
			daoManager.setCommitTransaction(true);
			product = (Product) daoManager.executeAndHandle(new DaoCommand() {
						@Override
						public Object execute(com.loyauty.dao.core.DaoManager daoManager)
								throws DaoException {
							return daoManager.getProductDao().getSaleByProductId(productId);
						}
					});
		} catch (DaoException de) {
			throw (new ServiceException(de));
		}
		return(DTOFactory.getProductDTO(product));
	}
	

	/**----------------------------------------------------------
	 		INSERT INTO ITEM INTO product_sale and user_sale
	  -----------------------------------------------------------*/
	@Override
	public Long addProductSale(ProductDTO productDTO)throws ServiceException{ 
		final Product product=DTOFactory.getProduct(productDTO);
		Long result=1L;
		try{
			daoManager.setCommitTransaction(true);
			result = (Long)daoManager.executeAndHandle(new DaoCommand() {
				@Override
				public Object execute(DaoManager daoManager) throws DaoException {			
					return daoManager.getProductDao().addProductSale(product);
				}
			});
		}catch (DaoException de) {
			try {
				throw new ServiceException(de);
			} catch (ServiceException e) {
				e.printStackTrace();
			}
		}
		return result;
	}

	

	/**----------------------------------------------------------
	 		INSERT INTO ITEM INTO product_sale and user_sale
	  -----------------------------------------------------------*/
	@Override
	public void addUserSale(ProductDTO productDTO,final List<Long> usersIdListSeleted)throws ServiceException{ 
		final Product product=DTOFactory.getProduct(productDTO);
		try{
			daoManager.setCommitTransaction(true);
			daoManager.executeAndHandle(new DaoCommand() {
				@Override
				public Object execute(DaoManager daoManager) throws DaoException {			
					daoManager.getProductDao().addUserSale(product,usersIdListSeleted);
					return true;
				}
			});
		}catch (DaoException de) {
			try {
				throw new ServiceException(de);
			} catch (ServiceException e) {
				e.printStackTrace();
			}
		}
	}

	

	/**----------------------------------------------------------
			isThereUserHavenThisSale
	-----------------------------------------------------------*/
	@SuppressWarnings("unchecked")
	@Override 
	public boolean isThereUserHavenThisSale(final Long productSaleId)throws ServiceException{

		boolean result=true;

		try {
			daoManager.setCommitTransaction(true);
			result = (Boolean) daoManager.executeAndHandle(new DaoCommand() {
				@Override
				public Object execute(com.loyauty.dao.core.DaoManager daoManager)
				throws DaoException {
					return daoManager.getProductDao().isThereUserHavenThisSale(productSaleId);
				}
			});
		} catch (DaoException de) {
			throw (new ServiceException(de));
		}
		return result;
	}


	

	/**----------------------------------------------------------
	 				getSaleActiveByUserId
	  -----------------------------------------------------------*/
	@SuppressWarnings("unchecked")
	@Override 
	public ProductDTO getSaleByProductIdAndUserId(final Long productId,final Long userId) throws ServiceException{
		
		Product result;
		
		try {
			daoManager.setCommitTransaction(true);
			result = (Product) daoManager.executeAndHandle(new DaoCommand() {
						@Override
						public Object execute(com.loyauty.dao.core.DaoManager daoManager)
								throws DaoException {
							return daoManager.getProductDao().getSaleByProductIdAndUserId(productId,userId);
						}
					});
		} catch (DaoException de) {
			throw (new ServiceException(de));
		}
		return(DTOFactory.getProductDTO(result));
	}



	/**----------------------------------------------------------
	 * getCurrencySymbols*
	  -----------------------------------------------------------*/
	@SuppressWarnings("unchecked")
	@Override
	public Boolean disableSaleWhenOutTime(final Long userId) throws ServiceException{
		Boolean result=null;
		try {
			daoManager.setCommitTransaction(true);
			result = (Boolean) daoManager.executeAndHandle(new DaoCommand() {
						@Override
						public Object execute(com.loyauty.dao.core.DaoManager daoManager)
								throws DaoException {
							return daoManager.getProductDao().disableSaleWhenOutTime(userId);
						}
					});
		} catch (DaoException de) {
			throw (new ServiceException(de));
		}
		return result;
	}
	
	public void updateUserProductPriceByProductIdAndUserIDSumit(final UserProductPriceDTO userProductPriceDTO)throws ServiceException{
		try {
			daoManager.setCommitTransaction(true);
			daoManager.executeAndHandle(new DaoCommand() {
					@Override
					public Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {	
						UserProductPrice userProductPrice = new UserProductPrice();
						
						userProductPrice.setUserId(userProductPriceDTO.getUserId());				
						userProductPrice.setProductId(userProductPriceDTO.getProductId());	
						userProductPrice.setPrice(userProductPriceDTO.getPrice());
						
//						userProductPrice.setProfit(userProductPriceDTO.getProfit());
//						userProductPrice.setDiscount(userProductPriceDTO.getDiscount());
//						userProductPrice.setExcluded(userProductPriceDTO.getExcluded());					
//						userProductPrice.setPriceType(userProductPriceDTO.getPriceType());
						
						daoManager.getProductDao().updateUserProductPriceByProductIdAndUserIDSumit(userProductPrice);
						
						return null;
					}
			});
		} catch (DaoException de) {
			throw (new ServiceException(de));
		}
		
		
	}
	
	
	
	
	
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.Argument.bind(Argument.java:35)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.bindArguments(AbstractMethodDeclaration.java:83)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:406)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1147)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1235)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:540)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:883)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:928)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:189)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:255)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:190)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:89)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:728)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:788)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1244)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1205)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:133)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:102)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)

!ENTRY org.eclipse.jdt.ui 4 2 2015-04-15 11:40:05.578
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:233)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:255)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:190)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:89)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:728)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:788)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1244)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1205)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:133)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:102)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)
Caused by: java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.Argument.bind(Argument.java:35)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.bindArguments(AbstractMethodDeclaration.java:83)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:406)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1147)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1235)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:540)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:883)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:928)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:189)
	... 17 more
Caused by: java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.Argument.bind(Argument.java:35)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.bindArguments(AbstractMethodDeclaration.java:83)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:406)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1147)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1235)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:540)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:883)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:928)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:189)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:255)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:190)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:89)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:728)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:788)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1244)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1205)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:133)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:102)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2015-04-15 11:40:05.578
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.Argument.bind(Argument.java:35)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.bindArguments(AbstractMethodDeclaration.java:83)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:406)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1147)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1235)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:540)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:883)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:928)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:189)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:255)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:190)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:89)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:728)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:788)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1244)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1205)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:133)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:102)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2015-04-15 11:40:05.578
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.Argument.bind(Argument.java:35)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.bindArguments(AbstractMethodDeclaration.java:83)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:406)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1147)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1235)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:540)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:883)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:928)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:189)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:255)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:190)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:89)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:728)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:788)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1244)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1205)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:133)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:102)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)

!ENTRY org.eclipse.jdt.ui 4 0 2015-04-15 11:40:05.578
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:233)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:255)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:190)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:89)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:728)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:788)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1244)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1205)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:133)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:102)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)
Caused by: java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.Argument.bind(Argument.java:35)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.bindArguments(AbstractMethodDeclaration.java:83)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:406)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1147)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1235)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:540)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:883)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:928)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:189)
	... 17 more
Caused by: java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.Argument.bind(Argument.java:35)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.bindArguments(AbstractMethodDeclaration.java:83)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:406)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1147)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1235)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:540)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:883)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:928)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:189)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:255)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:190)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:89)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:728)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:788)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1244)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1205)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:133)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:102)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2015-04-15 11:40:05.578
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.Argument.bind(Argument.java:35)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.bindArguments(AbstractMethodDeclaration.java:83)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:406)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1147)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1235)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:540)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:883)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:928)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:189)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:255)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:190)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:89)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:728)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:788)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1244)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1205)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:133)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:102)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)

!ENTRY org.eclipse.core.resources 4 2 2015-04-15 11:40:06.584
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.core.resources".
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.core.resources 4 75 2015-04-15 11:40:06.804
!MESSAGE Errors occurred during the build.
!SUBENTRY 1 org.eclipse.jdt.core 4 75 2015-04-15 11:40:06.804
!MESSAGE Errors running builder 'Java Builder' on project 'loyaltySource_lib'.
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.core 4 4 2015-04-15 11:40:07.174
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.loyauty.web.struts.action.orders;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.List;

import javax.servlet.http.HttpSession;
import lombok.Getter;
import lombok.Setter;

import com.loyauty.exception.ServiceException;
import com.loyauty.exception.ServiceLocatorException;
import com.loyauty.model.OrdersRows;
import com.loyauty.model.User;
import com.loyauty.service.core.DTOFactory;
import com.loyauty.service.core.dto.BasicUserDTO;
import com.loyauty.service.core.dto.OperationsDTO;
import com.loyauty.service.core.dto.OrdersDTO;
import com.loyauty.service.core.dto.ProvinceDTO;
import com.loyauty.service.core.dto.UserProductPriceDTO;
import com.loyauty.service.core.dto.UserSessionDTO;
import com.loyauty.service.core.dto.UsersPrivilegesDTO;
import com.loyauty.service.operations.OperationsService;
import com.loyauty.service.orders.OrdersService;
import com.loyauty.service.product.ProductService;
import com.loyauty.service.user.UserService;
import com.loyauty.web.struts.action.LoyautyAction;

public class ReportOrders extends LoyautyAction {
	private static final long serialVersionUID = -3811760851445730062L;
	private UserService userService;
	private ProductService productService;
	private OrdersService orderService;
	private OperationsService operationsService;
	@Getter
	@Setter
	private String userLogin;
	@Getter
	@Setter
	private List<User> usersList;
	private static int USER_TYPE = 2;
	@Getter
	@Setter
	List<OrdersDTO> listOrdersDTO;
	@Getter
	@Setter
	List<OrdersDTO> listStatus;
	@Getter
	@Setter
	private String lsOrderId;
	@Getter
	@Setter
	Long poYpop;
	@Getter
	@Setter
	Long poXpop;
	@Getter
	@Setter
	private Long pageTop = 0L;
	@Getter
	@Setter
	private Date creationDate;
	@Getter
	@Setter
	private Long findOrdersSignal;
	private String status;
	@Getter
	@Setter
	private Long sizeResult = 0L;
	@Getter
	@Setter
	private Long sorting;
	@Getter
	@Setter
	private Long sortingOrdersSignal;
	@Getter
	@Setter
	private Integer fieldForSorting;
	@Getter
	@Setter
	private Integer asc;
	@Getter
	@Setter
	private Integer scrollDivRowsLeft;
	@Getter
	@Setter
	private Integer scrollPageLeft;
	@Getter
	@Setter
	private Integer scrollDivRowsTop;
	@Getter
	@Setter
	private String strCreationDateStart;
	@Getter
	@Setter
	private String strCreationDateEnd;
	@Getter
	@Setter
	private Date creationDateStart;
	@Getter
	@Setter
	private Date creationDateEnd;
	private Date creationDateStartArg;
	private Date creationDateEndArg;
	@Getter
	@Setter
	private Integer selectedStatus;
	@Getter
	@Setter
	private Long editOrderSignal;
	@Getter
	@Setter
	private Long cancelSignal;
	@Getter
	@Setter
	private Integer indexOrder;
	@Getter
	@Setter
	private OrdersDTO orderToEdit;
	@Getter
	@Setter
	private String strProductOrderDate;
	@Getter
	@Setter
	private String lsProductID;
	@Getter
	@Setter
	Integer indexRow;
	@Getter
	@Setter
	private String showOrderDetailPop;
	@Getter
	@Setter
	private Long userId;
	@Getter
	@Setter
	private Long checkProductPriceSignal;
	@Getter
	@Setter
	private Long saveTemporaryRowSignal;
	@Getter
	@Setter
	private Long addSimilarRowSignal;
	@Getter
	@Setter
	private Long deleteRowSignal;
	@Getter
	@Setter
	private Long saveOrdersSignal;
	@Getter
	@Setter
	private Boolean checkBoxPrint;

	// recovery Data Order
	@Getter
	@Setter
	private String clientLastName;
	@Getter
	@Setter
	private String clientFirstName;
	@Getter
	@Setter
	private String clientOtherNames;
	@Getter
	@Setter
	private String clientStreet;
	@Getter
	@Setter
	private String clientOtherStreet;
	@Getter
	@Setter
	private String clientCity;
	@Getter
	@Setter
	private String clientProvince;
	@Getter
	@Setter
	private String clientPostalCode;
	@Getter
	@Setter
	private String clientPhone;
	@Getter
	@Setter
	private String clientEmail;
//	@Getter
//	@Setter
//	private String productOrderNumber;
	@Getter
	@Setter
	private String strRequiredDate;

	// recovery data row
	@Getter
	@Setter
	private Double quantity;
	@Getter
	@Setter
	private String notes;
	@Getter
	@Setter
	private Double quantityToChange;
	@Getter
	@Setter
	private Double stock;
	@Getter
	@Setter
	private String productDescription;
	@Getter
	@Setter
	private Double unitPrice;
	@Getter
	@Setter
	private Double shippingFee;
	@Getter
	@Setter
	private String shippingCompany;
	@Getter
	@Setter
	private String companyHeader;

	@Getter
	@Setter
	private Long quantityToChangeSignal;
	@Getter
	@Setter
	private Long duplicateOrderSignal;
	@Getter
	@Setter
	private String strCreationDate;
	@Getter
	@Setter
	private String strCreationOrderDate;
	@Getter
	@Setter
	private User usr;
	@Getter
	@Setter
	private String showSaveSuccessPop;
	// showSaveSuccessPop="display:block;visibility:visible;";
	// showSaveSuccessPop="visibility:hidden;display:none;";
	@Getter
	@Setter
	private String message;
	@Getter
	@Setter
	private Long okSaveSuccessPopSignal;
	@Getter
	@Setter
	private Long showRowShipping;
	@Getter
	@Setter
	private Long showOnlyEditNote;
	@Getter
	@Setter
	private Long saveShippingSignal;
	@Getter
	@Setter
	private Long saveOnlyNoteSignal;
	@Getter
	@Setter
	private String code;
	@Getter
	@Setter
	private Long cityId;
	@Getter
	@Setter
	private List<ProvinceDTO> listProvinces;
	private Hashtable<String, ProvinceDTO> hashProvinces;
	@Getter
	@Setter
	private Boolean orderNotSavedAtFirst;
	@Getter
	@Setter
	private String strShippedDate;
	@Getter
	@Setter
	private String strShippingPrice;
	@Getter
	@Setter
	private String showConfirmDeleteOrderPop;
	@Getter
	@Setter
	private Long deleteOrderSignal;
	@Getter
	@Setter
	private Long confirmDeleteSignal;
	@Getter
	@Setter
	private UsersPrivilegesDTO userPrivileges;
	@Getter
	@Setter
	private UsersPrivilegesDTO usersPrivShippedToInvoiced;
	@Getter
	@Setter
	private UsersPrivilegesDTO usersPrivChangeShippedStatus;
	@Getter
	@Setter
	private HashMap<Integer, String> hashStatus;
	@Getter
	@Setter
	private Long statusId;
	@Getter
	@Setter
	private String strPrint;
	@Getter
	@Setter
	private Integer testSignal;
	@Getter
	@Setter
	private String newStatus;
	Long invoicedOrdersRefresh;
	@Getter
	@Setter
	private Integer reportDateBetween;
	@Getter
	@Setter
	private Long dateBetweenSignal;
	@Getter
	@Setter
	private Long selectAllOrdersSignal;
	@Getter
	@Setter
	private Boolean checkBoxItem;
	// ------Pagination
	@Getter
	@Setter
	Long pageIndexSignal;
	@Getter
	@Setter
	Long prevListPagesSignal;
	@Getter
	@Setter
	Long nextListPagesSignal;
	@Getter
	@Setter
	Long totalOrders;
	@Getter
	@Setter
	Integer nextListPages;
	@Getter
	@Setter
	Integer prevListPages;
	@Getter
	@Setter
	Integer indexSet = 0;
	@Getter
	@Setter
	Integer indexList;
	@Getter
	@Setter
	List<OrdersDTO> listIndexSet;
	@Getter
	@Setter
	Integer PAGE_ITEMS_COUNT = 100;
	
	//New Added Field in the search option as toggle functionality
	@Getter
	@Setter
	private String productOrderNumberSearch;
	@Getter
	@Setter
	private String trakingNumber;
	@Getter
	@Setter
	private String  clientOther;
	@Getter	@Setter
	private String	 clientOrderNumber;
	
	@Getter	@Setter
	private Integer switchBetweenClientLoginAndPoNumberSignal;
	@Getter	@Setter
	private Integer switchBetweenClientLoginAndPoNumber;
	//New Added Field in the search option as toggle functionality
	@Getter	@Setter
	private Integer switchBetweenLsOrderAndClientOrderIdSignal;
	@Getter	@Setter
	private Integer switchBetweenLsOrderAndClientOrderId;
	@Getter	@Setter
	private Integer switchBetweenStatusAndClientOtherSignal;
	@Getter	@Setter
	private Integer switchBetweenStatusAndClientOther;
	//Added for the multiple functionality in switching  
	@Getter	@Setter
	private Integer switchBetweenOptionFieldsSignal;
	@Getter	@Setter
	private Integer switchBetweenOptionFields;
	
	switchBetweenOptionFieldsSignal

	// ------Pagination

	/*
	 * ==========================================================================
	 * =============== Default constructor
	 * ======================================
	 * ===================================================
	 */
	public ReportOrders() throws ServiceLocatorException {
		super();
		userService = getServiceLocator().getUserService();
		orderService = getServiceLocator().getOrderService();
		productService = getServiceLocator().getProductService();
		operationsService = getServiceLocator().getOperationsService();
	}

	/*
	 * ==========================================================================
	 * =============== method execute
	 * ============================================
	 * =============================================
	 */
	@SuppressWarnings({ "rawtypes", "unchecked" })
	@Override
	public String execute() throws Exception {
		System.out.println("Product Order Number: "+ productOrderNumberSearch);
		System.out.println("Tracking Number: "+ trakingNumber);
		System.out.println("Client Order ID: "+ clientOrderNumber);
		System.out.println("Client Other ID: "+ clientOther);
		
		//Create new object or Order to modify the search functionality
		OrdersDTO orderDTOObj=new OrdersDTO();
		orderDTOObj.setLsOrderId(lsOrderId);
		orderDTOObj.setUserLogin(userLogin);
		orderDTOObj.setStatus(status);
		orderDTOObj.setProductOrderNumber(productOrderNumberSearch);
		orderDTOObj.setClientOrderNumber(clientOrderNumber);
		orderDTOObj.setClientOtherId(clientOther);
		
		HttpSession session = request.getSession(true);

		if (showOrderDetailPop == null)
			showOrderDetailPop = "visibility:hidden;display:none;";
		if (showConfirmDeleteOrderPop == null)
			showConfirmDeleteOrderPop = "visibility:hidden;display:none;";
		if (showSaveSuccessPop == null)
			showSaveSuccessPop = "visibility:hidden;display:none;";
		if (poYpop == null)
			poYpop = 100L;
		if (poXpop == null)
			poXpop = 100L;
		Hashtable<String, OrdersDTO> hashOrders;
		if (selectedStatus == null)
			selectedStatus = -1;
		sizeResult = (Long) session.getAttribute("sizeResult");
		totalOrders = (Long) session.getAttribute("totalOrders");
		if (totalOrders == null)
			totalOrders = 0L;
		asc = (Integer) session.getAttribute("asc");
		if (asc == null)
			asc = 0;
		if (sizeResult == null)
			sizeResult = 0L;
		if (indexOrder == null)
			indexOrder = 0;
		userPrivileges = (UsersPrivilegesDTO) session.getAttribute("userPrivileges");
		usersPrivShippedToInvoiced = (UsersPrivilegesDTO) session.getAttribute("usersPrivShippedToInvoiced");
		usersPrivChangeShippedStatus = (UsersPrivilegesDTO) session
				.getAttribute("usersPrivChangeShippedStatus");
		hashStatus = (HashMap<Integer, String>) session
				.getAttribute("hashStatus");
		if (hashStatus == null) {
			hashStatus = new HashMap<Integer, String>();
			hashStatus.put(0, "");
			hashStatus.put(1, "open");
			hashStatus.put(2, "progress");
		}
		List<Integer> listIndexColumn = new ArrayList<Integer>();
		// fill list status
		listStatus = (ArrayList<OrdersDTO>) session.getAttribute("listStatus");
		if (listStatus == null) {
			listStatus = new ArrayList<OrdersDTO>();
			OrdersDTO orderDTOOpen = new OrdersDTO();
			orderDTOOpen.setStatus("open");
			orderDTOOpen.setId(0L);
			listStatus.add(orderDTOOpen);
			OrdersDTO orderDTOProgress = new OrdersDTO();
			orderDTOProgress.setStatus("progress");
			orderDTOProgress.setId(1L);
			listStatus.add(orderDTOProgress);
			if (usersPrivChangeShippedStatus != null) {
				OrdersDTO orderDTOShipped = new OrdersDTO();
				orderDTOShipped.setStatus("shipped");
				orderDTOShipped.setId(2L);
				listStatus.add(orderDTOShipped);
			}

		}

		try {

			/*-------------------- recovery users list -----------------------------------
							Recovery users list in session
			 -----------------------------------------------------------------------------*/
			// recovery provinces
			listProvinces = (List<ProvinceDTO>) session
					.getAttribute("listProvinces");
			if (listProvinces == null)
				listProvinces = productService.getAllProvinces();
			orderNotSavedAtFirst = (Boolean) session
					.getAttribute("listNotSavedAtFirst");
			BasicUserDTO basicUserDTO = new BasicUserDTO();
			basicUserDTO.setTypeId(USER_TYPE);
			List<User> usersListSession = (List<User>) session
					.getAttribute("usersListSession");
			if (usersListSession == null) {
				List<UserSessionDTO> listAllUsers = userService
						.getAllUsers(basicUserDTO);
				usersList = new ArrayList<User>();
				for (UserSessionDTO userDTO : listAllUsers) {
					User user = new User();
					user.setId(userDTO.getId());
					user.setLogin(userDTO.getLogin());
					usersList.add(user);
				}
				session.setAttribute("usersListSession", usersList);
			} else{
				usersList = usersListSession;
			}
			
			listOrdersDTO = (ArrayList<OrdersDTO>) session.getAttribute("listOrdersDTOReport");
			
			reportDateBetween = (Integer) session.getAttribute("reportDateBetween");
			if (reportDateBetween == null) {
				reportDateBetween = 0;
				session.setAttribute("reportDateBetween", reportDateBetween);
			}

			//Added for the new field
			switchBetweenClientLoginAndPoNumber = (Integer) session.getAttribute("switchBetweenClientLoginAndPoNumber");
			if (switchBetweenClientLoginAndPoNumber == null) {
				switchBetweenClientLoginAndPoNumber = 0;
				session.setAttribute("switchBetweenClientLoginAndPoNumber", switchBetweenClientLoginAndPoNumber);
			}
			switchBetweenLsOrderAndClientOrderId = (Integer) session.getAttribute("switchBetweenLsOrderAndClientOrderId");
			if (switchBetweenLsOrderAndClientOrderId == null) {
				switchBetweenLsOrderAndClientOrderId = 0;
				session.setAttribute("switchBetweenLsOrderAndClientOrderId", switchBetweenLsOrderAndClientOrderId);
			}
			switchBetweenStatusAndClientOther = (Integer) session.getAttribute("switchBetweenStatusAndClientOther");
			if (switchBetweenStatusAndClientOther == null) {
				switchBetweenStatusAndClientOther = 0;
				session.setAttribute("switchBetweenStatusAndClientOther", switchBetweenStatusAndClientOther);
			}

			/*------ always check if the Admin select all orders ------------
					if The Admin select all orders change checkBoxItem value 
			  ---------------------------------------------------------------*/
			if (selectAllOrdersSignal != null && selectAllOrdersSignal != 0L) {
				if (checkBoxItem != null) {
					session.setAttribute("checkBoxItem", checkBoxItem);
					session.setAttribute("allOrdersSelectedSignal", 0L);
					if (checkBoxItem)
						session.setAttribute("allOrdersSelectedSignal", 1L);
				}
			}
			checkBoxItem = (Boolean) session.getAttribute("checkBoxItem");
			if (checkBoxItem == null)
				checkBoxItem = false;
			/*------ always recovery creationDate from strCreationDate ------
						always keep the user search options
			  ---------------------------------------------------------------*/
			creationDateStart = null;
			SimpleDateFormat frm = new SimpleDateFormat("dd/MM/yyyy");
			if (((strCreationDateStart) != null)
					&& (!"".equals(strCreationDateStart))) {
				try {
					Date date = frm.parse(strCreationDateStart);
					creationDateStart = date;
					creationDateStartArg = date;
				} catch (Exception pe) {
					creationDateStart = null;
					addActionError("Please enter a date in the correct format");
				}
			}
			if (creationDateStart == null) {
				Date date = frm.parse("01/01/1900");
				creationDateStartArg = date;
			}
			creationDateEnd = null;
			if (((strCreationDateEnd) != null)
					&& (!"".equals(strCreationDateEnd))) {
				frm = new SimpleDateFormat("dd/MM/yyyy");
				try {
					Date date = frm.parse(strCreationDateEnd);
					creationDateEnd = date;
					creationDateEndArg = date;
				} catch (Exception pe) {
					creationDateEnd = null;
					addActionError("Please enter a date in the correct format");
				}
			}
			if (creationDateEnd == null) {
				creationDateEndArg = new Date();
			}

			/*------ always recovery Status from selectedStatus key ------
						always keep the status search options
			  ---------------------------------------------------------------*/
			status = getStatusSelected(selectedStatus);

			/*----------- always initialized listPages if not done ----------
				   		    and check if is there next listPages
			  ---------------------------------------------------------------*/
			nextListPages = (Integer) session.getAttribute("nextListPages");
			if (nextListPages == null)
				nextListPages = 0;
			if (indexSet == null || indexSet == -1) {
				indexSet = (Integer) session.getAttribute("indexSet");
				if (indexSet == null)
					indexSet = 0;
			}
			listIndexSet = (List<OrdersDTO>) session
					.getAttribute("listIndexSet");
			if (listIndexSet == null)
				initalizeListIndexSet(session, orderService);

			/*----------------- When Admin Click on the pageIndex ----------------------------------
										catch  page index
			 ---------------------------------------------------------------------------------------*/
			//Toggle Switch between PO Date and Shipping date
			if (dateBetweenSignal != null && dateBetweenSignal != 0L) {
				reportDateBetween = ((reportDateBetween == null || reportDateBetween == 0) ? 1: 0);
				listOrdersDTO = new ArrayList<OrdersDTO>();
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				session.setAttribute("reportDateBetween", reportDateBetween);
				return SUCCESS;
			}
		
			//Toggle Switch between Client Login and PO Number	
//			switchBetweenClientLoginAndPoNumber=(Integer)session.getAttribute("switchBetweenClientLoginAndPoNumber");
			
			if (switchBetweenClientLoginAndPoNumberSignal != null && switchBetweenClientLoginAndPoNumberSignal != 0L) {
				switchBetweenClientLoginAndPoNumber = ((switchBetweenClientLoginAndPoNumber == null 
						|| switchBetweenClientLoginAndPoNumber == 0) ? 1: 0);
				listOrdersDTO = new ArrayList<OrdersDTO>();
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				session.setAttribute("switchBetweenClientLoginAndPoNumber", switchBetweenClientLoginAndPoNumber);
				return SUCCESS;
			}
			
			//Switching between "ls_Order" and "Client Order Id"	
//			switchBetweenLsOrderAndClientOrderId = (Integer)session.getAttribute("switchBetweenLsOrderAndClientOrderId");
			
			if (switchBetweenLsOrderAndClientOrderIdSignal != null && switchBetweenLsOrderAndClientOrderIdSignal != 0L) {
				switchBetweenLsOrderAndClientOrderId = ((switchBetweenLsOrderAndClientOrderId == null 
						|| switchBetweenLsOrderAndClientOrderId == 0) ? 1: 0);
				listOrdersDTO = new ArrayList<OrdersDTO>();
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				session.setAttribute("switchBetweenLsOrderAndClientOrderId", switchBetweenLsOrderAndClientOrderId);
				return SUCCESS;
			}
			
			//Switching between "Status" and "Client Other Id"
//			switchBetweenStatusAndClientOther = (Integer)session.getAttribute("switchBetweenStatusAndClientOther");
			
			if (switchBetweenStatusAndClientOtherSignal != null && switchBetweenStatusAndClientOtherSignal != 0L) {
				switchBetweenStatusAndClientOther = ((switchBetweenStatusAndClientOther == null 
						|| switchBetweenStatusAndClientOther == 0) ? 1: 0);
				listOrdersDTO = new ArrayList<OrdersDTO>();
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				session.setAttribute("switchBetweenStatusAndClientOther", switchBetweenStatusAndClientOther);
				return SUCCESS;
			}
			
			if (switchBetweenOptionFieldsSignal != null && switchBetweenOptionFields != 0L) {
				switchBetweenOptionFields++;
				if (switchBetweenOptionFields == 4) switchBetweenOptionFields = 0;
				
			}
			

			
			
			/*----------------- When Admin Click on the pageIndex ----------------------------------
										catch  page index
			 ---------------------------------------------------------------------------------------*/
			if (pageIndexSignal != null && pageIndexSignal != 0L) {
				OrdersDTO orderDTO = (OrdersDTO) session.getAttribute("orderPageSelected");
				if (orderDTO != null)
					orderDTO.setCssStyle("");
				OrdersDTO orderPageSelected = listIndexSet.get(indexList);
				orderPageSelected
						.setCssStyle("background-color:#FFFF99;border:1px solid #CCCCCC;");
				indexSet = orderPageSelected.getIndex() - 1;
				indexSet = indexSet * PAGE_ITEMS_COUNT;
				session.setAttribute("indexSet", indexSet);
				session.setAttribute("listIndexSet", listIndexSet);
				session.setAttribute("orderPageSelected", orderPageSelected);
			}

			/*----------------- When Admin Click on the nextListPages ------------------------------
						recreate listIndexSet started with index>index+10 and indexSet>indexSet+10
			 ---------------------------------------------------------------------------------------*/
			if (nextListPagesSignal != null && nextListPagesSignal != 0L
					&& listIndexSet.size() > 0) {
				OrdersDTO orderDTOPrevious = (OrdersDTO) session
						.getAttribute("orderPageSelected");
				if (orderDTOPrevious != null)
					orderDTOPrevious.setCssStyle("");
				OrdersDTO orderDTO = listIndexSet.get(listIndexSet.size() - 1);
				if (orderDTO != null)
					nextListPages = orderDTO.getIndex() + 1;
				
				Long totalOrders = orderService.getCountOrders(creationDateStartArg,
						creationDateEndArg, reportDateBetween, userLogin, lsOrderId,
						status,productOrderNumberSearch,clientOrderNumber,clientOther);
				
				String strcount = totalOrders.toString();
				Integer sizeList = Integer.parseInt(strcount)
						/ PAGE_ITEMS_COUNT;
				if (nextListPages <= sizeList + 1) {
					listIndexSet = new ArrayList<OrdersDTO>();
					for (int i = nextListPages; i <= sizeList + 1
							&& i <= nextListPages + 10; i++) {
						OrdersDTO ord = new OrdersDTO();
						ord.setCssStyle("");
						ord.setIndex(i);
						listIndexSet.add(ord);
					}
					if (nextListPages <= sizeList + 1) {
						indexSet = nextListPages - 1;
						OrdersDTO orderPageSelected = listIndexSet.get(0);
						orderPageSelected
								.setCssStyle("background-color:#FFFF99;border:1px solid #CCCCCC;");
						indexSet = indexSet * PAGE_ITEMS_COUNT;
						session.setAttribute("indexSet", indexSet);
						session.setAttribute("nextListPages", nextListPages);
						session.setAttribute("listIndexSet", listIndexSet);
						session.setAttribute("orderPageSelected",
								orderPageSelected);
					}
				}
			}

			/*----------------- When Admin Click on the previousListPages --------------------------
					recreate listIndexSet started with index< index-10 and indexSet<indexSet-10
			 ---------------------------------------------------------------------------------------*/
			if (prevListPagesSignal != null && prevListPagesSignal != 0L
					&& listIndexSet.size() > 0) {
				OrdersDTO orderDTOPrevious = (OrdersDTO) session
						.getAttribute("orderPageSelected");
				if (orderDTOPrevious != null)
					orderDTOPrevious.setCssStyle("");
				nextListPages = (Integer) session.getAttribute("nextListPages");
				if (nextListPages != null && nextListPages >= 11) {
					prevListPages = nextListPages - 11;
					listIndexSet = new ArrayList<OrdersDTO>();
					for (int i = prevListPages; i < nextListPages; i++) {
						OrdersDTO ord = new OrdersDTO();
						ord.setCssStyle("");
						ord.setIndex(i);
						listIndexSet.add(ord);
					}
					indexSet = prevListPages - 1;
					OrdersDTO orderPageSelected = listIndexSet.get(0);
					orderPageSelected
							.setCssStyle("background-color:#FFFF99;border:1px solid #CCCCCC;");
					indexSet = indexSet * PAGE_ITEMS_COUNT;
					nextListPages = prevListPages;
					session.setAttribute("nextListPages", nextListPages);
					session.setAttribute("indexSet", indexSet);
					session.setAttribute("listIndexSet", listIndexSet);
					session.setAttribute("orderPageSelected", orderPageSelected);
				}
			}

			/*----------------- When Admin change province -----------------------------------------
								Check a list off this province
			 ---------------------------------------------------------------------------------------*/
			hashProvinces = (Hashtable<String, ProvinceDTO>) session
					.getAttribute("hashProvinces");
			if (hashProvinces == null) {
				listProvinces = productService.getAllProvinces();
				Hashtable<String, ProvinceDTO> hashProvinces = new Hashtable<String, ProvinceDTO>();
				for (ProvinceDTO prov : listProvinces) {
					hashProvinces.put(prov.getCode(), prov);
				}
				session.setAttribute("hashProvinces", hashProvinces);
			}
			if (code != null && !code.equals("") && listOrdersDTO != null) {
				ProvinceDTO provinceDTO = hashProvinces.get(code);
				if (provinceDTO != null) {
					clientProvince = provinceDTO.getCode();
				}
			}// else listCities=new ArrayList<CityDTO>();
			if (listOrdersDTO != null && indexOrder != -1) {
				orderToEdit = listOrdersDTO.get(indexOrder);
				if (orderToEdit != null) {
					orderToEdit.setClientProvince(code);
					session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				}
			}

			/*------------------------------- Refresh listOrdersDTO------------------------------------
						Refresh listOrders before generation of invoiced orders XLS file 
				 ------------------------------------------------------------------------------------------*/
			invoicedOrdersRefresh = (Long) session
					.getAttribute("invoicedOrdersRefresh");
			if (invoicedOrdersRefresh != null && invoicedOrdersRefresh != 0L) {
				listIndexColumn = (ArrayList<Integer>) session
						.getAttribute("listIndexColumn");
				if (listIndexColumn == null)
					listIndexColumn = getNewListIndexColumn();
				lsOrderId = lsOrderId.toUpperCase();
				
				//New Searching Functionality
				listOrdersDTO = orderService.searchOrdersWithOptionsAndSorting(
						creationDateStartArg, creationDateEndArg,
						reportDateBetween,orderDTOObj,listIndexColumn, PAGE_ITEMS_COUNT, indexSet);
				//Old Searching Functionality				
//				listOrdersDTO = orderService.searchOrdersWithOptionsAndSorting(
//						creationDateStartArg, creationDateEndArg,
//						reportDateBetween, userLogin, lsOrderId, status,
//						listIndexColumn, PAGE_ITEMS_COUNT, indexSet);
				
				if (findOrdersSignal != null && findOrdersSignal != 0L)
					initalizeListIndexSet(session, orderService);
				// Color in RED rows containing a GroupItems
				for (OrdersDTO orderDTO : listOrdersDTO) {
					if (orderDTO != null && orderDTO.getStatus() != null
							&& orderDTO.getStatus().equals("shipped")) {
						Long count = productService.isGroupProductID(orderDTO
								.getProductId());
						if (count != null && count >= 1) {
							orderDTO.setCssStyle("background-color: rgb(248,150,140); border-right:1px solid #CCCCCC;border-left:1px solid #CCCCCC;border-top:1px solid #CCCCCC;");
						}
					}
				}

				// keep search parameters to use in other
				// classes(PrintOrdersToPDF, ...)
				indexSet = 0;
				session.setAttribute("indexSet", indexSet);
				nextListPages = 0;
				session.setAttribute("nextListPages", nextListPages);
				session.setAttribute("selectedStatus", selectedStatus);
				session.setAttribute("creationDateStartArg",creationDateStartArg);
				session.setAttribute("creationDateEndArg", creationDateEndArg);
				session.setAttribute("reportDateBetween", reportDateBetween);
				session.setAttribute("lsOrderId", lsOrderId);
				session.setAttribute("userLogin", userLogin);
				session.setAttribute("status", status);
				session.setAttribute("listIndexColumn", listIndexColumn);
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				session.setAttribute("invoicedOrdersRefresh", 0L);
				
				session.setAttribute("productOrderNumberSearch", productOrderNumberSearch);
				session.setAttribute("clientOrderNumber", clientOrderNumber);
				session.setAttribute("clientOther", clientOther);
				return SUCCESS;
			}

			/*------------ When Admin click on the Button "Delete Order" in The OrderDtailPop --------------
								show other pop to confirm Order Delete
			  ----------------------------------------------------------------------------------------------*/
			if (deleteOrderSignal != null && deleteOrderSignal != 0L) {
				message = "Attention! if you click on \"Delete Order\" you can not restore it.";
				orderToEdit = listOrdersDTO.get(indexOrder);
				if (confirmDeleteSignal != null && confirmDeleteSignal == 0L) { // Delete
																				// Order
																				// Request
					showOrderDetailPop = "display:block;visibility:visible;";
					showConfirmDeleteOrderPop = "display:block;visibility:visible;";
				} else if (confirmDeleteSignal == 1L) { // Delete Order
														// Confirmed
					orderService.deleteOrderByLsOrderId(orderToEdit);
					// Save this operation in table operation
					OperationsDTO operationDTO = new OperationsDTO();
					User userAdmin = (User) session.getAttribute("userAdmin");
					if (userAdmin != null)
						operationDTO.setUserId(userAdmin.getId());
					operationDTO.setOperationDate(new Date());
					operationDTO.setOperationType("Delete Order");
					String dataBefore = "[PARTNER NAME:"
							+ orderToEdit.getUserLogin() + "];";
					dataBefore += " [LS_ORDER_ID:" + orderToEdit.getLsOrderId()
							+ "];";
					dataBefore += " [PRODUCT_ORDER_NUMBER:"
							+ orderToEdit.getProductOrderNumber() + "];";
					dataBefore += " [CLIENT_FIRST_NAME:"
							+ orderToEdit.getClientFirstName() + "];";
					dataBefore += " [CLIENT_LAST_NAME:"
							+ orderToEdit.getClientLastName() + "];";
					dataBefore += " [CLIENT_POSTAL_CODE:"
							+ orderToEdit.getClientPostalCode() + "];";
					dataBefore += " [LS_PRODUCT_ID:"
							+ orderToEdit.getLsProductID() + "];";
					dataBefore += " [UNIT_PRICE:" + orderToEdit.getUnitPrice()
							+ "];";
					dataBefore += " [STATUS:" + orderToEdit.getStatus() + "];";
					operationDTO.setDataBefore(dataBefore);
					operationDTO.setDataBefore(operationDTO.getDataBefore());
					operationDTO.setDataAfter("");
					operationsService.insertOperation(operationDTO);
					// Remove order from the list orders
					listOrdersDTO.remove(orderToEdit);
					session.setAttribute("listOrdersDTOReport", listOrdersDTO);
					showOrderDetailPop = "visibility:hidden;display:none;";
					showConfirmDeleteOrderPop = "visibility:hidden;display:none;";
					// initialize index orders
					int indexOrder = 0;
					int indexRow = 0;
					for (OrdersDTO orderDTO : listOrdersDTO) {
						orderDTO.setIndex(indexOrder);
						indexOrder++;
						indexRow = 0;
						for (OrdersRows orderRows : orderDTO.getRowsList()) {
							orderRows.setIndex(indexRow);
							indexRow++;
						}
					}
					session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				} else { // Cancel Order Delete
					showOrderDetailPop = "display:block;visibility:visible;";
					showConfirmDeleteOrderPop = "visibility:hidden;display:none;";
				}
				return SUCCESS;
			}

			/*------ When Admin click the "Edit link" in the Order Table for Edit NOTE -----
							show only field Edit Note
			  ------------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& showOnlyEditNote != null && showOnlyEditNote != 0L) {
				orderToEdit = listOrdersDTO.get(indexOrder);
				for (OrdersDTO order : listOrdersDTO) {
					order.setShowOnlyEditNote(0L);
					order.setCssRow("");
				}
				orderToEdit.setShowOnlyEditNote(1L);
				orderToEdit.setCssRow("background-color:#FF9966;");
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				listOrdersDTO = (ArrayList<OrdersDTO>) session
						.getAttribute("listOrdersDTOReport");
				return SUCCESS;
			}

			/*------------ When Admin click on link "Save Edit Note in the Orders Table" ----------
													save Only  notes
			  -------------------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& saveOnlyNoteSignal != null && saveOnlyNoteSignal != 0L) {
				if (indexOrder != null) {
					orderToEdit = listOrdersDTO.get(indexOrder);
					if (orderToEdit != null) {
						orderToEdit.setNotes(notes);
						orderToEdit.setShowRowShipping(0L);
						orderToEdit.setShowOnlyEditNote(0L);
						orderToEdit.setCssRow("");
						// Save Note
						Boolean sucess = orderService
								.updateShippingOrderElements(orderToEdit);
						session.setAttribute("listOrdersDTOReport",
								listOrdersDTO);
					}
				}
				return SUCCESS;
			}

			/*------------ When Admin click the "Edit link" in the Order Table -------------
								show fields to edit shipping parameters
			  ------------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& showRowShipping != null && showRowShipping != 0L) {

				orderToEdit = listOrdersDTO.get(indexOrder);
				for (OrdersDTO order : listOrdersDTO) {
					order.setShowRowShipping(0L);
					order.setCssRow("");
				}
				// only Admins who has Active = true of action name='All' can
				// change shipping settings
				// of orders shipped or invoiced
				if (usersPrivChangeShippedStatus == null
						&& orderToEdit.getStatus() != null
						&& (orderToEdit.getStatus().equals("shipped") || orderToEdit
								.getStatus().equals("invoiced"))) {
					showRowShipping = 0L;
					return SUCCESS;
				}

				if (orderToEdit != null) {
					orderToEdit.setShowRowShipping(1L);
					orderToEdit.setShowOnlyEditNote(1L);
					orderToEdit.setCssRow("background-color:#FF9966;");
					session.setAttribute("listOrdersDTOReport", listOrdersDTO);
					listOrdersDTO = (ArrayList<OrdersDTO>) session
							.getAttribute("listOrdersDTOReport");
				}
				if (orderToEdit.getStatus().equals("open")) {
					statusId = 0L;
				} else if (orderToEdit.getStatus().equals("progress")) {
					statusId = 1L;
				} else if (orderToEdit.getStatus().equals("shipped")) {
					statusId = 2L;
				} else if (orderToEdit.getStatus().equals("invoiced")) {
					statusId = 3L;
				} else if (orderToEdit.getStatus().equals("canceled")) {
					statusId = 4L;
				}
				return SUCCESS;
			}

			/*------------ When Admin click on link "Save in the Orders Table" ----------
							save all shipping parameters and notes
			 ----------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& saveShippingSignal != null && saveShippingSignal != 0L) {
				if (indexOrder != null) {
					orderToEdit = listOrdersDTO.get(indexOrder);
					if (orderToEdit != null) {
						Date shippedDateToEdit = null;
						frm = new SimpleDateFormat("dd/MM/yyyy");
						if (((strShippedDate) != null)
								&& (!"".equals(strShippedDate))) {
							strShippedDate = strShippedDate.replaceAll(" ", "");
							try {
								Date date = frm.parse(strShippedDate);
								shippedDateToEdit = date;
							} catch (Exception pe) {
								shippedDateToEdit = null;
							}
						}
						if (((strShippedDate) != null)
								&& (!"".equals(strShippedDate))
								&& strShippedDate.length() <= 8)
							shippedDateToEdit = orderToEdit.getShippedDate();
						Double shippingPrice = null;
						// Double currencyShippingPrice=null;
						if (strShippingPrice != null
								&& !strShippingPrice.equals("")) {
							strShippingPrice = strShippingPrice.replaceAll(" ",
									"");
							int index = strShippingPrice.indexOf(",");
							if (index >= 0) {
								String strUnitPrice1 = strShippingPrice
										.substring(0, index);
								String strUnitPrice2 = strShippingPrice
										.substring(index + 1,
												strShippingPrice.length());
								strShippingPrice = strUnitPrice1 + "."
										+ strUnitPrice2;
							}

							try {
								shippingPrice = Double
										.parseDouble(strShippingPrice);
								/*
								 * if(shippingPrice!=null &&
								 * orderToEdit.getCurrencyId()!=null &&
								 * orderToEdit.getCurrencyId()!=1 &&
								 * orderToEdit.getCurrencyRate()!=null) {
								 * currencyShippingPrice = shippingPrice *
								 * orderToEdit.getCurrencyRate();
								 * currencyShippingPrice = (double)
								 * Math.round(currencyShippingPrice*100)/100; }
								 */
							} catch (Exception pe) {
								shippingPrice = null;
							}
						}

						if (trakingNumber != null)
							trakingNumber = trakingNumber.replaceAll(
									"^ +| +$|( )+", "$1");
						if (shippingCompany != null)
							shippingCompany = shippingCompany.replaceAll(
									"^ +| +$|( )+", "$1");
						orderToEdit.setShippingPrice(shippingPrice);
						// orderToEdit.setCurrencyShippingPrice(currencyShippingPrice);
						// orderToEdit.getRowsList().get(0).setCurrencyShippingPrice(currencyShippingPrice);
						orderToEdit.setShippedDate(shippedDateToEdit);
						orderToEdit.setNotes(notes);
						if (newStatus != null && !newStatus.equals(""))
							orderToEdit.setStatus(newStatus);
						orderToEdit.setShippingCompany(shippingCompany);
						orderToEdit.setTrackingNumber(trakingNumber);
						orderToEdit.setShowRowShipping(0L);
						orderToEdit.setShowOnlyEditNote(0L);
						OrdersRows row = orderToEdit.getRowsList().get(0);
						row.setShippingPrice(shippingPrice);
						row.setShippingCompany(shippingCompany);
						row.setTrackingNumber(trakingNumber);
						orderToEdit.setCssRow("");

						if (newStatus != null && !newStatus.equals("")) { // if
																			// admin
																			// click
																			// on
																			// the
																			// save
																			// behind
																			// status
							orderService.updateStatusByLsOrderId(
									orderToEdit.getLsOrderId(), newStatus);
							orderToEdit.setStatus(newStatus);
							if (!newStatus.equals("shipped")
									&& !newStatus.equals("invoiced")
									&& !newStatus.equals("canceled")) {
								orderToEdit.setShippingPrice(null);
								orderToEdit.setTrackingNumber(null);
								orderToEdit.setShippedDate(null);
							}

						} else {// if admin click on the save other than Status
							if (orderToEdit.getShippedDate() != null
									&& orderToEdit.getTrackingNumber() != null
									&& !orderToEdit.getTrackingNumber().equals(
											"")
									&& orderToEdit.getShippingCompany() != null
									&& !orderToEdit.getShippingCompany()
											.equals("")
									&& orderToEdit.getShippingPrice() != null
									&& orderToEdit.getStatus() != null) {
								if (orderToEdit.getStatus().equals("open")
										|| orderToEdit.getStatus().equals(
												"progress")) {
									orderService.updateStatusByLsOrderId(
											orderToEdit.getLsOrderId(),
											"shipped");
									orderToEdit.setStatus("shipped");
								}
							} else {
								if (usersPrivChangeShippedStatus != null
										&& !orderToEdit.getStatus().equals(
												"open")
										&& !orderToEdit.getStatus().equals(
												"progress")) {
									orderService.updateStatusByLsOrderId(
											orderToEdit.getLsOrderId(),
											"progress");
									orderToEdit.setStatus("progress");
								}
							}
						}
						// if admin click on the save other then status(save
						// notes, save shipping company ...)
						Boolean sucess = orderService
								.updateShippingOrderElements(orderToEdit);
						session.setAttribute("listOrdersDTOReport",
								listOrdersDTO);
					}
				}
				return SUCCESS;
			}

			/*------------ When Admin click on icon findOrders.png ----------
								check user and complete infos client
			 ----------------------------------------------------------------*/
			if (findOrdersSignal != null
					&& findOrdersSignal != 0L
					|| (pageIndexSignal != null && pageIndexSignal != 0L)
					|| (nextListPagesSignal != null && nextListPagesSignal != 0L)
					|| (prevListPagesSignal != null && prevListPagesSignal != 0L)) {
				// session.setAttribute("allOrdersSelectedSignal",0L);
				// if admin click on search icon initialize checkBoxItem to
				// false
				if (findOrdersSignal != null && findOrdersSignal != 0L) {
					session.setAttribute("allOrdersSelectedSignal", 0L);
					checkBoxItem = false;
					session.setAttribute("checkBoxItem", checkBoxItem);
					indexSet = 0;
					session.setAttribute("indexSet", indexSet);
					nextListPages = 0;
					session.setAttribute("nextListPages", nextListPages);
					session.setAttribute("selectedStatus", selectedStatus);

				}
				// if admin navigate on pages keep the previous sorting
				if (((pageIndexSignal != null && pageIndexSignal != 0L)
						|| (nextListPagesSignal != null && nextListPagesSignal != 0L) || (prevListPagesSignal != null && prevListPagesSignal != 0L))) {
					listIndexColumn = (ArrayList<Integer>) session
							.getAttribute("listIndexColumn");
					if (listIndexColumn == null)
						listIndexColumn = getNewListIndexColumn();
				} else { // prepare new sorting
					listIndexColumn = getNewListIndexColumn();
				}

				lsOrderId = lsOrderId.toUpperCase();
				// if(findOrdersSignal!=null &&
				// findOrdersSignal!=0L)initalizeListIndexSet(session,orderService
				// );
				
				//Old Working Methods
//				listOrdersDTO = orderService.searchOrdersWithOptionsAndSorting(
//						creationDateStartArg, creationDateEndArg,
//						reportDateBetween, userLogin, lsOrderId, status,
//						listIndexColumn, PAGE_ITEMS_COUNT, indexSet);
				
				//New Functionality with same mapping
				listOrdersDTO = orderService.searchOrdersWithOptionsAndSortingNew(
								creationDateStartArg, creationDateEndArg,
								reportDateBetween, userLogin, lsOrderId,
								status, listIndexColumn, PAGE_ITEMS_COUNT,
								indexSet, productOrderNumberSearch,clientOrderNumber,
								clientOther);

//				//New Searching Functionality
//				listOrdersDTO = orderService.searchOrdersWithOptionsAndSorting(
//						creationDateStartArg, creationDateEndArg,
//						reportDateBetween, orderDTOObj, listIndexColumn,
//						PAGE_ITEMS_COUNT, indexSet);
				
				
				// Color in RED rows containing a GroupItems
				for (OrdersDTO orderDTO : listOrdersDTO) {
					if (orderDTO != null && orderDTO.getStatus() != null
							&& orderDTO.getStatus().equals("shipped")) {
						Long count = productService.isGroupProductID(orderDTO
								.getProductId());
						if (count != null && count >= 1) {
							orderDTO.setCssStyle("background-color: rgb(248,150,140); border-right:1px solid #CCCCCC;border-left:1px solid #CCCCCC;border-top:1px solid #CCCCCC;");
						}
					}
				}

				// keep search parameters to use in other
				// classes(PrintOrdersToPDF, ...)
				session.setAttribute("creationDateStartArg",
						creationDateStartArg);
				session.setAttribute("creationDateEndArg", creationDateEndArg);
				session.setAttribute("reportDateBetween", reportDateBetween);
				session.setAttribute("lsOrderId", lsOrderId);
				session.setAttribute("userLogin", userLogin);
				session.setAttribute("status", status);
				//For newly added field
				session.setAttribute("productOrderNumberSearch", productOrderNumberSearch);

				session.setAttribute("listIndexColumn", listIndexColumn);
				session.setAttribute("sizeResult", sizeResult);
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				if (findOrdersSignal != null && findOrdersSignal != 0L)
					initalizeListIndexSet(session, orderService);
				return SUCCESS;
			}

			/*------------ When Admin click on the icon sorting of column ----------
							seach result with option of sorting list
			 -----------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& sortingOrdersSignal != null && sortingOrdersSignal != 0L) {
				listIndexColumn = (List<Integer>) session
						.getAttribute("listIndexColumn");
				asc = (asc == 1 ? -1 : 1);
				int nextElement = listIndexColumn.get(0);
				fieldForSorting = asc * fieldForSorting;
				listIndexColumn.set(0, fieldForSorting);
				for (int i = 1; i < listIndexColumn.size(); i++) {
					int element = listIndexColumn.get(i);
					listIndexColumn.set(i, nextElement);
					nextElement = element;
				}
				
				//New Functionality with same mapping
				listOrdersDTO = orderService.searchOrdersWithOptionsAndSortingNew(
								creationDateStartArg, creationDateEndArg,
								reportDateBetween, userLogin, lsOrderId,
								status, listIndexColumn, PAGE_ITEMS_COUNT,
								indexSet, productOrderNumberSearch,clientOrderNumber,
								clientOther);
				
//				listOrdersDTO = orderService.searchOrdersWithOptionsAndSorting(
//						creationDateStartArg, creationDateEndArg,
//						reportDateBetween, userLogin, lsOrderId, status,
//						listIndexColumn, PAGE_ITEMS_COUNT, indexSet);
				
//				// New Searching Functionality
//				listOrdersDTO = orderService.searchOrdersWithOptionsAndSorting(
//						creationDateStartArg, creationDateEndArg,
//						reportDateBetween, orderDTOObj, listIndexColumn,
//						PAGE_ITEMS_COUNT, indexSet);
				
				int balance = 0;
				int OrderIndex = 0;
				for (OrdersDTO orDTO : listOrdersDTO) {
					balance = (balance == 1 ? 0 : 1);
					if (balance == 1) {
						orDTO.setCssStyle("background-color: rgb(245,249,252);border-right: 1px solid #CCCCCC;border-left:1px solid #CCCCCC;border-top:  1px solid #CCCCCC;");
					} else {
						orDTO.setCssStyle("background-color: color:white;border-right:1px solid #CCCCCC;border-left:1px solid #CCCCCC;border-top:1px solid #CCCCCC;");
					}
					orDTO.setIndex(OrderIndex);
					OrderIndex++;
				}
				session.setAttribute("listIndexColumn", listIndexColumn);
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				session.setAttribute("asc", asc);
				return SUCCESS;
			}

			/*------ when Admin click on the lsOrder link in table -----------
					show popup detail and allow admin to update Order
			  ---------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& editOrderSignal != null && editOrderSignal != 0L) {
				orderToEdit = listOrdersDTO.get(indexOrder);
				if (orderToEdit == null)
					orderToEdit = new OrdersDTO();
				if (orderToEdit.getProductOrderDate() == null)
					strProductOrderDate = "";
				showOrderDetailPop = "display:block;visibility:visible;";
				return SUCCESS;
			}

			/*--- when Admin click on the cancel Button of orderDetailPop ---
					we mast just hide popup OrderDetail
			  ---------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& cancelSignal != null && cancelSignal != 0L) {
				showOrderDetailPop = "visibility:hidden;display:none;";
				return SUCCESS;
			}

			/*-------------------- When Admin left lsProduct TextField -------------
								check userPrice in DB, and write it in web view
			 -----------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& checkProductPriceSignal != null
					&& checkProductPriceSignal != 0L) {
				OrdersDTO orderDTOToUpdate = listOrdersDTO.get(indexOrder);
				orderDTOToUpdate = fillDataOrderDTO(orderDTOToUpdate);
				OrdersRows orderRowToUpadate = orderDTOToUpdate.getRowsList()
						.get(indexRow);
				UserProductPriceDTO userProductPrice = productService
						.getUsrPPriceByLsproductId(userId, lsProductID);
				orderRowToUpadate.setCss("");
				orderRowToUpadate.setCssPrice("");
				if (userProductPrice == null) {
					orderRowToUpadate.setCss("background-color:red;");
					orderRowToUpadate.setProductDescription("");
					orderRowToUpadate.setStock(null);
					orderRowToUpadate.setProductId(null);
					orderRowToUpadate.setLsProductID(lsProductID);
					orderRowToUpadate.setLsPrice(null);
				} else {
					Double usrPrice = orderRowToUpadate.getUnitPrice();
					if (usrPrice == null)
						usrPrice = 0D;
					if (usrPrice < userProductPrice.getPriceNum()) {
						orderRowToUpadate.setCssPrice("background-color:red;");
					}
					orderRowToUpadate.setProductDescription(userProductPrice
							.getProductTitle());
					orderRowToUpadate.setStock(userProductPrice.getStock());
					orderRowToUpadate.setProductId(userProductPrice
							.getProductId());
					orderRowToUpadate.setLsProductID(userProductPrice
							.getLsProductId());
					orderRowToUpadate
							.setLsPrice(userProductPrice.getPriceNum());
				}
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				orderToEdit = orderDTOToUpdate;
				listOrdersDTO = (List<OrdersDTO>) session
						.getAttribute("listOrdersDTOReport");
				showOrderDetailPop = "display:block;visibility:visible;";
				return SUCCESS;
			}

			/*----------------- When Admin check on saveTemporaryRow Icon --------------------------
					we must first obtained the object that contains the list of rows,
					after we accede to the row by index recovered by web view and change it
			 ---------------------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& saveTemporaryRowSignal != null
					&& saveTemporaryRowSignal != 0L) {
				OrdersDTO orderDTOToUpdate = listOrdersDTO.get(indexOrder);
				orderDTOToUpdate = fillDataOrderDTO(orderDTOToUpdate);
				OrdersRows orderRowToSaveMemory = orderDTOToUpdate
						.getRowsList().get(indexRow);
				orderRowToSaveMemory.setIcon("images/orders/itemValidated.png");
				if (orderRowToSaveMemory != null) {
					orderRowToSaveMemory.setQuantity(quantity);
					orderRowToSaveMemory.setLsProductID(lsProductID);
					orderRowToSaveMemory
							.setProductDescription(productDescription);
					orderRowToSaveMemory.setUnitPrice(unitPrice);
					orderRowToSaveMemory
							.setCssPrice("background-color:#FF6666;");
					orderRowToSaveMemory
							.setCssQuantity("background-color:#FF6666;");
					if (quantity != null && quantity > 0D)
						orderRowToSaveMemory.setCssQuantity("");
					if (unitPrice != null
							&& orderRowToSaveMemory.getLsPrice() != null
							&& unitPrice >= orderRowToSaveMemory.getLsPrice())
						orderRowToSaveMemory.setCssPrice("");
					orderRowToSaveMemory.setShippingFee(shippingFee);
					orderRowToSaveMemory.setShippingPrice(shippingFee);
					orderRowToSaveMemory.setShippingCompany(shippingCompany);
					orderRowToSaveMemory.setTrackingNumber(trakingNumber);
					if (orderRowToSaveMemory.getCurrencyId() != null
							&& orderRowToSaveMemory.getCurrencyId() != 1
							&& orderRowToSaveMemory.getCurrencyRate() != null) {
						if (unitPrice != null) {
							orderRowToSaveMemory
									.setCurrencyUnitPrice(unitPrice);
							unitPrice = unitPrice
									/ orderRowToSaveMemory.getCurrencyRate();
							unitPrice = (double) Math.round(unitPrice * 100) / 100;
							orderRowToSaveMemory.setUnitPrice(unitPrice);
						}
						/*
						 * if(shippingFee!=null) {
						 * orderRowToSaveMemory.setCurrencyShippingPrice
						 * (shippingFee); shippingFee =
						 * shippingFee/orderRowToSaveMemory.getCurrencyRate();
						 * shippingFee = (double)
						 * Math.round(shippingFee*100)/100;
						 * orderRowToSaveMemory.setShippingPrice(shippingFee); }
						 */
					}
					int indexOrder = 0;
					int indexRow = 0;
					for (OrdersDTO orderDTO : listOrdersDTO) {
						orderDTO.setIndex(indexOrder);
						indexOrder++;
						indexRow = 0;
						for (OrdersRows orderRows : orderDTO.getRowsList()) {
							orderRows.setIndex(indexRow);
							indexRow++;
						}
					}
					session.setAttribute("listOrdersDTOReport", listOrdersDTO);
					listOrdersDTO = (List<OrdersDTO>) session
							.getAttribute("listOrdersDTOReport");
				}
				orderToEdit = listOrdersDTO.get(indexOrder);
				// Change totalPrice also
				if (orderToEdit.getRowsList().get(0) != null
						&& orderToEdit.getRowsList().get(0).getQuantity() != null
						&& orderToEdit.getRowsList().get(0)
								.getQuantityToSplit() != null
						&& orderToEdit.getRowsList().get(0).getUnitPrice() != null) {
					Double priceTotal = orderToEdit.getRowsList().get(0)
							.getUnitPrice()
							* orderToEdit.getRowsList().get(0)
									.getQuantityToSplit();
					priceTotal = (double) Math.round(priceTotal * 100) / 100;
					orderToEdit.setTotalPrice(priceTotal);
				}
				showOrderDetailPop = "display:block;visibility:visible;";
				return SUCCESS;
			}

			/*------- When Admin click on addSimilarRow Icon on the OrderDetailPop --------
								Add one Row Similar at the previews
			  -----------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& addSimilarRowSignal != null && addSimilarRowSignal != 0L) {
				OrdersDTO orderDTOToUpdate = listOrdersDTO.get(indexOrder);
				// generate lsOrderId to new order
				orderDTOToUpdate = fillDataOrderDTO(orderDTOToUpdate);
				OrdersRows orderRowToClone = orderDTOToUpdate.getRowsList()
						.get(indexRow);
				if (orderRowToClone != null) {
					if (!orderRowToClone.getIcon().equals(
							"images/orders/itemValidated.png")) {
						orderRowToClone.setQuantity(quantity);
						orderRowToClone.setLsProductID(lsProductID);
						orderRowToClone.setStock(stock);
						orderRowToClone
								.setProductDescription(productDescription);
						orderRowToClone.setUnitPrice(unitPrice);
						orderRowToClone.setShippingFee(shippingFee);
						orderRowToClone.setShippingCompany(shippingCompany);
						orderRowToClone.setTrackingNumber(trakingNumber);
					}
					orderRowToClone.setIcon("images/orders/itemValidated.png");
					OrdersRows orderRowToAdd = DTOFactory
							.getOrderRowClone(orderRowToClone);
					orderRowToAdd.setId(-1L);
					// Add currencyId
					if (orderRowToClone.getCurrencyId() != null)
						orderRowToAdd.setCurrencyId(orderRowToClone
								.getCurrencyId());

					orderDTOToUpdate.getRowsList().add(indexRow + 1,
							orderRowToAdd);
					int indexOrder = 0;
					int indexRow = 0;
					for (OrdersDTO orderDTO : listOrdersDTO) {
						orderDTO.setIndex(indexOrder);
						indexOrder++;
						indexRow = 0;
						for (OrdersRows orderRows : orderDTO.getRowsList()) {
							orderRows.setIndex(indexRow);
							indexRow++;
						}
					}
					session.setAttribute("listOrdersDTOReport", listOrdersDTO);
					listOrdersDTO = (List<OrdersDTO>) session
							.getAttribute("listOrdersDTOReport");
				}
				orderToEdit = listOrdersDTO.get(indexOrder);
				showOrderDetailPop = "display:block;visibility:visible;";
				return SUCCESS;
			}

			/*-------- When Admin click on Delete Row Icon of orderDetail Popup-----------
									Delete this row using index
			 -----------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& deleteRowSignal != null && deleteRowSignal != 0L) {
				OrdersDTO orderDTO = listOrdersDTO.get(indexOrder);
				orderDTO = fillDataOrderDTO(orderDTO);
				int nb = orderService.nbOrderRowsNotDeleted(orderDTO
						.getRowsList());
				if (orderDTO != null && orderDTO.getRowsList().size() > 1) {
					for (int i = 0; i < orderDTO.getRowsList().size(); i++) {
						if (i == indexRow && nb > 1) {
							orderDTO.getRowsList().get(i).setToDelete(1);
							break;
						}
					}
				}
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				orderToEdit = listOrdersDTO.get(indexOrder);
				showOrderDetailPop = "display:block;visibility:visible;";
				return SUCCESS;
			}

			/*------ when Admin click on the button save of orderDetail ------------------
					 save order and hide pup  
			  ----------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& saveOrdersSignal != null && saveOrdersSignal != 0L) {
				session.setAttribute("orderNotSavedAtFirst", null);
				orderToEdit = listOrdersDTO.get(indexOrder);
				orderToEdit = fillDataOrderDTO(orderToEdit);

				// add special handling shipping
				User user = null;
				if (orderToEdit.getUserLogin() != null)
					user = userService.getUserByLogin(orderToEdit
							.getUserLogin());
				if (user != null) {
					Double totalPrice = null;
					orderToEdit.setSpecialHandlingName(user
							.getSpecialHandlingName());
					orderToEdit.setSpecialHandlingFee(user
							.getSpecialHandlingFee());
					if (orderToEdit.getRowsList().get(0).getQuantity() != null
							&& orderToEdit.getRowsList().get(0).getUnitPrice() != null) {
						totalPrice = orderToEdit.getRowsList().get(0)
								.getQuantity()
								* orderToEdit.getRowsList().get(0)
										.getUnitPrice();
						totalPrice = (double) Math.round(totalPrice * 100) / 100;
					}

					orderToEdit.setTotalPrice(totalPrice);
				}

				orderService.updateOrderByLsOrderId(orderToEdit);
				for (OrdersRows row : orderToEdit.getRowsList()) {
					if (row.getId() == -1)
						row.setId(0L);
				}
				OrdersRows row = orderToEdit.getRowsList().get(0);
				if (row != null) {
					orderToEdit.getShippedDate();
					orderToEdit.setLsPrice(row.getLsPrice());
					orderToEdit.setLsProductID(row.getLsProductID());
					orderToEdit.setProductDescription(row
							.getProductDescription());
					orderToEdit.setQuantity(row.getQuantity());
				}
				orderToEdit = DTOFactory.getOrderDTOConsideredMissingInfo(
						orderToEdit, hashProvinces);
				listIndexColumn = (List<Integer>) session
						.getAttribute("listIndexColumn");
				
//				listOrdersDTO = orderService.searchOrdersWithOptionsAndSorting(
//						creationDateStartArg, creationDateEndArg,
//						reportDateBetween, userLogin, lsOrderId, status,
//						listIndexColumn, PAGE_ITEMS_COUNT, indexSet);
				

				//New Functionality with same mapping
				listOrdersDTO = orderService.searchOrdersWithOptionsAndSortingNew(
								creationDateStartArg, creationDateEndArg,
								reportDateBetween, userLogin, lsOrderId,
								status, listIndexColumn, PAGE_ITEMS_COUNT,
								indexSet, productOrderNumberSearch,clientOrderNumber,
								clientOther);				
				
				// New Searching Functionality
//				listOrdersDTO = orderService.searchOrdersWithOptionsAndSorting(
//						creationDateStartArg, creationDateEndArg,
//						reportDateBetween, orderDTOObj, listIndexColumn,
//						PAGE_ITEMS_COUNT, indexSet);
				
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				message = "Saving has completed successfuly";
				showSaveSuccessPop = "display:block;visibility:visible;";
				showOrderDetailPop = "display:block;visibility:visible;";
				return SUCCESS;
			}

			/*------ When user change Quantity to split in orderDetailPop -----------
					 prepare order to split from two other orders witch
				 	 one must have a lsOrder with underscore 
			 ------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& quantityToChangeSignal != null
					&& quantityToChangeSignal != 0L) {
				OrdersDTO orderToChangeQt = listOrdersDTO.get(indexOrder);
				OrdersRows orderRow = orderToChangeQt.getRowsList().get(
						indexRow);
				orderToChangeQt = fillDataOrderDTO(orderToChangeQt);
				if (quantityToChange < orderRow.getQuantity())
					orderRow.setQuantityToSplit(quantityToChange);
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				listOrdersDTO = (List<OrdersDTO>) session
						.getAttribute("listOrdersDTOReport");
				orderToEdit = listOrdersDTO.get(indexOrder);
				showOrderDetailPop = "display:block;visibility:visible;";
				return SUCCESS;
			}

			/*-------------------- Duplicate Order ----------------------------------------
							Create order in just in memory
			 -----------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& duplicateOrderSignal != null
					&& duplicateOrderSignal != 0L) {
				OrdersDTO orderToClone = listOrdersDTO.get(indexOrder);
				orderToClone = fillDataOrderDTO(orderToClone);
				hashOrders = new Hashtable<String, OrdersDTO>();
				for (OrdersDTO ord : listOrdersDTO) {
					hashOrders.put(ord.getLsOrderId(), ord);
				}
				OrdersDTO orderClone = DTOFactory
						.getOrderDTOSplitted(orderToClone);
				if (orderClone != null) {
					orderClone.setDuplicate(true);
					String lsOrder = orderClone.getLsOrderId();
					String strlsOrder = orderService.generateLsOrderId(lsOrder,
							hashOrders);
					orderClone.setLsOrderId(strlsOrder);// rgb(116,180,209)
					orderClone
							.setCssStyle("background-color:#FFFF99;border-right: 1px solid #CCCCCC;border-left:1px solid #CCCCCC;border-top:  1px solid #CCCCCC;");
					orderToEdit = orderClone;
					orderToEdit.setBackgroundColor("background-color:#FFFF99;");
					listOrdersDTO.add(indexOrder + 1, orderClone);
					indexOrder = 0;
					for (OrdersDTO ord : listOrdersDTO) {
						ord.setIndex(indexOrder);
						indexOrder++;
					}
					orderService.updateOrderByLsOrderId(orderToClone);
					orderService.insertOrderWithRows(orderClone);
					orderClone.setDuplicate(false);
					for (OrdersRows row : orderClone.getRowsList()) {
						if (row.getId() < 0L)
							row.setId(0L);
					}
					if (listOrdersDTO.size() > 0) {
						session.setAttribute("listOrdersDTOReport",
								listOrdersDTO);
					}
				} else
					orderToEdit = orderToClone;
				showOrderDetailPop = "display:block;visibility:visible;";
				return SUCCESS;
			}

			/*-------------------- When user check print item -----------------------------
					Add or remove this element from the orders to print
			 -----------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& okSaveSuccessPopSignal != null
					&& okSaveSuccessPopSignal != 0L) {
				showSaveSuccessPop = "visibility:hidden;display:none;";
				showOrderDetailPop = "visibility:hidden;display:none;";
				return SUCCESS;
			}
		} catch (Exception e) {
			e.printStackTrace();
			return "input";
		}
		return SUCCESS;
	}

	/*
	 * ==========================================================================
	 * =============== fill all fields of order without rows
	 * ====================
	 * =====================================================================
	 */
	public OrdersDTO fillDataOrderDTO(OrdersDTO orderDTO) {
		SimpleDateFormat frm = new SimpleDateFormat("dd/MM/yyyy");
		orderDTO.setClientLastName(clientLastName);
		orderDTO.setClientFirstName(clientFirstName);
		orderDTO.setClientOtherNames(clientOtherNames);
		orderDTO.setClientStreet(clientStreet);
		orderDTO.setClientOtherStreet(clientOtherStreet);
		orderDTO.setClientCity(clientCity);
		orderDTO.setClientProvince(code);
		orderDTO.setClientPostalCode(clientPostalCode);
		orderDTO.setClientPhone(clientPhone);
		orderDTO.setClientEmail(clientEmail);
		orderDTO.setProductOrderNumber(productOrderNumberSearch);
		orderDTO.setCompanyHeader(companyHeader);
		if (((strProductOrderDate) != null)
				&& (!"".equals(strProductOrderDate))) {
			frm = new SimpleDateFormat("dd/MM/yyyy");
			try {
				Date date = frm.parse(strProductOrderDate);
				orderDTO.setProductOrderDate(date);
			} catch (Exception pe) {
				addActionError("Please enter a date in the correct format");
			}
		}

		if (((strCreationOrderDate) != null)
				&& (!"".equals(strCreationOrderDate))) {
			frm = new SimpleDateFormat("dd/MM/yyyy");
			try {
				Date date = frm.parse(strCreationOrderDate);
				orderDTO.setCreationDate(date);
			} catch (Exception pe) {
				addActionError("Please enter a date in the correct format");
			}
		}

		if (((strRequiredDate) != null) && (!"".equals(strRequiredDate))) {
			frm = new SimpleDateFormat("dd/MM/yyyy");
			try {
				Date date = frm.parse(strRequiredDate);
				orderDTO.setRequiredDate(date);
			} catch (Exception pe) {
				addActionError("Please enter a date in the correct format");
			}
		}
		return orderDTO;
	}

	/*
	 * ==========================================================================
	 * =============== initialize ListIndexSet
	 * ==================================
	 * =======================================================
	 */
	public void initalizeListIndexSet(HttpSession session,
			OrdersService orderService) throws ServiceException {
		listIndexSet = new ArrayList<OrdersDTO>();
		totalOrders = orderService.getCountOrders(creationDateStartArg,
				creationDateEndArg, reportDateBetween, userLogin, lsOrderId,
				status,productOrderNumberSearch,clientOrderNumber,clientOther);
		
		String strcount = totalOrders.toString();
		Integer sizeList = Integer.parseInt(strcount) / PAGE_ITEMS_COUNT;
		nextListPages = 1;
		session.setAttribute("nextListPages", nextListPages);
		for (int i = 1; i <= sizeList + 1 && i <= 11; i++) {
			OrdersDTO ord = new OrdersDTO();
			ord.setCssStyle("");
			ord.setIndex(i);
			listIndexSet.add(ord);
		}
		indexSet = 0;
		session.setAttribute("indexSet", indexSet);
		session.setAttribute("totalOrders", totalOrders);
		session.setAttribute("listIndexSet", listIndexSet);
		session.setAttribute("productOrderNumberSearch", productOrderNumberSearch);

	}

	/*
	 * ==========================================================================
	 * =============== initialize listIndexColumn
	 * ================================
	 * =========================================================
	 */
	List<Integer> getNewListIndexColumn() {
		List<Integer> reult = new ArrayList<Integer>();
		for (int i = 0; i <= 34; i++) {
			if (i != 2 && i <= 13) {
				reult.add(i);
				if (i != 0)
					reult.add(-i);
			}
			if (i == 30 || i == 31 || i == 34) {
				reult.add(i);
				reult.add(-i);
			}
		}
		return reult;
	}

	/*
	 * ==========================================================================
	 * =============== getStatus Selected by Admin for searching
	 * ================
	 * =========================================================================
	 */
	public String getStatusSelected(Integer StatusIndex) {
		String result = "";
		switch (StatusIndex) {
		case 0:
			result = "open";
			break;
		case 1:
			result = "progress";
			break;
		case 2:
			result = "shipped";
			break;
		case 3:
			result = "invoiced";
			break;
		case 4:
			result = "canceled";
			break;
		default:
			result = "";
		}
		return result;
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 2 2015-04-15 11:40:07.174
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:233)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:255)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:190)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:89)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:728)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:788)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1244)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:102)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2015-04-15 11:40:07.184
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2015-04-15 11:40:07.184
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 0 2015-04-15 11:40:07.184
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:233)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:255)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:190)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:89)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:728)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:788)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1244)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:102)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2015-04-15 11:40:07.184
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.core 4 4 2015-04-15 11:40:26.746
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.loyauty.web.struts.action.orders;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.List;

import javax.servlet.http.HttpSession;
import lombok.Getter;
import lombok.Setter;

import com.loyauty.exception.ServiceException;
import com.loyauty.exception.ServiceLocatorException;
import com.loyauty.model.OrdersRows;
import com.loyauty.model.User;
import com.loyauty.service.core.DTOFactory;
import com.loyauty.service.core.dto.BasicUserDTO;
import com.loyauty.service.core.dto.OperationsDTO;
import com.loyauty.service.core.dto.OrdersDTO;
import com.loyauty.service.core.dto.ProvinceDTO;
import com.loyauty.service.core.dto.UserProductPriceDTO;
import com.loyauty.service.core.dto.UserSessionDTO;
import com.loyauty.service.core.dto.UsersPrivilegesDTO;
import com.loyauty.service.operations.OperationsService;
import com.loyauty.service.orders.OrdersService;
import com.loyauty.service.product.ProductService;
import com.loyauty.service.user.UserService;
import com.loyauty.web.struts.action.LoyautyAction;

public class ReportOrders extends LoyautyAction {
	private static final long serialVersionUID = -3811760851445730062L;
	private UserService userService;
	private ProductService productService;
	private OrdersService orderService;
	private OperationsService operationsService;
	@Getter
	@Setter
	private String userLogin;
	@Getter
	@Setter
	private List<User> usersList;
	private static int USER_TYPE = 2;
	@Getter
	@Setter
	List<OrdersDTO> listOrdersDTO;
	@Getter
	@Setter
	List<OrdersDTO> listStatus;
	@Getter
	@Setter
	private String lsOrderId;
	@Getter
	@Setter
	Long poYpop;
	@Getter
	@Setter
	Long poXpop;
	@Getter
	@Setter
	private Long pageTop = 0L;
	@Getter
	@Setter
	private Date creationDate;
	@Getter
	@Setter
	private Long findOrdersSignal;
	private String status;
	@Getter
	@Setter
	private Long sizeResult = 0L;
	@Getter
	@Setter
	private Long sorting;
	@Getter
	@Setter
	private Long sortingOrdersSignal;
	@Getter
	@Setter
	private Integer fieldForSorting;
	@Getter
	@Setter
	private Integer asc;
	@Getter
	@Setter
	private Integer scrollDivRowsLeft;
	@Getter
	@Setter
	private Integer scrollPageLeft;
	@Getter
	@Setter
	private Integer scrollDivRowsTop;
	@Getter
	@Setter
	private String strCreationDateStart;
	@Getter
	@Setter
	private String strCreationDateEnd;
	@Getter
	@Setter
	private Date creationDateStart;
	@Getter
	@Setter
	private Date creationDateEnd;
	private Date creationDateStartArg;
	private Date creationDateEndArg;
	@Getter
	@Setter
	private Integer selectedStatus;
	@Getter
	@Setter
	private Long editOrderSignal;
	@Getter
	@Setter
	private Long cancelSignal;
	@Getter
	@Setter
	private Integer indexOrder;
	@Getter
	@Setter
	private OrdersDTO orderToEdit;
	@Getter
	@Setter
	private String strProductOrderDate;
	@Getter
	@Setter
	private String lsProductID;
	@Getter
	@Setter
	Integer indexRow;
	@Getter
	@Setter
	private String showOrderDetailPop;
	@Getter
	@Setter
	private Long userId;
	@Getter
	@Setter
	private Long checkProductPriceSignal;
	@Getter
	@Setter
	private Long saveTemporaryRowSignal;
	@Getter
	@Setter
	private Long addSimilarRowSignal;
	@Getter
	@Setter
	private Long deleteRowSignal;
	@Getter
	@Setter
	private Long saveOrdersSignal;
	@Getter
	@Setter
	private Boolean checkBoxPrint;

	// recovery Data Order
	@Getter
	@Setter
	private String clientLastName;
	@Getter
	@Setter
	private String clientFirstName;
	@Getter
	@Setter
	private String clientOtherNames;
	@Getter
	@Setter
	private String clientStreet;
	@Getter
	@Setter
	private String clientOtherStreet;
	@Getter
	@Setter
	private String clientCity;
	@Getter
	@Setter
	private String clientProvince;
	@Getter
	@Setter
	private String clientPostalCode;
	@Getter
	@Setter
	private String clientPhone;
	@Getter
	@Setter
	private String clientEmail;
//	@Getter
//	@Setter
//	private String productOrderNumber;
	@Getter
	@Setter
	private String strRequiredDate;

	// recovery data row
	@Getter
	@Setter
	private Double quantity;
	@Getter
	@Setter
	private String notes;
	@Getter
	@Setter
	private Double quantityToChange;
	@Getter
	@Setter
	private Double stock;
	@Getter
	@Setter
	private String productDescription;
	@Getter
	@Setter
	private Double unitPrice;
	@Getter
	@Setter
	private Double shippingFee;
	@Getter
	@Setter
	private String shippingCompany;
	@Getter
	@Setter
	private String companyHeader;

	@Getter
	@Setter
	private Long quantityToChangeSignal;
	@Getter
	@Setter
	private Long duplicateOrderSignal;
	@Getter
	@Setter
	private String strCreationDate;
	@Getter
	@Setter
	private String strCreationOrderDate;
	@Getter
	@Setter
	private User usr;
	@Getter
	@Setter
	private String showSaveSuccessPop;
	// showSaveSuccessPop="display:block;visibility:visible;";
	// showSaveSuccessPop="visibility:hidden;display:none;";
	@Getter
	@Setter
	private String message;
	@Getter
	@Setter
	private Long okSaveSuccessPopSignal;
	@Getter
	@Setter
	private Long showRowShipping;
	@Getter
	@Setter
	private Long showOnlyEditNote;
	@Getter
	@Setter
	private Long saveShippingSignal;
	@Getter
	@Setter
	private Long saveOnlyNoteSignal;
	@Getter
	@Setter
	private String code;
	@Getter
	@Setter
	private Long cityId;
	@Getter
	@Setter
	private List<ProvinceDTO> listProvinces;
	private Hashtable<String, ProvinceDTO> hashProvinces;
	@Getter
	@Setter
	private Boolean orderNotSavedAtFirst;
	@Getter
	@Setter
	private String strShippedDate;
	@Getter
	@Setter
	private String strShippingPrice;
	@Getter
	@Setter
	private String showConfirmDeleteOrderPop;
	@Getter
	@Setter
	private Long deleteOrderSignal;
	@Getter
	@Setter
	private Long confirmDeleteSignal;
	@Getter
	@Setter
	private UsersPrivilegesDTO userPrivileges;
	@Getter
	@Setter
	private UsersPrivilegesDTO usersPrivShippedToInvoiced;
	@Getter
	@Setter
	private UsersPrivilegesDTO usersPrivChangeShippedStatus;
	@Getter
	@Setter
	private HashMap<Integer, String> hashStatus;
	@Getter
	@Setter
	private Long statusId;
	@Getter
	@Setter
	private String strPrint;
	@Getter
	@Setter
	private Integer testSignal;
	@Getter
	@Setter
	private String newStatus;
	Long invoicedOrdersRefresh;
	@Getter
	@Setter
	private Integer reportDateBetween;
	@Getter
	@Setter
	private Long dateBetweenSignal;
	@Getter
	@Setter
	private Long selectAllOrdersSignal;
	@Getter
	@Setter
	private Boolean checkBoxItem;
	// ------Pagination
	@Getter
	@Setter
	Long pageIndexSignal;
	@Getter
	@Setter
	Long prevListPagesSignal;
	@Getter
	@Setter
	Long nextListPagesSignal;
	@Getter
	@Setter
	Long totalOrders;
	@Getter
	@Setter
	Integer nextListPages;
	@Getter
	@Setter
	Integer prevListPages;
	@Getter
	@Setter
	Integer indexSet = 0;
	@Getter
	@Setter
	Integer indexList;
	@Getter
	@Setter
	List<OrdersDTO> listIndexSet;
	@Getter
	@Setter
	Integer PAGE_ITEMS_COUNT = 100;
	
	//New Added Field in the search option as toggle functionality
	@Getter
	@Setter
	private String productOrderNumberSearch;
	@Getter
	@Setter
	private String trakingNumber;
	@Getter
	@Setter
	private String  clientOther;
	@Getter	@Setter
	private String	 clientOrderNumber;
	
	@Getter	@Setter
	private Integer switchBetweenClientLoginAndPoNumberSignal;
	@Getter	@Setter
	private Integer switchBetweenClientLoginAndPoNumber;
	//New Added Field in the search option as toggle functionality
	@Getter	@Setter
	private Integer switchBetweenLsOrderAndClientOrderIdSignal;
	@Getter	@Setter
	private Integer switchBetweenLsOrderAndClientOrderId;
	@Getter	@Setter
	private Integer switchBetweenStatusAndClientOtherSignal;
	@Getter	@Setter
	private Integer switchBetweenStatusAndClientOther;
	//Added for the multiple functionality in switching  
	@Getter	@Setter
	private Integer switchBetweenOptionFieldsSignal;
	@Getter	@Setter
	private Integer switchBetweenOptionFields;
	
	switchBetweenOptionFieldsSignal

	// ------Pagination

	/*
	 * ==========================================================================
	 * =============== Default constructor
	 * ======================================
	 * ===================================================
	 */
	public ReportOrders() throws ServiceLocatorException {
		super();
		userService = getServiceLocator().getUserService();
		orderService = getServiceLocator().getOrderService();
		productService = getServiceLocator().getProductService();
		operationsService = getServiceLocator().getOperationsService();
	}

	/*
	 * ==========================================================================
	 * =============== method execute
	 * ============================================
	 * =============================================
	 */
	@SuppressWarnings({ "rawtypes", "unchecked" })
	@Override
	public String execute() throws Exception {
		System.out.println("Product Order Number: "+ productOrderNumberSearch);
		System.out.println("Tracking Number: "+ trakingNumber);
		System.out.println("Client Order ID: "+ clientOrderNumber);
		System.out.println("Client Other ID: "+ clientOther);
		
		//Create new object or Order to modify the search functionality
		OrdersDTO orderDTOObj=new OrdersDTO();
		orderDTOObj.setLsOrderId(lsOrderId);
		orderDTOObj.setUserLogin(userLogin);
		orderDTOObj.setStatus(status);
		orderDTOObj.setProductOrderNumber(productOrderNumberSearch);
		orderDTOObj.setClientOrderNumber(clientOrderNumber);
		orderDTOObj.setClientOtherId(clientOther);
		
		HttpSession session = request.getSession(true);

		if (showOrderDetailPop == null)
			showOrderDetailPop = "visibility:hidden;display:none;";
		if (showConfirmDeleteOrderPop == null)
			showConfirmDeleteOrderPop = "visibility:hidden;display:none;";
		if (showSaveSuccessPop == null)
			showSaveSuccessPop = "visibility:hidden;display:none;";
		if (poYpop == null)
			poYpop = 100L;
		if (poXpop == null)
			poXpop = 100L;
		Hashtable<String, OrdersDTO> hashOrders;
		if (selectedStatus == null)
			selectedStatus = -1;
		sizeResult = (Long) session.getAttribute("sizeResult");
		totalOrders = (Long) session.getAttribute("totalOrders");
		if (totalOrders == null)
			totalOrders = 0L;
		asc = (Integer) session.getAttribute("asc");
		if (asc == null)
			asc = 0;
		if (sizeResult == null)
			sizeResult = 0L;
		if (indexOrder == null)
			indexOrder = 0;
		userPrivileges = (UsersPrivilegesDTO) session.getAttribute("userPrivileges");
		usersPrivShippedToInvoiced = (UsersPrivilegesDTO) session.getAttribute("usersPrivShippedToInvoiced");
		usersPrivChangeShippedStatus = (UsersPrivilegesDTO) session
				.getAttribute("usersPrivChangeShippedStatus");
		hashStatus = (HashMap<Integer, String>) session
				.getAttribute("hashStatus");
		if (hashStatus == null) {
			hashStatus = new HashMap<Integer, String>();
			hashStatus.put(0, "");
			hashStatus.put(1, "open");
			hashStatus.put(2, "progress");
		}
		List<Integer> listIndexColumn = new ArrayList<Integer>();
		// fill list status
		listStatus = (ArrayList<OrdersDTO>) session.getAttribute("listStatus");
		if (listStatus == null) {
			listStatus = new ArrayList<OrdersDTO>();
			OrdersDTO orderDTOOpen = new OrdersDTO();
			orderDTOOpen.setStatus("open");
			orderDTOOpen.setId(0L);
			listStatus.add(orderDTOOpen);
			OrdersDTO orderDTOProgress = new OrdersDTO();
			orderDTOProgress.setStatus("progress");
			orderDTOProgress.setId(1L);
			listStatus.add(orderDTOProgress);
			if (usersPrivChangeShippedStatus != null) {
				OrdersDTO orderDTOShipped = new OrdersDTO();
				orderDTOShipped.setStatus("shipped");
				orderDTOShipped.setId(2L);
				listStatus.add(orderDTOShipped);
			}

		}

		try {

			/*-------------------- recovery users list -----------------------------------
							Recovery users list in session
			 -----------------------------------------------------------------------------*/
			// recovery provinces
			listProvinces = (List<ProvinceDTO>) session
					.getAttribute("listProvinces");
			if (listProvinces == null)
				listProvinces = productService.getAllProvinces();
			orderNotSavedAtFirst = (Boolean) session
					.getAttribute("listNotSavedAtFirst");
			BasicUserDTO basicUserDTO = new BasicUserDTO();
			basicUserDTO.setTypeId(USER_TYPE);
			List<User> usersListSession = (List<User>) session
					.getAttribute("usersListSession");
			if (usersListSession == null) {
				List<UserSessionDTO> listAllUsers = userService
						.getAllUsers(basicUserDTO);
				usersList = new ArrayList<User>();
				for (UserSessionDTO userDTO : listAllUsers) {
					User user = new User();
					user.setId(userDTO.getId());
					user.setLogin(userDTO.getLogin());
					usersList.add(user);
				}
				session.setAttribute("usersListSession", usersList);
			} else{
				usersList = usersListSession;
			}
			
			listOrdersDTO = (ArrayList<OrdersDTO>) session.getAttribute("listOrdersDTOReport");
			
			reportDateBetween = (Integer) session.getAttribute("reportDateBetween");
			if (reportDateBetween == null) {
				reportDateBetween = 0;
				session.setAttribute("reportDateBetween", reportDateBetween);
			}

			//Added for the new field
			switchBetweenClientLoginAndPoNumber = (Integer) session.getAttribute("switchBetweenClientLoginAndPoNumber");
			if (switchBetweenClientLoginAndPoNumber == null) {
				switchBetweenClientLoginAndPoNumber = 0;
				session.setAttribute("switchBetweenClientLoginAndPoNumber", switchBetweenClientLoginAndPoNumber);
			}
			switchBetweenLsOrderAndClientOrderId = (Integer) session.getAttribute("switchBetweenLsOrderAndClientOrderId");
			if (switchBetweenLsOrderAndClientOrderId == null) {
				switchBetweenLsOrderAndClientOrderId = 0;
				session.setAttribute("switchBetweenLsOrderAndClientOrderId", switchBetweenLsOrderAndClientOrderId);
			}
			switchBetweenStatusAndClientOther = (Integer) session.getAttribute("switchBetweenStatusAndClientOther");
			if (switchBetweenStatusAndClientOther == null) {
				switchBetweenStatusAndClientOther = 0;
				session.setAttribute("switchBetweenStatusAndClientOther", switchBetweenStatusAndClientOther);
			}

			/*------ always check if the Admin select all orders ------------
					if The Admin select all orders change checkBoxItem value 
			  ---------------------------------------------------------------*/
			if (selectAllOrdersSignal != null && selectAllOrdersSignal != 0L) {
				if (checkBoxItem != null) {
					session.setAttribute("checkBoxItem", checkBoxItem);
					session.setAttribute("allOrdersSelectedSignal", 0L);
					if (checkBoxItem)
						session.setAttribute("allOrdersSelectedSignal", 1L);
				}
			}
			checkBoxItem = (Boolean) session.getAttribute("checkBoxItem");
			if (checkBoxItem == null)
				checkBoxItem = false;
			/*------ always recovery creationDate from strCreationDate ------
						always keep the user search options
			  ---------------------------------------------------------------*/
			creationDateStart = null;
			SimpleDateFormat frm = new SimpleDateFormat("dd/MM/yyyy");
			if (((strCreationDateStart) != null)
					&& (!"".equals(strCreationDateStart))) {
				try {
					Date date = frm.parse(strCreationDateStart);
					creationDateStart = date;
					creationDateStartArg = date;
				} catch (Exception pe) {
					creationDateStart = null;
					addActionError("Please enter a date in the correct format");
				}
			}
			if (creationDateStart == null) {
				Date date = frm.parse("01/01/1900");
				creationDateStartArg = date;
			}
			creationDateEnd = null;
			if (((strCreationDateEnd) != null)
					&& (!"".equals(strCreationDateEnd))) {
				frm = new SimpleDateFormat("dd/MM/yyyy");
				try {
					Date date = frm.parse(strCreationDateEnd);
					creationDateEnd = date;
					creationDateEndArg = date;
				} catch (Exception pe) {
					creationDateEnd = null;
					addActionError("Please enter a date in the correct format");
				}
			}
			if (creationDateEnd == null) {
				creationDateEndArg = new Date();
			}

			/*------ always recovery Status from selectedStatus key ------
						always keep the status search options
			  ---------------------------------------------------------------*/
			status = getStatusSelected(selectedStatus);

			/*----------- always initialized listPages if not done ----------
				   		    and check if is there next listPages
			  ---------------------------------------------------------------*/
			nextListPages = (Integer) session.getAttribute("nextListPages");
			if (nextListPages == null)
				nextListPages = 0;
			if (indexSet == null || indexSet == -1) {
				indexSet = (Integer) session.getAttribute("indexSet");
				if (indexSet == null)
					indexSet = 0;
			}
			listIndexSet = (List<OrdersDTO>) session
					.getAttribute("listIndexSet");
			if (listIndexSet == null)
				initalizeListIndexSet(session, orderService);

			/*----------------- When Admin Click on the pageIndex ----------------------------------
										catch  page index
			 ---------------------------------------------------------------------------------------*/
			//Toggle Switch between PO Date and Shipping date
			if (dateBetweenSignal != null && dateBetweenSignal != 0L) {
				reportDateBetween = ((reportDateBetween == null || reportDateBetween == 0) ? 1: 0);
				listOrdersDTO = new ArrayList<OrdersDTO>();
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				session.setAttribute("reportDateBetween", reportDateBetween);
				return SUCCESS;
			}
		
			//Toggle Switch between Client Login and PO Number	
//			switchBetweenClientLoginAndPoNumber=(Integer)session.getAttribute("switchBetweenClientLoginAndPoNumber");
			
			if (switchBetweenClientLoginAndPoNumberSignal != null && switchBetweenClientLoginAndPoNumberSignal != 0L) {
				switchBetweenClientLoginAndPoNumber = ((switchBetweenClientLoginAndPoNumber == null 
						|| switchBetweenClientLoginAndPoNumber == 0) ? 1: 0);
				listOrdersDTO = new ArrayList<OrdersDTO>();
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				session.setAttribute("switchBetweenClientLoginAndPoNumber", switchBetweenClientLoginAndPoNumber);
				return SUCCESS;
			}
			
			//Switching between "ls_Order" and "Client Order Id"	
//			switchBetweenLsOrderAndClientOrderId = (Integer)session.getAttribute("switchBetweenLsOrderAndClientOrderId");
			
			if (switchBetweenLsOrderAndClientOrderIdSignal != null && switchBetweenLsOrderAndClientOrderIdSignal != 0L) {
				switchBetweenLsOrderAndClientOrderId = ((switchBetweenLsOrderAndClientOrderId == null 
						|| switchBetweenLsOrderAndClientOrderId == 0) ? 1: 0);
				listOrdersDTO = new ArrayList<OrdersDTO>();
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				session.setAttribute("switchBetweenLsOrderAndClientOrderId", switchBetweenLsOrderAndClientOrderId);
				return SUCCESS;
			}
			
			//Switching between "Status" and "Client Other Id"
//			switchBetweenStatusAndClientOther = (Integer)session.getAttribute("switchBetweenStatusAndClientOther");
			
			if (switchBetweenStatusAndClientOtherSignal != null && switchBetweenStatusAndClientOtherSignal != 0L) {
				switchBetweenStatusAndClientOther = ((switchBetweenStatusAndClientOther == null 
						|| switchBetweenStatusAndClientOther == 0) ? 1: 0);
				listOrdersDTO = new ArrayList<OrdersDTO>();
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				session.setAttribute("switchBetweenStatusAndClientOther", switchBetweenStatusAndClientOther);
				return SUCCESS;
			}
			
			if (switchBetweenOptionFieldsSignal != null && switchBetweenOptionFields != 0L) {
				switchBetweenOptionFields++;
				if (switchBetweenOptionFields == 4) switchBetweenOptionFields = 0;
				
			}
			

			
			
			/*----------------- When Admin Click on the pageIndex ----------------------------------
										catch  page index
			 ---------------------------------------------------------------------------------------*/
			if (pageIndexSignal != null && pageIndexSignal != 0L) {
				OrdersDTO orderDTO = (OrdersDTO) session.getAttribute("orderPageSelected");
				if (orderDTO != null)
					orderDTO.setCssStyle("");
				OrdersDTO orderPageSelected = listIndexSet.get(indexList);
				orderPageSelected
						.setCssStyle("background-color:#FFFF99;border:1px solid #CCCCCC;");
				indexSet = orderPageSelected.getIndex() - 1;
				indexSet = indexSet * PAGE_ITEMS_COUNT;
				session.setAttribute("indexSet", indexSet);
				session.setAttribute("listIndexSet", listIndexSet);
				session.setAttribute("orderPageSelected", orderPageSelected);
			}

			/*----------------- When Admin Click on the nextListPages ------------------------------
						recreate listIndexSet started with index>index+10 and indexSet>indexSet+10
			 ---------------------------------------------------------------------------------------*/
			if (nextListPagesSignal != null && nextListPagesSignal != 0L
					&& listIndexSet.size() > 0) {
				OrdersDTO orderDTOPrevious = (OrdersDTO) session
						.getAttribute("orderPageSelected");
				if (orderDTOPrevious != null)
					orderDTOPrevious.setCssStyle("");
				OrdersDTO orderDTO = listIndexSet.get(listIndexSet.size() - 1);
				if (orderDTO != null)
					nextListPages = orderDTO.getIndex() + 1;
				
				Long totalOrders = orderService.getCountOrders(creationDateStartArg,
						creationDateEndArg, reportDateBetween, userLogin, lsOrderId,
						status,productOrderNumberSearch,clientOrderNumber,clientOther);
				
				String strcount = totalOrders.toString();
				Integer sizeList = Integer.parseInt(strcount)
						/ PAGE_ITEMS_COUNT;
				if (nextListPages <= sizeList + 1) {
					listIndexSet = new ArrayList<OrdersDTO>();
					for (int i = nextListPages; i <= sizeList + 1
							&& i <= nextListPages + 10; i++) {
						OrdersDTO ord = new OrdersDTO();
						ord.setCssStyle("");
						ord.setIndex(i);
						listIndexSet.add(ord);
					}
					if (nextListPages <= sizeList + 1) {
						indexSet = nextListPages - 1;
						OrdersDTO orderPageSelected = listIndexSet.get(0);
						orderPageSelected
								.setCssStyle("background-color:#FFFF99;border:1px solid #CCCCCC;");
						indexSet = indexSet * PAGE_ITEMS_COUNT;
						session.setAttribute("indexSet", indexSet);
						session.setAttribute("nextListPages", nextListPages);
						session.setAttribute("listIndexSet", listIndexSet);
						session.setAttribute("orderPageSelected",
								orderPageSelected);
					}
				}
			}

			/*----------------- When Admin Click on the previousListPages --------------------------
					recreate listIndexSet started with index< index-10 and indexSet<indexSet-10
			 ---------------------------------------------------------------------------------------*/
			if (prevListPagesSignal != null && prevListPagesSignal != 0L
					&& listIndexSet.size() > 0) {
				OrdersDTO orderDTOPrevious = (OrdersDTO) session
						.getAttribute("orderPageSelected");
				if (orderDTOPrevious != null)
					orderDTOPrevious.setCssStyle("");
				nextListPages = (Integer) session.getAttribute("nextListPages");
				if (nextListPages != null && nextListPages >= 11) {
					prevListPages = nextListPages - 11;
					listIndexSet = new ArrayList<OrdersDTO>();
					for (int i = prevListPages; i < nextListPages; i++) {
						OrdersDTO ord = new OrdersDTO();
						ord.setCssStyle("");
						ord.setIndex(i);
						listIndexSet.add(ord);
					}
					indexSet = prevListPages - 1;
					OrdersDTO orderPageSelected = listIndexSet.get(0);
					orderPageSelected
							.setCssStyle("background-color:#FFFF99;border:1px solid #CCCCCC;");
					indexSet = indexSet * PAGE_ITEMS_COUNT;
					nextListPages = prevListPages;
					session.setAttribute("nextListPages", nextListPages);
					session.setAttribute("indexSet", indexSet);
					session.setAttribute("listIndexSet", listIndexSet);
					session.setAttribute("orderPageSelected", orderPageSelected);
				}
			}

			/*----------------- When Admin change province -----------------------------------------
								Check a list off this province
			 ---------------------------------------------------------------------------------------*/
			hashProvinces = (Hashtable<String, ProvinceDTO>) session
					.getAttribute("hashProvinces");
			if (hashProvinces == null) {
				listProvinces = productService.getAllProvinces();
				Hashtable<String, ProvinceDTO> hashProvinces = new Hashtable<String, ProvinceDTO>();
				for (ProvinceDTO prov : listProvinces) {
					hashProvinces.put(prov.getCode(), prov);
				}
				session.setAttribute("hashProvinces", hashProvinces);
			}
			if (code != null && !code.equals("") && listOrdersDTO != null) {
				ProvinceDTO provinceDTO = hashProvinces.get(code);
				if (provinceDTO != null) {
					clientProvince = provinceDTO.getCode();
				}
			}// else listCities=new ArrayList<CityDTO>();
			if (listOrdersDTO != null && indexOrder != -1) {
				orderToEdit = listOrdersDTO.get(indexOrder);
				if (orderToEdit != null) {
					orderToEdit.setClientProvince(code);
					session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				}
			}

			/*------------------------------- Refresh listOrdersDTO------------------------------------
						Refresh listOrders before generation of invoiced orders XLS file 
				 ------------------------------------------------------------------------------------------*/
			invoicedOrdersRefresh = (Long) session
					.getAttribute("invoicedOrdersRefresh");
			if (invoicedOrdersRefresh != null && invoicedOrdersRefresh != 0L) {
				listIndexColumn = (ArrayList<Integer>) session
						.getAttribute("listIndexColumn");
				if (listIndexColumn == null)
					listIndexColumn = getNewListIndexColumn();
				lsOrderId = lsOrderId.toUpperCase();
				
				//New Searching Functionality
				listOrdersDTO = orderService.searchOrdersWithOptionsAndSorting(
						creationDateStartArg, creationDateEndArg,
						reportDateBetween,orderDTOObj,listIndexColumn, PAGE_ITEMS_COUNT, indexSet);
				//Old Searching Functionality				
//				listOrdersDTO = orderService.searchOrdersWithOptionsAndSorting(
//						creationDateStartArg, creationDateEndArg,
//						reportDateBetween, userLogin, lsOrderId, status,
//						listIndexColumn, PAGE_ITEMS_COUNT, indexSet);
				
				if (findOrdersSignal != null && findOrdersSignal != 0L)
					initalizeListIndexSet(session, orderService);
				// Color in RED rows containing a GroupItems
				for (OrdersDTO orderDTO : listOrdersDTO) {
					if (orderDTO != null && orderDTO.getStatus() != null
							&& orderDTO.getStatus().equals("shipped")) {
						Long count = productService.isGroupProductID(orderDTO
								.getProductId());
						if (count != null && count >= 1) {
							orderDTO.setCssStyle("background-color: rgb(248,150,140); border-right:1px solid #CCCCCC;border-left:1px solid #CCCCCC;border-top:1px solid #CCCCCC;");
						}
					}
				}

				// keep search parameters to use in other
				// classes(PrintOrdersToPDF, ...)
				indexSet = 0;
				session.setAttribute("indexSet", indexSet);
				nextListPages = 0;
				session.setAttribute("nextListPages", nextListPages);
				session.setAttribute("selectedStatus", selectedStatus);
				session.setAttribute("creationDateStartArg",creationDateStartArg);
				session.setAttribute("creationDateEndArg", creationDateEndArg);
				session.setAttribute("reportDateBetween", reportDateBetween);
				session.setAttribute("lsOrderId", lsOrderId);
				session.setAttribute("userLogin", userLogin);
				session.setAttribute("status", status);
				session.setAttribute("listIndexColumn", listIndexColumn);
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				session.setAttribute("invoicedOrdersRefresh", 0L);
				
				session.setAttribute("productOrderNumberSearch", productOrderNumberSearch);
				session.setAttribute("clientOrderNumber", clientOrderNumber);
				session.setAttribute("clientOther", clientOther);
				return SUCCESS;
			}

			/*------------ When Admin click on the Button "Delete Order" in The OrderDtailPop --------------
								show other pop to confirm Order Delete
			  ----------------------------------------------------------------------------------------------*/
			if (deleteOrderSignal != null && deleteOrderSignal != 0L) {
				message = "Attention! if you click on \"Delete Order\" you can not restore it.";
				orderToEdit = listOrdersDTO.get(indexOrder);
				if (confirmDeleteSignal != null && confirmDeleteSignal == 0L) { // Delete
																				// Order
																				// Request
					showOrderDetailPop = "display:block;visibility:visible;";
					showConfirmDeleteOrderPop = "display:block;visibility:visible;";
				} else if (confirmDeleteSignal == 1L) { // Delete Order
														// Confirmed
					orderService.deleteOrderByLsOrderId(orderToEdit);
					// Save this operation in table operation
					OperationsDTO operationDTO = new OperationsDTO();
					User userAdmin = (User) session.getAttribute("userAdmin");
					if (userAdmin != null)
						operationDTO.setUserId(userAdmin.getId());
					operationDTO.setOperationDate(new Date());
					operationDTO.setOperationType("Delete Order");
					String dataBefore = "[PARTNER NAME:"
							+ orderToEdit.getUserLogin() + "];";
					dataBefore += " [LS_ORDER_ID:" + orderToEdit.getLsOrderId()
							+ "];";
					dataBefore += " [PRODUCT_ORDER_NUMBER:"
							+ orderToEdit.getProductOrderNumber() + "];";
					dataBefore += " [CLIENT_FIRST_NAME:"
							+ orderToEdit.getClientFirstName() + "];";
					dataBefore += " [CLIENT_LAST_NAME:"
							+ orderToEdit.getClientLastName() + "];";
					dataBefore += " [CLIENT_POSTAL_CODE:"
							+ orderToEdit.getClientPostalCode() + "];";
					dataBefore += " [LS_PRODUCT_ID:"
							+ orderToEdit.getLsProductID() + "];";
					dataBefore += " [UNIT_PRICE:" + orderToEdit.getUnitPrice()
							+ "];";
					dataBefore += " [STATUS:" + orderToEdit.getStatus() + "];";
					operationDTO.setDataBefore(dataBefore);
					operationDTO.setDataBefore(operationDTO.getDataBefore());
					operationDTO.setDataAfter("");
					operationsService.insertOperation(operationDTO);
					// Remove order from the list orders
					listOrdersDTO.remove(orderToEdit);
					session.setAttribute("listOrdersDTOReport", listOrdersDTO);
					showOrderDetailPop = "visibility:hidden;display:none;";
					showConfirmDeleteOrderPop = "visibility:hidden;display:none;";
					// initialize index orders
					int indexOrder = 0;
					int indexRow = 0;
					for (OrdersDTO orderDTO : listOrdersDTO) {
						orderDTO.setIndex(indexOrder);
						indexOrder++;
						indexRow = 0;
						for (OrdersRows orderRows : orderDTO.getRowsList()) {
							orderRows.setIndex(indexRow);
							indexRow++;
						}
					}
					session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				} else { // Cancel Order Delete
					showOrderDetailPop = "display:block;visibility:visible;";
					showConfirmDeleteOrderPop = "visibility:hidden;display:none;";
				}
				return SUCCESS;
			}

			/*------ When Admin click the "Edit link" in the Order Table for Edit NOTE -----
							show only field Edit Note
			  ------------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& showOnlyEditNote != null && showOnlyEditNote != 0L) {
				orderToEdit = listOrdersDTO.get(indexOrder);
				for (OrdersDTO order : listOrdersDTO) {
					order.setShowOnlyEditNote(0L);
					order.setCssRow("");
				}
				orderToEdit.setShowOnlyEditNote(1L);
				orderToEdit.setCssRow("background-color:#FF9966;");
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				listOrdersDTO = (ArrayList<OrdersDTO>) session
						.getAttribute("listOrdersDTOReport");
				return SUCCESS;
			}

			/*------------ When Admin click on link "Save Edit Note in the Orders Table" ----------
													save Only  notes
			  -------------------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& saveOnlyNoteSignal != null && saveOnlyNoteSignal != 0L) {
				if (indexOrder != null) {
					orderToEdit = listOrdersDTO.get(indexOrder);
					if (orderToEdit != null) {
						orderToEdit.setNotes(notes);
						orderToEdit.setShowRowShipping(0L);
						orderToEdit.setShowOnlyEditNote(0L);
						orderToEdit.setCssRow("");
						// Save Note
						Boolean sucess = orderService
								.updateShippingOrderElements(orderToEdit);
						session.setAttribute("listOrdersDTOReport",
								listOrdersDTO);
					}
				}
				return SUCCESS;
			}

			/*------------ When Admin click the "Edit link" in the Order Table -------------
								show fields to edit shipping parameters
			  ------------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& showRowShipping != null && showRowShipping != 0L) {

				orderToEdit = listOrdersDTO.get(indexOrder);
				for (OrdersDTO order : listOrdersDTO) {
					order.setShowRowShipping(0L);
					order.setCssRow("");
				}
				// only Admins who has Active = true of action name='All' can
				// change shipping settings
				// of orders shipped or invoiced
				if (usersPrivChangeShippedStatus == null
						&& orderToEdit.getStatus() != null
						&& (orderToEdit.getStatus().equals("shipped") || orderToEdit
								.getStatus().equals("invoiced"))) {
					showRowShipping = 0L;
					return SUCCESS;
				}

				if (orderToEdit != null) {
					orderToEdit.setShowRowShipping(1L);
					orderToEdit.setShowOnlyEditNote(1L);
					orderToEdit.setCssRow("background-color:#FF9966;");
					session.setAttribute("listOrdersDTOReport", listOrdersDTO);
					listOrdersDTO = (ArrayList<OrdersDTO>) session
							.getAttribute("listOrdersDTOReport");
				}
				if (orderToEdit.getStatus().equals("open")) {
					statusId = 0L;
				} else if (orderToEdit.getStatus().equals("progress")) {
					statusId = 1L;
				} else if (orderToEdit.getStatus().equals("shipped")) {
					statusId = 2L;
				} else if (orderToEdit.getStatus().equals("invoiced")) {
					statusId = 3L;
				} else if (orderToEdit.getStatus().equals("canceled")) {
					statusId = 4L;
				}
				return SUCCESS;
			}

			/*------------ When Admin click on link "Save in the Orders Table" ----------
							save all shipping parameters and notes
			 ----------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& saveShippingSignal != null && saveShippingSignal != 0L) {
				if (indexOrder != null) {
					orderToEdit = listOrdersDTO.get(indexOrder);
					if (orderToEdit != null) {
						Date shippedDateToEdit = null;
						frm = new SimpleDateFormat("dd/MM/yyyy");
						if (((strShippedDate) != null)
								&& (!"".equals(strShippedDate))) {
							strShippedDate = strShippedDate.replaceAll(" ", "");
							try {
								Date date = frm.parse(strShippedDate);
								shippedDateToEdit = date;
							} catch (Exception pe) {
								shippedDateToEdit = null;
							}
						}
						if (((strShippedDate) != null)
								&& (!"".equals(strShippedDate))
								&& strShippedDate.length() <= 8)
							shippedDateToEdit = orderToEdit.getShippedDate();
						Double shippingPrice = null;
						// Double currencyShippingPrice=null;
						if (strShippingPrice != null
								&& !strShippingPrice.equals("")) {
							strShippingPrice = strShippingPrice.replaceAll(" ",
									"");
							int index = strShippingPrice.indexOf(",");
							if (index >= 0) {
								String strUnitPrice1 = strShippingPrice
										.substring(0, index);
								String strUnitPrice2 = strShippingPrice
										.substring(index + 1,
												strShippingPrice.length());
								strShippingPrice = strUnitPrice1 + "."
										+ strUnitPrice2;
							}

							try {
								shippingPrice = Double
										.parseDouble(strShippingPrice);
								/*
								 * if(shippingPrice!=null &&
								 * orderToEdit.getCurrencyId()!=null &&
								 * orderToEdit.getCurrencyId()!=1 &&
								 * orderToEdit.getCurrencyRate()!=null) {
								 * currencyShippingPrice = shippingPrice *
								 * orderToEdit.getCurrencyRate();
								 * currencyShippingPrice = (double)
								 * Math.round(currencyShippingPrice*100)/100; }
								 */
							} catch (Exception pe) {
								shippingPrice = null;
							}
						}

						if (trakingNumber != null)
							trakingNumber = trakingNumber.replaceAll(
									"^ +| +$|( )+", "$1");
						if (shippingCompany != null)
							shippingCompany = shippingCompany.replaceAll(
									"^ +| +$|( )+", "$1");
						orderToEdit.setShippingPrice(shippingPrice);
						// orderToEdit.setCurrencyShippingPrice(currencyShippingPrice);
						// orderToEdit.getRowsList().get(0).setCurrencyShippingPrice(currencyShippingPrice);
						orderToEdit.setShippedDate(shippedDateToEdit);
						orderToEdit.setNotes(notes);
						if (newStatus != null && !newStatus.equals(""))
							orderToEdit.setStatus(newStatus);
						orderToEdit.setShippingCompany(shippingCompany);
						orderToEdit.setTrackingNumber(trakingNumber);
						orderToEdit.setShowRowShipping(0L);
						orderToEdit.setShowOnlyEditNote(0L);
						OrdersRows row = orderToEdit.getRowsList().get(0);
						row.setShippingPrice(shippingPrice);
						row.setShippingCompany(shippingCompany);
						row.setTrackingNumber(trakingNumber);
						orderToEdit.setCssRow("");

						if (newStatus != null && !newStatus.equals("")) { // if
																			// admin
																			// click
																			// on
																			// the
																			// save
																			// behind
																			// status
							orderService.updateStatusByLsOrderId(
									orderToEdit.getLsOrderId(), newStatus);
							orderToEdit.setStatus(newStatus);
							if (!newStatus.equals("shipped")
									&& !newStatus.equals("invoiced")
									&& !newStatus.equals("canceled")) {
								orderToEdit.setShippingPrice(null);
								orderToEdit.setTrackingNumber(null);
								orderToEdit.setShippedDate(null);
							}

						} else {// if admin click on the save other than Status
							if (orderToEdit.getShippedDate() != null
									&& orderToEdit.getTrackingNumber() != null
									&& !orderToEdit.getTrackingNumber().equals(
											"")
									&& orderToEdit.getShippingCompany() != null
									&& !orderToEdit.getShippingCompany()
											.equals("")
									&& orderToEdit.getShippingPrice() != null
									&& orderToEdit.getStatus() != null) {
								if (orderToEdit.getStatus().equals("open")
										|| orderToEdit.getStatus().equals(
												"progress")) {
									orderService.updateStatusByLsOrderId(
											orderToEdit.getLsOrderId(),
											"shipped");
									orderToEdit.setStatus("shipped");
								}
							} else {
								if (usersPrivChangeShippedStatus != null
										&& !orderToEdit.getStatus().equals(
												"open")
										&& !orderToEdit.getStatus().equals(
												"progress")) {
									orderService.updateStatusByLsOrderId(
											orderToEdit.getLsOrderId(),
											"progress");
									orderToEdit.setStatus("progress");
								}
							}
						}
						// if admin click on the save other then status(save
						// notes, save shipping company ...)
						Boolean sucess = orderService
								.updateShippingOrderElements(orderToEdit);
						session.setAttribute("listOrdersDTOReport",
								listOrdersDTO);
					}
				}
				return SUCCESS;
			}

			/*------------ When Admin click on icon findOrders.png ----------
								check user and complete infos client
			 ----------------------------------------------------------------*/
			if (findOrdersSignal != null
					&& findOrdersSignal != 0L
					|| (pageIndexSignal != null && pageIndexSignal != 0L)
					|| (nextListPagesSignal != null && nextListPagesSignal != 0L)
					|| (prevListPagesSignal != null && prevListPagesSignal != 0L)) {
				// session.setAttribute("allOrdersSelectedSignal",0L);
				// if admin click on search icon initialize checkBoxItem to
				// false
				if (findOrdersSignal != null && findOrdersSignal != 0L) {
					session.setAttribute("allOrdersSelectedSignal", 0L);
					checkBoxItem = false;
					session.setAttribute("checkBoxItem", checkBoxItem);
					indexSet = 0;
					session.setAttribute("indexSet", indexSet);
					nextListPages = 0;
					session.setAttribute("nextListPages", nextListPages);
					session.setAttribute("selectedStatus", selectedStatus);

				}
				// if admin navigate on pages keep the previous sorting
				if (((pageIndexSignal != null && pageIndexSignal != 0L)
						|| (nextListPagesSignal != null && nextListPagesSignal != 0L) || (prevListPagesSignal != null && prevListPagesSignal != 0L))) {
					listIndexColumn = (ArrayList<Integer>) session
							.getAttribute("listIndexColumn");
					if (listIndexColumn == null)
						listIndexColumn = getNewListIndexColumn();
				} else { // prepare new sorting
					listIndexColumn = getNewListIndexColumn();
				}

				lsOrderId = lsOrderId.toUpperCase();
				// if(findOrdersSignal!=null &&
				// findOrdersSignal!=0L)initalizeListIndexSet(session,orderService
				// );
				
				//Old Working Methods
//				listOrdersDTO = orderService.searchOrdersWithOptionsAndSorting(
//						creationDateStartArg, creationDateEndArg,
//						reportDateBetween, userLogin, lsOrderId, status,
//						listIndexColumn, PAGE_ITEMS_COUNT, indexSet);
				
				//New Functionality with same mapping
				listOrdersDTO = orderService.searchOrdersWithOptionsAndSortingNew(
								creationDateStartArg, creationDateEndArg,
								reportDateBetween, userLogin, lsOrderId,
								status, listIndexColumn, PAGE_ITEMS_COUNT,
								indexSet, productOrderNumberSearch,clientOrderNumber,
								clientOther);

//				//New Searching Functionality
//				listOrdersDTO = orderService.searchOrdersWithOptionsAndSorting(
//						creationDateStartArg, creationDateEndArg,
//						reportDateBetween, orderDTOObj, listIndexColumn,
//						PAGE_ITEMS_COUNT, indexSet);
				
				
				// Color in RED rows containing a GroupItems
				for (OrdersDTO orderDTO : listOrdersDTO) {
					if (orderDTO != null && orderDTO.getStatus() != null
							&& orderDTO.getStatus().equals("shipped")) {
						Long count = productService.isGroupProductID(orderDTO
								.getProductId());
						if (count != null && count >= 1) {
							orderDTO.setCssStyle("background-color: rgb(248,150,140); border-right:1px solid #CCCCCC;border-left:1px solid #CCCCCC;border-top:1px solid #CCCCCC;");
						}
					}
				}

				// keep search parameters to use in other
				// classes(PrintOrdersToPDF, ...)
				session.setAttribute("creationDateStartArg",
						creationDateStartArg);
				session.setAttribute("creationDateEndArg", creationDateEndArg);
				session.setAttribute("reportDateBetween", reportDateBetween);
				session.setAttribute("lsOrderId", lsOrderId);
				session.setAttribute("userLogin", userLogin);
				session.setAttribute("status", status);
				//For newly added field
				session.setAttribute("productOrderNumberSearch", productOrderNumberSearch);

				session.setAttribute("listIndexColumn", listIndexColumn);
				session.setAttribute("sizeResult", sizeResult);
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				if (findOrdersSignal != null && findOrdersSignal != 0L)
					initalizeListIndexSet(session, orderService);
				return SUCCESS;
			}

			/*------------ When Admin click on the icon sorting of column ----------
							seach result with option of sorting list
			 -----------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& sortingOrdersSignal != null && sortingOrdersSignal != 0L) {
				listIndexColumn = (List<Integer>) session
						.getAttribute("listIndexColumn");
				asc = (asc == 1 ? -1 : 1);
				int nextElement = listIndexColumn.get(0);
				fieldForSorting = asc * fieldForSorting;
				listIndexColumn.set(0, fieldForSorting);
				for (int i = 1; i < listIndexColumn.size(); i++) {
					int element = listIndexColumn.get(i);
					listIndexColumn.set(i, nextElement);
					nextElement = element;
				}
				
				//New Functionality with same mapping
				listOrdersDTO = orderService.searchOrdersWithOptionsAndSortingNew(
								creationDateStartArg, creationDateEndArg,
								reportDateBetween, userLogin, lsOrderId,
								status, listIndexColumn, PAGE_ITEMS_COUNT,
								indexSet, productOrderNumberSearch,clientOrderNumber,
								clientOther);
				
//				listOrdersDTO = orderService.searchOrdersWithOptionsAndSorting(
//						creationDateStartArg, creationDateEndArg,
//						reportDateBetween, userLogin, lsOrderId, status,
//						listIndexColumn, PAGE_ITEMS_COUNT, indexSet);
				
//				// New Searching Functionality
//				listOrdersDTO = orderService.searchOrdersWithOptionsAndSorting(
//						creationDateStartArg, creationDateEndArg,
//						reportDateBetween, orderDTOObj, listIndexColumn,
//						PAGE_ITEMS_COUNT, indexSet);
				
				int balance = 0;
				int OrderIndex = 0;
				for (OrdersDTO orDTO : listOrdersDTO) {
					balance = (balance == 1 ? 0 : 1);
					if (balance == 1) {
						orDTO.setCssStyle("background-color: rgb(245,249,252);border-right: 1px solid #CCCCCC;border-left:1px solid #CCCCCC;border-top:  1px solid #CCCCCC;");
					} else {
						orDTO.setCssStyle("background-color: color:white;border-right:1px solid #CCCCCC;border-left:1px solid #CCCCCC;border-top:1px solid #CCCCCC;");
					}
					orDTO.setIndex(OrderIndex);
					OrderIndex++;
				}
				session.setAttribute("listIndexColumn", listIndexColumn);
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				session.setAttribute("asc", asc);
				return SUCCESS;
			}

			/*------ when Admin click on the lsOrder link in table -----------
					show popup detail and allow admin to update Order
			  ---------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& editOrderSignal != null && editOrderSignal != 0L) {
				orderToEdit = listOrdersDTO.get(indexOrder);
				if (orderToEdit == null)
					orderToEdit = new OrdersDTO();
				if (orderToEdit.getProductOrderDate() == null)
					strProductOrderDate = "";
				showOrderDetailPop = "display:block;visibility:visible;";
				return SUCCESS;
			}

			/*--- when Admin click on the cancel Button of orderDetailPop ---
					we mast just hide popup OrderDetail
			  ---------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& cancelSignal != null && cancelSignal != 0L) {
				showOrderDetailPop = "visibility:hidden;display:none;";
				return SUCCESS;
			}

			/*-------------------- When Admin left lsProduct TextField -------------
								check userPrice in DB, and write it in web view
			 -----------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& checkProductPriceSignal != null
					&& checkProductPriceSignal != 0L) {
				OrdersDTO orderDTOToUpdate = listOrdersDTO.get(indexOrder);
				orderDTOToUpdate = fillDataOrderDTO(orderDTOToUpdate);
				OrdersRows orderRowToUpadate = orderDTOToUpdate.getRowsList()
						.get(indexRow);
				UserProductPriceDTO userProductPrice = productService
						.getUsrPPriceByLsproductId(userId, lsProductID);
				orderRowToUpadate.setCss("");
				orderRowToUpadate.setCssPrice("");
				if (userProductPrice == null) {
					orderRowToUpadate.setCss("background-color:red;");
					orderRowToUpadate.setProductDescription("");
					orderRowToUpadate.setStock(null);
					orderRowToUpadate.setProductId(null);
					orderRowToUpadate.setLsProductID(lsProductID);
					orderRowToUpadate.setLsPrice(null);
				} else {
					Double usrPrice = orderRowToUpadate.getUnitPrice();
					if (usrPrice == null)
						usrPrice = 0D;
					if (usrPrice < userProductPrice.getPriceNum()) {
						orderRowToUpadate.setCssPrice("background-color:red;");
					}
					orderRowToUpadate.setProductDescription(userProductPrice
							.getProductTitle());
					orderRowToUpadate.setStock(userProductPrice.getStock());
					orderRowToUpadate.setProductId(userProductPrice
							.getProductId());
					orderRowToUpadate.setLsProductID(userProductPrice
							.getLsProductId());
					orderRowToUpadate
							.setLsPrice(userProductPrice.getPriceNum());
				}
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				orderToEdit = orderDTOToUpdate;
				listOrdersDTO = (List<OrdersDTO>) session
						.getAttribute("listOrdersDTOReport");
				showOrderDetailPop = "display:block;visibility:visible;";
				return SUCCESS;
			}

			/*----------------- When Admin check on saveTemporaryRow Icon --------------------------
					we must first obtained the object that contains the list of rows,
					after we accede to the row by index recovered by web view and change it
			 ---------------------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& saveTemporaryRowSignal != null
					&& saveTemporaryRowSignal != 0L) {
				OrdersDTO orderDTOToUpdate = listOrdersDTO.get(indexOrder);
				orderDTOToUpdate = fillDataOrderDTO(orderDTOToUpdate);
				OrdersRows orderRowToSaveMemory = orderDTOToUpdate
						.getRowsList().get(indexRow);
				orderRowToSaveMemory.setIcon("images/orders/itemValidated.png");
				if (orderRowToSaveMemory != null) {
					orderRowToSaveMemory.setQuantity(quantity);
					orderRowToSaveMemory.setLsProductID(lsProductID);
					orderRowToSaveMemory
							.setProductDescription(productDescription);
					orderRowToSaveMemory.setUnitPrice(unitPrice);
					orderRowToSaveMemory
							.setCssPrice("background-color:#FF6666;");
					orderRowToSaveMemory
							.setCssQuantity("background-color:#FF6666;");
					if (quantity != null && quantity > 0D)
						orderRowToSaveMemory.setCssQuantity("");
					if (unitPrice != null
							&& orderRowToSaveMemory.getLsPrice() != null
							&& unitPrice >= orderRowToSaveMemory.getLsPrice())
						orderRowToSaveMemory.setCssPrice("");
					orderRowToSaveMemory.setShippingFee(shippingFee);
					orderRowToSaveMemory.setShippingPrice(shippingFee);
					orderRowToSaveMemory.setShippingCompany(shippingCompany);
					orderRowToSaveMemory.setTrackingNumber(trakingNumber);
					if (orderRowToSaveMemory.getCurrencyId() != null
							&& orderRowToSaveMemory.getCurrencyId() != 1
							&& orderRowToSaveMemory.getCurrencyRate() != null) {
						if (unitPrice != null) {
							orderRowToSaveMemory
									.setCurrencyUnitPrice(unitPrice);
							unitPrice = unitPrice
									/ orderRowToSaveMemory.getCurrencyRate();
							unitPrice = (double) Math.round(unitPrice * 100) / 100;
							orderRowToSaveMemory.setUnitPrice(unitPrice);
						}
						/*
						 * if(shippingFee!=null) {
						 * orderRowToSaveMemory.setCurrencyShippingPrice
						 * (shippingFee); shippingFee =
						 * shippingFee/orderRowToSaveMemory.getCurrencyRate();
						 * shippingFee = (double)
						 * Math.round(shippingFee*100)/100;
						 * orderRowToSaveMemory.setShippingPrice(shippingFee); }
						 */
					}
					int indexOrder = 0;
					int indexRow = 0;
					for (OrdersDTO orderDTO : listOrdersDTO) {
						orderDTO.setIndex(indexOrder);
						indexOrder++;
						indexRow = 0;
						for (OrdersRows orderRows : orderDTO.getRowsList()) {
							orderRows.setIndex(indexRow);
							indexRow++;
						}
					}
					session.setAttribute("listOrdersDTOReport", listOrdersDTO);
					listOrdersDTO = (List<OrdersDTO>) session
							.getAttribute("listOrdersDTOReport");
				}
				orderToEdit = listOrdersDTO.get(indexOrder);
				// Change totalPrice also
				if (orderToEdit.getRowsList().get(0) != null
						&& orderToEdit.getRowsList().get(0).getQuantity() != null
						&& orderToEdit.getRowsList().get(0)
								.getQuantityToSplit() != null
						&& orderToEdit.getRowsList().get(0).getUnitPrice() != null) {
					Double priceTotal = orderToEdit.getRowsList().get(0)
							.getUnitPrice()
							* orderToEdit.getRowsList().get(0)
									.getQuantityToSplit();
					priceTotal = (double) Math.round(priceTotal * 100) / 100;
					orderToEdit.setTotalPrice(priceTotal);
				}
				showOrderDetailPop = "display:block;visibility:visible;";
				return SUCCESS;
			}

			/*------- When Admin click on addSimilarRow Icon on the OrderDetailPop --------
								Add one Row Similar at the previews
			  -----------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& addSimilarRowSignal != null && addSimilarRowSignal != 0L) {
				OrdersDTO orderDTOToUpdate = listOrdersDTO.get(indexOrder);
				// generate lsOrderId to new order
				orderDTOToUpdate = fillDataOrderDTO(orderDTOToUpdate);
				OrdersRows orderRowToClone = orderDTOToUpdate.getRowsList()
						.get(indexRow);
				if (orderRowToClone != null) {
					if (!orderRowToClone.getIcon().equals(
							"images/orders/itemValidated.png")) {
						orderRowToClone.setQuantity(quantity);
						orderRowToClone.setLsProductID(lsProductID);
						orderRowToClone.setStock(stock);
						orderRowToClone
								.setProductDescription(productDescription);
						orderRowToClone.setUnitPrice(unitPrice);
						orderRowToClone.setShippingFee(shippingFee);
						orderRowToClone.setShippingCompany(shippingCompany);
						orderRowToClone.setTrackingNumber(trakingNumber);
					}
					orderRowToClone.setIcon("images/orders/itemValidated.png");
					OrdersRows orderRowToAdd = DTOFactory
							.getOrderRowClone(orderRowToClone);
					orderRowToAdd.setId(-1L);
					// Add currencyId
					if (orderRowToClone.getCurrencyId() != null)
						orderRowToAdd.setCurrencyId(orderRowToClone
								.getCurrencyId());

					orderDTOToUpdate.getRowsList().add(indexRow + 1,
							orderRowToAdd);
					int indexOrder = 0;
					int indexRow = 0;
					for (OrdersDTO orderDTO : listOrdersDTO) {
						orderDTO.setIndex(indexOrder);
						indexOrder++;
						indexRow = 0;
						for (OrdersRows orderRows : orderDTO.getRowsList()) {
							orderRows.setIndex(indexRow);
							indexRow++;
						}
					}
					session.setAttribute("listOrdersDTOReport", listOrdersDTO);
					listOrdersDTO = (List<OrdersDTO>) session
							.getAttribute("listOrdersDTOReport");
				}
				orderToEdit = listOrdersDTO.get(indexOrder);
				showOrderDetailPop = "display:block;visibility:visible;";
				return SUCCESS;
			}

			/*-------- When Admin click on Delete Row Icon of orderDetail Popup-----------
									Delete this row using index
			 -----------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& deleteRowSignal != null && deleteRowSignal != 0L) {
				OrdersDTO orderDTO = listOrdersDTO.get(indexOrder);
				orderDTO = fillDataOrderDTO(orderDTO);
				int nb = orderService.nbOrderRowsNotDeleted(orderDTO
						.getRowsList());
				if (orderDTO != null && orderDTO.getRowsList().size() > 1) {
					for (int i = 0; i < orderDTO.getRowsList().size(); i++) {
						if (i == indexRow && nb > 1) {
							orderDTO.getRowsList().get(i).setToDelete(1);
							break;
						}
					}
				}
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				orderToEdit = listOrdersDTO.get(indexOrder);
				showOrderDetailPop = "display:block;visibility:visible;";
				return SUCCESS;
			}

			/*------ when Admin click on the button save of orderDetail ------------------
					 save order and hide pup  
			  ----------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& saveOrdersSignal != null && saveOrdersSignal != 0L) {
				session.setAttribute("orderNotSavedAtFirst", null);
				orderToEdit = listOrdersDTO.get(indexOrder);
				orderToEdit = fillDataOrderDTO(orderToEdit);

				// add special handling shipping
				User user = null;
				if (orderToEdit.getUserLogin() != null)
					user = userService.getUserByLogin(orderToEdit
							.getUserLogin());
				if (user != null) {
					Double totalPrice = null;
					orderToEdit.setSpecialHandlingName(user
							.getSpecialHandlingName());
					orderToEdit.setSpecialHandlingFee(user
							.getSpecialHandlingFee());
					if (orderToEdit.getRowsList().get(0).getQuantity() != null
							&& orderToEdit.getRowsList().get(0).getUnitPrice() != null) {
						totalPrice = orderToEdit.getRowsList().get(0)
								.getQuantity()
								* orderToEdit.getRowsList().get(0)
										.getUnitPrice();
						totalPrice = (double) Math.round(totalPrice * 100) / 100;
					}

					orderToEdit.setTotalPrice(totalPrice);
				}

				orderService.updateOrderByLsOrderId(orderToEdit);
				for (OrdersRows row : orderToEdit.getRowsList()) {
					if (row.getId() == -1)
						row.setId(0L);
				}
				OrdersRows row = orderToEdit.getRowsList().get(0);
				if (row != null) {
					orderToEdit.getShippedDate();
					orderToEdit.setLsPrice(row.getLsPrice());
					orderToEdit.setLsProductID(row.getLsProductID());
					orderToEdit.setProductDescription(row
							.getProductDescription());
					orderToEdit.setQuantity(row.getQuantity());
				}
				orderToEdit = DTOFactory.getOrderDTOConsideredMissingInfo(
						orderToEdit, hashProvinces);
				listIndexColumn = (List<Integer>) session
						.getAttribute("listIndexColumn");
				
//				listOrdersDTO = orderService.searchOrdersWithOptionsAndSorting(
//						creationDateStartArg, creationDateEndArg,
//						reportDateBetween, userLogin, lsOrderId, status,
//						listIndexColumn, PAGE_ITEMS_COUNT, indexSet);
				

				//New Functionality with same mapping
				listOrdersDTO = orderService.searchOrdersWithOptionsAndSortingNew(
								creationDateStartArg, creationDateEndArg,
								reportDateBetween, userLogin, lsOrderId,
								status, listIndexColumn, PAGE_ITEMS_COUNT,
								indexSet, productOrderNumberSearch,clientOrderNumber,
								clientOther);				
				
				// New Searching Functionality
//				listOrdersDTO = orderService.searchOrdersWithOptionsAndSorting(
//						creationDateStartArg, creationDateEndArg,
//						reportDateBetween, orderDTOObj, listIndexColumn,
//						PAGE_ITEMS_COUNT, indexSet);
				
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				message = "Saving has completed successfuly";
				showSaveSuccessPop = "display:block;visibility:visible;";
				showOrderDetailPop = "display:block;visibility:visible;";
				return SUCCESS;
			}

			/*------ When user change Quantity to split in orderDetailPop -----------
					 prepare order to split from two other orders witch
				 	 one must have a lsOrder with underscore 
			 ------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& quantityToChangeSignal != null
					&& quantityToChangeSignal != 0L) {
				OrdersDTO orderToChangeQt = listOrdersDTO.get(indexOrder);
				OrdersRows orderRow = orderToChangeQt.getRowsList().get(
						indexRow);
				orderToChangeQt = fillDataOrderDTO(orderToChangeQt);
				if (quantityToChange < orderRow.getQuantity())
					orderRow.setQuantityToSplit(quantityToChange);
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				listOrdersDTO = (List<OrdersDTO>) session
						.getAttribute("listOrdersDTOReport");
				orderToEdit = listOrdersDTO.get(indexOrder);
				showOrderDetailPop = "display:block;visibility:visible;";
				return SUCCESS;
			}

			/*-------------------- Duplicate Order ----------------------------------------
							Create order in just in memory
			 -----------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& duplicateOrderSignal != null
					&& duplicateOrderSignal != 0L) {
				OrdersDTO orderToClone = listOrdersDTO.get(indexOrder);
				orderToClone = fillDataOrderDTO(orderToClone);
				hashOrders = new Hashtable<String, OrdersDTO>();
				for (OrdersDTO ord : listOrdersDTO) {
					hashOrders.put(ord.getLsOrderId(), ord);
				}
				OrdersDTO orderClone = DTOFactory
						.getOrderDTOSplitted(orderToClone);
				if (orderClone != null) {
					orderClone.setDuplicate(true);
					String lsOrder = orderClone.getLsOrderId();
					String strlsOrder = orderService.generateLsOrderId(lsOrder,
							hashOrders);
					orderClone.setLsOrderId(strlsOrder);// rgb(116,180,209)
					orderClone
							.setCssStyle("background-color:#FFFF99;border-right: 1px solid #CCCCCC;border-left:1px solid #CCCCCC;border-top:  1px solid #CCCCCC;");
					orderToEdit = orderClone;
					orderToEdit.setBackgroundColor("background-color:#FFFF99;");
					listOrdersDTO.add(indexOrder + 1, orderClone);
					indexOrder = 0;
					for (OrdersDTO ord : listOrdersDTO) {
						ord.setIndex(indexOrder);
						indexOrder++;
					}
					orderService.updateOrderByLsOrderId(orderToClone);
					orderService.insertOrderWithRows(orderClone);
					orderClone.setDuplicate(false);
					for (OrdersRows row : orderClone.getRowsList()) {
						if (row.getId() < 0L)
							row.setId(0L);
					}
					if (listOrdersDTO.size() > 0) {
						session.setAttribute("listOrdersDTOReport",
								listOrdersDTO);
					}
				} else
					orderToEdit = orderToClone;
				showOrderDetailPop = "display:block;visibility:visible;";
				return SUCCESS;
			}

			/*-------------------- When user check print item -----------------------------
					Add or remove this element from the orders to print
			 -----------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& okSaveSuccessPopSignal != null
					&& okSaveSuccessPopSignal != 0L) {
				showSaveSuccessPop = "visibility:hidden;display:none;";
				showOrderDetailPop = "visibility:hidden;display:none;";
				return SUCCESS;
			}
		} catch (Exception e) {
			e.printStackTrace();
			return "input";
		}
		return SUCCESS;
	}

	/*
	 * ==========================================================================
	 * =============== fill all fields of order without rows
	 * ====================
	 * =====================================================================
	 */
	public OrdersDTO fillDataOrderDTO(OrdersDTO orderDTO) {
		SimpleDateFormat frm = new SimpleDateFormat("dd/MM/yyyy");
		orderDTO.setClientLastName(clientLastName);
		orderDTO.setClientFirstName(clientFirstName);
		orderDTO.setClientOtherNames(clientOtherNames);
		orderDTO.setClientStreet(clientStreet);
		orderDTO.setClientOtherStreet(clientOtherStreet);
		orderDTO.setClientCity(clientCity);
		orderDTO.setClientProvince(code);
		orderDTO.setClientPostalCode(clientPostalCode);
		orderDTO.setClientPhone(clientPhone);
		orderDTO.setClientEmail(clientEmail);
		orderDTO.setProductOrderNumber(productOrderNumberSearch);
		orderDTO.setCompanyHeader(companyHeader);
		if (((strProductOrderDate) != null)
				&& (!"".equals(strProductOrderDate))) {
			frm = new SimpleDateFormat("dd/MM/yyyy");
			try {
				Date date = frm.parse(strProductOrderDate);
				orderDTO.setProductOrderDate(date);
			} catch (Exception pe) {
				addActionError("Please enter a date in the correct format");
			}
		}

		if (((strCreationOrderDate) != null)
				&& (!"".equals(strCreationOrderDate))) {
			frm = new SimpleDateFormat("dd/MM/yyyy");
			try {
				Date date = frm.parse(strCreationOrderDate);
				orderDTO.setCreationDate(date);
			} catch (Exception pe) {
				addActionError("Please enter a date in the correct format");
			}
		}

		if (((strRequiredDate) != null) && (!"".equals(strRequiredDate))) {
			frm = new SimpleDateFormat("dd/MM/yyyy");
			try {
				Date date = frm.parse(strRequiredDate);
				orderDTO.setRequiredDate(date);
			} catch (Exception pe) {
				addActionError("Please enter a date in the correct format");
			}
		}
		return orderDTO;
	}

	/*
	 * ==========================================================================
	 * =============== initialize ListIndexSet
	 * ==================================
	 * =======================================================
	 */
	public void initalizeListIndexSet(HttpSession session,
			OrdersService orderService) throws ServiceException {
		listIndexSet = new ArrayList<OrdersDTO>();
		totalOrders = orderService.getCountOrders(creationDateStartArg,
				creationDateEndArg, reportDateBetween, userLogin, lsOrderId,
				status,productOrderNumberSearch,clientOrderNumber,clientOther);
		
		String strcount = totalOrders.toString();
		Integer sizeList = Integer.parseInt(strcount) / PAGE_ITEMS_COUNT;
		nextListPages = 1;
		session.setAttribute("nextListPages", nextListPages);
		for (int i = 1; i <= sizeList + 1 && i <= 11; i++) {
			OrdersDTO ord = new OrdersDTO();
			ord.setCssStyle("");
			ord.setIndex(i);
			listIndexSet.add(ord);
		}
		indexSet = 0;
		session.setAttribute("indexSet", indexSet);
		session.setAttribute("totalOrders", totalOrders);
		session.setAttribute("listIndexSet", listIndexSet);
		session.setAttribute("productOrderNumberSearch", productOrderNumberSearch);

	}

	/*
	 * ==========================================================================
	 * =============== initialize listIndexColumn
	 * ================================
	 * =========================================================
	 */
	List<Integer> getNewListIndexColumn() {
		List<Integer> reult = new ArrayList<Integer>();
		for (int i = 0; i <= 34; i++) {
			if (i != 2 && i <= 13) {
				reult.add(i);
				if (i != 0)
					reult.add(-i);
			}
			if (i == 30 || i == 31 || i == 34) {
				reult.add(i);
				reult.add(-i);
			}
		}
		return reult;
	}

	/*
	 * ==========================================================================
	 * =============== getStatus Selected by Admin for searching
	 * ================
	 * =========================================================================
	 */
	public String getStatusSelected(Integer StatusIndex) {
		String result = "";
		switch (StatusIndex) {
		case 0:
			result = "open";
			break;
		case 1:
			result = "progress";
			break;
		case 2:
			result = "shipped";
			break;
		case 3:
			result = "invoiced";
			break;
		case 4:
			result = "canceled";
			break;
		default:
			result = "";
		}
		return result;
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.Argument.bind(Argument.java:35)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.bindArguments(AbstractMethodDeclaration.java:83)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:406)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1147)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1235)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:540)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:883)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:928)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:189)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:255)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:190)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:89)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:728)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:788)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1244)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:102)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)

!ENTRY org.eclipse.jdt.ui 4 2 2015-04-15 11:40:26.746
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:233)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:255)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:190)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:89)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:728)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:788)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1244)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:102)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)
Caused by: java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.Argument.bind(Argument.java:35)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.bindArguments(AbstractMethodDeclaration.java:83)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:406)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1147)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1235)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:540)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:883)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:928)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:189)
	... 16 more
Caused by: java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.Argument.bind(Argument.java:35)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.bindArguments(AbstractMethodDeclaration.java:83)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:406)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1147)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1235)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:540)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:883)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:928)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:189)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:255)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:190)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:89)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:728)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:788)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1244)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:102)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2015-04-15 11:40:26.746
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.Argument.bind(Argument.java:35)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.bindArguments(AbstractMethodDeclaration.java:83)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:406)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1147)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1235)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:540)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:883)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:928)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:189)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:255)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:190)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:89)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:728)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:788)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1244)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:102)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2015-04-15 11:40:26.746
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.Argument.bind(Argument.java:35)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.bindArguments(AbstractMethodDeclaration.java:83)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:406)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1147)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1235)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:540)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:883)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:928)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:189)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:255)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:190)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:89)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:728)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:788)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1244)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:102)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)

!ENTRY org.eclipse.jdt.ui 4 0 2015-04-15 11:40:26.746
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:233)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:255)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:190)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:89)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:728)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:788)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1244)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:102)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)
Caused by: java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.Argument.bind(Argument.java:35)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.bindArguments(AbstractMethodDeclaration.java:83)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:406)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1147)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1235)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:540)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:883)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:928)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:189)
	... 16 more
Caused by: java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.Argument.bind(Argument.java:35)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.bindArguments(AbstractMethodDeclaration.java:83)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:406)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1147)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1235)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:540)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:883)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:928)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:189)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:255)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:190)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:89)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:728)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:788)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1244)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:102)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2015-04-15 11:40:26.746
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.Argument.bind(Argument.java:35)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.bindArguments(AbstractMethodDeclaration.java:83)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:406)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1147)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1235)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:540)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:883)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:928)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:189)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:255)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:190)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:89)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:728)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:788)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1244)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:102)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)

!ENTRY org.eclipse.jdt.core 4 4 2015-04-15 11:40:28.325
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.loyauty.web.struts.action.orders;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.List;

import javax.servlet.http.HttpSession;
import lombok.Getter;
import lombok.Setter;

import com.loyauty.exception.ServiceException;
import com.loyauty.exception.ServiceLocatorException;
import com.loyauty.model.OrdersRows;
import com.loyauty.model.User;
import com.loyauty.service.core.DTOFactory;
import com.loyauty.service.core.dto.BasicUserDTO;
import com.loyauty.service.core.dto.OperationsDTO;
import com.loyauty.service.core.dto.OrdersDTO;
import com.loyauty.service.core.dto.ProvinceDTO;
import com.loyauty.service.core.dto.UserProductPriceDTO;
import com.loyauty.service.core.dto.UserSessionDTO;
import com.loyauty.service.core.dto.UsersPrivilegesDTO;
import com.loyauty.service.operations.OperationsService;
import com.loyauty.service.orders.OrdersService;
import com.loyauty.service.product.ProductService;
import com.loyauty.service.user.UserService;
import com.loyauty.web.struts.action.LoyautyAction;

public class ReportOrders extends LoyautyAction {
	private static final long serialVersionUID = -3811760851445730062L;
	private UserService userService;
	private ProductService productService;
	private OrdersService orderService;
	private OperationsService operationsService;
	@Getter
	@Setter
	private String userLogin;
	@Getter
	@Setter
	private List<User> usersList;
	private static int USER_TYPE = 2;
	@Getter
	@Setter
	List<OrdersDTO> listOrdersDTO;
	@Getter
	@Setter
	List<OrdersDTO> listStatus;
	@Getter
	@Setter
	private String lsOrderId;
	@Getter
	@Setter
	Long poYpop;
	@Getter
	@Setter
	Long poXpop;
	@Getter
	@Setter
	private Long pageTop = 0L;
	@Getter
	@Setter
	private Date creationDate;
	@Getter
	@Setter
	private Long findOrdersSignal;
	private String status;
	@Getter
	@Setter
	private Long sizeResult = 0L;
	@Getter
	@Setter
	private Long sorting;
	@Getter
	@Setter
	private Long sortingOrdersSignal;
	@Getter
	@Setter
	private Integer fieldForSorting;
	@Getter
	@Setter
	private Integer asc;
	@Getter
	@Setter
	private Integer scrollDivRowsLeft;
	@Getter
	@Setter
	private Integer scrollPageLeft;
	@Getter
	@Setter
	private Integer scrollDivRowsTop;
	@Getter
	@Setter
	private String strCreationDateStart;
	@Getter
	@Setter
	private String strCreationDateEnd;
	@Getter
	@Setter
	private Date creationDateStart;
	@Getter
	@Setter
	private Date creationDateEnd;
	private Date creationDateStartArg;
	private Date creationDateEndArg;
	@Getter
	@Setter
	private Integer selectedStatus;
	@Getter
	@Setter
	private Long editOrderSignal;
	@Getter
	@Setter
	private Long cancelSignal;
	@Getter
	@Setter
	private Integer indexOrder;
	@Getter
	@Setter
	private OrdersDTO orderToEdit;
	@Getter
	@Setter
	private String strProductOrderDate;
	@Getter
	@Setter
	private String lsProductID;
	@Getter
	@Setter
	Integer indexRow;
	@Getter
	@Setter
	private String showOrderDetailPop;
	@Getter
	@Setter
	private Long userId;
	@Getter
	@Setter
	private Long checkProductPriceSignal;
	@Getter
	@Setter
	private Long saveTemporaryRowSignal;
	@Getter
	@Setter
	private Long addSimilarRowSignal;
	@Getter
	@Setter
	private Long deleteRowSignal;
	@Getter
	@Setter
	private Long saveOrdersSignal;
	@Getter
	@Setter
	private Boolean checkBoxPrint;

	// recovery Data Order
	@Getter
	@Setter
	private String clientLastName;
	@Getter
	@Setter
	private String clientFirstName;
	@Getter
	@Setter
	private String clientOtherNames;
	@Getter
	@Setter
	private String clientStreet;
	@Getter
	@Setter
	private String clientOtherStreet;
	@Getter
	@Setter
	private String clientCity;
	@Getter
	@Setter
	private String clientProvince;
	@Getter
	@Setter
	private String clientPostalCode;
	@Getter
	@Setter
	private String clientPhone;
	@Getter
	@Setter
	private String clientEmail;
//	@Getter
//	@Setter
//	private String productOrderNumber;
	@Getter
	@Setter
	private String strRequiredDate;

	// recovery data row
	@Getter
	@Setter
	private Double quantity;
	@Getter
	@Setter
	private String notes;
	@Getter
	@Setter
	private Double quantityToChange;
	@Getter
	@Setter
	private Double stock;
	@Getter
	@Setter
	private String productDescription;
	@Getter
	@Setter
	private Double unitPrice;
	@Getter
	@Setter
	private Double shippingFee;
	@Getter
	@Setter
	private String shippingCompany;
	@Getter
	@Setter
	private String companyHeader;

	@Getter
	@Setter
	private Long quantityToChangeSignal;
	@Getter
	@Setter
	private Long duplicateOrderSignal;
	@Getter
	@Setter
	private String strCreationDate;
	@Getter
	@Setter
	private String strCreationOrderDate;
	@Getter
	@Setter
	private User usr;
	@Getter
	@Setter
	private String showSaveSuccessPop;
	// showSaveSuccessPop="display:block;visibility:visible;";
	// showSaveSuccessPop="visibility:hidden;display:none;";
	@Getter
	@Setter
	private String message;
	@Getter
	@Setter
	private Long okSaveSuccessPopSignal;
	@Getter
	@Setter
	private Long showRowShipping;
	@Getter
	@Setter
	private Long showOnlyEditNote;
	@Getter
	@Setter
	private Long saveShippingSignal;
	@Getter
	@Setter
	private Long saveOnlyNoteSignal;
	@Getter
	@Setter
	private String code;
	@Getter
	@Setter
	private Long cityId;
	@Getter
	@Setter
	private List<ProvinceDTO> listProvinces;
	private Hashtable<String, ProvinceDTO> hashProvinces;
	@Getter
	@Setter
	private Boolean orderNotSavedAtFirst;
	@Getter
	@Setter
	private String strShippedDate;
	@Getter
	@Setter
	private String strShippingPrice;
	@Getter
	@Setter
	private String showConfirmDeleteOrderPop;
	@Getter
	@Setter
	private Long deleteOrderSignal;
	@Getter
	@Setter
	private Long confirmDeleteSignal;
	@Getter
	@Setter
	private UsersPrivilegesDTO userPrivileges;
	@Getter
	@Setter
	private UsersPrivilegesDTO usersPrivShippedToInvoiced;
	@Getter
	@Setter
	private UsersPrivilegesDTO usersPrivChangeShippedStatus;
	@Getter
	@Setter
	private HashMap<Integer, String> hashStatus;
	@Getter
	@Setter
	private Long statusId;
	@Getter
	@Setter
	private String strPrint;
	@Getter
	@Setter
	private Integer testSignal;
	@Getter
	@Setter
	private String newStatus;
	Long invoicedOrdersRefresh;
	@Getter
	@Setter
	private Integer reportDateBetween;
	@Getter
	@Setter
	private Long dateBetweenSignal;
	@Getter
	@Setter
	private Long selectAllOrdersSignal;
	@Getter
	@Setter
	private Boolean checkBoxItem;
	// ------Pagination
	@Getter
	@Setter
	Long pageIndexSignal;
	@Getter
	@Setter
	Long prevListPagesSignal;
	@Getter
	@Setter
	Long nextListPagesSignal;
	@Getter
	@Setter
	Long totalOrders;
	@Getter
	@Setter
	Integer nextListPages;
	@Getter
	@Setter
	Integer prevListPages;
	@Getter
	@Setter
	Integer indexSet = 0;
	@Getter
	@Setter
	Integer indexList;
	@Getter
	@Setter
	List<OrdersDTO> listIndexSet;
	@Getter
	@Setter
	Integer PAGE_ITEMS_COUNT = 100;
	
	//New Added Field in the search option as toggle functionality
	@Getter
	@Setter
	private String productOrderNumberSearch;
	@Getter
	@Setter
	private String trakingNumber;
	@Getter
	@Setter
	private String  clientOther;
	@Getter	@Setter
	private String	 clientOrderNumber;
	
	@Getter	@Setter
	private Integer switchBetweenClientLoginAndPoNumberSignal;
	@Getter	@Setter
	private Integer switchBetweenClientLoginAndPoNumber;
	//New Added Field in the search option as toggle functionality
	@Getter	@Setter
	private Integer switchBetweenLsOrderAndClientOrderIdSignal;
	@Getter	@Setter
	private Integer switchBetweenLsOrderAndClientOrderId;
	@Getter	@Setter
	private Integer switchBetweenStatusAndClientOtherSignal;
	@Getter	@Setter
	private Integer switchBetweenStatusAndClientOther;
	//Added for the multiple functionality in switching  
	@Getter	@Setter
	private Integer switchBetweenOptionFieldsSignal;
	@Getter	@Setter
	private Integer switchBetweenOptionFields;
	
	switchBetweenOptionFieldsSignal

	// ------Pagination

	/*
	 * ==========================================================================
	 * =============== Default constructor
	 * ======================================
	 * ===================================================
	 */
	public ReportOrders() throws ServiceLocatorException {
		super();
		userService = getServiceLocator().getUserService();
		orderService = getServiceLocator().getOrderService();
		productService = getServiceLocator().getProductService();
		operationsService = getServiceLocator().getOperationsService();
	}

	/*
	 * ==========================================================================
	 * =============== method execute
	 * ============================================
	 * =============================================
	 */
	@SuppressWarnings({ "rawtypes", "unchecked" })
	@Override
	public String execute() throws Exception {
		System.out.println("Product Order Number: "+ productOrderNumberSearch);
		System.out.println("Tracking Number: "+ trakingNumber);
		System.out.println("Client Order ID: "+ clientOrderNumber);
		System.out.println("Client Other ID: "+ clientOther);
		
		//Create new object or Order to modify the search functionality
		OrdersDTO orderDTOObj=new OrdersDTO();
		orderDTOObj.setLsOrderId(lsOrderId);
		orderDTOObj.setUserLogin(userLogin);
		orderDTOObj.setStatus(status);
		orderDTOObj.setProductOrderNumber(productOrderNumberSearch);
		orderDTOObj.setClientOrderNumber(clientOrderNumber);
		orderDTOObj.setClientOtherId(clientOther);
		
		HttpSession session = request.getSession(true);

		if (showOrderDetailPop == null)
			showOrderDetailPop = "visibility:hidden;display:none;";
		if (showConfirmDeleteOrderPop == null)
			showConfirmDeleteOrderPop = "visibility:hidden;display:none;";
		if (showSaveSuccessPop == null)
			showSaveSuccessPop = "visibility:hidden;display:none;";
		if (poYpop == null)
			poYpop = 100L;
		if (poXpop == null)
			poXpop = 100L;
		Hashtable<String, OrdersDTO> hashOrders;
		if (selectedStatus == null)
			selectedStatus = -1;
		sizeResult = (Long) session.getAttribute("sizeResult");
		totalOrders = (Long) session.getAttribute("totalOrders");
		if (totalOrders == null)
			totalOrders = 0L;
		asc = (Integer) session.getAttribute("asc");
		if (asc == null)
			asc = 0;
		if (sizeResult == null)
			sizeResult = 0L;
		if (indexOrder == null)
			indexOrder = 0;
		userPrivileges = (UsersPrivilegesDTO) session.getAttribute("userPrivileges");
		usersPrivShippedToInvoiced = (UsersPrivilegesDTO) session.getAttribute("usersPrivShippedToInvoiced");
		usersPrivChangeShippedStatus = (UsersPrivilegesDTO) session
				.getAttribute("usersPrivChangeShippedStatus");
		hashStatus = (HashMap<Integer, String>) session
				.getAttribute("hashStatus");
		if (hashStatus == null) {
			hashStatus = new HashMap<Integer, String>();
			hashStatus.put(0, "");
			hashStatus.put(1, "open");
			hashStatus.put(2, "progress");
		}
		List<Integer> listIndexColumn = new ArrayList<Integer>();
		// fill list status
		listStatus = (ArrayList<OrdersDTO>) session.getAttribute("listStatus");
		if (listStatus == null) {
			listStatus = new ArrayList<OrdersDTO>();
			OrdersDTO orderDTOOpen = new OrdersDTO();
			orderDTOOpen.setStatus("open");
			orderDTOOpen.setId(0L);
			listStatus.add(orderDTOOpen);
			OrdersDTO orderDTOProgress = new OrdersDTO();
			orderDTOProgress.setStatus("progress");
			orderDTOProgress.setId(1L);
			listStatus.add(orderDTOProgress);
			if (usersPrivChangeShippedStatus != null) {
				OrdersDTO orderDTOShipped = new OrdersDTO();
				orderDTOShipped.setStatus("shipped");
				orderDTOShipped.setId(2L);
				listStatus.add(orderDTOShipped);
			}

		}

		try {

			/*-------------------- recovery users list -----------------------------------
							Recovery users list in session
			 -----------------------------------------------------------------------------*/
			// recovery provinces
			listProvinces = (List<ProvinceDTO>) session
					.getAttribute("listProvinces");
			if (listProvinces == null)
				listProvinces = productService.getAllProvinces();
			orderNotSavedAtFirst = (Boolean) session
					.getAttribute("listNotSavedAtFirst");
			BasicUserDTO basicUserDTO = new BasicUserDTO();
			basicUserDTO.setTypeId(USER_TYPE);
			List<User> usersListSession = (List<User>) session
					.getAttribute("usersListSession");
			if (usersListSession == null) {
				List<UserSessionDTO> listAllUsers = userService
						.getAllUsers(basicUserDTO);
				usersList = new ArrayList<User>();
				for (UserSessionDTO userDTO : listAllUsers) {
					User user = new User();
					user.setId(userDTO.getId());
					user.setLogin(userDTO.getLogin());
					usersList.add(user);
				}
				session.setAttribute("usersListSession", usersList);
			} else{
				usersList = usersListSession;
			}
			
			listOrdersDTO = (ArrayList<OrdersDTO>) session.getAttribute("listOrdersDTOReport");
			
			reportDateBetween = (Integer) session.getAttribute("reportDateBetween");
			if (reportDateBetween == null) {
				reportDateBetween = 0;
				session.setAttribute("reportDateBetween", reportDateBetween);
			}

			//Added for the new field
			switchBetweenClientLoginAndPoNumber = (Integer) session.getAttribute("switchBetweenClientLoginAndPoNumber");
			if (switchBetweenClientLoginAndPoNumber == null) {
				switchBetweenClientLoginAndPoNumber = 0;
				session.setAttribute("switchBetweenClientLoginAndPoNumber", switchBetweenClientLoginAndPoNumber);
			}
			switchBetweenLsOrderAndClientOrderId = (Integer) session.getAttribute("switchBetweenLsOrderAndClientOrderId");
			if (switchBetweenLsOrderAndClientOrderId == null) {
				switchBetweenLsOrderAndClientOrderId = 0;
				session.setAttribute("switchBetweenLsOrderAndClientOrderId", switchBetweenLsOrderAndClientOrderId);
			}
			switchBetweenStatusAndClientOther = (Integer) session.getAttribute("switchBetweenStatusAndClientOther");
			if (switchBetweenStatusAndClientOther == null) {
				switchBetweenStatusAndClientOther = 0;
				session.setAttribute("switchBetweenStatusAndClientOther", switchBetweenStatusAndClientOther);
			}

			/*------ always check if the Admin select all orders ------------
					if The Admin select all orders change checkBoxItem value 
			  ---------------------------------------------------------------*/
			if (selectAllOrdersSignal != null && selectAllOrdersSignal != 0L) {
				if (checkBoxItem != null) {
					session.setAttribute("checkBoxItem", checkBoxItem);
					session.setAttribute("allOrdersSelectedSignal", 0L);
					if (checkBoxItem)
						session.setAttribute("allOrdersSelectedSignal", 1L);
				}
			}
			checkBoxItem = (Boolean) session.getAttribute("checkBoxItem");
			if (checkBoxItem == null)
				checkBoxItem = false;
			/*------ always recovery creationDate from strCreationDate ------
						always keep the user search options
			  ---------------------------------------------------------------*/
			creationDateStart = null;
			SimpleDateFormat frm = new SimpleDateFormat("dd/MM/yyyy");
			if (((strCreationDateStart) != null)
					&& (!"".equals(strCreationDateStart))) {
				try {
					Date date = frm.parse(strCreationDateStart);
					creationDateStart = date;
					creationDateStartArg = date;
				} catch (Exception pe) {
					creationDateStart = null;
					addActionError("Please enter a date in the correct format");
				}
			}
			if (creationDateStart == null) {
				Date date = frm.parse("01/01/1900");
				creationDateStartArg = date;
			}
			creationDateEnd = null;
			if (((strCreationDateEnd) != null)
					&& (!"".equals(strCreationDateEnd))) {
				frm = new SimpleDateFormat("dd/MM/yyyy");
				try {
					Date date = frm.parse(strCreationDateEnd);
					creationDateEnd = date;
					creationDateEndArg = date;
				} catch (Exception pe) {
					creationDateEnd = null;
					addActionError("Please enter a date in the correct format");
				}
			}
			if (creationDateEnd == null) {
				creationDateEndArg = new Date();
			}

			/*------ always recovery Status from selectedStatus key ------
						always keep the status search options
			  ---------------------------------------------------------------*/
			status = getStatusSelected(selectedStatus);

			/*----------- always initialized listPages if not done ----------
				   		    and check if is there next listPages
			  ---------------------------------------------------------------*/
			nextListPages = (Integer) session.getAttribute("nextListPages");
			if (nextListPages == null)
				nextListPages = 0;
			if (indexSet == null || indexSet == -1) {
				indexSet = (Integer) session.getAttribute("indexSet");
				if (indexSet == null)
					indexSet = 0;
			}
			listIndexSet = (List<OrdersDTO>) session
					.getAttribute("listIndexSet");
			if (listIndexSet == null)
				initalizeListIndexSet(session, orderService);

			/*----------------- When Admin Click on the pageIndex ----------------------------------
										catch  page index
			 ---------------------------------------------------------------------------------------*/
			//Toggle Switch between PO Date and Shipping date
			if (dateBetweenSignal != null && dateBetweenSignal != 0L) {
				reportDateBetween = ((reportDateBetween == null || reportDateBetween == 0) ? 1: 0);
				listOrdersDTO = new ArrayList<OrdersDTO>();
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				session.setAttribute("reportDateBetween", reportDateBetween);
				return SUCCESS;
			}
		
			//Toggle Switch between Client Login and PO Number	
//			switchBetweenClientLoginAndPoNumber=(Integer)session.getAttribute("switchBetweenClientLoginAndPoNumber");
			
			if (switchBetweenClientLoginAndPoNumberSignal != null && switchBetweenClientLoginAndPoNumberSignal != 0L) {
				switchBetweenClientLoginAndPoNumber = ((switchBetweenClientLoginAndPoNumber == null 
						|| switchBetweenClientLoginAndPoNumber == 0) ? 1: 0);
				listOrdersDTO = new ArrayList<OrdersDTO>();
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				session.setAttribute("switchBetweenClientLoginAndPoNumber", switchBetweenClientLoginAndPoNumber);
				return SUCCESS;
			}
			
			//Switching between "ls_Order" and "Client Order Id"	
//			switchBetweenLsOrderAndClientOrderId = (Integer)session.getAttribute("switchBetweenLsOrderAndClientOrderId");
			
			if (switchBetweenLsOrderAndClientOrderIdSignal != null && switchBetweenLsOrderAndClientOrderIdSignal != 0L) {
				switchBetweenLsOrderAndClientOrderId = ((switchBetweenLsOrderAndClientOrderId == null 
						|| switchBetweenLsOrderAndClientOrderId == 0) ? 1: 0);
				listOrdersDTO = new ArrayList<OrdersDTO>();
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				session.setAttribute("switchBetweenLsOrderAndClientOrderId", switchBetweenLsOrderAndClientOrderId);
				return SUCCESS;
			}
			
			//Switching between "Status" and "Client Other Id"
//			switchBetweenStatusAndClientOther = (Integer)session.getAttribute("switchBetweenStatusAndClientOther");
			
			if (switchBetweenStatusAndClientOtherSignal != null && switchBetweenStatusAndClientOtherSignal != 0L) {
				switchBetweenStatusAndClientOther = ((switchBetweenStatusAndClientOther == null 
						|| switchBetweenStatusAndClientOther == 0) ? 1: 0);
				listOrdersDTO = new ArrayList<OrdersDTO>();
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				session.setAttribute("switchBetweenStatusAndClientOther", switchBetweenStatusAndClientOther);
				return SUCCESS;
			}
			
			if (switchBetweenOptionFieldsSignal != null && switchBetweenOptionFields != 0L) {
				switchBetweenOptionFields++;
				if (switchBetweenOptionFields == 4) switchBetweenOptionFields = 0;
				
			}
			

			
			
			/*----------------- When Admin Click on the pageIndex ----------------------------------
										catch  page index
			 ---------------------------------------------------------------------------------------*/
			if (pageIndexSignal != null && pageIndexSignal != 0L) {
				OrdersDTO orderDTO = (OrdersDTO) session.getAttribute("orderPageSelected");
				if (orderDTO != null)
					orderDTO.setCssStyle("");
				OrdersDTO orderPageSelected = listIndexSet.get(indexList);
				orderPageSelected
						.setCssStyle("background-color:#FFFF99;border:1px solid #CCCCCC;");
				indexSet = orderPageSelected.getIndex() - 1;
				indexSet = indexSet * PAGE_ITEMS_COUNT;
				session.setAttribute("indexSet", indexSet);
				session.setAttribute("listIndexSet", listIndexSet);
				session.setAttribute("orderPageSelected", orderPageSelected);
			}

			/*----------------- When Admin Click on the nextListPages ------------------------------
						recreate listIndexSet started with index>index+10 and indexSet>indexSet+10
			 ---------------------------------------------------------------------------------------*/
			if (nextListPagesSignal != null && nextListPagesSignal != 0L
					&& listIndexSet.size() > 0) {
				OrdersDTO orderDTOPrevious = (OrdersDTO) session
						.getAttribute("orderPageSelected");
				if (orderDTOPrevious != null)
					orderDTOPrevious.setCssStyle("");
				OrdersDTO orderDTO = listIndexSet.get(listIndexSet.size() - 1);
				if (orderDTO != null)
					nextListPages = orderDTO.getIndex() + 1;
				
				Long totalOrders = orderService.getCountOrders(creationDateStartArg,
						creationDateEndArg, reportDateBetween, userLogin, lsOrderId,
						status,productOrderNumberSearch,clientOrderNumber,clientOther);
				
				String strcount = totalOrders.toString();
				Integer sizeList = Integer.parseInt(strcount)
						/ PAGE_ITEMS_COUNT;
				if (nextListPages <= sizeList + 1) {
					listIndexSet = new ArrayList<OrdersDTO>();
					for (int i = nextListPages; i <= sizeList + 1
							&& i <= nextListPages + 10; i++) {
						OrdersDTO ord = new OrdersDTO();
						ord.setCssStyle("");
						ord.setIndex(i);
						listIndexSet.add(ord);
					}
					if (nextListPages <= sizeList + 1) {
						indexSet = nextListPages - 1;
						OrdersDTO orderPageSelected = listIndexSet.get(0);
						orderPageSelected
								.setCssStyle("background-color:#FFFF99;border:1px solid #CCCCCC;");
						indexSet = indexSet * PAGE_ITEMS_COUNT;
						session.setAttribute("indexSet", indexSet);
						session.setAttribute("nextListPages", nextListPages);
						session.setAttribute("listIndexSet", listIndexSet);
						session.setAttribute("orderPageSelected",
								orderPageSelected);
					}
				}
			}

			/*----------------- When Admin Click on the previousListPages --------------------------
					recreate listIndexSet started with index< index-10 and indexSet<indexSet-10
			 ---------------------------------------------------------------------------------------*/
			if (prevListPagesSignal != null && prevListPagesSignal != 0L
					&& listIndexSet.size() > 0) {
				OrdersDTO orderDTOPrevious = (OrdersDTO) session
						.getAttribute("orderPageSelected");
				if (orderDTOPrevious != null)
					orderDTOPrevious.setCssStyle("");
				nextListPages = (Integer) session.getAttribute("nextListPages");
				if (nextListPages != null && nextListPages >= 11) {
					prevListPages = nextListPages - 11;
					listIndexSet = new ArrayList<OrdersDTO>();
					for (int i = prevListPages; i < nextListPages; i++) {
						OrdersDTO ord = new OrdersDTO();
						ord.setCssStyle("");
						ord.setIndex(i);
						listIndexSet.add(ord);
					}
					indexSet = prevListPages - 1;
					OrdersDTO orderPageSelected = listIndexSet.get(0);
					orderPageSelected
							.setCssStyle("background-color:#FFFF99;border:1px solid #CCCCCC;");
					indexSet = indexSet * PAGE_ITEMS_COUNT;
					nextListPages = prevListPages;
					session.setAttribute("nextListPages", nextListPages);
					session.setAttribute("indexSet", indexSet);
					session.setAttribute("listIndexSet", listIndexSet);
					session.setAttribute("orderPageSelected", orderPageSelected);
				}
			}

			/*----------------- When Admin change province -----------------------------------------
								Check a list off this province
			 ---------------------------------------------------------------------------------------*/
			hashProvinces = (Hashtable<String, ProvinceDTO>) session
					.getAttribute("hashProvinces");
			if (hashProvinces == null) {
				listProvinces = productService.getAllProvinces();
				Hashtable<String, ProvinceDTO> hashProvinces = new Hashtable<String, ProvinceDTO>();
				for (ProvinceDTO prov : listProvinces) {
					hashProvinces.put(prov.getCode(), prov);
				}
				session.setAttribute("hashProvinces", hashProvinces);
			}
			if (code != null && !code.equals("") && listOrdersDTO != null) {
				ProvinceDTO provinceDTO = hashProvinces.get(code);
				if (provinceDTO != null) {
					clientProvince = provinceDTO.getCode();
				}
			}// else listCities=new ArrayList<CityDTO>();
			if (listOrdersDTO != null && indexOrder != -1) {
				orderToEdit = listOrdersDTO.get(indexOrder);
				if (orderToEdit != null) {
					orderToEdit.setClientProvince(code);
					session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				}
			}

			/*------------------------------- Refresh listOrdersDTO------------------------------------
						Refresh listOrders before generation of invoiced orders XLS file 
				 ------------------------------------------------------------------------------------------*/
			invoicedOrdersRefresh = (Long) session
					.getAttribute("invoicedOrdersRefresh");
			if (invoicedOrdersRefresh != null && invoicedOrdersRefresh != 0L) {
				listIndexColumn = (ArrayList<Integer>) session
						.getAttribute("listIndexColumn");
				if (listIndexColumn == null)
					listIndexColumn = getNewListIndexColumn();
				lsOrderId = lsOrderId.toUpperCase();
				
				//New Searching Functionality
				listOrdersDTO = orderService.searchOrdersWithOptionsAndSorting(
						creationDateStartArg, creationDateEndArg,
						reportDateBetween,orderDTOObj,listIndexColumn, PAGE_ITEMS_COUNT, indexSet);
				//Old Searching Functionality				
//				listOrdersDTO = orderService.searchOrdersWithOptionsAndSorting(
//						creationDateStartArg, creationDateEndArg,
//						reportDateBetween, userLogin, lsOrderId, status,
//						listIndexColumn, PAGE_ITEMS_COUNT, indexSet);
				
				if (findOrdersSignal != null && findOrdersSignal != 0L)
					initalizeListIndexSet(session, orderService);
				// Color in RED rows containing a GroupItems
				for (OrdersDTO orderDTO : listOrdersDTO) {
					if (orderDTO != null && orderDTO.getStatus() != null
							&& orderDTO.getStatus().equals("shipped")) {
						Long count = productService.isGroupProductID(orderDTO
								.getProductId());
						if (count != null && count >= 1) {
							orderDTO.setCssStyle("background-color: rgb(248,150,140); border-right:1px solid #CCCCCC;border-left:1px solid #CCCCCC;border-top:1px solid #CCCCCC;");
						}
					}
				}

				// keep search parameters to use in other
				// classes(PrintOrdersToPDF, ...)
				indexSet = 0;
				session.setAttribute("indexSet", indexSet);
				nextListPages = 0;
				session.setAttribute("nextListPages", nextListPages);
				session.setAttribute("selectedStatus", selectedStatus);
				session.setAttribute("creationDateStartArg",creationDateStartArg);
				session.setAttribute("creationDateEndArg", creationDateEndArg);
				session.setAttribute("reportDateBetween", reportDateBetween);
				session.setAttribute("lsOrderId", lsOrderId);
				session.setAttribute("userLogin", userLogin);
				session.setAttribute("status", status);
				session.setAttribute("listIndexColumn", listIndexColumn);
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				session.setAttribute("invoicedOrdersRefresh", 0L);
				
				session.setAttribute("productOrderNumberSearch", productOrderNumberSearch);
				session.setAttribute("clientOrderNumber", clientOrderNumber);
				session.setAttribute("clientOther", clientOther);
				return SUCCESS;
			}

			/*------------ When Admin click on the Button "Delete Order" in The OrderDtailPop --------------
								show other pop to confirm Order Delete
			  ----------------------------------------------------------------------------------------------*/
			if (deleteOrderSignal != null && deleteOrderSignal != 0L) {
				message = "Attention! if you click on \"Delete Order\" you can not restore it.";
				orderToEdit = listOrdersDTO.get(indexOrder);
				if (confirmDeleteSignal != null && confirmDeleteSignal == 0L) { // Delete
																				// Order
																				// Request
					showOrderDetailPop = "display:block;visibility:visible;";
					showConfirmDeleteOrderPop = "display:block;visibility:visible;";
				} else if (confirmDeleteSignal == 1L) { // Delete Order
														// Confirmed
					orderService.deleteOrderByLsOrderId(orderToEdit);
					// Save this operation in table operation
					OperationsDTO operationDTO = new OperationsDTO();
					User userAdmin = (User) session.getAttribute("userAdmin");
					if (userAdmin != null)
						operationDTO.setUserId(userAdmin.getId());
					operationDTO.setOperationDate(new Date());
					operationDTO.setOperationType("Delete Order");
					String dataBefore = "[PARTNER NAME:"
							+ orderToEdit.getUserLogin() + "];";
					dataBefore += " [LS_ORDER_ID:" + orderToEdit.getLsOrderId()
							+ "];";
					dataBefore += " [PRODUCT_ORDER_NUMBER:"
							+ orderToEdit.getProductOrderNumber() + "];";
					dataBefore += " [CLIENT_FIRST_NAME:"
							+ orderToEdit.getClientFirstName() + "];";
					dataBefore += " [CLIENT_LAST_NAME:"
							+ orderToEdit.getClientLastName() + "];";
					dataBefore += " [CLIENT_POSTAL_CODE:"
							+ orderToEdit.getClientPostalCode() + "];";
					dataBefore += " [LS_PRODUCT_ID:"
							+ orderToEdit.getLsProductID() + "];";
					dataBefore += " [UNIT_PRICE:" + orderToEdit.getUnitPrice()
							+ "];";
					dataBefore += " [STATUS:" + orderToEdit.getStatus() + "];";
					operationDTO.setDataBefore(dataBefore);
					operationDTO.setDataBefore(operationDTO.getDataBefore());
					operationDTO.setDataAfter("");
					operationsService.insertOperation(operationDTO);
					// Remove order from the list orders
					listOrdersDTO.remove(orderToEdit);
					session.setAttribute("listOrdersDTOReport", listOrdersDTO);
					showOrderDetailPop = "visibility:hidden;display:none;";
					showConfirmDeleteOrderPop = "visibility:hidden;display:none;";
					// initialize index orders
					int indexOrder = 0;
					int indexRow = 0;
					for (OrdersDTO orderDTO : listOrdersDTO) {
						orderDTO.setIndex(indexOrder);
						indexOrder++;
						indexRow = 0;
						for (OrdersRows orderRows : orderDTO.getRowsList()) {
							orderRows.setIndex(indexRow);
							indexRow++;
						}
					}
					session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				} else { // Cancel Order Delete
					showOrderDetailPop = "display:block;visibility:visible;";
					showConfirmDeleteOrderPop = "visibility:hidden;display:none;";
				}
				return SUCCESS;
			}

			/*------ When Admin click the "Edit link" in the Order Table for Edit NOTE -----
							show only field Edit Note
			  ------------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& showOnlyEditNote != null && showOnlyEditNote != 0L) {
				orderToEdit = listOrdersDTO.get(indexOrder);
				for (OrdersDTO order : listOrdersDTO) {
					order.setShowOnlyEditNote(0L);
					order.setCssRow("");
				}
				orderToEdit.setShowOnlyEditNote(1L);
				orderToEdit.setCssRow("background-color:#FF9966;");
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				listOrdersDTO = (ArrayList<OrdersDTO>) session
						.getAttribute("listOrdersDTOReport");
				return SUCCESS;
			}

			/*------------ When Admin click on link "Save Edit Note in the Orders Table" ----------
													save Only  notes
			  -------------------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& saveOnlyNoteSignal != null && saveOnlyNoteSignal != 0L) {
				if (indexOrder != null) {
					orderToEdit = listOrdersDTO.get(indexOrder);
					if (orderToEdit != null) {
						orderToEdit.setNotes(notes);
						orderToEdit.setShowRowShipping(0L);
						orderToEdit.setShowOnlyEditNote(0L);
						orderToEdit.setCssRow("");
						// Save Note
						Boolean sucess = orderService
								.updateShippingOrderElements(orderToEdit);
						session.setAttribute("listOrdersDTOReport",
								listOrdersDTO);
					}
				}
				return SUCCESS;
			}

			/*------------ When Admin click the "Edit link" in the Order Table -------------
								show fields to edit shipping parameters
			  ------------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& showRowShipping != null && showRowShipping != 0L) {

				orderToEdit = listOrdersDTO.get(indexOrder);
				for (OrdersDTO order : listOrdersDTO) {
					order.setShowRowShipping(0L);
					order.setCssRow("");
				}
				// only Admins who has Active = true of action name='All' can
				// change shipping settings
				// of orders shipped or invoiced
				if (usersPrivChangeShippedStatus == null
						&& orderToEdit.getStatus() != null
						&& (orderToEdit.getStatus().equals("shipped") || orderToEdit
								.getStatus().equals("invoiced"))) {
					showRowShipping = 0L;
					return SUCCESS;
				}

				if (orderToEdit != null) {
					orderToEdit.setShowRowShipping(1L);
					orderToEdit.setShowOnlyEditNote(1L);
					orderToEdit.setCssRow("background-color:#FF9966;");
					session.setAttribute("listOrdersDTOReport", listOrdersDTO);
					listOrdersDTO = (ArrayList<OrdersDTO>) session
							.getAttribute("listOrdersDTOReport");
				}
				if (orderToEdit.getStatus().equals("open")) {
					statusId = 0L;
				} else if (orderToEdit.getStatus().equals("progress")) {
					statusId = 1L;
				} else if (orderToEdit.getStatus().equals("shipped")) {
					statusId = 2L;
				} else if (orderToEdit.getStatus().equals("invoiced")) {
					statusId = 3L;
				} else if (orderToEdit.getStatus().equals("canceled")) {
					statusId = 4L;
				}
				return SUCCESS;
			}

			/*------------ When Admin click on link "Save in the Orders Table" ----------
							save all shipping parameters and notes
			 ----------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& saveShippingSignal != null && saveShippingSignal != 0L) {
				if (indexOrder != null) {
					orderToEdit = listOrdersDTO.get(indexOrder);
					if (orderToEdit != null) {
						Date shippedDateToEdit = null;
						frm = new SimpleDateFormat("dd/MM/yyyy");
						if (((strShippedDate) != null)
								&& (!"".equals(strShippedDate))) {
							strShippedDate = strShippedDate.replaceAll(" ", "");
							try {
								Date date = frm.parse(strShippedDate);
								shippedDateToEdit = date;
							} catch (Exception pe) {
								shippedDateToEdit = null;
							}
						}
						if (((strShippedDate) != null)
								&& (!"".equals(strShippedDate))
								&& strShippedDate.length() <= 8)
							shippedDateToEdit = orderToEdit.getShippedDate();
						Double shippingPrice = null;
						// Double currencyShippingPrice=null;
						if (strShippingPrice != null
								&& !strShippingPrice.equals("")) {
							strShippingPrice = strShippingPrice.replaceAll(" ",
									"");
							int index = strShippingPrice.indexOf(",");
							if (index >= 0) {
								String strUnitPrice1 = strShippingPrice
										.substring(0, index);
								String strUnitPrice2 = strShippingPrice
										.substring(index + 1,
												strShippingPrice.length());
								strShippingPrice = strUnitPrice1 + "."
										+ strUnitPrice2;
							}

							try {
								shippingPrice = Double
										.parseDouble(strShippingPrice);
								/*
								 * if(shippingPrice!=null &&
								 * orderToEdit.getCurrencyId()!=null &&
								 * orderToEdit.getCurrencyId()!=1 &&
								 * orderToEdit.getCurrencyRate()!=null) {
								 * currencyShippingPrice = shippingPrice *
								 * orderToEdit.getCurrencyRate();
								 * currencyShippingPrice = (double)
								 * Math.round(currencyShippingPrice*100)/100; }
								 */
							} catch (Exception pe) {
								shippingPrice = null;
							}
						}

						if (trakingNumber != null)
							trakingNumber = trakingNumber.replaceAll(
									"^ +| +$|( )+", "$1");
						if (shippingCompany != null)
							shippingCompany = shippingCompany.replaceAll(
									"^ +| +$|( )+", "$1");
						orderToEdit.setShippingPrice(shippingPrice);
						// orderToEdit.setCurrencyShippingPrice(currencyShippingPrice);
						// orderToEdit.getRowsList().get(0).setCurrencyShippingPrice(currencyShippingPrice);
						orderToEdit.setShippedDate(shippedDateToEdit);
						orderToEdit.setNotes(notes);
						if (newStatus != null && !newStatus.equals(""))
							orderToEdit.setStatus(newStatus);
						orderToEdit.setShippingCompany(shippingCompany);
						orderToEdit.setTrackingNumber(trakingNumber);
						orderToEdit.setShowRowShipping(0L);
						orderToEdit.setShowOnlyEditNote(0L);
						OrdersRows row = orderToEdit.getRowsList().get(0);
						row.setShippingPrice(shippingPrice);
						row.setShippingCompany(shippingCompany);
						row.setTrackingNumber(trakingNumber);
						orderToEdit.setCssRow("");

						if (newStatus != null && !newStatus.equals("")) { // if
																			// admin
																			// click
																			// on
																			// the
																			// save
																			// behind
																			// status
							orderService.updateStatusByLsOrderId(
									orderToEdit.getLsOrderId(), newStatus);
							orderToEdit.setStatus(newStatus);
							if (!newStatus.equals("shipped")
									&& !newStatus.equals("invoiced")
									&& !newStatus.equals("canceled")) {
								orderToEdit.setShippingPrice(null);
								orderToEdit.setTrackingNumber(null);
								orderToEdit.setShippedDate(null);
							}

						} else {// if admin click on the save other than Status
							if (orderToEdit.getShippedDate() != null
									&& orderToEdit.getTrackingNumber() != null
									&& !orderToEdit.getTrackingNumber().equals(
											"")
									&& orderToEdit.getShippingCompany() != null
									&& !orderToEdit.getShippingCompany()
											.equals("")
									&& orderToEdit.getShippingPrice() != null
									&& orderToEdit.getStatus() != null) {
								if (orderToEdit.getStatus().equals("open")
										|| orderToEdit.getStatus().equals(
												"progress")) {
									orderService.updateStatusByLsOrderId(
											orderToEdit.getLsOrderId(),
											"shipped");
									orderToEdit.setStatus("shipped");
								}
							} else {
								if (usersPrivChangeShippedStatus != null
										&& !orderToEdit.getStatus().equals(
												"open")
										&& !orderToEdit.getStatus().equals(
												"progress")) {
									orderService.updateStatusByLsOrderId(
											orderToEdit.getLsOrderId(),
											"progress");
									orderToEdit.setStatus("progress");
								}
							}
						}
						// if admin click on the save other then status(save
						// notes, save shipping company ...)
						Boolean sucess = orderService
								.updateShippingOrderElements(orderToEdit);
						session.setAttribute("listOrdersDTOReport",
								listOrdersDTO);
					}
				}
				return SUCCESS;
			}

			/*------------ When Admin click on icon findOrders.png ----------
								check user and complete infos client
			 ----------------------------------------------------------------*/
			if (findOrdersSignal != null
					&& findOrdersSignal != 0L
					|| (pageIndexSignal != null && pageIndexSignal != 0L)
					|| (nextListPagesSignal != null && nextListPagesSignal != 0L)
					|| (prevListPagesSignal != null && prevListPagesSignal != 0L)) {
				// session.setAttribute("allOrdersSelectedSignal",0L);
				// if admin click on search icon initialize checkBoxItem to
				// false
				if (findOrdersSignal != null && findOrdersSignal != 0L) {
					session.setAttribute("allOrdersSelectedSignal", 0L);
					checkBoxItem = false;
					session.setAttribute("checkBoxItem", checkBoxItem);
					indexSet = 0;
					session.setAttribute("indexSet", indexSet);
					nextListPages = 0;
					session.setAttribute("nextListPages", nextListPages);
					session.setAttribute("selectedStatus", selectedStatus);

				}
				// if admin navigate on pages keep the previous sorting
				if (((pageIndexSignal != null && pageIndexSignal != 0L)
						|| (nextListPagesSignal != null && nextListPagesSignal != 0L) || (prevListPagesSignal != null && prevListPagesSignal != 0L))) {
					listIndexColumn = (ArrayList<Integer>) session
							.getAttribute("listIndexColumn");
					if (listIndexColumn == null)
						listIndexColumn = getNewListIndexColumn();
				} else { // prepare new sorting
					listIndexColumn = getNewListIndexColumn();
				}

				lsOrderId = lsOrderId.toUpperCase();
				// if(findOrdersSignal!=null &&
				// findOrdersSignal!=0L)initalizeListIndexSet(session,orderService
				// );
				
				//Old Working Methods
//				listOrdersDTO = orderService.searchOrdersWithOptionsAndSorting(
//						creationDateStartArg, creationDateEndArg,
//						reportDateBetween, userLogin, lsOrderId, status,
//						listIndexColumn, PAGE_ITEMS_COUNT, indexSet);
				
				//New Functionality with same mapping
				listOrdersDTO = orderService.searchOrdersWithOptionsAndSortingNew(
								creationDateStartArg, creationDateEndArg,
								reportDateBetween, userLogin, lsOrderId,
								status, listIndexColumn, PAGE_ITEMS_COUNT,
								indexSet, productOrderNumberSearch,clientOrderNumber,
								clientOther);

//				//New Searching Functionality
//				listOrdersDTO = orderService.searchOrdersWithOptionsAndSorting(
//						creationDateStartArg, creationDateEndArg,
//						reportDateBetween, orderDTOObj, listIndexColumn,
//						PAGE_ITEMS_COUNT, indexSet);
				
				
				// Color in RED rows containing a GroupItems
				for (OrdersDTO orderDTO : listOrdersDTO) {
					if (orderDTO != null && orderDTO.getStatus() != null
							&& orderDTO.getStatus().equals("shipped")) {
						Long count = productService.isGroupProductID(orderDTO
								.getProductId());
						if (count != null && count >= 1) {
							orderDTO.setCssStyle("background-color: rgb(248,150,140); border-right:1px solid #CCCCCC;border-left:1px solid #CCCCCC;border-top:1px solid #CCCCCC;");
						}
					}
				}

				// keep search parameters to use in other
				// classes(PrintOrdersToPDF, ...)
				session.setAttribute("creationDateStartArg",
						creationDateStartArg);
				session.setAttribute("creationDateEndArg", creationDateEndArg);
				session.setAttribute("reportDateBetween", reportDateBetween);
				session.setAttribute("lsOrderId", lsOrderId);
				session.setAttribute("userLogin", userLogin);
				session.setAttribute("status", status);
				//For newly added field
				session.setAttribute("productOrderNumberSearch", productOrderNumberSearch);

				session.setAttribute("listIndexColumn", listIndexColumn);
				session.setAttribute("sizeResult", sizeResult);
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				if (findOrdersSignal != null && findOrdersSignal != 0L)
					initalizeListIndexSet(session, orderService);
				return SUCCESS;
			}

			/*------------ When Admin click on the icon sorting of column ----------
							seach result with option of sorting list
			 -----------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& sortingOrdersSignal != null && sortingOrdersSignal != 0L) {
				listIndexColumn = (List<Integer>) session
						.getAttribute("listIndexColumn");
				asc = (asc == 1 ? -1 : 1);
				int nextElement = listIndexColumn.get(0);
				fieldForSorting = asc * fieldForSorting;
				listIndexColumn.set(0, fieldForSorting);
				for (int i = 1; i < listIndexColumn.size(); i++) {
					int element = listIndexColumn.get(i);
					listIndexColumn.set(i, nextElement);
					nextElement = element;
				}
				
				//New Functionality with same mapping
				listOrdersDTO = orderService.searchOrdersWithOptionsAndSortingNew(
								creationDateStartArg, creationDateEndArg,
								reportDateBetween, userLogin, lsOrderId,
								status, listIndexColumn, PAGE_ITEMS_COUNT,
								indexSet, productOrderNumberSearch,clientOrderNumber,
								clientOther);
				
//				listOrdersDTO = orderService.searchOrdersWithOptionsAndSorting(
//						creationDateStartArg, creationDateEndArg,
//						reportDateBetween, userLogin, lsOrderId, status,
//						listIndexColumn, PAGE_ITEMS_COUNT, indexSet);
				
//				// New Searching Functionality
//				listOrdersDTO = orderService.searchOrdersWithOptionsAndSorting(
//						creationDateStartArg, creationDateEndArg,
//						reportDateBetween, orderDTOObj, listIndexColumn,
//						PAGE_ITEMS_COUNT, indexSet);
				
				int balance = 0;
				int OrderIndex = 0;
				for (OrdersDTO orDTO : listOrdersDTO) {
					balance = (balance == 1 ? 0 : 1);
					if (balance == 1) {
						orDTO.setCssStyle("background-color: rgb(245,249,252);border-right: 1px solid #CCCCCC;border-left:1px solid #CCCCCC;border-top:  1px solid #CCCCCC;");
					} else {
						orDTO.setCssStyle("background-color: color:white;border-right:1px solid #CCCCCC;border-left:1px solid #CCCCCC;border-top:1px solid #CCCCCC;");
					}
					orDTO.setIndex(OrderIndex);
					OrderIndex++;
				}
				session.setAttribute("listIndexColumn", listIndexColumn);
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				session.setAttribute("asc", asc);
				return SUCCESS;
			}

			/*------ when Admin click on the lsOrder link in table -----------
					show popup detail and allow admin to update Order
			  ---------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& editOrderSignal != null && editOrderSignal != 0L) {
				orderToEdit = listOrdersDTO.get(indexOrder);
				if (orderToEdit == null)
					orderToEdit = new OrdersDTO();
				if (orderToEdit.getProductOrderDate() == null)
					strProductOrderDate = "";
				showOrderDetailPop = "display:block;visibility:visible;";
				return SUCCESS;
			}

			/*--- when Admin click on the cancel Button of orderDetailPop ---
					we mast just hide popup OrderDetail
			  ---------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& cancelSignal != null && cancelSignal != 0L) {
				showOrderDetailPop = "visibility:hidden;display:none;";
				return SUCCESS;
			}

			/*-------------------- When Admin left lsProduct TextField -------------
								check userPrice in DB, and write it in web view
			 -----------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& checkProductPriceSignal != null
					&& checkProductPriceSignal != 0L) {
				OrdersDTO orderDTOToUpdate = listOrdersDTO.get(indexOrder);
				orderDTOToUpdate = fillDataOrderDTO(orderDTOToUpdate);
				OrdersRows orderRowToUpadate = orderDTOToUpdate.getRowsList()
						.get(indexRow);
				UserProductPriceDTO userProductPrice = productService
						.getUsrPPriceByLsproductId(userId, lsProductID);
				orderRowToUpadate.setCss("");
				orderRowToUpadate.setCssPrice("");
				if (userProductPrice == null) {
					orderRowToUpadate.setCss("background-color:red;");
					orderRowToUpadate.setProductDescription("");
					orderRowToUpadate.setStock(null);
					orderRowToUpadate.setProductId(null);
					orderRowToUpadate.setLsProductID(lsProductID);
					orderRowToUpadate.setLsPrice(null);
				} else {
					Double usrPrice = orderRowToUpadate.getUnitPrice();
					if (usrPrice == null)
						usrPrice = 0D;
					if (usrPrice < userProductPrice.getPriceNum()) {
						orderRowToUpadate.setCssPrice("background-color:red;");
					}
					orderRowToUpadate.setProductDescription(userProductPrice
							.getProductTitle());
					orderRowToUpadate.setStock(userProductPrice.getStock());
					orderRowToUpadate.setProductId(userProductPrice
							.getProductId());
					orderRowToUpadate.setLsProductID(userProductPrice
							.getLsProductId());
					orderRowToUpadate
							.setLsPrice(userProductPrice.getPriceNum());
				}
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				orderToEdit = orderDTOToUpdate;
				listOrdersDTO = (List<OrdersDTO>) session
						.getAttribute("listOrdersDTOReport");
				showOrderDetailPop = "display:block;visibility:visible;";
				return SUCCESS;
			}

			/*----------------- When Admin check on saveTemporaryRow Icon --------------------------
					we must first obtained the object that contains the list of rows,
					after we accede to the row by index recovered by web view and change it
			 ---------------------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& saveTemporaryRowSignal != null
					&& saveTemporaryRowSignal != 0L) {
				OrdersDTO orderDTOToUpdate = listOrdersDTO.get(indexOrder);
				orderDTOToUpdate = fillDataOrderDTO(orderDTOToUpdate);
				OrdersRows orderRowToSaveMemory = orderDTOToUpdate
						.getRowsList().get(indexRow);
				orderRowToSaveMemory.setIcon("images/orders/itemValidated.png");
				if (orderRowToSaveMemory != null) {
					orderRowToSaveMemory.setQuantity(quantity);
					orderRowToSaveMemory.setLsProductID(lsProductID);
					orderRowToSaveMemory
							.setProductDescription(productDescription);
					orderRowToSaveMemory.setUnitPrice(unitPrice);
					orderRowToSaveMemory
							.setCssPrice("background-color:#FF6666;");
					orderRowToSaveMemory
							.setCssQuantity("background-color:#FF6666;");
					if (quantity != null && quantity > 0D)
						orderRowToSaveMemory.setCssQuantity("");
					if (unitPrice != null
							&& orderRowToSaveMemory.getLsPrice() != null
							&& unitPrice >= orderRowToSaveMemory.getLsPrice())
						orderRowToSaveMemory.setCssPrice("");
					orderRowToSaveMemory.setShippingFee(shippingFee);
					orderRowToSaveMemory.setShippingPrice(shippingFee);
					orderRowToSaveMemory.setShippingCompany(shippingCompany);
					orderRowToSaveMemory.setTrackingNumber(trakingNumber);
					if (orderRowToSaveMemory.getCurrencyId() != null
							&& orderRowToSaveMemory.getCurrencyId() != 1
							&& orderRowToSaveMemory.getCurrencyRate() != null) {
						if (unitPrice != null) {
							orderRowToSaveMemory
									.setCurrencyUnitPrice(unitPrice);
							unitPrice = unitPrice
									/ orderRowToSaveMemory.getCurrencyRate();
							unitPrice = (double) Math.round(unitPrice * 100) / 100;
							orderRowToSaveMemory.setUnitPrice(unitPrice);
						}
						/*
						 * if(shippingFee!=null) {
						 * orderRowToSaveMemory.setCurrencyShippingPrice
						 * (shippingFee); shippingFee =
						 * shippingFee/orderRowToSaveMemory.getCurrencyRate();
						 * shippingFee = (double)
						 * Math.round(shippingFee*100)/100;
						 * orderRowToSaveMemory.setShippingPrice(shippingFee); }
						 */
					}
					int indexOrder = 0;
					int indexRow = 0;
					for (OrdersDTO orderDTO : listOrdersDTO) {
						orderDTO.setIndex(indexOrder);
						indexOrder++;
						indexRow = 0;
						for (OrdersRows orderRows : orderDTO.getRowsList()) {
							orderRows.setIndex(indexRow);
							indexRow++;
						}
					}
					session.setAttribute("listOrdersDTOReport", listOrdersDTO);
					listOrdersDTO = (List<OrdersDTO>) session
							.getAttribute("listOrdersDTOReport");
				}
				orderToEdit = listOrdersDTO.get(indexOrder);
				// Change totalPrice also
				if (orderToEdit.getRowsList().get(0) != null
						&& orderToEdit.getRowsList().get(0).getQuantity() != null
						&& orderToEdit.getRowsList().get(0)
								.getQuantityToSplit() != null
						&& orderToEdit.getRowsList().get(0).getUnitPrice() != null) {
					Double priceTotal = orderToEdit.getRowsList().get(0)
							.getUnitPrice()
							* orderToEdit.getRowsList().get(0)
									.getQuantityToSplit();
					priceTotal = (double) Math.round(priceTotal * 100) / 100;
					orderToEdit.setTotalPrice(priceTotal);
				}
				showOrderDetailPop = "display:block;visibility:visible;";
				return SUCCESS;
			}

			/*------- When Admin click on addSimilarRow Icon on the OrderDetailPop --------
								Add one Row Similar at the previews
			  -----------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& addSimilarRowSignal != null && addSimilarRowSignal != 0L) {
				OrdersDTO orderDTOToUpdate = listOrdersDTO.get(indexOrder);
				// generate lsOrderId to new order
				orderDTOToUpdate = fillDataOrderDTO(orderDTOToUpdate);
				OrdersRows orderRowToClone = orderDTOToUpdate.getRowsList()
						.get(indexRow);
				if (orderRowToClone != null) {
					if (!orderRowToClone.getIcon().equals(
							"images/orders/itemValidated.png")) {
						orderRowToClone.setQuantity(quantity);
						orderRowToClone.setLsProductID(lsProductID);
						orderRowToClone.setStock(stock);
						orderRowToClone
								.setProductDescription(productDescription);
						orderRowToClone.setUnitPrice(unitPrice);
						orderRowToClone.setShippingFee(shippingFee);
						orderRowToClone.setShippingCompany(shippingCompany);
						orderRowToClone.setTrackingNumber(trakingNumber);
					}
					orderRowToClone.setIcon("images/orders/itemValidated.png");
					OrdersRows orderRowToAdd = DTOFactory
							.getOrderRowClone(orderRowToClone);
					orderRowToAdd.setId(-1L);
					// Add currencyId
					if (orderRowToClone.getCurrencyId() != null)
						orderRowToAdd.setCurrencyId(orderRowToClone
								.getCurrencyId());

					orderDTOToUpdate.getRowsList().add(indexRow + 1,
							orderRowToAdd);
					int indexOrder = 0;
					int indexRow = 0;
					for (OrdersDTO orderDTO : listOrdersDTO) {
						orderDTO.setIndex(indexOrder);
						indexOrder++;
						indexRow = 0;
						for (OrdersRows orderRows : orderDTO.getRowsList()) {
							orderRows.setIndex(indexRow);
							indexRow++;
						}
					}
					session.setAttribute("listOrdersDTOReport", listOrdersDTO);
					listOrdersDTO = (List<OrdersDTO>) session
							.getAttribute("listOrdersDTOReport");
				}
				orderToEdit = listOrdersDTO.get(indexOrder);
				showOrderDetailPop = "display:block;visibility:visible;";
				return SUCCESS;
			}

			/*-------- When Admin click on Delete Row Icon of orderDetail Popup-----------
									Delete this row using index
			 -----------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& deleteRowSignal != null && deleteRowSignal != 0L) {
				OrdersDTO orderDTO = listOrdersDTO.get(indexOrder);
				orderDTO = fillDataOrderDTO(orderDTO);
				int nb = orderService.nbOrderRowsNotDeleted(orderDTO
						.getRowsList());
				if (orderDTO != null && orderDTO.getRowsList().size() > 1) {
					for (int i = 0; i < orderDTO.getRowsList().size(); i++) {
						if (i == indexRow && nb > 1) {
							orderDTO.getRowsList().get(i).setToDelete(1);
							break;
						}
					}
				}
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				orderToEdit = listOrdersDTO.get(indexOrder);
				showOrderDetailPop = "display:block;visibility:visible;";
				return SUCCESS;
			}

			/*------ when Admin click on the button save of orderDetail ------------------
					 save order and hide pup  
			  ----------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& saveOrdersSignal != null && saveOrdersSignal != 0L) {
				session.setAttribute("orderNotSavedAtFirst", null);
				orderToEdit = listOrdersDTO.get(indexOrder);
				orderToEdit = fillDataOrderDTO(orderToEdit);

				// add special handling shipping
				User user = null;
				if (orderToEdit.getUserLogin() != null)
					user = userService.getUserByLogin(orderToEdit
							.getUserLogin());
				if (user != null) {
					Double totalPrice = null;
					orderToEdit.setSpecialHandlingName(user
							.getSpecialHandlingName());
					orderToEdit.setSpecialHandlingFee(user
							.getSpecialHandlingFee());
					if (orderToEdit.getRowsList().get(0).getQuantity() != null
							&& orderToEdit.getRowsList().get(0).getUnitPrice() != null) {
						totalPrice = orderToEdit.getRowsList().get(0)
								.getQuantity()
								* orderToEdit.getRowsList().get(0)
										.getUnitPrice();
						totalPrice = (double) Math.round(totalPrice * 100) / 100;
					}

					orderToEdit.setTotalPrice(totalPrice);
				}

				orderService.updateOrderByLsOrderId(orderToEdit);
				for (OrdersRows row : orderToEdit.getRowsList()) {
					if (row.getId() == -1)
						row.setId(0L);
				}
				OrdersRows row = orderToEdit.getRowsList().get(0);
				if (row != null) {
					orderToEdit.getShippedDate();
					orderToEdit.setLsPrice(row.getLsPrice());
					orderToEdit.setLsProductID(row.getLsProductID());
					orderToEdit.setProductDescription(row
							.getProductDescription());
					orderToEdit.setQuantity(row.getQuantity());
				}
				orderToEdit = DTOFactory.getOrderDTOConsideredMissingInfo(
						orderToEdit, hashProvinces);
				listIndexColumn = (List<Integer>) session
						.getAttribute("listIndexColumn");
				
//				listOrdersDTO = orderService.searchOrdersWithOptionsAndSorting(
//						creationDateStartArg, creationDateEndArg,
//						reportDateBetween, userLogin, lsOrderId, status,
//						listIndexColumn, PAGE_ITEMS_COUNT, indexSet);
				

				//New Functionality with same mapping
				listOrdersDTO = orderService.searchOrdersWithOptionsAndSortingNew(
								creationDateStartArg, creationDateEndArg,
								reportDateBetween, userLogin, lsOrderId,
								status, listIndexColumn, PAGE_ITEMS_COUNT,
								indexSet, productOrderNumberSearch,clientOrderNumber,
								clientOther);				
				
				// New Searching Functionality
//				listOrdersDTO = orderService.searchOrdersWithOptionsAndSorting(
//						creationDateStartArg, creationDateEndArg,
//						reportDateBetween, orderDTOObj, listIndexColumn,
//						PAGE_ITEMS_COUNT, indexSet);
				
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				message = "Saving has completed successfuly";
				showSaveSuccessPop = "display:block;visibility:visible;";
				showOrderDetailPop = "display:block;visibility:visible;";
				return SUCCESS;
			}

			/*------ When user change Quantity to split in orderDetailPop -----------
					 prepare order to split from two other orders witch
				 	 one must have a lsOrder with underscore 
			 ------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& quantityToChangeSignal != null
					&& quantityToChangeSignal != 0L) {
				OrdersDTO orderToChangeQt = listOrdersDTO.get(indexOrder);
				OrdersRows orderRow = orderToChangeQt.getRowsList().get(
						indexRow);
				orderToChangeQt = fillDataOrderDTO(orderToChangeQt);
				if (quantityToChange < orderRow.getQuantity())
					orderRow.setQuantityToSplit(quantityToChange);
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				listOrdersDTO = (List<OrdersDTO>) session
						.getAttribute("listOrdersDTOReport");
				orderToEdit = listOrdersDTO.get(indexOrder);
				showOrderDetailPop = "display:block;visibility:visible;";
				return SUCCESS;
			}

			/*-------------------- Duplicate Order ----------------------------------------
							Create order in just in memory
			 -----------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& duplicateOrderSignal != null
					&& duplicateOrderSignal != 0L) {
				OrdersDTO orderToClone = listOrdersDTO.get(indexOrder);
				orderToClone = fillDataOrderDTO(orderToClone);
				hashOrders = new Hashtable<String, OrdersDTO>();
				for (OrdersDTO ord : listOrdersDTO) {
					hashOrders.put(ord.getLsOrderId(), ord);
				}
				OrdersDTO orderClone = DTOFactory
						.getOrderDTOSplitted(orderToClone);
				if (orderClone != null) {
					orderClone.setDuplicate(true);
					String lsOrder = orderClone.getLsOrderId();
					String strlsOrder = orderService.generateLsOrderId(lsOrder,
							hashOrders);
					orderClone.setLsOrderId(strlsOrder);// rgb(116,180,209)
					orderClone
							.setCssStyle("background-color:#FFFF99;border-right: 1px solid #CCCCCC;border-left:1px solid #CCCCCC;border-top:  1px solid #CCCCCC;");
					orderToEdit = orderClone;
					orderToEdit.setBackgroundColor("background-color:#FFFF99;");
					listOrdersDTO.add(indexOrder + 1, orderClone);
					indexOrder = 0;
					for (OrdersDTO ord : listOrdersDTO) {
						ord.setIndex(indexOrder);
						indexOrder++;
					}
					orderService.updateOrderByLsOrderId(orderToClone);
					orderService.insertOrderWithRows(orderClone);
					orderClone.setDuplicate(false);
					for (OrdersRows row : orderClone.getRowsList()) {
						if (row.getId() < 0L)
							row.setId(0L);
					}
					if (listOrdersDTO.size() > 0) {
						session.setAttribute("listOrdersDTOReport",
								listOrdersDTO);
					}
				} else
					orderToEdit = orderToClone;
				showOrderDetailPop = "display:block;visibility:visible;";
				return SUCCESS;
			}

			/*-------------------- When user check print item -----------------------------
					Add or remove this element from the orders to print
			 -----------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& okSaveSuccessPopSignal != null
					&& okSaveSuccessPopSignal != 0L) {
				showSaveSuccessPop = "visibility:hidden;display:none;";
				showOrderDetailPop = "visibility:hidden;display:none;";
				return SUCCESS;
			}
		} catch (Exception e) {
			e.printStackTrace();
			return "input";
		}
		return SUCCESS;
	}

	/*
	 * ==========================================================================
	 * =============== fill all fields of order without rows
	 * ====================
	 * =====================================================================
	 */
	public OrdersDTO fillDataOrderDTO(OrdersDTO orderDTO) {
		SimpleDateFormat frm = new SimpleDateFormat("dd/MM/yyyy");
		orderDTO.setClientLastName(clientLastName);
		orderDTO.setClientFirstName(clientFirstName);
		orderDTO.setClientOtherNames(clientOtherNames);
		orderDTO.setClientStreet(clientStreet);
		orderDTO.setClientOtherStreet(clientOtherStreet);
		orderDTO.setClientCity(clientCity);
		orderDTO.setClientProvince(code);
		orderDTO.setClientPostalCode(clientPostalCode);
		orderDTO.setClientPhone(clientPhone);
		orderDTO.setClientEmail(clientEmail);
		orderDTO.setProductOrderNumber(productOrderNumberSearch);
		orderDTO.setCompanyHeader(companyHeader);
		if (((strProductOrderDate) != null)
				&& (!"".equals(strProductOrderDate))) {
			frm = new SimpleDateFormat("dd/MM/yyyy");
			try {
				Date date = frm.parse(strProductOrderDate);
				orderDTO.setProductOrderDate(date);
			} catch (Exception pe) {
				addActionError("Please enter a date in the correct format");
			}
		}

		if (((strCreationOrderDate) != null)
				&& (!"".equals(strCreationOrderDate))) {
			frm = new SimpleDateFormat("dd/MM/yyyy");
			try {
				Date date = frm.parse(strCreationOrderDate);
				orderDTO.setCreationDate(date);
			} catch (Exception pe) {
				addActionError("Please enter a date in the correct format");
			}
		}

		if (((strRequiredDate) != null) && (!"".equals(strRequiredDate))) {
			frm = new SimpleDateFormat("dd/MM/yyyy");
			try {
				Date date = frm.parse(strRequiredDate);
				orderDTO.setRequiredDate(date);
			} catch (Exception pe) {
				addActionError("Please enter a date in the correct format");
			}
		}
		return orderDTO;
	}

	/*
	 * ==========================================================================
	 * =============== initialize ListIndexSet
	 * ==================================
	 * =======================================================
	 */
	public void initalizeListIndexSet(HttpSession session,
			OrdersService orderService) throws ServiceException {
		listIndexSet = new ArrayList<OrdersDTO>();
		totalOrders = orderService.getCountOrders(creationDateStartArg,
				creationDateEndArg, reportDateBetween, userLogin, lsOrderId,
				status,productOrderNumberSearch,clientOrderNumber,clientOther);
		
		String strcount = totalOrders.toString();
		Integer sizeList = Integer.parseInt(strcount) / PAGE_ITEMS_COUNT;
		nextListPages = 1;
		session.setAttribute("nextListPages", nextListPages);
		for (int i = 1; i <= sizeList + 1 && i <= 11; i++) {
			OrdersDTO ord = new OrdersDTO();
			ord.setCssStyle("");
			ord.setIndex(i);
			listIndexSet.add(ord);
		}
		indexSet = 0;
		session.setAttribute("indexSet", indexSet);
		session.setAttribute("totalOrders", totalOrders);
		session.setAttribute("listIndexSet", listIndexSet);
		session.setAttribute("productOrderNumberSearch", productOrderNumberSearch);

	}

	/*
	 * ==========================================================================
	 * =============== initialize listIndexColumn
	 * ================================
	 * =========================================================
	 */
	List<Integer> getNewListIndexColumn() {
		List<Integer> reult = new ArrayList<Integer>();
		for (int i = 0; i <= 34; i++) {
			if (i != 2 && i <= 13) {
				reult.add(i);
				if (i != 0)
					reult.add(-i);
			}
			if (i == 30 || i == 31 || i == 34) {
				reult.add(i);
				reult.add(-i);
			}
		}
		return reult;
	}

	/*
	 * ==========================================================================
	 * =============== getStatus Selected by Admin for searching
	 * ================
	 * =========================================================================
	 */
	public String getStatusSelected(Integer StatusIndex) {
		String result = "";
		switch (StatusIndex) {
		case 0:
			result = "open";
			break;
		case 1:
			result = "progress";
			break;
		case 2:
			result = "shipped";
			break;
		case 3:
			result = "invoiced";
			break;
		case 4:
			result = "canceled";
			break;
		default:
			result = "";
		}
		return result;
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.Argument.bind(Argument.java:35)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.bindArguments(AbstractMethodDeclaration.java:83)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:406)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1147)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1235)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:540)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:883)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:928)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:189)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:255)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:190)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:89)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:728)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:788)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1244)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:102)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)

!ENTRY org.eclipse.jdt.ui 4 2 2015-04-15 11:40:28.325
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:233)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:255)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:190)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:89)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:728)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:788)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1244)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:102)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)
Caused by: java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.Argument.bind(Argument.java:35)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.bindArguments(AbstractMethodDeclaration.java:83)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:406)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1147)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1235)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:540)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:883)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:928)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:189)
	... 16 more
Caused by: java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.Argument.bind(Argument.java:35)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.bindArguments(AbstractMethodDeclaration.java:83)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:406)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1147)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1235)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:540)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:883)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:928)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:189)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:255)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:190)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:89)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:728)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:788)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1244)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:102)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2015-04-15 11:40:28.325
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.Argument.bind(Argument.java:35)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.bindArguments(AbstractMethodDeclaration.java:83)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:406)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1147)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1235)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:540)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:883)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:928)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:189)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:255)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:190)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:89)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:728)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:788)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1244)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:102)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2015-04-15 11:40:28.325
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.Argument.bind(Argument.java:35)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.bindArguments(AbstractMethodDeclaration.java:83)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:406)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1147)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1235)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:540)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:883)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:928)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:189)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:255)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:190)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:89)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:728)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:788)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1244)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:102)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)

!ENTRY org.eclipse.jdt.ui 4 0 2015-04-15 11:40:28.325
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:233)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:255)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:190)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:89)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:728)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:788)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1244)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:102)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)
Caused by: java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.Argument.bind(Argument.java:35)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.bindArguments(AbstractMethodDeclaration.java:83)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:406)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1147)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1235)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:540)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:883)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:928)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:189)
	... 16 more
Caused by: java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.Argument.bind(Argument.java:35)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.bindArguments(AbstractMethodDeclaration.java:83)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:406)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1147)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1235)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:540)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:883)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:928)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:189)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:255)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:190)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:89)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:728)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:788)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1244)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:102)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2015-04-15 11:40:28.325
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.Argument.bind(Argument.java:35)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.bindArguments(AbstractMethodDeclaration.java:83)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:406)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1147)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1235)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:540)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:883)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:928)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:189)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:255)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:190)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:89)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:728)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:788)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1244)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:102)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)

!ENTRY org.eclipse.core.resources 4 2 2015-04-15 11:40:29.751
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.core.resources".
!STACK 0
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.Argument.bind(Argument.java:35)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.bindArguments(AbstractMethodDeclaration.java:83)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:406)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1147)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1235)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:540)
	at org.eclipse.jdt.internal.compiler.Compiler.process(Compiler.java:759)
	at org.eclipse.jdt.internal.compiler.ProcessTaskManager.run(ProcessTaskManager.java:137)
	at java.lang.Thread.run(Thread.java:722)

!ENTRY org.eclipse.core.resources 4 2 2015-04-15 11:40:30.043
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.core.resources".
!STACK 0
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.Argument.bind(Argument.java:35)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.bindArguments(AbstractMethodDeclaration.java:83)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:406)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1147)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1235)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:540)
	at org.eclipse.jdt.internal.compiler.Compiler.process(Compiler.java:759)
	at org.eclipse.jdt.internal.compiler.ProcessTaskManager.run(ProcessTaskManager.java:137)
	at java.lang.Thread.run(Thread.java:722)

!ENTRY org.eclipse.core.resources 4 75 2015-04-15 11:40:30.253
!MESSAGE Errors occurred during the build.
!SUBENTRY 1 org.eclipse.jdt.core 4 75 2015-04-15 11:40:30.253
!MESSAGE Errors running builder 'Java Builder' on project 'loyaltySource_admin'.
!STACK 0
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.Argument.bind(Argument.java:35)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.bindArguments(AbstractMethodDeclaration.java:83)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:406)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1147)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1235)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:540)
	at org.eclipse.jdt.internal.compiler.Compiler.process(Compiler.java:759)
	at org.eclipse.jdt.internal.compiler.ProcessTaskManager.run(ProcessTaskManager.java:137)
	at java.lang.Thread.run(Thread.java:722)
!SUBENTRY 1 org.eclipse.jdt.core 4 75 2015-04-15 11:40:30.253
!MESSAGE Errors running builder 'Java Builder' on project 'loyaltySource'.
!STACK 0
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.Argument.bind(Argument.java:35)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.bindArguments(AbstractMethodDeclaration.java:83)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:406)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1147)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1235)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:540)
	at org.eclipse.jdt.internal.compiler.Compiler.process(Compiler.java:759)
	at org.eclipse.jdt.internal.compiler.ProcessTaskManager.run(ProcessTaskManager.java:137)
	at java.lang.Thread.run(Thread.java:722)

!ENTRY org.eclipse.jdt.core 4 4 2015-04-15 11:42:21.613
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.loyauty.web.struts.action.orders;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.List;

import javax.servlet.http.HttpSession;
import lombok.Getter;
import lombok.Setter;

import com.loyauty.exception.ServiceException;
import com.loyauty.exception.ServiceLocatorException;
import com.loyauty.model.OrdersRows;
import com.loyauty.model.User;
import com.loyauty.service.core.DTOFactory;
import com.loyauty.service.core.dto.BasicUserDTO;
import com.loyauty.service.core.dto.OperationsDTO;
import com.loyauty.service.core.dto.OrdersDTO;
import com.loyauty.service.core.dto.ProvinceDTO;
import com.loyauty.service.core.dto.UserProductPriceDTO;
import com.loyauty.service.core.dto.UserSessionDTO;
import com.loyauty.service.core.dto.UsersPrivilegesDTO;
import com.loyauty.service.operations.OperationsService;
import com.loyauty.service.orders.OrdersService;
import com.loyauty.service.product.ProductService;
import com.loyauty.service.user.UserService;
import com.loyauty.web.struts.action.LoyautyAction;

public class ReportOrders extends LoyautyAction {
	private static final long serialVersionUID = -3811760851445730062L;
	private UserService userService;
	private ProductService productService;
	private OrdersService orderService;
	private OperationsService operationsService;
	@Getter
	@Setter
	private String userLogin;
	@Getter
	@Setter
	private List<User> usersList;
	private static int USER_TYPE = 2;
	@Getter
	@Setter
	List<OrdersDTO> listOrdersDTO;
	@Getter
	@Setter
	List<OrdersDTO> listStatus;
	@Getter
	@Setter
	private String lsOrderId;
	@Getter
	@Setter
	Long poYpop;
	@Getter
	@Setter
	Long poXpop;
	@Getter
	@Setter
	private Long pageTop = 0L;
	@Getter
	@Setter
	private Date creationDate;
	@Getter
	@Setter
	private Long findOrdersSignal;
	private String status;
	@Getter
	@Setter
	private Long sizeResult = 0L;
	@Getter
	@Setter
	private Long sorting;
	@Getter
	@Setter
	private Long sortingOrdersSignal;
	@Getter
	@Setter
	private Integer fieldForSorting;
	@Getter
	@Setter
	private Integer asc;
	@Getter
	@Setter
	private Integer scrollDivRowsLeft;
	@Getter
	@Setter
	private Integer scrollPageLeft;
	@Getter
	@Setter
	private Integer scrollDivRowsTop;
	@Getter
	@Setter
	private String strCreationDateStart;
	@Getter
	@Setter
	private String strCreationDateEnd;
	@Getter
	@Setter
	private Date creationDateStart;
	@Getter
	@Setter
	private Date creationDateEnd;
	private Date creationDateStartArg;
	private Date creationDateEndArg;
	@Getter
	@Setter
	private Integer selectedStatus;
	@Getter
	@Setter
	private Long editOrderSignal;
	@Getter
	@Setter
	private Long cancelSignal;
	@Getter
	@Setter
	private Integer indexOrder;
	@Getter
	@Setter
	private OrdersDTO orderToEdit;
	@Getter
	@Setter
	private String strProductOrderDate;
	@Getter
	@Setter
	private String lsProductID;
	@Getter
	@Setter
	Integer indexRow;
	@Getter
	@Setter
	private String showOrderDetailPop;
	@Getter
	@Setter
	private Long userId;
	@Getter
	@Setter
	private Long checkProductPriceSignal;
	@Getter
	@Setter
	private Long saveTemporaryRowSignal;
	@Getter
	@Setter
	private Long addSimilarRowSignal;
	@Getter
	@Setter
	private Long deleteRowSignal;
	@Getter
	@Setter
	private Long saveOrdersSignal;
	@Getter
	@Setter
	private Boolean checkBoxPrint;

	// recovery Data Order
	@Getter
	@Setter
	private String clientLastName;
	@Getter
	@Setter
	private String clientFirstName;
	@Getter
	@Setter
	private String clientOtherNames;
	@Getter
	@Setter
	private String clientStreet;
	@Getter
	@Setter
	private String clientOtherStreet;
	@Getter
	@Setter
	private String clientCity;
	@Getter
	@Setter
	private String clientProvince;
	@Getter
	@Setter
	private String clientPostalCode;
	@Getter
	@Setter
	private String clientPhone;
	@Getter
	@Setter
	private String clientEmail;
//	@Getter
//	@Setter
//	private String productOrderNumber;
	@Getter
	@Setter
	private String strRequiredDate;

	// recovery data row
	@Getter
	@Setter
	private Double quantity;
	@Getter
	@Setter
	private String notes;
	@Getter
	@Setter
	private Double quantityToChange;
	@Getter
	@Setter
	private Double stock;
	@Getter
	@Setter
	private String productDescription;
	@Getter
	@Setter
	private Double unitPrice;
	@Getter
	@Setter
	private Double shippingFee;
	@Getter
	@Setter
	private String shippingCompany;
	@Getter
	@Setter
	private String companyHeader;

	@Getter
	@Setter
	private Long quantityToChangeSignal;
	@Getter
	@Setter
	private Long duplicateOrderSignal;
	@Getter
	@Setter
	private String strCreationDate;
	@Getter
	@Setter
	private String strCreationOrderDate;
	@Getter
	@Setter
	private User usr;
	@Getter
	@Setter
	private String showSaveSuccessPop;
	// showSaveSuccessPop="display:block;visibility:visible;";
	// showSaveSuccessPop="visibility:hidden;display:none;";
	@Getter
	@Setter
	private String message;
	@Getter
	@Setter
	private Long okSaveSuccessPopSignal;
	@Getter
	@Setter
	private Long showRowShipping;
	@Getter
	@Setter
	private Long showOnlyEditNote;
	@Getter
	@Setter
	private Long saveShippingSignal;
	@Getter
	@Setter
	private Long saveOnlyNoteSignal;
	@Getter
	@Setter
	private String code;
	@Getter
	@Setter
	private Long cityId;
	@Getter
	@Setter
	private List<ProvinceDTO> listProvinces;
	private Hashtable<String, ProvinceDTO> hashProvinces;
	@Getter
	@Setter
	private Boolean orderNotSavedAtFirst;
	@Getter
	@Setter
	private String strShippedDate;
	@Getter
	@Setter
	private String strShippingPrice;
	@Getter
	@Setter
	private String showConfirmDeleteOrderPop;
	@Getter
	@Setter
	private Long deleteOrderSignal;
	@Getter
	@Setter
	private Long confirmDeleteSignal;
	@Getter
	@Setter
	private UsersPrivilegesDTO userPrivileges;
	@Getter
	@Setter
	private UsersPrivilegesDTO usersPrivShippedToInvoiced;
	@Getter
	@Setter
	private UsersPrivilegesDTO usersPrivChangeShippedStatus;
	@Getter
	@Setter
	private HashMap<Integer, String> hashStatus;
	@Getter
	@Setter
	private Long statusId;
	@Getter
	@Setter
	private String strPrint;
	@Getter
	@Setter
	private Integer testSignal;
	@Getter
	@Setter
	private String newStatus;
	Long invoicedOrdersRefresh;
	@Getter
	@Setter
	private Integer reportDateBetween;
	@Getter
	@Setter
	private Long dateBetweenSignal;
	@Getter
	@Setter
	private Long selectAllOrdersSignal;
	@Getter
	@Setter
	private Boolean checkBoxItem;
	// ------Pagination
	@Getter
	@Setter
	Long pageIndexSignal;
	@Getter
	@Setter
	Long prevListPagesSignal;
	@Getter
	@Setter
	Long nextListPagesSignal;
	@Getter
	@Setter
	Long totalOrders;
	@Getter
	@Setter
	Integer nextListPages;
	@Getter
	@Setter
	Integer prevListPages;
	@Getter
	@Setter
	Integer indexSet = 0;
	@Getter
	@Setter
	Integer indexList;
	@Getter
	@Setter
	List<OrdersDTO> listIndexSet;
	@Getter
	@Setter
	Integer PAGE_ITEMS_COUNT = 100;
	
	//New Added Field in the search option as toggle functionality
	@Getter
	@Setter
	private String productOrderNumberSearch;
	@Getter
	@Setter
	private String trakingNumber;
	@Getter
	@Setter
	private String  clientOther;
	@Getter	@Setter
	private String	 clientOrderNumber;
	
	@Getter	@Setter
	private Integer switchBetweenClientLoginAndPoNumberSignal;
	@Getter	@Setter
	private Integer switchBetweenClientLoginAndPoNumber;
	//New Added Field in the search option as toggle functionality
	@Getter	@Setter
	private Integer switchBetweenLsOrderAndClientOrderIdSignal;
	@Getter	@Setter
	private Integer switchBetweenLsOrderAndClientOrderId;
	@Getter	@Setter
	private Integer switchBetweenStatusAndClientOtherSignal;
	@Getter	@Setter
	private Integer switchBetweenStatusAndClientOther;
	//Added for the multiple functionality in switching  
	@Getter	@Setter
	private Integer switchBetweenOptionFieldsSignal;
	@Getter	@Setter
	private Integer switchBetweenOptionFields;
	
	switchBetweenOptionFieldsSignal

	// ------Pagination

	/*
	 * ==========================================================================
	 * =============== Default constructor
	 * ======================================
	 * ===================================================
	 */
	public ReportOrders() throws ServiceLocatorException {
		super();
		userService = getServiceLocator().getUserService();
		orderService = getServiceLocator().getOrderService();
		productService = getServiceLocator().getProductService();
		operationsService = getServiceLocator().getOperationsService();
	}

	/*
	 * ==========================================================================
	 * =============== method execute
	 * ============================================
	 * =============================================
	 */
	@SuppressWarnings({ "rawtypes", "unchecked" })
	@Override
	public String execute() throws Exception {
		System.out.println("Product Order Number: "+ productOrderNumberSearch);
		System.out.println("Tracking Number: "+ trakingNumber);
		System.out.println("Client Order ID: "+ clientOrderNumber);
		System.out.println("Client Other ID: "+ clientOther);
		
		//Create new object or Order to modify the search functionality
		OrdersDTO orderDTOObj=new OrdersDTO();
		orderDTOObj.setLsOrderId(lsOrderId);
		orderDTOObj.setUserLogin(userLogin);
		orderDTOObj.setStatus(status);
		orderDTOObj.setProductOrderNumber(productOrderNumberSearch);
		orderDTOObj.setClientOrderNumber(clientOrderNumber);
		orderDTOObj.setClientOtherId(clientOther);
		
		HttpSession session = request.getSession(true);

		if (showOrderDetailPop == null)
			showOrderDetailPop = "visibility:hidden;display:none;";
		if (showConfirmDeleteOrderPop == null)
			showConfirmDeleteOrderPop = "visibility:hidden;display:none;";
		if (showSaveSuccessPop == null)
			showSaveSuccessPop = "visibility:hidden;display:none;";
		if (poYpop == null)
			poYpop = 100L;
		if (poXpop == null)
			poXpop = 100L;
		Hashtable<String, OrdersDTO> hashOrders;
		if (selectedStatus == null)
			selectedStatus = -1;
		sizeResult = (Long) session.getAttribute("sizeResult");
		totalOrders = (Long) session.getAttribute("totalOrders");
		if (totalOrders == null)
			totalOrders = 0L;
		asc = (Integer) session.getAttribute("asc");
		if (asc == null)
			asc = 0;
		if (sizeResult == null)
			sizeResult = 0L;
		if (indexOrder == null)
			indexOrder = 0;
		userPrivileges = (UsersPrivilegesDTO) session.getAttribute("userPrivileges");
		usersPrivShippedToInvoiced = (UsersPrivilegesDTO) session.getAttribute("usersPrivShippedToInvoiced");
		usersPrivChangeShippedStatus = (UsersPrivilegesDTO) session
				.getAttribute("usersPrivChangeShippedStatus");
		hashStatus = (HashMap<Integer, String>) session
				.getAttribute("hashStatus");
		if (hashStatus == null) {
			hashStatus = new HashMap<Integer, String>();
			hashStatus.put(0, "");
			hashStatus.put(1, "open");
			hashStatus.put(2, "progress");
		}
		List<Integer> listIndexColumn = new ArrayList<Integer>();
		// fill list status
		listStatus = (ArrayList<OrdersDTO>) session.getAttribute("listStatus");
		if (listStatus == null) {
			listStatus = new ArrayList<OrdersDTO>();
			OrdersDTO orderDTOOpen = new OrdersDTO();
			orderDTOOpen.setStatus("open");
			orderDTOOpen.setId(0L);
			listStatus.add(orderDTOOpen);
			OrdersDTO orderDTOProgress = new OrdersDTO();
			orderDTOProgress.setStatus("progress");
			orderDTOProgress.setId(1L);
			listStatus.add(orderDTOProgress);
			if (usersPrivChangeShippedStatus != null) {
				OrdersDTO orderDTOShipped = new OrdersDTO();
				orderDTOShipped.setStatus("shipped");
				orderDTOShipped.setId(2L);
				listStatus.add(orderDTOShipped);
			}

		}

		try {

			/*-------------------- recovery users list -----------------------------------
							Recovery users list in session
			 -----------------------------------------------------------------------------*/
			// recovery provinces
			listProvinces = (List<ProvinceDTO>) session
					.getAttribute("listProvinces");
			if (listProvinces == null)
				listProvinces = productService.getAllProvinces();
			orderNotSavedAtFirst = (Boolean) session
					.getAttribute("listNotSavedAtFirst");
			BasicUserDTO basicUserDTO = new BasicUserDTO();
			basicUserDTO.setTypeId(USER_TYPE);
			List<User> usersListSession = (List<User>) session
					.getAttribute("usersListSession");
			if (usersListSession == null) {
				List<UserSessionDTO> listAllUsers = userService
						.getAllUsers(basicUserDTO);
				usersList = new ArrayList<User>();
				for (UserSessionDTO userDTO : listAllUsers) {
					User user = new User();
					user.setId(userDTO.getId());
					user.setLogin(userDTO.getLogin());
					usersList.add(user);
				}
				session.setAttribute("usersListSession", usersList);
			} else{
				usersList = usersListSession;
			}
			
			listOrdersDTO = (ArrayList<OrdersDTO>) session.getAttribute("listOrdersDTOReport");
			
			reportDateBetween = (Integer) session.getAttribute("reportDateBetween");
			if (reportDateBetween == null) {
				reportDateBetween = 0;
				session.setAttribute("reportDateBetween", reportDateBetween);
			}

			//Added for the new field
			switchBetweenClientLoginAndPoNumber = (Integer) session.getAttribute("switchBetweenClientLoginAndPoNumber");
			if (switchBetweenClientLoginAndPoNumber == null) {
				switchBetweenClientLoginAndPoNumber = 0;
				session.setAttribute("switchBetweenClientLoginAndPoNumber", switchBetweenClientLoginAndPoNumber);
			}
			switchBetweenLsOrderAndClientOrderId = (Integer) session.getAttribute("switchBetweenLsOrderAndClientOrderId");
			if (switchBetweenLsOrderAndClientOrderId == null) {
				switchBetweenLsOrderAndClientOrderId = 0;
				session.setAttribute("switchBetweenLsOrderAndClientOrderId", switchBetweenLsOrderAndClientOrderId);
			}
			switchBetweenStatusAndClientOther = (Integer) session.getAttribute("switchBetweenStatusAndClientOther");
			if (switchBetweenStatusAndClientOther == null) {
				switchBetweenStatusAndClientOther = 0;
				session.setAttribute("switchBetweenStatusAndClientOther", switchBetweenStatusAndClientOther);
			}

			/*------ always check if the Admin select all orders ------------
					if The Admin select all orders change checkBoxItem value 
			  ---------------------------------------------------------------*/
			if (selectAllOrdersSignal != null && selectAllOrdersSignal != 0L) {
				if (checkBoxItem != null) {
					session.setAttribute("checkBoxItem", checkBoxItem);
					session.setAttribute("allOrdersSelectedSignal", 0L);
					if (checkBoxItem)
						session.setAttribute("allOrdersSelectedSignal", 1L);
				}
			}
			checkBoxItem = (Boolean) session.getAttribute("checkBoxItem");
			if (checkBoxItem == null)
				checkBoxItem = false;
			/*------ always recovery creationDate from strCreationDate ------
						always keep the user search options
			  ---------------------------------------------------------------*/
			creationDateStart = null;
			SimpleDateFormat frm = new SimpleDateFormat("dd/MM/yyyy");
			if (((strCreationDateStart) != null)
					&& (!"".equals(strCreationDateStart))) {
				try {
					Date date = frm.parse(strCreationDateStart);
					creationDateStart = date;
					creationDateStartArg = date;
				} catch (Exception pe) {
					creationDateStart = null;
					addActionError("Please enter a date in the correct format");
				}
			}
			if (creationDateStart == null) {
				Date date = frm.parse("01/01/1900");
				creationDateStartArg = date;
			}
			creationDateEnd = null;
			if (((strCreationDateEnd) != null)
					&& (!"".equals(strCreationDateEnd))) {
				frm = new SimpleDateFormat("dd/MM/yyyy");
				try {
					Date date = frm.parse(strCreationDateEnd);
					creationDateEnd = date;
					creationDateEndArg = date;
				} catch (Exception pe) {
					creationDateEnd = null;
					addActionError("Please enter a date in the correct format");
				}
			}
			if (creationDateEnd == null) {
				creationDateEndArg = new Date();
			}

			/*------ always recovery Status from selectedStatus key ------
						always keep the status search options
			  ---------------------------------------------------------------*/
			status = getStatusSelected(selectedStatus);

			/*----------- always initialized listPages if not done ----------
				   		    and check if is there next listPages
			  ---------------------------------------------------------------*/
			nextListPages = (Integer) session.getAttribute("nextListPages");
			if (nextListPages == null)
				nextListPages = 0;
			if (indexSet == null || indexSet == -1) {
				indexSet = (Integer) session.getAttribute("indexSet");
				if (indexSet == null)
					indexSet = 0;
			}
			listIndexSet = (List<OrdersDTO>) session
					.getAttribute("listIndexSet");
			if (listIndexSet == null)
				initalizeListIndexSet(session, orderService);

			/*----------------- When Admin Click on the pageIndex ----------------------------------
										catch  page index
			 ---------------------------------------------------------------------------------------*/
			//Toggle Switch between PO Date and Shipping date
			if (dateBetweenSignal != null && dateBetweenSignal != 0L) {
				reportDateBetween = ((reportDateBetween == null || reportDateBetween == 0) ? 1: 0);
				listOrdersDTO = new ArrayList<OrdersDTO>();
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				session.setAttribute("reportDateBetween", reportDateBetween);
				return SUCCESS;
			}
		
			//Toggle Switch between Client Login and PO Number	
//			switchBetweenClientLoginAndPoNumber=(Integer)session.getAttribute("switchBetweenClientLoginAndPoNumber");
			
			if (switchBetweenClientLoginAndPoNumberSignal != null && switchBetweenClientLoginAndPoNumberSignal != 0L) {
				switchBetweenClientLoginAndPoNumber = ((switchBetweenClientLoginAndPoNumber == null 
						|| switchBetweenClientLoginAndPoNumber == 0) ? 1: 0);
				listOrdersDTO = new ArrayList<OrdersDTO>();
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				session.setAttribute("switchBetweenClientLoginAndPoNumber", switchBetweenClientLoginAndPoNumber);
				return SUCCESS;
			}
			
			//Switching between "ls_Order" and "Client Order Id"	
//			switchBetweenLsOrderAndClientOrderId = (Integer)session.getAttribute("switchBetweenLsOrderAndClientOrderId");
			
			if (switchBetweenLsOrderAndClientOrderIdSignal != null && switchBetweenLsOrderAndClientOrderIdSignal != 0L) {
				switchBetweenLsOrderAndClientOrderId = ((switchBetweenLsOrderAndClientOrderId == null 
						|| switchBetweenLsOrderAndClientOrderId == 0) ? 1: 0);
				listOrdersDTO = new ArrayList<OrdersDTO>();
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				session.setAttribute("switchBetweenLsOrderAndClientOrderId", switchBetweenLsOrderAndClientOrderId);
				return SUCCESS;
			}
			
			//Switching between "Status" and "Client Other Id"
//			switchBetweenStatusAndClientOther = (Integer)session.getAttribute("switchBetweenStatusAndClientOther");
			
			if (switchBetweenStatusAndClientOtherSignal != null && switchBetweenStatusAndClientOtherSignal != 0L) {
				switchBetweenStatusAndClientOther = ((switchBetweenStatusAndClientOther == null 
						|| switchBetweenStatusAndClientOther == 0) ? 1: 0);
				listOrdersDTO = new ArrayList<OrdersDTO>();
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				session.setAttribute("switchBetweenStatusAndClientOther", switchBetweenStatusAndClientOther);
				return SUCCESS;
			}
			
			if (switchBetweenOptionFieldsSignal != null && switchBetweenOptionFields != 0L) {
				switchBetweenOptionFields++;
				if (switchBetweenOptionFields == 4) switchBetweenOptionFields = 0;
				
			}
			

			
			
			/*----------------- When Admin Click on the pageIndex ----------------------------------
										catch  page index
			 ---------------------------------------------------------------------------------------*/
			if (pageIndexSignal != null && pageIndexSignal != 0L) {
				OrdersDTO orderDTO = (OrdersDTO) session.getAttribute("orderPageSelected");
				if (orderDTO != null)
					orderDTO.setCssStyle("");
				OrdersDTO orderPageSelected = listIndexSet.get(indexList);
				orderPageSelected
						.setCssStyle("background-color:#FFFF99;border:1px solid #CCCCCC;");
				indexSet = orderPageSelected.getIndex() - 1;
				indexSet = indexSet * PAGE_ITEMS_COUNT;
				session.setAttribute("indexSet", indexSet);
				session.setAttribute("listIndexSet", listIndexSet);
				session.setAttribute("orderPageSelected", orderPageSelected);
			}

			/*----------------- When Admin Click on the nextListPages ------------------------------
						recreate listIndexSet started with index>index+10 and indexSet>indexSet+10
			 ---------------------------------------------------------------------------------------*/
			if (nextListPagesSignal != null && nextListPagesSignal != 0L
					&& listIndexSet.size() > 0) {
				OrdersDTO orderDTOPrevious = (OrdersDTO) session
						.getAttribute("orderPageSelected");
				if (orderDTOPrevious != null)
					orderDTOPrevious.setCssStyle("");
				OrdersDTO orderDTO = listIndexSet.get(listIndexSet.size() - 1);
				if (orderDTO != null)
					nextListPages = orderDTO.getIndex() + 1;
				
				Long totalOrders = orderService.getCountOrders(creationDateStartArg,
						creationDateEndArg, reportDateBetween, userLogin, lsOrderId,
						status,productOrderNumberSearch,clientOrderNumber,clientOther);
				
				String strcount = totalOrders.toString();
				Integer sizeList = Integer.parseInt(strcount)
						/ PAGE_ITEMS_COUNT;
				if (nextListPages <= sizeList + 1) {
					listIndexSet = new ArrayList<OrdersDTO>();
					for (int i = nextListPages; i <= sizeList + 1
							&& i <= nextListPages + 10; i++) {
						OrdersDTO ord = new OrdersDTO();
						ord.setCssStyle("");
						ord.setIndex(i);
						listIndexSet.add(ord);
					}
					if (nextListPages <= sizeList + 1) {
						indexSet = nextListPages - 1;
						OrdersDTO orderPageSelected = listIndexSet.get(0);
						orderPageSelected
								.setCssStyle("background-color:#FFFF99;border:1px solid #CCCCCC;");
						indexSet = indexSet * PAGE_ITEMS_COUNT;
						session.setAttribute("indexSet", indexSet);
						session.setAttribute("nextListPages", nextListPages);
						session.setAttribute("listIndexSet", listIndexSet);
						session.setAttribute("orderPageSelected",
								orderPageSelected);
					}
				}
			}

			/*----------------- When Admin Click on the previousListPages --------------------------
					recreate listIndexSet started with index< index-10 and indexSet<indexSet-10
			 ---------------------------------------------------------------------------------------*/
			if (prevListPagesSignal != null && prevListPagesSignal != 0L
					&& listIndexSet.size() > 0) {
				OrdersDTO orderDTOPrevious = (OrdersDTO) session
						.getAttribute("orderPageSelected");
				if (orderDTOPrevious != null)
					orderDTOPrevious.setCssStyle("");
				nextListPages = (Integer) session.getAttribute("nextListPages");
				if (nextListPages != null && nextListPages >= 11) {
					prevListPages = nextListPages - 11;
					listIndexSet = new ArrayList<OrdersDTO>();
					for (int i = prevListPages; i < nextListPages; i++) {
						OrdersDTO ord = new OrdersDTO();
						ord.setCssStyle("");
						ord.setIndex(i);
						listIndexSet.add(ord);
					}
					indexSet = prevListPages - 1;
					OrdersDTO orderPageSelected = listIndexSet.get(0);
					orderPageSelected
							.setCssStyle("background-color:#FFFF99;border:1px solid #CCCCCC;");
					indexSet = indexSet * PAGE_ITEMS_COUNT;
					nextListPages = prevListPages;
					session.setAttribute("nextListPages", nextListPages);
					session.setAttribute("indexSet", indexSet);
					session.setAttribute("listIndexSet", listIndexSet);
					session.setAttribute("orderPageSelected", orderPageSelected);
				}
			}

			/*----------------- When Admin change province -----------------------------------------
								Check a list off this province
			 ---------------------------------------------------------------------------------------*/
			hashProvinces = (Hashtable<String, ProvinceDTO>) session
					.getAttribute("hashProvinces");
			if (hashProvinces == null) {
				listProvinces = productService.getAllProvinces();
				Hashtable<String, ProvinceDTO> hashProvinces = new Hashtable<String, ProvinceDTO>();
				for (ProvinceDTO prov : listProvinces) {
					hashProvinces.put(prov.getCode(), prov);
				}
				session.setAttribute("hashProvinces", hashProvinces);
			}
			if (code != null && !code.equals("") && listOrdersDTO != null) {
				ProvinceDTO provinceDTO = hashProvinces.get(code);
				if (provinceDTO != null) {
					clientProvince = provinceDTO.getCode();
				}
			}// else listCities=new ArrayList<CityDTO>();
			if (listOrdersDTO != null && indexOrder != -1) {
				orderToEdit = listOrdersDTO.get(indexOrder);
				if (orderToEdit != null) {
					orderToEdit.setClientProvince(code);
					session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				}
			}

			/*------------------------------- Refresh listOrdersDTO------------------------------------
						Refresh listOrders before generation of invoiced orders XLS file 
				 ------------------------------------------------------------------------------------------*/
			invoicedOrdersRefresh = (Long) session
					.getAttribute("invoicedOrdersRefresh");
			if (invoicedOrdersRefresh != null && invoicedOrdersRefresh != 0L) {
				listIndexColumn = (ArrayList<Integer>) session
						.getAttribute("listIndexColumn");
				if (listIndexColumn == null)
					listIndexColumn = getNewListIndexColumn();
				lsOrderId = lsOrderId.toUpperCase();
				
				//New Searching Functionality
				listOrdersDTO = orderService.searchOrdersWithOptionsAndSorting(
						creationDateStartArg, creationDateEndArg,
						reportDateBetween,orderDTOObj,listIndexColumn, PAGE_ITEMS_COUNT, indexSet);
				//Old Searching Functionality				
//				listOrdersDTO = orderService.searchOrdersWithOptionsAndSorting(
//						creationDateStartArg, creationDateEndArg,
//						reportDateBetween, userLogin, lsOrderId, status,
//						listIndexColumn, PAGE_ITEMS_COUNT, indexSet);
				
				if (findOrdersSignal != null && findOrdersSignal != 0L)
					initalizeListIndexSet(session, orderService);
				// Color in RED rows containing a GroupItems
				for (OrdersDTO orderDTO : listOrdersDTO) {
					if (orderDTO != null && orderDTO.getStatus() != null
							&& orderDTO.getStatus().equals("shipped")) {
						Long count = productService.isGroupProductID(orderDTO
								.getProductId());
						if (count != null && count >= 1) {
							orderDTO.setCssStyle("background-color: rgb(248,150,140); border-right:1px solid #CCCCCC;border-left:1px solid #CCCCCC;border-top:1px solid #CCCCCC;");
						}
					}
				}

				// keep search parameters to use in other
				// classes(PrintOrdersToPDF, ...)
				indexSet = 0;
				session.setAttribute("indexSet", indexSet);
				nextListPages = 0;
				session.setAttribute("nextListPages", nextListPages);
				session.setAttribute("selectedStatus", selectedStatus);
				session.setAttribute("creationDateStartArg",creationDateStartArg);
				session.setAttribute("creationDateEndArg", creationDateEndArg);
				session.setAttribute("reportDateBetween", reportDateBetween);
				session.setAttribute("lsOrderId", lsOrderId);
				session.setAttribute("userLogin", userLogin);
				session.setAttribute("status", status);
				session.setAttribute("listIndexColumn", listIndexColumn);
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				session.setAttribute("invoicedOrdersRefresh", 0L);
				
				session.setAttribute("productOrderNumberSearch", productOrderNumberSearch);
				session.setAttribute("clientOrderNumber", clientOrderNumber);
				session.setAttribute("clientOther", clientOther);
				return SUCCESS;
			}

			/*------------ When Admin click on the Button "Delete Order" in The OrderDtailPop --------------
								show other pop to confirm Order Delete
			  ----------------------------------------------------------------------------------------------*/
			if (deleteOrderSignal != null && deleteOrderSignal != 0L) {
				message = "Attention! if you click on \"Delete Order\" you can not restore it.";
				orderToEdit = listOrdersDTO.get(indexOrder);
				if (confirmDeleteSignal != null && confirmDeleteSignal == 0L) { // Delete
																				// Order
																				// Request
					showOrderDetailPop = "display:block;visibility:visible;";
					showConfirmDeleteOrderPop = "display:block;visibility:visible;";
				} else if (confirmDeleteSignal == 1L) { // Delete Order
														// Confirmed
					orderService.deleteOrderByLsOrderId(orderToEdit);
					// Save this operation in table operation
					OperationsDTO operationDTO = new OperationsDTO();
					User userAdmin = (User) session.getAttribute("userAdmin");
					if (userAdmin != null)
						operationDTO.setUserId(userAdmin.getId());
					operationDTO.setOperationDate(new Date());
					operationDTO.setOperationType("Delete Order");
					String dataBefore = "[PARTNER NAME:"
							+ orderToEdit.getUserLogin() + "];";
					dataBefore += " [LS_ORDER_ID:" + orderToEdit.getLsOrderId()
							+ "];";
					dataBefore += " [PRODUCT_ORDER_NUMBER:"
							+ orderToEdit.getProductOrderNumber() + "];";
					dataBefore += " [CLIENT_FIRST_NAME:"
							+ orderToEdit.getClientFirstName() + "];";
					dataBefore += " [CLIENT_LAST_NAME:"
							+ orderToEdit.getClientLastName() + "];";
					dataBefore += " [CLIENT_POSTAL_CODE:"
							+ orderToEdit.getClientPostalCode() + "];";
					dataBefore += " [LS_PRODUCT_ID:"
							+ orderToEdit.getLsProductID() + "];";
					dataBefore += " [UNIT_PRICE:" + orderToEdit.getUnitPrice()
							+ "];";
					dataBefore += " [STATUS:" + orderToEdit.getStatus() + "];";
					operationDTO.setDataBefore(dataBefore);
					operationDTO.setDataBefore(operationDTO.getDataBefore());
					operationDTO.setDataAfter("");
					operationsService.insertOperation(operationDTO);
					// Remove order from the list orders
					listOrdersDTO.remove(orderToEdit);
					session.setAttribute("listOrdersDTOReport", listOrdersDTO);
					showOrderDetailPop = "visibility:hidden;display:none;";
					showConfirmDeleteOrderPop = "visibility:hidden;display:none;";
					// initialize index orders
					int indexOrder = 0;
					int indexRow = 0;
					for (OrdersDTO orderDTO : listOrdersDTO) {
						orderDTO.setIndex(indexOrder);
						indexOrder++;
						indexRow = 0;
						for (OrdersRows orderRows : orderDTO.getRowsList()) {
							orderRows.setIndex(indexRow);
							indexRow++;
						}
					}
					session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				} else { // Cancel Order Delete
					showOrderDetailPop = "display:block;visibility:visible;";
					showConfirmDeleteOrderPop = "visibility:hidden;display:none;";
				}
				return SUCCESS;
			}

			/*------ When Admin click the "Edit link" in the Order Table for Edit NOTE -----
							show only field Edit Note
			  ------------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& showOnlyEditNote != null && showOnlyEditNote != 0L) {
				orderToEdit = listOrdersDTO.get(indexOrder);
				for (OrdersDTO order : listOrdersDTO) {
					order.setShowOnlyEditNote(0L);
					order.setCssRow("");
				}
				orderToEdit.setShowOnlyEditNote(1L);
				orderToEdit.setCssRow("background-color:#FF9966;");
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				listOrdersDTO = (ArrayList<OrdersDTO>) session
						.getAttribute("listOrdersDTOReport");
				return SUCCESS;
			}

			/*------------ When Admin click on link "Save Edit Note in the Orders Table" ----------
													save Only  notes
			  -------------------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& saveOnlyNoteSignal != null && saveOnlyNoteSignal != 0L) {
				if (indexOrder != null) {
					orderToEdit = listOrdersDTO.get(indexOrder);
					if (orderToEdit != null) {
						orderToEdit.setNotes(notes);
						orderToEdit.setShowRowShipping(0L);
						orderToEdit.setShowOnlyEditNote(0L);
						orderToEdit.setCssRow("");
						// Save Note
						Boolean sucess = orderService
								.updateShippingOrderElements(orderToEdit);
						session.setAttribute("listOrdersDTOReport",
								listOrdersDTO);
					}
				}
				return SUCCESS;
			}

			/*------------ When Admin click the "Edit link" in the Order Table -------------
								show fields to edit shipping parameters
			  ------------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& showRowShipping != null && showRowShipping != 0L) {

				orderToEdit = listOrdersDTO.get(indexOrder);
				for (OrdersDTO order : listOrdersDTO) {
					order.setShowRowShipping(0L);
					order.setCssRow("");
				}
				// only Admins who has Active = true of action name='All' can
				// change shipping settings
				// of orders shipped or invoiced
				if (usersPrivChangeShippedStatus == null
						&& orderToEdit.getStatus() != null
						&& (orderToEdit.getStatus().equals("shipped") || orderToEdit
								.getStatus().equals("invoiced"))) {
					showRowShipping = 0L;
					return SUCCESS;
				}

				if (orderToEdit != null) {
					orderToEdit.setShowRowShipping(1L);
					orderToEdit.setShowOnlyEditNote(1L);
					orderToEdit.setCssRow("background-color:#FF9966;");
					session.setAttribute("listOrdersDTOReport", listOrdersDTO);
					listOrdersDTO = (ArrayList<OrdersDTO>) session
							.getAttribute("listOrdersDTOReport");
				}
				if (orderToEdit.getStatus().equals("open")) {
					statusId = 0L;
				} else if (orderToEdit.getStatus().equals("progress")) {
					statusId = 1L;
				} else if (orderToEdit.getStatus().equals("shipped")) {
					statusId = 2L;
				} else if (orderToEdit.getStatus().equals("invoiced")) {
					statusId = 3L;
				} else if (orderToEdit.getStatus().equals("canceled")) {
					statusId = 4L;
				}
				return SUCCESS;
			}

			/*------------ When Admin click on link "Save in the Orders Table" ----------
							save all shipping parameters and notes
			 ----------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& saveShippingSignal != null && saveShippingSignal != 0L) {
				if (indexOrder != null) {
					orderToEdit = listOrdersDTO.get(indexOrder);
					if (orderToEdit != null) {
						Date shippedDateToEdit = null;
						frm = new SimpleDateFormat("dd/MM/yyyy");
						if (((strShippedDate) != null)
								&& (!"".equals(strShippedDate))) {
							strShippedDate = strShippedDate.replaceAll(" ", "");
							try {
								Date date = frm.parse(strShippedDate);
								shippedDateToEdit = date;
							} catch (Exception pe) {
								shippedDateToEdit = null;
							}
						}
						if (((strShippedDate) != null)
								&& (!"".equals(strShippedDate))
								&& strShippedDate.length() <= 8)
							shippedDateToEdit = orderToEdit.getShippedDate();
						Double shippingPrice = null;
						// Double currencyShippingPrice=null;
						if (strShippingPrice != null
								&& !strShippingPrice.equals("")) {
							strShippingPrice = strShippingPrice.replaceAll(" ",
									"");
							int index = strShippingPrice.indexOf(",");
							if (index >= 0) {
								String strUnitPrice1 = strShippingPrice
										.substring(0, index);
								String strUnitPrice2 = strShippingPrice
										.substring(index + 1,
												strShippingPrice.length());
								strShippingPrice = strUnitPrice1 + "."
										+ strUnitPrice2;
							}

							try {
								shippingPrice = Double
										.parseDouble(strShippingPrice);
								/*
								 * if(shippingPrice!=null &&
								 * orderToEdit.getCurrencyId()!=null &&
								 * orderToEdit.getCurrencyId()!=1 &&
								 * orderToEdit.getCurrencyRate()!=null) {
								 * currencyShippingPrice = shippingPrice *
								 * orderToEdit.getCurrencyRate();
								 * currencyShippingPrice = (double)
								 * Math.round(currencyShippingPrice*100)/100; }
								 */
							} catch (Exception pe) {
								shippingPrice = null;
							}
						}

						if (trakingNumber != null)
							trakingNumber = trakingNumber.replaceAll(
									"^ +| +$|( )+", "$1");
						if (shippingCompany != null)
							shippingCompany = shippingCompany.replaceAll(
									"^ +| +$|( )+", "$1");
						orderToEdit.setShippingPrice(shippingPrice);
						// orderToEdit.setCurrencyShippingPrice(currencyShippingPrice);
						// orderToEdit.getRowsList().get(0).setCurrencyShippingPrice(currencyShippingPrice);
						orderToEdit.setShippedDate(shippedDateToEdit);
						orderToEdit.setNotes(notes);
						if (newStatus != null && !newStatus.equals(""))
							orderToEdit.setStatus(newStatus);
						orderToEdit.setShippingCompany(shippingCompany);
						orderToEdit.setTrackingNumber(trakingNumber);
						orderToEdit.setShowRowShipping(0L);
						orderToEdit.setShowOnlyEditNote(0L);
						OrdersRows row = orderToEdit.getRowsList().get(0);
						row.setShippingPrice(shippingPrice);
						row.setShippingCompany(shippingCompany);
						row.setTrackingNumber(trakingNumber);
						orderToEdit.setCssRow("");

						if (newStatus != null && !newStatus.equals("")) { // if
																			// admin
																			// click
																			// on
																			// the
																			// save
																			// behind
																			// status
							orderService.updateStatusByLsOrderId(
									orderToEdit.getLsOrderId(), newStatus);
							orderToEdit.setStatus(newStatus);
							if (!newStatus.equals("shipped")
									&& !newStatus.equals("invoiced")
									&& !newStatus.equals("canceled")) {
								orderToEdit.setShippingPrice(null);
								orderToEdit.setTrackingNumber(null);
								orderToEdit.setShippedDate(null);
							}

						} else {// if admin click on the save other than Status
							if (orderToEdit.getShippedDate() != null
									&& orderToEdit.getTrackingNumber() != null
									&& !orderToEdit.getTrackingNumber().equals(
											"")
									&& orderToEdit.getShippingCompany() != null
									&& !orderToEdit.getShippingCompany()
											.equals("")
									&& orderToEdit.getShippingPrice() != null
									&& orderToEdit.getStatus() != null) {
								if (orderToEdit.getStatus().equals("open")
										|| orderToEdit.getStatus().equals(
												"progress")) {
									orderService.updateStatusByLsOrderId(
											orderToEdit.getLsOrderId(),
											"shipped");
									orderToEdit.setStatus("shipped");
								}
							} else {
								if (usersPrivChangeShippedStatus != null
										&& !orderToEdit.getStatus().equals(
												"open")
										&& !orderToEdit.getStatus().equals(
												"progress")) {
									orderService.updateStatusByLsOrderId(
											orderToEdit.getLsOrderId(),
											"progress");
									orderToEdit.setStatus("progress");
								}
							}
						}
						// if admin click on the save other then status(save
						// notes, save shipping company ...)
						Boolean sucess = orderService
								.updateShippingOrderElements(orderToEdit);
						session.setAttribute("listOrdersDTOReport",
								listOrdersDTO);
					}
				}
				return SUCCESS;
			}

			/*------------ When Admin click on icon findOrders.png ----------
								check user and complete infos client
			 ----------------------------------------------------------------*/
			if (findOrdersSignal != null
					&& findOrdersSignal != 0L
					|| (pageIndexSignal != null && pageIndexSignal != 0L)
					|| (nextListPagesSignal != null && nextListPagesSignal != 0L)
					|| (prevListPagesSignal != null && prevListPagesSignal != 0L)) {
				// session.setAttribute("allOrdersSelectedSignal",0L);
				// if admin click on search icon initialize checkBoxItem to
				// false
				if (findOrdersSignal != null && findOrdersSignal != 0L) {
					session.setAttribute("allOrdersSelectedSignal", 0L);
					checkBoxItem = false;
					session.setAttribute("checkBoxItem", checkBoxItem);
					indexSet = 0;
					session.setAttribute("indexSet", indexSet);
					nextListPages = 0;
					session.setAttribute("nextListPages", nextListPages);
					session.setAttribute("selectedStatus", selectedStatus);

				}
				// if admin navigate on pages keep the previous sorting
				if (((pageIndexSignal != null && pageIndexSignal != 0L)
						|| (nextListPagesSignal != null && nextListPagesSignal != 0L) || (prevListPagesSignal != null && prevListPagesSignal != 0L))) {
					listIndexColumn = (ArrayList<Integer>) session
							.getAttribute("listIndexColumn");
					if (listIndexColumn == null)
						listIndexColumn = getNewListIndexColumn();
				} else { // prepare new sorting
					listIndexColumn = getNewListIndexColumn();
				}

				lsOrderId = lsOrderId.toUpperCase();
				// if(findOrdersSignal!=null &&
				// findOrdersSignal!=0L)initalizeListIndexSet(session,orderService
				// );
				
				//Old Working Methods
//				listOrdersDTO = orderService.searchOrdersWithOptionsAndSorting(
//						creationDateStartArg, creationDateEndArg,
//						reportDateBetween, userLogin, lsOrderId, status,
//						listIndexColumn, PAGE_ITEMS_COUNT, indexSet);
				
				//New Functionality with same mapping
				listOrdersDTO = orderService.searchOrdersWithOptionsAndSortingNew(
								creationDateStartArg, creationDateEndArg,
								reportDateBetween, userLogin, lsOrderId,
								status, listIndexColumn, PAGE_ITEMS_COUNT,
								indexSet, productOrderNumberSearch,clientOrderNumber,
								clientOther);

//				//New Searching Functionality
//				listOrdersDTO = orderService.searchOrdersWithOptionsAndSorting(
//						creationDateStartArg, creationDateEndArg,
//						reportDateBetween, orderDTOObj, listIndexColumn,
//						PAGE_ITEMS_COUNT, indexSet);
				
				
				// Color in RED rows containing a GroupItems
				for (OrdersDTO orderDTO : listOrdersDTO) {
					if (orderDTO != null && orderDTO.getStatus() != null
							&& orderDTO.getStatus().equals("shipped")) {
						Long count = productService.isGroupProductID(orderDTO
								.getProductId());
						if (count != null && count >= 1) {
							orderDTO.setCssStyle("background-color: rgb(248,150,140); border-right:1px solid #CCCCCC;border-left:1px solid #CCCCCC;border-top:1px solid #CCCCCC;");
						}
					}
				}

				// keep search parameters to use in other
				// classes(PrintOrdersToPDF, ...)
				session.setAttribute("creationDateStartArg",
						creationDateStartArg);
				session.setAttribute("creationDateEndArg", creationDateEndArg);
				session.setAttribute("reportDateBetween", reportDateBetween);
				session.setAttribute("lsOrderId", lsOrderId);
				session.setAttribute("userLogin", userLogin);
				session.setAttribute("status", status);
				//For newly added field
				session.setAttribute("productOrderNumberSearch", productOrderNumberSearch);

				session.setAttribute("listIndexColumn", listIndexColumn);
				session.setAttribute("sizeResult", sizeResult);
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				if (findOrdersSignal != null && findOrdersSignal != 0L)
					initalizeListIndexSet(session, orderService);
				return SUCCESS;
			}

			/*------------ When Admin click on the icon sorting of column ----------
							seach result with option of sorting list
			 -----------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& sortingOrdersSignal != null && sortingOrdersSignal != 0L) {
				listIndexColumn = (List<Integer>) session
						.getAttribute("listIndexColumn");
				asc = (asc == 1 ? -1 : 1);
				int nextElement = listIndexColumn.get(0);
				fieldForSorting = asc * fieldForSorting;
				listIndexColumn.set(0, fieldForSorting);
				for (int i = 1; i < listIndexColumn.size(); i++) {
					int element = listIndexColumn.get(i);
					listIndexColumn.set(i, nextElement);
					nextElement = element;
				}
				
				//New Functionality with same mapping
				listOrdersDTO = orderService.searchOrdersWithOptionsAndSortingNew(
								creationDateStartArg, creationDateEndArg,
								reportDateBetween, userLogin, lsOrderId,
								status, listIndexColumn, PAGE_ITEMS_COUNT,
								indexSet, productOrderNumberSearch,clientOrderNumber,
								clientOther);
				
//				listOrdersDTO = orderService.searchOrdersWithOptionsAndSorting(
//						creationDateStartArg, creationDateEndArg,
//						reportDateBetween, userLogin, lsOrderId, status,
//						listIndexColumn, PAGE_ITEMS_COUNT, indexSet);
				
//				// New Searching Functionality
//				listOrdersDTO = orderService.searchOrdersWithOptionsAndSorting(
//						creationDateStartArg, creationDateEndArg,
//						reportDateBetween, orderDTOObj, listIndexColumn,
//						PAGE_ITEMS_COUNT, indexSet);
				
				int balance = 0;
				int OrderIndex = 0;
				for (OrdersDTO orDTO : listOrdersDTO) {
					balance = (balance == 1 ? 0 : 1);
					if (balance == 1) {
						orDTO.setCssStyle("background-color: rgb(245,249,252);border-right: 1px solid #CCCCCC;border-left:1px solid #CCCCCC;border-top:  1px solid #CCCCCC;");
					} else {
						orDTO.setCssStyle("background-color: color:white;border-right:1px solid #CCCCCC;border-left:1px solid #CCCCCC;border-top:1px solid #CCCCCC;");
					}
					orDTO.setIndex(OrderIndex);
					OrderIndex++;
				}
				session.setAttribute("listIndexColumn", listIndexColumn);
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				session.setAttribute("asc", asc);
				return SUCCESS;
			}

			/*------ when Admin click on the lsOrder link in table -----------
					show popup detail and allow admin to update Order
			  ---------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& editOrderSignal != null && editOrderSignal != 0L) {
				orderToEdit = listOrdersDTO.get(indexOrder);
				if (orderToEdit == null)
					orderToEdit = new OrdersDTO();
				if (orderToEdit.getProductOrderDate() == null)
					strProductOrderDate = "";
				showOrderDetailPop = "display:block;visibility:visible;";
				return SUCCESS;
			}

			/*--- when Admin click on the cancel Button of orderDetailPop ---
					we mast just hide popup OrderDetail
			  ---------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& cancelSignal != null && cancelSignal != 0L) {
				showOrderDetailPop = "visibility:hidden;display:none;";
				return SUCCESS;
			}

			/*-------------------- When Admin left lsProduct TextField -------------
								check userPrice in DB, and write it in web view
			 -----------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& checkProductPriceSignal != null
					&& checkProductPriceSignal != 0L) {
				OrdersDTO orderDTOToUpdate = listOrdersDTO.get(indexOrder);
				orderDTOToUpdate = fillDataOrderDTO(orderDTOToUpdate);
				OrdersRows orderRowToUpadate = orderDTOToUpdate.getRowsList()
						.get(indexRow);
				UserProductPriceDTO userProductPrice = productService
						.getUsrPPriceByLsproductId(userId, lsProductID);
				orderRowToUpadate.setCss("");
				orderRowToUpadate.setCssPrice("");
				if (userProductPrice == null) {
					orderRowToUpadate.setCss("background-color:red;");
					orderRowToUpadate.setProductDescription("");
					orderRowToUpadate.setStock(null);
					orderRowToUpadate.setProductId(null);
					orderRowToUpadate.setLsProductID(lsProductID);
					orderRowToUpadate.setLsPrice(null);
				} else {
					Double usrPrice = orderRowToUpadate.getUnitPrice();
					if (usrPrice == null)
						usrPrice = 0D;
					if (usrPrice < userProductPrice.getPriceNum()) {
						orderRowToUpadate.setCssPrice("background-color:red;");
					}
					orderRowToUpadate.setProductDescription(userProductPrice
							.getProductTitle());
					orderRowToUpadate.setStock(userProductPrice.getStock());
					orderRowToUpadate.setProductId(userProductPrice
							.getProductId());
					orderRowToUpadate.setLsProductID(userProductPrice
							.getLsProductId());
					orderRowToUpadate
							.setLsPrice(userProductPrice.getPriceNum());
				}
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				orderToEdit = orderDTOToUpdate;
				listOrdersDTO = (List<OrdersDTO>) session
						.getAttribute("listOrdersDTOReport");
				showOrderDetailPop = "display:block;visibility:visible;";
				return SUCCESS;
			}

			/*----------------- When Admin check on saveTemporaryRow Icon --------------------------
					we must first obtained the object that contains the list of rows,
					after we accede to the row by index recovered by web view and change it
			 ---------------------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& saveTemporaryRowSignal != null
					&& saveTemporaryRowSignal != 0L) {
				OrdersDTO orderDTOToUpdate = listOrdersDTO.get(indexOrder);
				orderDTOToUpdate = fillDataOrderDTO(orderDTOToUpdate);
				OrdersRows orderRowToSaveMemory = orderDTOToUpdate
						.getRowsList().get(indexRow);
				orderRowToSaveMemory.setIcon("images/orders/itemValidated.png");
				if (orderRowToSaveMemory != null) {
					orderRowToSaveMemory.setQuantity(quantity);
					orderRowToSaveMemory.setLsProductID(lsProductID);
					orderRowToSaveMemory
							.setProductDescription(productDescription);
					orderRowToSaveMemory.setUnitPrice(unitPrice);
					orderRowToSaveMemory
							.setCssPrice("background-color:#FF6666;");
					orderRowToSaveMemory
							.setCssQuantity("background-color:#FF6666;");
					if (quantity != null && quantity > 0D)
						orderRowToSaveMemory.setCssQuantity("");
					if (unitPrice != null
							&& orderRowToSaveMemory.getLsPrice() != null
							&& unitPrice >= orderRowToSaveMemory.getLsPrice())
						orderRowToSaveMemory.setCssPrice("");
					orderRowToSaveMemory.setShippingFee(shippingFee);
					orderRowToSaveMemory.setShippingPrice(shippingFee);
					orderRowToSaveMemory.setShippingCompany(shippingCompany);
					orderRowToSaveMemory.setTrackingNumber(trakingNumber);
					if (orderRowToSaveMemory.getCurrencyId() != null
							&& orderRowToSaveMemory.getCurrencyId() != 1
							&& orderRowToSaveMemory.getCurrencyRate() != null) {
						if (unitPrice != null) {
							orderRowToSaveMemory
									.setCurrencyUnitPrice(unitPrice);
							unitPrice = unitPrice
									/ orderRowToSaveMemory.getCurrencyRate();
							unitPrice = (double) Math.round(unitPrice * 100) / 100;
							orderRowToSaveMemory.setUnitPrice(unitPrice);
						}
						/*
						 * if(shippingFee!=null) {
						 * orderRowToSaveMemory.setCurrencyShippingPrice
						 * (shippingFee); shippingFee =
						 * shippingFee/orderRowToSaveMemory.getCurrencyRate();
						 * shippingFee = (double)
						 * Math.round(shippingFee*100)/100;
						 * orderRowToSaveMemory.setShippingPrice(shippingFee); }
						 */
					}
					int indexOrder = 0;
					int indexRow = 0;
					for (OrdersDTO orderDTO : listOrdersDTO) {
						orderDTO.setIndex(indexOrder);
						indexOrder++;
						indexRow = 0;
						for (OrdersRows orderRows : orderDTO.getRowsList()) {
							orderRows.setIndex(indexRow);
							indexRow++;
						}
					}
					session.setAttribute("listOrdersDTOReport", listOrdersDTO);
					listOrdersDTO = (List<OrdersDTO>) session
							.getAttribute("listOrdersDTOReport");
				}
				orderToEdit = listOrdersDTO.get(indexOrder);
				// Change totalPrice also
				if (orderToEdit.getRowsList().get(0) != null
						&& orderToEdit.getRowsList().get(0).getQuantity() != null
						&& orderToEdit.getRowsList().get(0)
								.getQuantityToSplit() != null
						&& orderToEdit.getRowsList().get(0).getUnitPrice() != null) {
					Double priceTotal = orderToEdit.getRowsList().get(0)
							.getUnitPrice()
							* orderToEdit.getRowsList().get(0)
									.getQuantityToSplit();
					priceTotal = (double) Math.round(priceTotal * 100) / 100;
					orderToEdit.setTotalPrice(priceTotal);
				}
				showOrderDetailPop = "display:block;visibility:visible;";
				return SUCCESS;
			}

			/*------- When Admin click on addSimilarRow Icon on the OrderDetailPop --------
								Add one Row Similar at the previews
			  -----------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& addSimilarRowSignal != null && addSimilarRowSignal != 0L) {
				OrdersDTO orderDTOToUpdate = listOrdersDTO.get(indexOrder);
				// generate lsOrderId to new order
				orderDTOToUpdate = fillDataOrderDTO(orderDTOToUpdate);
				OrdersRows orderRowToClone = orderDTOToUpdate.getRowsList()
						.get(indexRow);
				if (orderRowToClone != null) {
					if (!orderRowToClone.getIcon().equals(
							"images/orders/itemValidated.png")) {
						orderRowToClone.setQuantity(quantity);
						orderRowToClone.setLsProductID(lsProductID);
						orderRowToClone.setStock(stock);
						orderRowToClone
								.setProductDescription(productDescription);
						orderRowToClone.setUnitPrice(unitPrice);
						orderRowToClone.setShippingFee(shippingFee);
						orderRowToClone.setShippingCompany(shippingCompany);
						orderRowToClone.setTrackingNumber(trakingNumber);
					}
					orderRowToClone.setIcon("images/orders/itemValidated.png");
					OrdersRows orderRowToAdd = DTOFactory
							.getOrderRowClone(orderRowToClone);
					orderRowToAdd.setId(-1L);
					// Add currencyId
					if (orderRowToClone.getCurrencyId() != null)
						orderRowToAdd.setCurrencyId(orderRowToClone
								.getCurrencyId());

					orderDTOToUpdate.getRowsList().add(indexRow + 1,
							orderRowToAdd);
					int indexOrder = 0;
					int indexRow = 0;
					for (OrdersDTO orderDTO : listOrdersDTO) {
						orderDTO.setIndex(indexOrder);
						indexOrder++;
						indexRow = 0;
						for (OrdersRows orderRows : orderDTO.getRowsList()) {
							orderRows.setIndex(indexRow);
							indexRow++;
						}
					}
					session.setAttribute("listOrdersDTOReport", listOrdersDTO);
					listOrdersDTO = (List<OrdersDTO>) session
							.getAttribute("listOrdersDTOReport");
				}
				orderToEdit = listOrdersDTO.get(indexOrder);
				showOrderDetailPop = "display:block;visibility:visible;";
				return SUCCESS;
			}

			/*-------- When Admin click on Delete Row Icon of orderDetail Popup-----------
									Delete this row using index
			 -----------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& deleteRowSignal != null && deleteRowSignal != 0L) {
				OrdersDTO orderDTO = listOrdersDTO.get(indexOrder);
				orderDTO = fillDataOrderDTO(orderDTO);
				int nb = orderService.nbOrderRowsNotDeleted(orderDTO
						.getRowsList());
				if (orderDTO != null && orderDTO.getRowsList().size() > 1) {
					for (int i = 0; i < orderDTO.getRowsList().size(); i++) {
						if (i == indexRow && nb > 1) {
							orderDTO.getRowsList().get(i).setToDelete(1);
							break;
						}
					}
				}
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				orderToEdit = listOrdersDTO.get(indexOrder);
				showOrderDetailPop = "display:block;visibility:visible;";
				return SUCCESS;
			}

			/*------ when Admin click on the button save of orderDetail ------------------
					 save order and hide pup  
			  ----------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& saveOrdersSignal != null && saveOrdersSignal != 0L) {
				session.setAttribute("orderNotSavedAtFirst", null);
				orderToEdit = listOrdersDTO.get(indexOrder);
				orderToEdit = fillDataOrderDTO(orderToEdit);

				// add special handling shipping
				User user = null;
				if (orderToEdit.getUserLogin() != null)
					user = userService.getUserByLogin(orderToEdit
							.getUserLogin());
				if (user != null) {
					Double totalPrice = null;
					orderToEdit.setSpecialHandlingName(user
							.getSpecialHandlingName());
					orderToEdit.setSpecialHandlingFee(user
							.getSpecialHandlingFee());
					if (orderToEdit.getRowsList().get(0).getQuantity() != null
							&& orderToEdit.getRowsList().get(0).getUnitPrice() != null) {
						totalPrice = orderToEdit.getRowsList().get(0)
								.getQuantity()
								* orderToEdit.getRowsList().get(0)
										.getUnitPrice();
						totalPrice = (double) Math.round(totalPrice * 100) / 100;
					}

					orderToEdit.setTotalPrice(totalPrice);
				}

				orderService.updateOrderByLsOrderId(orderToEdit);
				for (OrdersRows row : orderToEdit.getRowsList()) {
					if (row.getId() == -1)
						row.setId(0L);
				}
				OrdersRows row = orderToEdit.getRowsList().get(0);
				if (row != null) {
					orderToEdit.getShippedDate();
					orderToEdit.setLsPrice(row.getLsPrice());
					orderToEdit.setLsProductID(row.getLsProductID());
					orderToEdit.setProductDescription(row
							.getProductDescription());
					orderToEdit.setQuantity(row.getQuantity());
				}
				orderToEdit = DTOFactory.getOrderDTOConsideredMissingInfo(
						orderToEdit, hashProvinces);
				listIndexColumn = (List<Integer>) session
						.getAttribute("listIndexColumn");
				
//				listOrdersDTO = orderService.searchOrdersWithOptionsAndSorting(
//						creationDateStartArg, creationDateEndArg,
//						reportDateBetween, userLogin, lsOrderId, status,
//						listIndexColumn, PAGE_ITEMS_COUNT, indexSet);
				

				//New Functionality with same mapping
				listOrdersDTO = orderService.searchOrdersWithOptionsAndSortingNew(
								creationDateStartArg, creationDateEndArg,
								reportDateBetween, userLogin, lsOrderId,
								status, listIndexColumn, PAGE_ITEMS_COUNT,
								indexSet, productOrderNumberSearch,clientOrderNumber,
								clientOther);				
				
				// New Searching Functionality
//				listOrdersDTO = orderService.searchOrdersWithOptionsAndSorting(
//						creationDateStartArg, creationDateEndArg,
//						reportDateBetween, orderDTOObj, listIndexColumn,
//						PAGE_ITEMS_COUNT, indexSet);
				
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				message = "Saving has completed successfuly";
				showSaveSuccessPop = "display:block;visibility:visible;";
				showOrderDetailPop = "display:block;visibility:visible;";
				return SUCCESS;
			}

			/*------ When user change Quantity to split in orderDetailPop -----------
					 prepare order to split from two other orders witch
				 	 one must have a lsOrder with underscore 
			 ------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& quantityToChangeSignal != null
					&& quantityToChangeSignal != 0L) {
				OrdersDTO orderToChangeQt = listOrdersDTO.get(indexOrder);
				OrdersRows orderRow = orderToChangeQt.getRowsList().get(
						indexRow);
				orderToChangeQt = fillDataOrderDTO(orderToChangeQt);
				if (quantityToChange < orderRow.getQuantity())
					orderRow.setQuantityToSplit(quantityToChange);
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				listOrdersDTO = (List<OrdersDTO>) session
						.getAttribute("listOrdersDTOReport");
				orderToEdit = listOrdersDTO.get(indexOrder);
				showOrderDetailPop = "display:block;visibility:visible;";
				return SUCCESS;
			}

			/*-------------------- Duplicate Order ----------------------------------------
							Create order in just in memory
			 -----------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& duplicateOrderSignal != null
					&& duplicateOrderSignal != 0L) {
				OrdersDTO orderToClone = listOrdersDTO.get(indexOrder);
				orderToClone = fillDataOrderDTO(orderToClone);
				hashOrders = new Hashtable<String, OrdersDTO>();
				for (OrdersDTO ord : listOrdersDTO) {
					hashOrders.put(ord.getLsOrderId(), ord);
				}
				OrdersDTO orderClone = DTOFactory
						.getOrderDTOSplitted(orderToClone);
				if (orderClone != null) {
					orderClone.setDuplicate(true);
					String lsOrder = orderClone.getLsOrderId();
					String strlsOrder = orderService.generateLsOrderId(lsOrder,
							hashOrders);
					orderClone.setLsOrderId(strlsOrder);// rgb(116,180,209)
					orderClone
							.setCssStyle("background-color:#FFFF99;border-right: 1px solid #CCCCCC;border-left:1px solid #CCCCCC;border-top:  1px solid #CCCCCC;");
					orderToEdit = orderClone;
					orderToEdit.setBackgroundColor("background-color:#FFFF99;");
					listOrdersDTO.add(indexOrder + 1, orderClone);
					indexOrder = 0;
					for (OrdersDTO ord : listOrdersDTO) {
						ord.setIndex(indexOrder);
						indexOrder++;
					}
					orderService.updateOrderByLsOrderId(orderToClone);
					orderService.insertOrderWithRows(orderClone);
					orderClone.setDuplicate(false);
					for (OrdersRows row : orderClone.getRowsList()) {
						if (row.getId() < 0L)
							row.setId(0L);
					}
					if (listOrdersDTO.size() > 0) {
						session.setAttribute("listOrdersDTOReport",
								listOrdersDTO);
					}
				} else
					orderToEdit = orderToClone;
				showOrderDetailPop = "display:block;visibility:visible;";
				return SUCCESS;
			}

			/*-------------------- When user check print item -----------------------------
					Add or remove this element from the orders to print
			 -----------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& okSaveSuccessPopSignal != null
					&& okSaveSuccessPopSignal != 0L) {
				showSaveSuccessPop = "visibility:hidden;display:none;";
				showOrderDetailPop = "visibility:hidden;display:none;";
				return SUCCESS;
			}
		} catch (Exception e) {
			e.printStackTrace();
			return "input";
		}
		return SUCCESS;
	}

	/*
	 * ==========================================================================
	 * =============== fill all fields of order without rows
	 * ====================
	 * =====================================================================
	 */
	public OrdersDTO fillDataOrderDTO(OrdersDTO orderDTO) {
		SimpleDateFormat frm = new SimpleDateFormat("dd/MM/yyyy");
		orderDTO.setClientLastName(clientLastName);
		orderDTO.setClientFirstName(clientFirstName);
		orderDTO.setClientOtherNames(clientOtherNames);
		orderDTO.setClientStreet(clientStreet);
		orderDTO.setClientOtherStreet(clientOtherStreet);
		orderDTO.setClientCity(clientCity);
		orderDTO.setClientProvince(code);
		orderDTO.setClientPostalCode(clientPostalCode);
		orderDTO.setClientPhone(clientPhone);
		orderDTO.setClientEmail(clientEmail);
		orderDTO.setProductOrderNumber(productOrderNumberSearch);
		orderDTO.setCompanyHeader(companyHeader);
		if (((strProductOrderDate) != null)
				&& (!"".equals(strProductOrderDate))) {
			frm = new SimpleDateFormat("dd/MM/yyyy");
			try {
				Date date = frm.parse(strProductOrderDate);
				orderDTO.setProductOrderDate(date);
			} catch (Exception pe) {
				addActionError("Please enter a date in the correct format");
			}
		}

		if (((strCreationOrderDate) != null)
				&& (!"".equals(strCreationOrderDate))) {
			frm = new SimpleDateFormat("dd/MM/yyyy");
			try {
				Date date = frm.parse(strCreationOrderDate);
				orderDTO.setCreationDate(date);
			} catch (Exception pe) {
				addActionError("Please enter a date in the correct format");
			}
		}

		if (((strRequiredDate) != null) && (!"".equals(strRequiredDate))) {
			frm = new SimpleDateFormat("dd/MM/yyyy");
			try {
				Date date = frm.parse(strRequiredDate);
				orderDTO.setRequiredDate(date);
			} catch (Exception pe) {
				addActionError("Please enter a date in the correct format");
			}
		}
		return orderDTO;
	}

	/*
	 * ==========================================================================
	 * =============== initialize ListIndexSet
	 * ==================================
	 * =======================================================
	 */
	public void initalizeListIndexSet(HttpSession session,
			OrdersService orderService) throws ServiceException {
		listIndexSet = new ArrayList<OrdersDTO>();
		totalOrders = orderService.getCountOrders(creationDateStartArg,
				creationDateEndArg, reportDateBetween, userLogin, lsOrderId,
				status,productOrderNumberSearch,clientOrderNumber,clientOther);
		
		String strcount = totalOrders.toString();
		Integer sizeList = Integer.parseInt(strcount) / PAGE_ITEMS_COUNT;
		nextListPages = 1;
		session.setAttribute("nextListPages", nextListPages);
		for (int i = 1; i <= sizeList + 1 && i <= 11; i++) {
			OrdersDTO ord = new OrdersDTO();
			ord.setCssStyle("");
			ord.setIndex(i);
			listIndexSet.add(ord);
		}
		indexSet = 0;
		session.setAttribute("indexSet", indexSet);
		session.setAttribute("totalOrders", totalOrders);
		session.setAttribute("listIndexSet", listIndexSet);
		session.setAttribute("productOrderNumberSearch", productOrderNumberSearch);

	}

	/*
	 * ==========================================================================
	 * =============== initialize listIndexColumn
	 * ================================
	 * =========================================================
	 */
	List<Integer> getNewListIndexColumn() {
		List<Integer> reult = new ArrayList<Integer>();
		for (int i = 0; i <= 34; i++) {
			if (i != 2 && i <= 13) {
				reult.add(i);
				if (i != 0)
					reult.add(-i);
			}
			if (i == 30 || i == 31 || i == 34) {
				reult.add(i);
				reult.add(-i);
			}
		}
		return reult;
	}

	/*
	 * ==========================================================================
	 * =============== getStatus Selected by Admin for searching
	 * ================
	 * =========================================================================
	 */
	public String getStatusSelected(Integer StatusIndex) {
		String result = "";
		switch (StatusIndex) {
		case 0:
			result = "open";
			break;
		case 1:
			result = "progress";
			break;
		case 2:
			result = "shipped";
			break;
		case 3:
			result = "invoiced";
			break;
		case 4:
			result = "canceled";
			break;
		default:
			result = "";
		}
		return result;
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 2 2015-04-15 11:42:21.624
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:233)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:255)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:190)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:89)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:728)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:788)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1244)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:102)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2015-04-15 11:42:21.624
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2015-04-15 11:42:21.624
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 0 2015-04-15 11:42:21.624
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:233)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:255)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:190)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:89)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:728)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:788)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1244)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:102)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2015-04-15 11:42:21.624
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.core 4 4 2015-04-15 11:42:23.198
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.loyauty.web.struts.action.orders;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.List;

import javax.servlet.http.HttpSession;
import lombok.Getter;
import lombok.Setter;

import com.loyauty.exception.ServiceException;
import com.loyauty.exception.ServiceLocatorException;
import com.loyauty.model.OrdersRows;
import com.loyauty.model.User;
import com.loyauty.service.core.DTOFactory;
import com.loyauty.service.core.dto.BasicUserDTO;
import com.loyauty.service.core.dto.OperationsDTO;
import com.loyauty.service.core.dto.OrdersDTO;
import com.loyauty.service.core.dto.ProvinceDTO;
import com.loyauty.service.core.dto.UserProductPriceDTO;
import com.loyauty.service.core.dto.UserSessionDTO;
import com.loyauty.service.core.dto.UsersPrivilegesDTO;
import com.loyauty.service.operations.OperationsService;
import com.loyauty.service.orders.OrdersService;
import com.loyauty.service.product.ProductService;
import com.loyauty.service.user.UserService;
import com.loyauty.web.struts.action.LoyautyAction;

public class ReportOrders extends LoyautyAction {
	private static final long serialVersionUID = -3811760851445730062L;
	private UserService userService;
	private ProductService productService;
	private OrdersService orderService;
	private OperationsService operationsService;
	@Getter
	@Setter
	private String userLogin;
	@Getter
	@Setter
	private List<User> usersList;
	private static int USER_TYPE = 2;
	@Getter
	@Setter
	List<OrdersDTO> listOrdersDTO;
	@Getter
	@Setter
	List<OrdersDTO> listStatus;
	@Getter
	@Setter
	private String lsOrderId;
	@Getter
	@Setter
	Long poYpop;
	@Getter
	@Setter
	Long poXpop;
	@Getter
	@Setter
	private Long pageTop = 0L;
	@Getter
	@Setter
	private Date creationDate;
	@Getter
	@Setter
	private Long findOrdersSignal;
	private String status;
	@Getter
	@Setter
	private Long sizeResult = 0L;
	@Getter
	@Setter
	private Long sorting;
	@Getter
	@Setter
	private Long sortingOrdersSignal;
	@Getter
	@Setter
	private Integer fieldForSorting;
	@Getter
	@Setter
	private Integer asc;
	@Getter
	@Setter
	private Integer scrollDivRowsLeft;
	@Getter
	@Setter
	private Integer scrollPageLeft;
	@Getter
	@Setter
	private Integer scrollDivRowsTop;
	@Getter
	@Setter
	private String strCreationDateStart;
	@Getter
	@Setter
	private String strCreationDateEnd;
	@Getter
	@Setter
	private Date creationDateStart;
	@Getter
	@Setter
	private Date creationDateEnd;
	private Date creationDateStartArg;
	private Date creationDateEndArg;
	@Getter
	@Setter
	private Integer selectedStatus;
	@Getter
	@Setter
	private Long editOrderSignal;
	@Getter
	@Setter
	private Long cancelSignal;
	@Getter
	@Setter
	private Integer indexOrder;
	@Getter
	@Setter
	private OrdersDTO orderToEdit;
	@Getter
	@Setter
	private String strProductOrderDate;
	@Getter
	@Setter
	private String lsProductID;
	@Getter
	@Setter
	Integer indexRow;
	@Getter
	@Setter
	private String showOrderDetailPop;
	@Getter
	@Setter
	private Long userId;
	@Getter
	@Setter
	private Long checkProductPriceSignal;
	@Getter
	@Setter
	private Long saveTemporaryRowSignal;
	@Getter
	@Setter
	private Long addSimilarRowSignal;
	@Getter
	@Setter
	private Long deleteRowSignal;
	@Getter
	@Setter
	private Long saveOrdersSignal;
	@Getter
	@Setter
	private Boolean checkBoxPrint;

	// recovery Data Order
	@Getter
	@Setter
	private String clientLastName;
	@Getter
	@Setter
	private String clientFirstName;
	@Getter
	@Setter
	private String clientOtherNames;
	@Getter
	@Setter
	private String clientStreet;
	@Getter
	@Setter
	private String clientOtherStreet;
	@Getter
	@Setter
	private String clientCity;
	@Getter
	@Setter
	private String clientProvince;
	@Getter
	@Setter
	private String clientPostalCode;
	@Getter
	@Setter
	private String clientPhone;
	@Getter
	@Setter
	private String clientEmail;
//	@Getter
//	@Setter
//	private String productOrderNumber;
	@Getter
	@Setter
	private String strRequiredDate;

	// recovery data row
	@Getter
	@Setter
	private Double quantity;
	@Getter
	@Setter
	private String notes;
	@Getter
	@Setter
	private Double quantityToChange;
	@Getter
	@Setter
	private Double stock;
	@Getter
	@Setter
	private String productDescription;
	@Getter
	@Setter
	private Double unitPrice;
	@Getter
	@Setter
	private Double shippingFee;
	@Getter
	@Setter
	private String shippingCompany;
	@Getter
	@Setter
	private String companyHeader;

	@Getter
	@Setter
	private Long quantityToChangeSignal;
	@Getter
	@Setter
	private Long duplicateOrderSignal;
	@Getter
	@Setter
	private String strCreationDate;
	@Getter
	@Setter
	private String strCreationOrderDate;
	@Getter
	@Setter
	private User usr;
	@Getter
	@Setter
	private String showSaveSuccessPop;
	// showSaveSuccessPop="display:block;visibility:visible;";
	// showSaveSuccessPop="visibility:hidden;display:none;";
	@Getter
	@Setter
	private String message;
	@Getter
	@Setter
	private Long okSaveSuccessPopSignal;
	@Getter
	@Setter
	private Long showRowShipping;
	@Getter
	@Setter
	private Long showOnlyEditNote;
	@Getter
	@Setter
	private Long saveShippingSignal;
	@Getter
	@Setter
	private Long saveOnlyNoteSignal;
	@Getter
	@Setter
	private String code;
	@Getter
	@Setter
	private Long cityId;
	@Getter
	@Setter
	private List<ProvinceDTO> listProvinces;
	private Hashtable<String, ProvinceDTO> hashProvinces;
	@Getter
	@Setter
	private Boolean orderNotSavedAtFirst;
	@Getter
	@Setter
	private String strShippedDate;
	@Getter
	@Setter
	private String strShippingPrice;
	@Getter
	@Setter
	private String showConfirmDeleteOrderPop;
	@Getter
	@Setter
	private Long deleteOrderSignal;
	@Getter
	@Setter
	private Long confirmDeleteSignal;
	@Getter
	@Setter
	private UsersPrivilegesDTO userPrivileges;
	@Getter
	@Setter
	private UsersPrivilegesDTO usersPrivShippedToInvoiced;
	@Getter
	@Setter
	private UsersPrivilegesDTO usersPrivChangeShippedStatus;
	@Getter
	@Setter
	private HashMap<Integer, String> hashStatus;
	@Getter
	@Setter
	private Long statusId;
	@Getter
	@Setter
	private String strPrint;
	@Getter
	@Setter
	private Integer testSignal;
	@Getter
	@Setter
	private String newStatus;
	Long invoicedOrdersRefresh;
	@Getter
	@Setter
	private Integer reportDateBetween;
	@Getter
	@Setter
	private Long dateBetweenSignal;
	@Getter
	@Setter
	private Long selectAllOrdersSignal;
	@Getter
	@Setter
	private Boolean checkBoxItem;
	// ------Pagination
	@Getter
	@Setter
	Long pageIndexSignal;
	@Getter
	@Setter
	Long prevListPagesSignal;
	@Getter
	@Setter
	Long nextListPagesSignal;
	@Getter
	@Setter
	Long totalOrders;
	@Getter
	@Setter
	Integer nextListPages;
	@Getter
	@Setter
	Integer prevListPages;
	@Getter
	@Setter
	Integer indexSet = 0;
	@Getter
	@Setter
	Integer indexList;
	@Getter
	@Setter
	List<OrdersDTO> listIndexSet;
	@Getter
	@Setter
	Integer PAGE_ITEMS_COUNT = 100;
	
	//New Added Field in the search option as toggle functionality
	@Getter
	@Setter
	private String productOrderNumberSearch;
	@Getter
	@Setter
	private String trakingNumber;
	@Getter
	@Setter
	private String  clientOther;
	@Getter	@Setter
	private String	 clientOrderNumber;
	
	@Getter	@Setter
	private Integer switchBetweenClientLoginAndPoNumberSignal;
	@Getter	@Setter
	private Integer switchBetweenClientLoginAndPoNumber;
	//New Added Field in the search option as toggle functionality
	@Getter	@Setter
	private Integer switchBetweenLsOrderAndClientOrderIdSignal;
	@Getter	@Setter
	private Integer switchBetweenLsOrderAndClientOrderId;
	@Getter	@Setter
	private Integer switchBetweenStatusAndClientOtherSignal;
	@Getter	@Setter
	private Integer switchBetweenStatusAndClientOther;
	//Added for the multiple functionality in switching  
	@Getter	@Setter
	private Integer switchBetweenOptionFieldsSignal;
	@Getter	@Setter
	private Integer switchBetweenOptionFields;
	
	switchBetweenOptionFieldsSignal

	// ------Pagination

	/*
	 * ==========================================================================
	 * =============== Default constructor
	 * ======================================
	 * ===================================================
	 */
	public ReportOrders() throws ServiceLocatorException {
		super();
		userService = getServiceLocator().getUserService();
		orderService = getServiceLocator().getOrderService();
		productService = getServiceLocator().getProductService();
		operationsService = getServiceLocator().getOperationsService();
	}

	/*
	 * ==========================================================================
	 * =============== method execute
	 * ============================================
	 * =============================================
	 */
	@SuppressWarnings({ "rawtypes", "unchecked" })
	@Override
	public String execute() throws Exception {
		System.out.println("Product Order Number: "+ productOrderNumberSearch);
		System.out.println("Tracking Number: "+ trakingNumber);
		System.out.println("Client Order ID: "+ clientOrderNumber);
		System.out.println("Client Other ID: "+ clientOther);
		
		//Create new object or Order to modify the search functionality
		OrdersDTO orderDTOObj=new OrdersDTO();
		orderDTOObj.setLsOrderId(lsOrderId);
		orderDTOObj.setUserLogin(userLogin);
		orderDTOObj.setStatus(status);
		orderDTOObj.setProductOrderNumber(productOrderNumberSearch);
		orderDTOObj.setClientOrderNumber(clientOrderNumber);
		orderDTOObj.setClientOtherId(clientOther);
		
		HttpSession session = request.getSession(true);

		if (showOrderDetailPop == null)
			showOrderDetailPop = "visibility:hidden;display:none;";
		if (showConfirmDeleteOrderPop == null)
			showConfirmDeleteOrderPop = "visibility:hidden;display:none;";
		if (showSaveSuccessPop == null)
			showSaveSuccessPop = "visibility:hidden;display:none;";
		if (poYpop == null)
			poYpop = 100L;
		if (poXpop == null)
			poXpop = 100L;
		Hashtable<String, OrdersDTO> hashOrders;
		if (selectedStatus == null)
			selectedStatus = -1;
		sizeResult = (Long) session.getAttribute("sizeResult");
		totalOrders = (Long) session.getAttribute("totalOrders");
		if (totalOrders == null)
			totalOrders = 0L;
		asc = (Integer) session.getAttribute("asc");
		if (asc == null)
			asc = 0;
		if (sizeResult == null)
			sizeResult = 0L;
		if (indexOrder == null)
			indexOrder = 0;
		userPrivileges = (UsersPrivilegesDTO) session.getAttribute("userPrivileges");
		usersPrivShippedToInvoiced = (UsersPrivilegesDTO) session.getAttribute("usersPrivShippedToInvoiced");
		usersPrivChangeShippedStatus = (UsersPrivilegesDTO) session
				.getAttribute("usersPrivChangeShippedStatus");
		hashStatus = (HashMap<Integer, String>) session
				.getAttribute("hashStatus");
		if (hashStatus == null) {
			hashStatus = new HashMap<Integer, String>();
			hashStatus.put(0, "");
			hashStatus.put(1, "open");
			hashStatus.put(2, "progress");
		}
		List<Integer> listIndexColumn = new ArrayList<Integer>();
		// fill list status
		listStatus = (ArrayList<OrdersDTO>) session.getAttribute("listStatus");
		if (listStatus == null) {
			listStatus = new ArrayList<OrdersDTO>();
			OrdersDTO orderDTOOpen = new OrdersDTO();
			orderDTOOpen.setStatus("open");
			orderDTOOpen.setId(0L);
			listStatus.add(orderDTOOpen);
			OrdersDTO orderDTOProgress = new OrdersDTO();
			orderDTOProgress.setStatus("progress");
			orderDTOProgress.setId(1L);
			listStatus.add(orderDTOProgress);
			if (usersPrivChangeShippedStatus != null) {
				OrdersDTO orderDTOShipped = new OrdersDTO();
				orderDTOShipped.setStatus("shipped");
				orderDTOShipped.setId(2L);
				listStatus.add(orderDTOShipped);
			}

		}

		try {

			/*-------------------- recovery users list -----------------------------------
							Recovery users list in session
			 -----------------------------------------------------------------------------*/
			// recovery provinces
			listProvinces = (List<ProvinceDTO>) session
					.getAttribute("listProvinces");
			if (listProvinces == null)
				listProvinces = productService.getAllProvinces();
			orderNotSavedAtFirst = (Boolean) session
					.getAttribute("listNotSavedAtFirst");
			BasicUserDTO basicUserDTO = new BasicUserDTO();
			basicUserDTO.setTypeId(USER_TYPE);
			List<User> usersListSession = (List<User>) session
					.getAttribute("usersListSession");
			if (usersListSession == null) {
				List<UserSessionDTO> listAllUsers = userService
						.getAllUsers(basicUserDTO);
				usersList = new ArrayList<User>();
				for (UserSessionDTO userDTO : listAllUsers) {
					User user = new User();
					user.setId(userDTO.getId());
					user.setLogin(userDTO.getLogin());
					usersList.add(user);
				}
				session.setAttribute("usersListSession", usersList);
			} else{
				usersList = usersListSession;
			}
			
			listOrdersDTO = (ArrayList<OrdersDTO>) session.getAttribute("listOrdersDTOReport");
			
			reportDateBetween = (Integer) session.getAttribute("reportDateBetween");
			if (reportDateBetween == null) {
				reportDateBetween = 0;
				session.setAttribute("reportDateBetween", reportDateBetween);
			}

			//Added for the new field
			switchBetweenClientLoginAndPoNumber = (Integer) session.getAttribute("switchBetweenClientLoginAndPoNumber");
			if (switchBetweenClientLoginAndPoNumber == null) {
				switchBetweenClientLoginAndPoNumber = 0;
				session.setAttribute("switchBetweenClientLoginAndPoNumber", switchBetweenClientLoginAndPoNumber);
			}
			switchBetweenLsOrderAndClientOrderId = (Integer) session.getAttribute("switchBetweenLsOrderAndClientOrderId");
			if (switchBetweenLsOrderAndClientOrderId == null) {
				switchBetweenLsOrderAndClientOrderId = 0;
				session.setAttribute("switchBetweenLsOrderAndClientOrderId", switchBetweenLsOrderAndClientOrderId);
			}
			switchBetweenStatusAndClientOther = (Integer) session.getAttribute("switchBetweenStatusAndClientOther");
			if (switchBetweenStatusAndClientOther == null) {
				switchBetweenStatusAndClientOther = 0;
				session.setAttribute("switchBetweenStatusAndClientOther", switchBetweenStatusAndClientOther);
			}

			/*------ always check if the Admin select all orders ------------
					if The Admin select all orders change checkBoxItem value 
			  ---------------------------------------------------------------*/
			if (selectAllOrdersSignal != null && selectAllOrdersSignal != 0L) {
				if (checkBoxItem != null) {
					session.setAttribute("checkBoxItem", checkBoxItem);
					session.setAttribute("allOrdersSelectedSignal", 0L);
					if (checkBoxItem)
						session.setAttribute("allOrdersSelectedSignal", 1L);
				}
			}
			checkBoxItem = (Boolean) session.getAttribute("checkBoxItem");
			if (checkBoxItem == null)
				checkBoxItem = false;
			/*------ always recovery creationDate from strCreationDate ------
						always keep the user search options
			  ---------------------------------------------------------------*/
			creationDateStart = null;
			SimpleDateFormat frm = new SimpleDateFormat("dd/MM/yyyy");
			if (((strCreationDateStart) != null)
					&& (!"".equals(strCreationDateStart))) {
				try {
					Date date = frm.parse(strCreationDateStart);
					creationDateStart = date;
					creationDateStartArg = date;
				} catch (Exception pe) {
					creationDateStart = null;
					addActionError("Please enter a date in the correct format");
				}
			}
			if (creationDateStart == null) {
				Date date = frm.parse("01/01/1900");
				creationDateStartArg = date;
			}
			creationDateEnd = null;
			if (((strCreationDateEnd) != null)
					&& (!"".equals(strCreationDateEnd))) {
				frm = new SimpleDateFormat("dd/MM/yyyy");
				try {
					Date date = frm.parse(strCreationDateEnd);
					creationDateEnd = date;
					creationDateEndArg = date;
				} catch (Exception pe) {
					creationDateEnd = null;
					addActionError("Please enter a date in the correct format");
				}
			}
			if (creationDateEnd == null) {
				creationDateEndArg = new Date();
			}

			/*------ always recovery Status from selectedStatus key ------
						always keep the status search options
			  ---------------------------------------------------------------*/
			status = getStatusSelected(selectedStatus);

			/*----------- always initialized listPages if not done ----------
				   		    and check if is there next listPages
			  ---------------------------------------------------------------*/
			nextListPages = (Integer) session.getAttribute("nextListPages");
			if (nextListPages == null)
				nextListPages = 0;
			if (indexSet == null || indexSet == -1) {
				indexSet = (Integer) session.getAttribute("indexSet");
				if (indexSet == null)
					indexSet = 0;
			}
			listIndexSet = (List<OrdersDTO>) session
					.getAttribute("listIndexSet");
			if (listIndexSet == null)
				initalizeListIndexSet(session, orderService);

			/*----------------- When Admin Click on the pageIndex ----------------------------------
										catch  page index
			 ---------------------------------------------------------------------------------------*/
			//Toggle Switch between PO Date and Shipping date
			if (dateBetweenSignal != null && dateBetweenSignal != 0L) {
				reportDateBetween = ((reportDateBetween == null || reportDateBetween == 0) ? 1: 0);
				listOrdersDTO = new ArrayList<OrdersDTO>();
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				session.setAttribute("reportDateBetween", reportDateBetween);
				return SUCCESS;
			}
		
			//Toggle Switch between Client Login and PO Number	
//			switchBetweenClientLoginAndPoNumber=(Integer)session.getAttribute("switchBetweenClientLoginAndPoNumber");
			
			if (switchBetweenClientLoginAndPoNumberSignal != null && switchBetweenClientLoginAndPoNumberSignal != 0L) {
				switchBetweenClientLoginAndPoNumber = ((switchBetweenClientLoginAndPoNumber == null 
						|| switchBetweenClientLoginAndPoNumber == 0) ? 1: 0);
				listOrdersDTO = new ArrayList<OrdersDTO>();
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				session.setAttribute("switchBetweenClientLoginAndPoNumber", switchBetweenClientLoginAndPoNumber);
				return SUCCESS;
			}
			
			//Switching between "ls_Order" and "Client Order Id"	
//			switchBetweenLsOrderAndClientOrderId = (Integer)session.getAttribute("switchBetweenLsOrderAndClientOrderId");
			
			if (switchBetweenLsOrderAndClientOrderIdSignal != null && switchBetweenLsOrderAndClientOrderIdSignal != 0L) {
				switchBetweenLsOrderAndClientOrderId = ((switchBetweenLsOrderAndClientOrderId == null 
						|| switchBetweenLsOrderAndClientOrderId == 0) ? 1: 0);
				listOrdersDTO = new ArrayList<OrdersDTO>();
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				session.setAttribute("switchBetweenLsOrderAndClientOrderId", switchBetweenLsOrderAndClientOrderId);
				return SUCCESS;
			}
			
			//Switching between "Status" and "Client Other Id"
//			switchBetweenStatusAndClientOther = (Integer)session.getAttribute("switchBetweenStatusAndClientOther");
			
			if (switchBetweenStatusAndClientOtherSignal != null && switchBetweenStatusAndClientOtherSignal != 0L) {
				switchBetweenStatusAndClientOther = ((switchBetweenStatusAndClientOther == null 
						|| switchBetweenStatusAndClientOther == 0) ? 1: 0);
				listOrdersDTO = new ArrayList<OrdersDTO>();
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				session.setAttribute("switchBetweenStatusAndClientOther", switchBetweenStatusAndClientOther);
				return SUCCESS;
			}
			
			if (switchBetweenOptionFieldsSignal != null && switchBetweenOptionFields != 0L) {
				switchBetweenOptionFields++;
				if (switchBetweenOptionFields == 4) switchBetweenOptionFields = 0;
				
			}
			

			
			
			/*----------------- When Admin Click on the pageIndex ----------------------------------
										catch  page index
			 ---------------------------------------------------------------------------------------*/
			if (pageIndexSignal != null && pageIndexSignal != 0L) {
				OrdersDTO orderDTO = (OrdersDTO) session.getAttribute("orderPageSelected");
				if (orderDTO != null)
					orderDTO.setCssStyle("");
				OrdersDTO orderPageSelected = listIndexSet.get(indexList);
				orderPageSelected
						.setCssStyle("background-color:#FFFF99;border:1px solid #CCCCCC;");
				indexSet = orderPageSelected.getIndex() - 1;
				indexSet = indexSet * PAGE_ITEMS_COUNT;
				session.setAttribute("indexSet", indexSet);
				session.setAttribute("listIndexSet", listIndexSet);
				session.setAttribute("orderPageSelected", orderPageSelected);
			}

			/*----------------- When Admin Click on the nextListPages ------------------------------
						recreate listIndexSet started with index>index+10 and indexSet>indexSet+10
			 ---------------------------------------------------------------------------------------*/
			if (nextListPagesSignal != null && nextListPagesSignal != 0L
					&& listIndexSet.size() > 0) {
				OrdersDTO orderDTOPrevious = (OrdersDTO) session
						.getAttribute("orderPageSelected");
				if (orderDTOPrevious != null)
					orderDTOPrevious.setCssStyle("");
				OrdersDTO orderDTO = listIndexSet.get(listIndexSet.size() - 1);
				if (orderDTO != null)
					nextListPages = orderDTO.getIndex() + 1;
				
				Long totalOrders = orderService.getCountOrders(creationDateStartArg,
						creationDateEndArg, reportDateBetween, userLogin, lsOrderId,
						status,productOrderNumberSearch,clientOrderNumber,clientOther);
				
				String strcount = totalOrders.toString();
				Integer sizeList = Integer.parseInt(strcount)
						/ PAGE_ITEMS_COUNT;
				if (nextListPages <= sizeList + 1) {
					listIndexSet = new ArrayList<OrdersDTO>();
					for (int i = nextListPages; i <= sizeList + 1
							&& i <= nextListPages + 10; i++) {
						OrdersDTO ord = new OrdersDTO();
						ord.setCssStyle("");
						ord.setIndex(i);
						listIndexSet.add(ord);
					}
					if (nextListPages <= sizeList + 1) {
						indexSet = nextListPages - 1;
						OrdersDTO orderPageSelected = listIndexSet.get(0);
						orderPageSelected
								.setCssStyle("background-color:#FFFF99;border:1px solid #CCCCCC;");
						indexSet = indexSet * PAGE_ITEMS_COUNT;
						session.setAttribute("indexSet", indexSet);
						session.setAttribute("nextListPages", nextListPages);
						session.setAttribute("listIndexSet", listIndexSet);
						session.setAttribute("orderPageSelected",
								orderPageSelected);
					}
				}
			}

			/*----------------- When Admin Click on the previousListPages --------------------------
					recreate listIndexSet started with index< index-10 and indexSet<indexSet-10
			 ---------------------------------------------------------------------------------------*/
			if (prevListPagesSignal != null && prevListPagesSignal != 0L
					&& listIndexSet.size() > 0) {
				OrdersDTO orderDTOPrevious = (OrdersDTO) session
						.getAttribute("orderPageSelected");
				if (orderDTOPrevious != null)
					orderDTOPrevious.setCssStyle("");
				nextListPages = (Integer) session.getAttribute("nextListPages");
				if (nextListPages != null && nextListPages >= 11) {
					prevListPages = nextListPages - 11;
					listIndexSet = new ArrayList<OrdersDTO>();
					for (int i = prevListPages; i < nextListPages; i++) {
						OrdersDTO ord = new OrdersDTO();
						ord.setCssStyle("");
						ord.setIndex(i);
						listIndexSet.add(ord);
					}
					indexSet = prevListPages - 1;
					OrdersDTO orderPageSelected = listIndexSet.get(0);
					orderPageSelected
							.setCssStyle("background-color:#FFFF99;border:1px solid #CCCCCC;");
					indexSet = indexSet * PAGE_ITEMS_COUNT;
					nextListPages = prevListPages;
					session.setAttribute("nextListPages", nextListPages);
					session.setAttribute("indexSet", indexSet);
					session.setAttribute("listIndexSet", listIndexSet);
					session.setAttribute("orderPageSelected", orderPageSelected);
				}
			}

			/*----------------- When Admin change province -----------------------------------------
								Check a list off this province
			 ---------------------------------------------------------------------------------------*/
			hashProvinces = (Hashtable<String, ProvinceDTO>) session
					.getAttribute("hashProvinces");
			if (hashProvinces == null) {
				listProvinces = productService.getAllProvinces();
				Hashtable<String, ProvinceDTO> hashProvinces = new Hashtable<String, ProvinceDTO>();
				for (ProvinceDTO prov : listProvinces) {
					hashProvinces.put(prov.getCode(), prov);
				}
				session.setAttribute("hashProvinces", hashProvinces);
			}
			if (code != null && !code.equals("") && listOrdersDTO != null) {
				ProvinceDTO provinceDTO = hashProvinces.get(code);
				if (provinceDTO != null) {
					clientProvince = provinceDTO.getCode();
				}
			}// else listCities=new ArrayList<CityDTO>();
			if (listOrdersDTO != null && indexOrder != -1) {
				orderToEdit = listOrdersDTO.get(indexOrder);
				if (orderToEdit != null) {
					orderToEdit.setClientProvince(code);
					session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				}
			}

			/*------------------------------- Refresh listOrdersDTO------------------------------------
						Refresh listOrders before generation of invoiced orders XLS file 
				 ------------------------------------------------------------------------------------------*/
			invoicedOrdersRefresh = (Long) session
					.getAttribute("invoicedOrdersRefresh");
			if (invoicedOrdersRefresh != null && invoicedOrdersRefresh != 0L) {
				listIndexColumn = (ArrayList<Integer>) session
						.getAttribute("listIndexColumn");
				if (listIndexColumn == null)
					listIndexColumn = getNewListIndexColumn();
				lsOrderId = lsOrderId.toUpperCase();
				
				//New Searching Functionality
				listOrdersDTO = orderService.searchOrdersWithOptionsAndSorting(
						creationDateStartArg, creationDateEndArg,
						reportDateBetween,orderDTOObj,listIndexColumn, PAGE_ITEMS_COUNT, indexSet);
				//Old Searching Functionality				
//				listOrdersDTO = orderService.searchOrdersWithOptionsAndSorting(
//						creationDateStartArg, creationDateEndArg,
//						reportDateBetween, userLogin, lsOrderId, status,
//						listIndexColumn, PAGE_ITEMS_COUNT, indexSet);
				
				if (findOrdersSignal != null && findOrdersSignal != 0L)
					initalizeListIndexSet(session, orderService);
				// Color in RED rows containing a GroupItems
				for (OrdersDTO orderDTO : listOrdersDTO) {
					if (orderDTO != null && orderDTO.getStatus() != null
							&& orderDTO.getStatus().equals("shipped")) {
						Long count = productService.isGroupProductID(orderDTO
								.getProductId());
						if (count != null && count >= 1) {
							orderDTO.setCssStyle("background-color: rgb(248,150,140); border-right:1px solid #CCCCCC;border-left:1px solid #CCCCCC;border-top:1px solid #CCCCCC;");
						}
					}
				}

				// keep search parameters to use in other
				// classes(PrintOrdersToPDF, ...)
				indexSet = 0;
				session.setAttribute("indexSet", indexSet);
				nextListPages = 0;
				session.setAttribute("nextListPages", nextListPages);
				session.setAttribute("selectedStatus", selectedStatus);
				session.setAttribute("creationDateStartArg",creationDateStartArg);
				session.setAttribute("creationDateEndArg", creationDateEndArg);
				session.setAttribute("reportDateBetween", reportDateBetween);
				session.setAttribute("lsOrderId", lsOrderId);
				session.setAttribute("userLogin", userLogin);
				session.setAttribute("status", status);
				session.setAttribute("listIndexColumn", listIndexColumn);
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				session.setAttribute("invoicedOrdersRefresh", 0L);
				
				session.setAttribute("productOrderNumberSearch", productOrderNumberSearch);
				session.setAttribute("clientOrderNumber", clientOrderNumber);
				session.setAttribute("clientOther", clientOther);
				return SUCCESS;
			}

			/*------------ When Admin click on the Button "Delete Order" in The OrderDtailPop --------------
								show other pop to confirm Order Delete
			  ----------------------------------------------------------------------------------------------*/
			if (deleteOrderSignal != null && deleteOrderSignal != 0L) {
				message = "Attention! if you click on \"Delete Order\" you can not restore it.";
				orderToEdit = listOrdersDTO.get(indexOrder);
				if (confirmDeleteSignal != null && confirmDeleteSignal == 0L) { // Delete
																				// Order
																				// Request
					showOrderDetailPop = "display:block;visibility:visible;";
					showConfirmDeleteOrderPop = "display:block;visibility:visible;";
				} else if (confirmDeleteSignal == 1L) { // Delete Order
														// Confirmed
					orderService.deleteOrderByLsOrderId(orderToEdit);
					// Save this operation in table operation
					OperationsDTO operationDTO = new OperationsDTO();
					User userAdmin = (User) session.getAttribute("userAdmin");
					if (userAdmin != null)
						operationDTO.setUserId(userAdmin.getId());
					operationDTO.setOperationDate(new Date());
					operationDTO.setOperationType("Delete Order");
					String dataBefore = "[PARTNER NAME:"
							+ orderToEdit.getUserLogin() + "];";
					dataBefore += " [LS_ORDER_ID:" + orderToEdit.getLsOrderId()
							+ "];";
					dataBefore += " [PRODUCT_ORDER_NUMBER:"
							+ orderToEdit.getProductOrderNumber() + "];";
					dataBefore += " [CLIENT_FIRST_NAME:"
							+ orderToEdit.getClientFirstName() + "];";
					dataBefore += " [CLIENT_LAST_NAME:"
							+ orderToEdit.getClientLastName() + "];";
					dataBefore += " [CLIENT_POSTAL_CODE:"
							+ orderToEdit.getClientPostalCode() + "];";
					dataBefore += " [LS_PRODUCT_ID:"
							+ orderToEdit.getLsProductID() + "];";
					dataBefore += " [UNIT_PRICE:" + orderToEdit.getUnitPrice()
							+ "];";
					dataBefore += " [STATUS:" + orderToEdit.getStatus() + "];";
					operationDTO.setDataBefore(dataBefore);
					operationDTO.setDataBefore(operationDTO.getDataBefore());
					operationDTO.setDataAfter("");
					operationsService.insertOperation(operationDTO);
					// Remove order from the list orders
					listOrdersDTO.remove(orderToEdit);
					session.setAttribute("listOrdersDTOReport", listOrdersDTO);
					showOrderDetailPop = "visibility:hidden;display:none;";
					showConfirmDeleteOrderPop = "visibility:hidden;display:none;";
					// initialize index orders
					int indexOrder = 0;
					int indexRow = 0;
					for (OrdersDTO orderDTO : listOrdersDTO) {
						orderDTO.setIndex(indexOrder);
						indexOrder++;
						indexRow = 0;
						for (OrdersRows orderRows : orderDTO.getRowsList()) {
							orderRows.setIndex(indexRow);
							indexRow++;
						}
					}
					session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				} else { // Cancel Order Delete
					showOrderDetailPop = "display:block;visibility:visible;";
					showConfirmDeleteOrderPop = "visibility:hidden;display:none;";
				}
				return SUCCESS;
			}

			/*------ When Admin click the "Edit link" in the Order Table for Edit NOTE -----
							show only field Edit Note
			  ------------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& showOnlyEditNote != null && showOnlyEditNote != 0L) {
				orderToEdit = listOrdersDTO.get(indexOrder);
				for (OrdersDTO order : listOrdersDTO) {
					order.setShowOnlyEditNote(0L);
					order.setCssRow("");
				}
				orderToEdit.setShowOnlyEditNote(1L);
				orderToEdit.setCssRow("background-color:#FF9966;");
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				listOrdersDTO = (ArrayList<OrdersDTO>) session
						.getAttribute("listOrdersDTOReport");
				return SUCCESS;
			}

			/*------------ When Admin click on link "Save Edit Note in the Orders Table" ----------
													save Only  notes
			  -------------------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& saveOnlyNoteSignal != null && saveOnlyNoteSignal != 0L) {
				if (indexOrder != null) {
					orderToEdit = listOrdersDTO.get(indexOrder);
					if (orderToEdit != null) {
						orderToEdit.setNotes(notes);
						orderToEdit.setShowRowShipping(0L);
						orderToEdit.setShowOnlyEditNote(0L);
						orderToEdit.setCssRow("");
						// Save Note
						Boolean sucess = orderService
								.updateShippingOrderElements(orderToEdit);
						session.setAttribute("listOrdersDTOReport",
								listOrdersDTO);
					}
				}
				return SUCCESS;
			}

			/*------------ When Admin click the "Edit link" in the Order Table -------------
								show fields to edit shipping parameters
			  ------------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& showRowShipping != null && showRowShipping != 0L) {

				orderToEdit = listOrdersDTO.get(indexOrder);
				for (OrdersDTO order : listOrdersDTO) {
					order.setShowRowShipping(0L);
					order.setCssRow("");
				}
				// only Admins who has Active = true of action name='All' can
				// change shipping settings
				// of orders shipped or invoiced
				if (usersPrivChangeShippedStatus == null
						&& orderToEdit.getStatus() != null
						&& (orderToEdit.getStatus().equals("shipped") || orderToEdit
								.getStatus().equals("invoiced"))) {
					showRowShipping = 0L;
					return SUCCESS;
				}

				if (orderToEdit != null) {
					orderToEdit.setShowRowShipping(1L);
					orderToEdit.setShowOnlyEditNote(1L);
					orderToEdit.setCssRow("background-color:#FF9966;");
					session.setAttribute("listOrdersDTOReport", listOrdersDTO);
					listOrdersDTO = (ArrayList<OrdersDTO>) session
							.getAttribute("listOrdersDTOReport");
				}
				if (orderToEdit.getStatus().equals("open")) {
					statusId = 0L;
				} else if (orderToEdit.getStatus().equals("progress")) {
					statusId = 1L;
				} else if (orderToEdit.getStatus().equals("shipped")) {
					statusId = 2L;
				} else if (orderToEdit.getStatus().equals("invoiced")) {
					statusId = 3L;
				} else if (orderToEdit.getStatus().equals("canceled")) {
					statusId = 4L;
				}
				return SUCCESS;
			}

			/*------------ When Admin click on link "Save in the Orders Table" ----------
							save all shipping parameters and notes
			 ----------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& saveShippingSignal != null && saveShippingSignal != 0L) {
				if (indexOrder != null) {
					orderToEdit = listOrdersDTO.get(indexOrder);
					if (orderToEdit != null) {
						Date shippedDateToEdit = null;
						frm = new SimpleDateFormat("dd/MM/yyyy");
						if (((strShippedDate) != null)
								&& (!"".equals(strShippedDate))) {
							strShippedDate = strShippedDate.replaceAll(" ", "");
							try {
								Date date = frm.parse(strShippedDate);
								shippedDateToEdit = date;
							} catch (Exception pe) {
								shippedDateToEdit = null;
							}
						}
						if (((strShippedDate) != null)
								&& (!"".equals(strShippedDate))
								&& strShippedDate.length() <= 8)
							shippedDateToEdit = orderToEdit.getShippedDate();
						Double shippingPrice = null;
						// Double currencyShippingPrice=null;
						if (strShippingPrice != null
								&& !strShippingPrice.equals("")) {
							strShippingPrice = strShippingPrice.replaceAll(" ",
									"");
							int index = strShippingPrice.indexOf(",");
							if (index >= 0) {
								String strUnitPrice1 = strShippingPrice
										.substring(0, index);
								String strUnitPrice2 = strShippingPrice
										.substring(index + 1,
												strShippingPrice.length());
								strShippingPrice = strUnitPrice1 + "."
										+ strUnitPrice2;
							}

							try {
								shippingPrice = Double
										.parseDouble(strShippingPrice);
								/*
								 * if(shippingPrice!=null &&
								 * orderToEdit.getCurrencyId()!=null &&
								 * orderToEdit.getCurrencyId()!=1 &&
								 * orderToEdit.getCurrencyRate()!=null) {
								 * currencyShippingPrice = shippingPrice *
								 * orderToEdit.getCurrencyRate();
								 * currencyShippingPrice = (double)
								 * Math.round(currencyShippingPrice*100)/100; }
								 */
							} catch (Exception pe) {
								shippingPrice = null;
							}
						}

						if (trakingNumber != null)
							trakingNumber = trakingNumber.replaceAll(
									"^ +| +$|( )+", "$1");
						if (shippingCompany != null)
							shippingCompany = shippingCompany.replaceAll(
									"^ +| +$|( )+", "$1");
						orderToEdit.setShippingPrice(shippingPrice);
						// orderToEdit.setCurrencyShippingPrice(currencyShippingPrice);
						// orderToEdit.getRowsList().get(0).setCurrencyShippingPrice(currencyShippingPrice);
						orderToEdit.setShippedDate(shippedDateToEdit);
						orderToEdit.setNotes(notes);
						if (newStatus != null && !newStatus.equals(""))
							orderToEdit.setStatus(newStatus);
						orderToEdit.setShippingCompany(shippingCompany);
						orderToEdit.setTrackingNumber(trakingNumber);
						orderToEdit.setShowRowShipping(0L);
						orderToEdit.setShowOnlyEditNote(0L);
						OrdersRows row = orderToEdit.getRowsList().get(0);
						row.setShippingPrice(shippingPrice);
						row.setShippingCompany(shippingCompany);
						row.setTrackingNumber(trakingNumber);
						orderToEdit.setCssRow("");

						if (newStatus != null && !newStatus.equals("")) { // if
																			// admin
																			// click
																			// on
																			// the
																			// save
																			// behind
																			// status
							orderService.updateStatusByLsOrderId(
									orderToEdit.getLsOrderId(), newStatus);
							orderToEdit.setStatus(newStatus);
							if (!newStatus.equals("shipped")
									&& !newStatus.equals("invoiced")
									&& !newStatus.equals("canceled")) {
								orderToEdit.setShippingPrice(null);
								orderToEdit.setTrackingNumber(null);
								orderToEdit.setShippedDate(null);
							}

						} else {// if admin click on the save other than Status
							if (orderToEdit.getShippedDate() != null
									&& orderToEdit.getTrackingNumber() != null
									&& !orderToEdit.getTrackingNumber().equals(
											"")
									&& orderToEdit.getShippingCompany() != null
									&& !orderToEdit.getShippingCompany()
											.equals("")
									&& orderToEdit.getShippingPrice() != null
									&& orderToEdit.getStatus() != null) {
								if (orderToEdit.getStatus().equals("open")
										|| orderToEdit.getStatus().equals(
												"progress")) {
									orderService.updateStatusByLsOrderId(
											orderToEdit.getLsOrderId(),
											"shipped");
									orderToEdit.setStatus("shipped");
								}
							} else {
								if (usersPrivChangeShippedStatus != null
										&& !orderToEdit.getStatus().equals(
												"open")
										&& !orderToEdit.getStatus().equals(
												"progress")) {
									orderService.updateStatusByLsOrderId(
											orderToEdit.getLsOrderId(),
											"progress");
									orderToEdit.setStatus("progress");
								}
							}
						}
						// if admin click on the save other then status(save
						// notes, save shipping company ...)
						Boolean sucess = orderService
								.updateShippingOrderElements(orderToEdit);
						session.setAttribute("listOrdersDTOReport",
								listOrdersDTO);
					}
				}
				return SUCCESS;
			}

			/*------------ When Admin click on icon findOrders.png ----------
								check user and complete infos client
			 ----------------------------------------------------------------*/
			if (findOrdersSignal != null
					&& findOrdersSignal != 0L
					|| (pageIndexSignal != null && pageIndexSignal != 0L)
					|| (nextListPagesSignal != null && nextListPagesSignal != 0L)
					|| (prevListPagesSignal != null && prevListPagesSignal != 0L)) {
				// session.setAttribute("allOrdersSelectedSignal",0L);
				// if admin click on search icon initialize checkBoxItem to
				// false
				if (findOrdersSignal != null && findOrdersSignal != 0L) {
					session.setAttribute("allOrdersSelectedSignal", 0L);
					checkBoxItem = false;
					session.setAttribute("checkBoxItem", checkBoxItem);
					indexSet = 0;
					session.setAttribute("indexSet", indexSet);
					nextListPages = 0;
					session.setAttribute("nextListPages", nextListPages);
					session.setAttribute("selectedStatus", selectedStatus);

				}
				// if admin navigate on pages keep the previous sorting
				if (((pageIndexSignal != null && pageIndexSignal != 0L)
						|| (nextListPagesSignal != null && nextListPagesSignal != 0L) || (prevListPagesSignal != null && prevListPagesSignal != 0L))) {
					listIndexColumn = (ArrayList<Integer>) session
							.getAttribute("listIndexColumn");
					if (listIndexColumn == null)
						listIndexColumn = getNewListIndexColumn();
				} else { // prepare new sorting
					listIndexColumn = getNewListIndexColumn();
				}

				lsOrderId = lsOrderId.toUpperCase();
				// if(findOrdersSignal!=null &&
				// findOrdersSignal!=0L)initalizeListIndexSet(session,orderService
				// );
				
				//Old Working Methods
//				listOrdersDTO = orderService.searchOrdersWithOptionsAndSorting(
//						creationDateStartArg, creationDateEndArg,
//						reportDateBetween, userLogin, lsOrderId, status,
//						listIndexColumn, PAGE_ITEMS_COUNT, indexSet);
				
				//New Functionality with same mapping
				listOrdersDTO = orderService.searchOrdersWithOptionsAndSortingNew(
								creationDateStartArg, creationDateEndArg,
								reportDateBetween, userLogin, lsOrderId,
								status, listIndexColumn, PAGE_ITEMS_COUNT,
								indexSet, productOrderNumberSearch,clientOrderNumber,
								clientOther);

//				//New Searching Functionality
//				listOrdersDTO = orderService.searchOrdersWithOptionsAndSorting(
//						creationDateStartArg, creationDateEndArg,
//						reportDateBetween, orderDTOObj, listIndexColumn,
//						PAGE_ITEMS_COUNT, indexSet);
				
				
				// Color in RED rows containing a GroupItems
				for (OrdersDTO orderDTO : listOrdersDTO) {
					if (orderDTO != null && orderDTO.getStatus() != null
							&& orderDTO.getStatus().equals("shipped")) {
						Long count = productService.isGroupProductID(orderDTO
								.getProductId());
						if (count != null && count >= 1) {
							orderDTO.setCssStyle("background-color: rgb(248,150,140); border-right:1px solid #CCCCCC;border-left:1px solid #CCCCCC;border-top:1px solid #CCCCCC;");
						}
					}
				}

				// keep search parameters to use in other
				// classes(PrintOrdersToPDF, ...)
				session.setAttribute("creationDateStartArg",
						creationDateStartArg);
				session.setAttribute("creationDateEndArg", creationDateEndArg);
				session.setAttribute("reportDateBetween", reportDateBetween);
				session.setAttribute("lsOrderId", lsOrderId);
				session.setAttribute("userLogin", userLogin);
				session.setAttribute("status", status);
				//For newly added field
				session.setAttribute("productOrderNumberSearch", productOrderNumberSearch);

				session.setAttribute("listIndexColumn", listIndexColumn);
				session.setAttribute("sizeResult", sizeResult);
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				if (findOrdersSignal != null && findOrdersSignal != 0L)
					initalizeListIndexSet(session, orderService);
				return SUCCESS;
			}

			/*------------ When Admin click on the icon sorting of column ----------
							seach result with option of sorting list
			 -----------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& sortingOrdersSignal != null && sortingOrdersSignal != 0L) {
				listIndexColumn = (List<Integer>) session
						.getAttribute("listIndexColumn");
				asc = (asc == 1 ? -1 : 1);
				int nextElement = listIndexColumn.get(0);
				fieldForSorting = asc * fieldForSorting;
				listIndexColumn.set(0, fieldForSorting);
				for (int i = 1; i < listIndexColumn.size(); i++) {
					int element = listIndexColumn.get(i);
					listIndexColumn.set(i, nextElement);
					nextElement = element;
				}
				
				//New Functionality with same mapping
				listOrdersDTO = orderService.searchOrdersWithOptionsAndSortingNew(
								creationDateStartArg, creationDateEndArg,
								reportDateBetween, userLogin, lsOrderId,
								status, listIndexColumn, PAGE_ITEMS_COUNT,
								indexSet, productOrderNumberSearch,clientOrderNumber,
								clientOther);
				
//				listOrdersDTO = orderService.searchOrdersWithOptionsAndSorting(
//						creationDateStartArg, creationDateEndArg,
//						reportDateBetween, userLogin, lsOrderId, status,
//						listIndexColumn, PAGE_ITEMS_COUNT, indexSet);
				
//				// New Searching Functionality
//				listOrdersDTO = orderService.searchOrdersWithOptionsAndSorting(
//						creationDateStartArg, creationDateEndArg,
//						reportDateBetween, orderDTOObj, listIndexColumn,
//						PAGE_ITEMS_COUNT, indexSet);
				
				int balance = 0;
				int OrderIndex = 0;
				for (OrdersDTO orDTO : listOrdersDTO) {
					balance = (balance == 1 ? 0 : 1);
					if (balance == 1) {
						orDTO.setCssStyle("background-color: rgb(245,249,252);border-right: 1px solid #CCCCCC;border-left:1px solid #CCCCCC;border-top:  1px solid #CCCCCC;");
					} else {
						orDTO.setCssStyle("background-color: color:white;border-right:1px solid #CCCCCC;border-left:1px solid #CCCCCC;border-top:1px solid #CCCCCC;");
					}
					orDTO.setIndex(OrderIndex);
					OrderIndex++;
				}
				session.setAttribute("listIndexColumn", listIndexColumn);
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				session.setAttribute("asc", asc);
				return SUCCESS;
			}

			/*------ when Admin click on the lsOrder link in table -----------
					show popup detail and allow admin to update Order
			  ---------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& editOrderSignal != null && editOrderSignal != 0L) {
				orderToEdit = listOrdersDTO.get(indexOrder);
				if (orderToEdit == null)
					orderToEdit = new OrdersDTO();
				if (orderToEdit.getProductOrderDate() == null)
					strProductOrderDate = "";
				showOrderDetailPop = "display:block;visibility:visible;";
				return SUCCESS;
			}

			/*--- when Admin click on the cancel Button of orderDetailPop ---
					we mast just hide popup OrderDetail
			  ---------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& cancelSignal != null && cancelSignal != 0L) {
				showOrderDetailPop = "visibility:hidden;display:none;";
				return SUCCESS;
			}

			/*-------------------- When Admin left lsProduct TextField -------------
								check userPrice in DB, and write it in web view
			 -----------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& checkProductPriceSignal != null
					&& checkProductPriceSignal != 0L) {
				OrdersDTO orderDTOToUpdate = listOrdersDTO.get(indexOrder);
				orderDTOToUpdate = fillDataOrderDTO(orderDTOToUpdate);
				OrdersRows orderRowToUpadate = orderDTOToUpdate.getRowsList()
						.get(indexRow);
				UserProductPriceDTO userProductPrice = productService
						.getUsrPPriceByLsproductId(userId, lsProductID);
				orderRowToUpadate.setCss("");
				orderRowToUpadate.setCssPrice("");
				if (userProductPrice == null) {
					orderRowToUpadate.setCss("background-color:red;");
					orderRowToUpadate.setProductDescription("");
					orderRowToUpadate.setStock(null);
					orderRowToUpadate.setProductId(null);
					orderRowToUpadate.setLsProductID(lsProductID);
					orderRowToUpadate.setLsPrice(null);
				} else {
					Double usrPrice = orderRowToUpadate.getUnitPrice();
					if (usrPrice == null)
						usrPrice = 0D;
					if (usrPrice < userProductPrice.getPriceNum()) {
						orderRowToUpadate.setCssPrice("background-color:red;");
					}
					orderRowToUpadate.setProductDescription(userProductPrice
							.getProductTitle());
					orderRowToUpadate.setStock(userProductPrice.getStock());
					orderRowToUpadate.setProductId(userProductPrice
							.getProductId());
					orderRowToUpadate.setLsProductID(userProductPrice
							.getLsProductId());
					orderRowToUpadate
							.setLsPrice(userProductPrice.getPriceNum());
				}
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				orderToEdit = orderDTOToUpdate;
				listOrdersDTO = (List<OrdersDTO>) session
						.getAttribute("listOrdersDTOReport");
				showOrderDetailPop = "display:block;visibility:visible;";
				return SUCCESS;
			}

			/*----------------- When Admin check on saveTemporaryRow Icon --------------------------
					we must first obtained the object that contains the list of rows,
					after we accede to the row by index recovered by web view and change it
			 ---------------------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& saveTemporaryRowSignal != null
					&& saveTemporaryRowSignal != 0L) {
				OrdersDTO orderDTOToUpdate = listOrdersDTO.get(indexOrder);
				orderDTOToUpdate = fillDataOrderDTO(orderDTOToUpdate);
				OrdersRows orderRowToSaveMemory = orderDTOToUpdate
						.getRowsList().get(indexRow);
				orderRowToSaveMemory.setIcon("images/orders/itemValidated.png");
				if (orderRowToSaveMemory != null) {
					orderRowToSaveMemory.setQuantity(quantity);
					orderRowToSaveMemory.setLsProductID(lsProductID);
					orderRowToSaveMemory
							.setProductDescription(productDescription);
					orderRowToSaveMemory.setUnitPrice(unitPrice);
					orderRowToSaveMemory
							.setCssPrice("background-color:#FF6666;");
					orderRowToSaveMemory
							.setCssQuantity("background-color:#FF6666;");
					if (quantity != null && quantity > 0D)
						orderRowToSaveMemory.setCssQuantity("");
					if (unitPrice != null
							&& orderRowToSaveMemory.getLsPrice() != null
							&& unitPrice >= orderRowToSaveMemory.getLsPrice())
						orderRowToSaveMemory.setCssPrice("");
					orderRowToSaveMemory.setShippingFee(shippingFee);
					orderRowToSaveMemory.setShippingPrice(shippingFee);
					orderRowToSaveMemory.setShippingCompany(shippingCompany);
					orderRowToSaveMemory.setTrackingNumber(trakingNumber);
					if (orderRowToSaveMemory.getCurrencyId() != null
							&& orderRowToSaveMemory.getCurrencyId() != 1
							&& orderRowToSaveMemory.getCurrencyRate() != null) {
						if (unitPrice != null) {
							orderRowToSaveMemory
									.setCurrencyUnitPrice(unitPrice);
							unitPrice = unitPrice
									/ orderRowToSaveMemory.getCurrencyRate();
							unitPrice = (double) Math.round(unitPrice * 100) / 100;
							orderRowToSaveMemory.setUnitPrice(unitPrice);
						}
						/*
						 * if(shippingFee!=null) {
						 * orderRowToSaveMemory.setCurrencyShippingPrice
						 * (shippingFee); shippingFee =
						 * shippingFee/orderRowToSaveMemory.getCurrencyRate();
						 * shippingFee = (double)
						 * Math.round(shippingFee*100)/100;
						 * orderRowToSaveMemory.setShippingPrice(shippingFee); }
						 */
					}
					int indexOrder = 0;
					int indexRow = 0;
					for (OrdersDTO orderDTO : listOrdersDTO) {
						orderDTO.setIndex(indexOrder);
						indexOrder++;
						indexRow = 0;
						for (OrdersRows orderRows : orderDTO.getRowsList()) {
							orderRows.setIndex(indexRow);
							indexRow++;
						}
					}
					session.setAttribute("listOrdersDTOReport", listOrdersDTO);
					listOrdersDTO = (List<OrdersDTO>) session
							.getAttribute("listOrdersDTOReport");
				}
				orderToEdit = listOrdersDTO.get(indexOrder);
				// Change totalPrice also
				if (orderToEdit.getRowsList().get(0) != null
						&& orderToEdit.getRowsList().get(0).getQuantity() != null
						&& orderToEdit.getRowsList().get(0)
								.getQuantityToSplit() != null
						&& orderToEdit.getRowsList().get(0).getUnitPrice() != null) {
					Double priceTotal = orderToEdit.getRowsList().get(0)
							.getUnitPrice()
							* orderToEdit.getRowsList().get(0)
									.getQuantityToSplit();
					priceTotal = (double) Math.round(priceTotal * 100) / 100;
					orderToEdit.setTotalPrice(priceTotal);
				}
				showOrderDetailPop = "display:block;visibility:visible;";
				return SUCCESS;
			}

			/*------- When Admin click on addSimilarRow Icon on the OrderDetailPop --------
								Add one Row Similar at the previews
			  -----------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& addSimilarRowSignal != null && addSimilarRowSignal != 0L) {
				OrdersDTO orderDTOToUpdate = listOrdersDTO.get(indexOrder);
				// generate lsOrderId to new order
				orderDTOToUpdate = fillDataOrderDTO(orderDTOToUpdate);
				OrdersRows orderRowToClone = orderDTOToUpdate.getRowsList()
						.get(indexRow);
				if (orderRowToClone != null) {
					if (!orderRowToClone.getIcon().equals(
							"images/orders/itemValidated.png")) {
						orderRowToClone.setQuantity(quantity);
						orderRowToClone.setLsProductID(lsProductID);
						orderRowToClone.setStock(stock);
						orderRowToClone
								.setProductDescription(productDescription);
						orderRowToClone.setUnitPrice(unitPrice);
						orderRowToClone.setShippingFee(shippingFee);
						orderRowToClone.setShippingCompany(shippingCompany);
						orderRowToClone.setTrackingNumber(trakingNumber);
					}
					orderRowToClone.setIcon("images/orders/itemValidated.png");
					OrdersRows orderRowToAdd = DTOFactory
							.getOrderRowClone(orderRowToClone);
					orderRowToAdd.setId(-1L);
					// Add currencyId
					if (orderRowToClone.getCurrencyId() != null)
						orderRowToAdd.setCurrencyId(orderRowToClone
								.getCurrencyId());

					orderDTOToUpdate.getRowsList().add(indexRow + 1,
							orderRowToAdd);
					int indexOrder = 0;
					int indexRow = 0;
					for (OrdersDTO orderDTO : listOrdersDTO) {
						orderDTO.setIndex(indexOrder);
						indexOrder++;
						indexRow = 0;
						for (OrdersRows orderRows : orderDTO.getRowsList()) {
							orderRows.setIndex(indexRow);
							indexRow++;
						}
					}
					session.setAttribute("listOrdersDTOReport", listOrdersDTO);
					listOrdersDTO = (List<OrdersDTO>) session
							.getAttribute("listOrdersDTOReport");
				}
				orderToEdit = listOrdersDTO.get(indexOrder);
				showOrderDetailPop = "display:block;visibility:visible;";
				return SUCCESS;
			}

			/*-------- When Admin click on Delete Row Icon of orderDetail Popup-----------
									Delete this row using index
			 -----------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& deleteRowSignal != null && deleteRowSignal != 0L) {
				OrdersDTO orderDTO = listOrdersDTO.get(indexOrder);
				orderDTO = fillDataOrderDTO(orderDTO);
				int nb = orderService.nbOrderRowsNotDeleted(orderDTO
						.getRowsList());
				if (orderDTO != null && orderDTO.getRowsList().size() > 1) {
					for (int i = 0; i < orderDTO.getRowsList().size(); i++) {
						if (i == indexRow && nb > 1) {
							orderDTO.getRowsList().get(i).setToDelete(1);
							break;
						}
					}
				}
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				orderToEdit = listOrdersDTO.get(indexOrder);
				showOrderDetailPop = "display:block;visibility:visible;";
				return SUCCESS;
			}

			/*------ when Admin click on the button save of orderDetail ------------------
					 save order and hide pup  
			  ----------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& saveOrdersSignal != null && saveOrdersSignal != 0L) {
				session.setAttribute("orderNotSavedAtFirst", null);
				orderToEdit = listOrdersDTO.get(indexOrder);
				orderToEdit = fillDataOrderDTO(orderToEdit);

				// add special handling shipping
				User user = null;
				if (orderToEdit.getUserLogin() != null)
					user = userService.getUserByLogin(orderToEdit
							.getUserLogin());
				if (user != null) {
					Double totalPrice = null;
					orderToEdit.setSpecialHandlingName(user
							.getSpecialHandlingName());
					orderToEdit.setSpecialHandlingFee(user
							.getSpecialHandlingFee());
					if (orderToEdit.getRowsList().get(0).getQuantity() != null
							&& orderToEdit.getRowsList().get(0).getUnitPrice() != null) {
						totalPrice = orderToEdit.getRowsList().get(0)
								.getQuantity()
								* orderToEdit.getRowsList().get(0)
										.getUnitPrice();
						totalPrice = (double) Math.round(totalPrice * 100) / 100;
					}

					orderToEdit.setTotalPrice(totalPrice);
				}

				orderService.updateOrderByLsOrderId(orderToEdit);
				for (OrdersRows row : orderToEdit.getRowsList()) {
					if (row.getId() == -1)
						row.setId(0L);
				}
				OrdersRows row = orderToEdit.getRowsList().get(0);
				if (row != null) {
					orderToEdit.getShippedDate();
					orderToEdit.setLsPrice(row.getLsPrice());
					orderToEdit.setLsProductID(row.getLsProductID());
					orderToEdit.setProductDescription(row
							.getProductDescription());
					orderToEdit.setQuantity(row.getQuantity());
				}
				orderToEdit = DTOFactory.getOrderDTOConsideredMissingInfo(
						orderToEdit, hashProvinces);
				listIndexColumn = (List<Integer>) session
						.getAttribute("listIndexColumn");
				
//				listOrdersDTO = orderService.searchOrdersWithOptionsAndSorting(
//						creationDateStartArg, creationDateEndArg,
//						reportDateBetween, userLogin, lsOrderId, status,
//						listIndexColumn, PAGE_ITEMS_COUNT, indexSet);
				

				//New Functionality with same mapping
				listOrdersDTO = orderService.searchOrdersWithOptionsAndSortingNew(
								creationDateStartArg, creationDateEndArg,
								reportDateBetween, userLogin, lsOrderId,
								status, listIndexColumn, PAGE_ITEMS_COUNT,
								indexSet, productOrderNumberSearch,clientOrderNumber,
								clientOther);				
				
				// New Searching Functionality
//				listOrdersDTO = orderService.searchOrdersWithOptionsAndSorting(
//						creationDateStartArg, creationDateEndArg,
//						reportDateBetween, orderDTOObj, listIndexColumn,
//						PAGE_ITEMS_COUNT, indexSet);
				
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				message = "Saving has completed successfuly";
				showSaveSuccessPop = "display:block;visibility:visible;";
				showOrderDetailPop = "display:block;visibility:visible;";
				return SUCCESS;
			}

			/*------ When user change Quantity to split in orderDetailPop -----------
					 prepare order to split from two other orders witch
				 	 one must have a lsOrder with underscore 
			 ------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& quantityToChangeSignal != null
					&& quantityToChangeSignal != 0L) {
				OrdersDTO orderToChangeQt = listOrdersDTO.get(indexOrder);
				OrdersRows orderRow = orderToChangeQt.getRowsList().get(
						indexRow);
				orderToChangeQt = fillDataOrderDTO(orderToChangeQt);
				if (quantityToChange < orderRow.getQuantity())
					orderRow.setQuantityToSplit(quantityToChange);
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				listOrdersDTO = (List<OrdersDTO>) session
						.getAttribute("listOrdersDTOReport");
				orderToEdit = listOrdersDTO.get(indexOrder);
				showOrderDetailPop = "display:block;visibility:visible;";
				return SUCCESS;
			}

			/*-------------------- Duplicate Order ----------------------------------------
							Create order in just in memory
			 -----------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& duplicateOrderSignal != null
					&& duplicateOrderSignal != 0L) {
				OrdersDTO orderToClone = listOrdersDTO.get(indexOrder);
				orderToClone = fillDataOrderDTO(orderToClone);
				hashOrders = new Hashtable<String, OrdersDTO>();
				for (OrdersDTO ord : listOrdersDTO) {
					hashOrders.put(ord.getLsOrderId(), ord);
				}
				OrdersDTO orderClone = DTOFactory
						.getOrderDTOSplitted(orderToClone);
				if (orderClone != null) {
					orderClone.setDuplicate(true);
					String lsOrder = orderClone.getLsOrderId();
					String strlsOrder = orderService.generateLsOrderId(lsOrder,
							hashOrders);
					orderClone.setLsOrderId(strlsOrder);// rgb(116,180,209)
					orderClone
							.setCssStyle("background-color:#FFFF99;border-right: 1px solid #CCCCCC;border-left:1px solid #CCCCCC;border-top:  1px solid #CCCCCC;");
					orderToEdit = orderClone;
					orderToEdit.setBackgroundColor("background-color:#FFFF99;");
					listOrdersDTO.add(indexOrder + 1, orderClone);
					indexOrder = 0;
					for (OrdersDTO ord : listOrdersDTO) {
						ord.setIndex(indexOrder);
						indexOrder++;
					}
					orderService.updateOrderByLsOrderId(orderToClone);
					orderService.insertOrderWithRows(orderClone);
					orderClone.setDuplicate(false);
					for (OrdersRows row : orderClone.getRowsList()) {
						if (row.getId() < 0L)
							row.setId(0L);
					}
					if (listOrdersDTO.size() > 0) {
						session.setAttribute("listOrdersDTOReport",
								listOrdersDTO);
					}
				} else
					orderToEdit = orderToClone;
				showOrderDetailPop = "display:block;visibility:visible;";
				return SUCCESS;
			}

			/*-------------------- When user check print item -----------------------------
					Add or remove this element from the orders to print
			 -----------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& okSaveSuccessPopSignal != null
					&& okSaveSuccessPopSignal != 0L) {
				showSaveSuccessPop = "visibility:hidden;display:none;";
				showOrderDetailPop = "visibility:hidden;display:none;";
				return SUCCESS;
			}
		} catch (Exception e) {
			e.printStackTrace();
			return "input";
		}
		return SUCCESS;
	}

	/*
	 * ==========================================================================
	 * =============== fill all fields of order without rows
	 * ====================
	 * =====================================================================
	 */
	public OrdersDTO fillDataOrderDTO(OrdersDTO orderDTO) {
		SimpleDateFormat frm = new SimpleDateFormat("dd/MM/yyyy");
		orderDTO.setClientLastName(clientLastName);
		orderDTO.setClientFirstName(clientFirstName);
		orderDTO.setClientOtherNames(clientOtherNames);
		orderDTO.setClientStreet(clientStreet);
		orderDTO.setClientOtherStreet(clientOtherStreet);
		orderDTO.setClientCity(clientCity);
		orderDTO.setClientProvince(code);
		orderDTO.setClientPostalCode(clientPostalCode);
		orderDTO.setClientPhone(clientPhone);
		orderDTO.setClientEmail(clientEmail);
		orderDTO.setProductOrderNumber(productOrderNumberSearch);
		orderDTO.setCompanyHeader(companyHeader);
		if (((strProductOrderDate) != null)
				&& (!"".equals(strProductOrderDate))) {
			frm = new SimpleDateFormat("dd/MM/yyyy");
			try {
				Date date = frm.parse(strProductOrderDate);
				orderDTO.setProductOrderDate(date);
			} catch (Exception pe) {
				addActionError("Please enter a date in the correct format");
			}
		}

		if (((strCreationOrderDate) != null)
				&& (!"".equals(strCreationOrderDate))) {
			frm = new SimpleDateFormat("dd/MM/yyyy");
			try {
				Date date = frm.parse(strCreationOrderDate);
				orderDTO.setCreationDate(date);
			} catch (Exception pe) {
				addActionError("Please enter a date in the correct format");
			}
		}

		if (((strRequiredDate) != null) && (!"".equals(strRequiredDate))) {
			frm = new SimpleDateFormat("dd/MM/yyyy");
			try {
				Date date = frm.parse(strRequiredDate);
				orderDTO.setRequiredDate(date);
			} catch (Exception pe) {
				addActionError("Please enter a date in the correct format");
			}
		}
		return orderDTO;
	}

	/*
	 * ==========================================================================
	 * =============== initialize ListIndexSet
	 * ==================================
	 * =======================================================
	 */
	public void initalizeListIndexSet(HttpSession session,
			OrdersService orderService) throws ServiceException {
		listIndexSet = new ArrayList<OrdersDTO>();
		totalOrders = orderService.getCountOrders(creationDateStartArg,
				creationDateEndArg, reportDateBetween, userLogin, lsOrderId,
				status,productOrderNumberSearch,clientOrderNumber,clientOther);
		
		String strcount = totalOrders.toString();
		Integer sizeList = Integer.parseInt(strcount) / PAGE_ITEMS_COUNT;
		nextListPages = 1;
		session.setAttribute("nextListPages", nextListPages);
		for (int i = 1; i <= sizeList + 1 && i <= 11; i++) {
			OrdersDTO ord = new OrdersDTO();
			ord.setCssStyle("");
			ord.setIndex(i);
			listIndexSet.add(ord);
		}
		indexSet = 0;
		session.setAttribute("indexSet", indexSet);
		session.setAttribute("totalOrders", totalOrders);
		session.setAttribute("listIndexSet", listIndexSet);
		session.setAttribute("productOrderNumberSearch", productOrderNumberSearch);

	}

	/*
	 * ==========================================================================
	 * =============== initialize listIndexColumn
	 * ================================
	 * =========================================================
	 */
	List<Integer> getNewListIndexColumn() {
		List<Integer> reult = new ArrayList<Integer>();
		for (int i = 0; i <= 34; i++) {
			if (i != 2 && i <= 13) {
				reult.add(i);
				if (i != 0)
					reult.add(-i);
			}
			if (i == 30 || i == 31 || i == 34) {
				reult.add(i);
				reult.add(-i);
			}
		}
		return reult;
	}

	/*
	 * ==========================================================================
	 * =============== getStatus Selected by Admin for searching
	 * ================
	 * =========================================================================
	 */
	public String getStatusSelected(Integer StatusIndex) {
		String result = "";
		switch (StatusIndex) {
		case 0:
			result = "open";
			break;
		case 1:
			result = "progress";
			break;
		case 2:
			result = "shipped";
			break;
		case 3:
			result = "invoiced";
			break;
		case 4:
			result = "canceled";
			break;
		default:
			result = "";
		}
		return result;
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.Argument.bind(Argument.java:35)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.bindArguments(AbstractMethodDeclaration.java:83)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:406)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1147)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1235)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:540)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:883)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:928)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:189)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:255)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:190)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:89)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:728)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:788)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1244)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:102)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)

!ENTRY org.eclipse.jdt.ui 4 2 2015-04-15 11:42:23.198
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:233)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:255)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:190)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:89)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:728)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:788)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1244)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:102)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)
Caused by: java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.Argument.bind(Argument.java:35)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.bindArguments(AbstractMethodDeclaration.java:83)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:406)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1147)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1235)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:540)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:883)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:928)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:189)
	... 16 more
Caused by: java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.Argument.bind(Argument.java:35)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.bindArguments(AbstractMethodDeclaration.java:83)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:406)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1147)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1235)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:540)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:883)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:928)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:189)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:255)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:190)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:89)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:728)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:788)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1244)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:102)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2015-04-15 11:42:23.198
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.Argument.bind(Argument.java:35)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.bindArguments(AbstractMethodDeclaration.java:83)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:406)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1147)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1235)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:540)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:883)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:928)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:189)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:255)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:190)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:89)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:728)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:788)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1244)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:102)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2015-04-15 11:42:23.198
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.Argument.bind(Argument.java:35)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.bindArguments(AbstractMethodDeclaration.java:83)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:406)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1147)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1235)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:540)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:883)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:928)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:189)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:255)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:190)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:89)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:728)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:788)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1244)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:102)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)

!ENTRY org.eclipse.jdt.ui 4 0 2015-04-15 11:42:23.208
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:233)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:255)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:190)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:89)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:728)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:788)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1244)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:102)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)
Caused by: java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.Argument.bind(Argument.java:35)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.bindArguments(AbstractMethodDeclaration.java:83)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:406)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1147)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1235)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:540)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:883)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:928)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:189)
	... 16 more
Caused by: java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.Argument.bind(Argument.java:35)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.bindArguments(AbstractMethodDeclaration.java:83)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:406)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1147)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1235)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:540)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:883)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:928)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:189)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:255)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:190)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:89)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:728)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:788)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1244)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:102)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2015-04-15 11:42:23.208
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.Argument.bind(Argument.java:35)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.bindArguments(AbstractMethodDeclaration.java:83)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:406)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1147)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1235)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:540)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:883)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:928)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:189)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:255)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:190)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:89)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:728)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:788)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1244)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:102)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)

!ENTRY org.eclipse.jdt.core 4 4 2015-04-15 11:42:24.754
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.loyauty.web.struts.action.orders;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.List;

import javax.servlet.http.HttpSession;
import lombok.Getter;
import lombok.Setter;

import com.loyauty.exception.ServiceException;
import com.loyauty.exception.ServiceLocatorException;
import com.loyauty.model.OrdersRows;
import com.loyauty.model.User;
import com.loyauty.service.core.DTOFactory;
import com.loyauty.service.core.dto.BasicUserDTO;
import com.loyauty.service.core.dto.OperationsDTO;
import com.loyauty.service.core.dto.OrdersDTO;
import com.loyauty.service.core.dto.ProvinceDTO;
import com.loyauty.service.core.dto.UserProductPriceDTO;
import com.loyauty.service.core.dto.UserSessionDTO;
import com.loyauty.service.core.dto.UsersPrivilegesDTO;
import com.loyauty.service.operations.OperationsService;
import com.loyauty.service.orders.OrdersService;
import com.loyauty.service.product.ProductService;
import com.loyauty.service.user.UserService;
import com.loyauty.web.struts.action.LoyautyAction;

public class ReportOrders extends LoyautyAction {
	private static final long serialVersionUID = -3811760851445730062L;
	private UserService userService;
	private ProductService productService;
	private OrdersService orderService;
	private OperationsService operationsService;
	@Getter
	@Setter
	private String userLogin;
	@Getter
	@Setter
	private List<User> usersList;
	private static int USER_TYPE = 2;
	@Getter
	@Setter
	List<OrdersDTO> listOrdersDTO;
	@Getter
	@Setter
	List<OrdersDTO> listStatus;
	@Getter
	@Setter
	private String lsOrderId;
	@Getter
	@Setter
	Long poYpop;
	@Getter
	@Setter
	Long poXpop;
	@Getter
	@Setter
	private Long pageTop = 0L;
	@Getter
	@Setter
	private Date creationDate;
	@Getter
	@Setter
	private Long findOrdersSignal;
	private String status;
	@Getter
	@Setter
	private Long sizeResult = 0L;
	@Getter
	@Setter
	private Long sorting;
	@Getter
	@Setter
	private Long sortingOrdersSignal;
	@Getter
	@Setter
	private Integer fieldForSorting;
	@Getter
	@Setter
	private Integer asc;
	@Getter
	@Setter
	private Integer scrollDivRowsLeft;
	@Getter
	@Setter
	private Integer scrollPageLeft;
	@Getter
	@Setter
	private Integer scrollDivRowsTop;
	@Getter
	@Setter
	private String strCreationDateStart;
	@Getter
	@Setter
	private String strCreationDateEnd;
	@Getter
	@Setter
	private Date creationDateStart;
	@Getter
	@Setter
	private Date creationDateEnd;
	private Date creationDateStartArg;
	private Date creationDateEndArg;
	@Getter
	@Setter
	private Integer selectedStatus;
	@Getter
	@Setter
	private Long editOrderSignal;
	@Getter
	@Setter
	private Long cancelSignal;
	@Getter
	@Setter
	private Integer indexOrder;
	@Getter
	@Setter
	private OrdersDTO orderToEdit;
	@Getter
	@Setter
	private String strProductOrderDate;
	@Getter
	@Setter
	private String lsProductID;
	@Getter
	@Setter
	Integer indexRow;
	@Getter
	@Setter
	private String showOrderDetailPop;
	@Getter
	@Setter
	private Long userId;
	@Getter
	@Setter
	private Long checkProductPriceSignal;
	@Getter
	@Setter
	private Long saveTemporaryRowSignal;
	@Getter
	@Setter
	private Long addSimilarRowSignal;
	@Getter
	@Setter
	private Long deleteRowSignal;
	@Getter
	@Setter
	private Long saveOrdersSignal;
	@Getter
	@Setter
	private Boolean checkBoxPrint;

	// recovery Data Order
	@Getter
	@Setter
	private String clientLastName;
	@Getter
	@Setter
	private String clientFirstName;
	@Getter
	@Setter
	private String clientOtherNames;
	@Getter
	@Setter
	private String clientStreet;
	@Getter
	@Setter
	private String clientOtherStreet;
	@Getter
	@Setter
	private String clientCity;
	@Getter
	@Setter
	private String clientProvince;
	@Getter
	@Setter
	private String clientPostalCode;
	@Getter
	@Setter
	private String clientPhone;
	@Getter
	@Setter
	private String clientEmail;
//	@Getter
//	@Setter
//	private String productOrderNumber;
	@Getter
	@Setter
	private String strRequiredDate;

	// recovery data row
	@Getter
	@Setter
	private Double quantity;
	@Getter
	@Setter
	private String notes;
	@Getter
	@Setter
	private Double quantityToChange;
	@Getter
	@Setter
	private Double stock;
	@Getter
	@Setter
	private String productDescription;
	@Getter
	@Setter
	private Double unitPrice;
	@Getter
	@Setter
	private Double shippingFee;
	@Getter
	@Setter
	private String shippingCompany;
	@Getter
	@Setter
	private String companyHeader;

	@Getter
	@Setter
	private Long quantityToChangeSignal;
	@Getter
	@Setter
	private Long duplicateOrderSignal;
	@Getter
	@Setter
	private String strCreationDate;
	@Getter
	@Setter
	private String strCreationOrderDate;
	@Getter
	@Setter
	private User usr;
	@Getter
	@Setter
	private String showSaveSuccessPop;
	// showSaveSuccessPop="display:block;visibility:visible;";
	// showSaveSuccessPop="visibility:hidden;display:none;";
	@Getter
	@Setter
	private String message;
	@Getter
	@Setter
	private Long okSaveSuccessPopSignal;
	@Getter
	@Setter
	private Long showRowShipping;
	@Getter
	@Setter
	private Long showOnlyEditNote;
	@Getter
	@Setter
	private Long saveShippingSignal;
	@Getter
	@Setter
	private Long saveOnlyNoteSignal;
	@Getter
	@Setter
	private String code;
	@Getter
	@Setter
	private Long cityId;
	@Getter
	@Setter
	private List<ProvinceDTO> listProvinces;
	private Hashtable<String, ProvinceDTO> hashProvinces;
	@Getter
	@Setter
	private Boolean orderNotSavedAtFirst;
	@Getter
	@Setter
	private String strShippedDate;
	@Getter
	@Setter
	private String strShippingPrice;
	@Getter
	@Setter
	private String showConfirmDeleteOrderPop;
	@Getter
	@Setter
	private Long deleteOrderSignal;
	@Getter
	@Setter
	private Long confirmDeleteSignal;
	@Getter
	@Setter
	private UsersPrivilegesDTO userPrivileges;
	@Getter
	@Setter
	private UsersPrivilegesDTO usersPrivShippedToInvoiced;
	@Getter
	@Setter
	private UsersPrivilegesDTO usersPrivChangeShippedStatus;
	@Getter
	@Setter
	private HashMap<Integer, String> hashStatus;
	@Getter
	@Setter
	private Long statusId;
	@Getter
	@Setter
	private String strPrint;
	@Getter
	@Setter
	private Integer testSignal;
	@Getter
	@Setter
	private String newStatus;
	Long invoicedOrdersRefresh;
	@Getter
	@Setter
	private Integer reportDateBetween;
	@Getter
	@Setter
	private Long dateBetweenSignal;
	@Getter
	@Setter
	private Long selectAllOrdersSignal;
	@Getter
	@Setter
	private Boolean checkBoxItem;
	// ------Pagination
	@Getter
	@Setter
	Long pageIndexSignal;
	@Getter
	@Setter
	Long prevListPagesSignal;
	@Getter
	@Setter
	Long nextListPagesSignal;
	@Getter
	@Setter
	Long totalOrders;
	@Getter
	@Setter
	Integer nextListPages;
	@Getter
	@Setter
	Integer prevListPages;
	@Getter
	@Setter
	Integer indexSet = 0;
	@Getter
	@Setter
	Integer indexList;
	@Getter
	@Setter
	List<OrdersDTO> listIndexSet;
	@Getter
	@Setter
	Integer PAGE_ITEMS_COUNT = 100;
	
	//New Added Field in the search option as toggle functionality
	@Getter
	@Setter
	private String productOrderNumberSearch;
	@Getter
	@Setter
	private String trakingNumber;
	@Getter
	@Setter
	private String  clientOther;
	@Getter	@Setter
	private String	 clientOrderNumber;
	
	@Getter	@Setter
	private Integer switchBetweenClientLoginAndPoNumberSignal;
	@Getter	@Setter
	private Integer switchBetweenClientLoginAndPoNumber;
	//New Added Field in the search option as toggle functionality
	@Getter	@Setter
	private Integer switchBetweenLsOrderAndClientOrderIdSignal;
	@Getter	@Setter
	private Integer switchBetweenLsOrderAndClientOrderId;
	@Getter	@Setter
	private Integer switchBetweenStatusAndClientOtherSignal;
	@Getter	@Setter
	private Integer switchBetweenStatusAndClientOther;
	//Added for the multiple functionality in switching  
	@Getter	@Setter
	private Integer switchBetweenOptionFieldsSignal;
	@Getter	@Setter
	private Integer switchBetweenOptionFields;
	
	switchBetweenOptionFieldsSignal

	// ------Pagination

	/*
	 * ==========================================================================
	 * =============== Default constructor
	 * ======================================
	 * ===================================================
	 */
	public ReportOrders() throws ServiceLocatorException {
		super();
		userService = getServiceLocator().getUserService();
		orderService = getServiceLocator().getOrderService();
		productService = getServiceLocator().getProductService();
		operationsService = getServiceLocator().getOperationsService();
	}

	/*
	 * ==========================================================================
	 * =============== method execute
	 * ============================================
	 * =============================================
	 */
	@SuppressWarnings({ "rawtypes", "unchecked" })
	@Override
	public String execute() throws Exception {
		System.out.println("Product Order Number: "+ productOrderNumberSearch);
		System.out.println("Tracking Number: "+ trakingNumber);
		System.out.println("Client Order ID: "+ clientOrderNumber);
		System.out.println("Client Other ID: "+ clientOther);
		
		//Create new object or Order to modify the search functionality
		OrdersDTO orderDTOObj=new OrdersDTO();
		orderDTOObj.setLsOrderId(lsOrderId);
		orderDTOObj.setUserLogin(userLogin);
		orderDTOObj.setStatus(status);
		orderDTOObj.setProductOrderNumber(productOrderNumberSearch);
		orderDTOObj.setClientOrderNumber(clientOrderNumber);
		orderDTOObj.setClientOtherId(clientOther);
		
		HttpSession session = request.getSession(true);

		if (showOrderDetailPop == null)
			showOrderDetailPop = "visibility:hidden;display:none;";
		if (showConfirmDeleteOrderPop == null)
			showConfirmDeleteOrderPop = "visibility:hidden;display:none;";
		if (showSaveSuccessPop == null)
			showSaveSuccessPop = "visibility:hidden;display:none;";
		if (poYpop == null)
			poYpop = 100L;
		if (poXpop == null)
			poXpop = 100L;
		Hashtable<String, OrdersDTO> hashOrders;
		if (selectedStatus == null)
			selectedStatus = -1;
		sizeResult = (Long) session.getAttribute("sizeResult");
		totalOrders = (Long) session.getAttribute("totalOrders");
		if (totalOrders == null)
			totalOrders = 0L;
		asc = (Integer) session.getAttribute("asc");
		if (asc == null)
			asc = 0;
		if (sizeResult == null)
			sizeResult = 0L;
		if (indexOrder == null)
			indexOrder = 0;
		userPrivileges = (UsersPrivilegesDTO) session.getAttribute("userPrivileges");
		usersPrivShippedToInvoiced = (UsersPrivilegesDTO) session.getAttribute("usersPrivShippedToInvoiced");
		usersPrivChangeShippedStatus = (UsersPrivilegesDTO) session
				.getAttribute("usersPrivChangeShippedStatus");
		hashStatus = (HashMap<Integer, String>) session
				.getAttribute("hashStatus");
		if (hashStatus == null) {
			hashStatus = new HashMap<Integer, String>();
			hashStatus.put(0, "");
			hashStatus.put(1, "open");
			hashStatus.put(2, "progress");
		}
		List<Integer> listIndexColumn = new ArrayList<Integer>();
		// fill list status
		listStatus = (ArrayList<OrdersDTO>) session.getAttribute("listStatus");
		if (listStatus == null) {
			listStatus = new ArrayList<OrdersDTO>();
			OrdersDTO orderDTOOpen = new OrdersDTO();
			orderDTOOpen.setStatus("open");
			orderDTOOpen.setId(0L);
			listStatus.add(orderDTOOpen);
			OrdersDTO orderDTOProgress = new OrdersDTO();
			orderDTOProgress.setStatus("progress");
			orderDTOProgress.setId(1L);
			listStatus.add(orderDTOProgress);
			if (usersPrivChangeShippedStatus != null) {
				OrdersDTO orderDTOShipped = new OrdersDTO();
				orderDTOShipped.setStatus("shipped");
				orderDTOShipped.setId(2L);
				listStatus.add(orderDTOShipped);
			}

		}

		try {

			/*-------------------- recovery users list -----------------------------------
							Recovery users list in session
			 -----------------------------------------------------------------------------*/
			// recovery provinces
			listProvinces = (List<ProvinceDTO>) session
					.getAttribute("listProvinces");
			if (listProvinces == null)
				listProvinces = productService.getAllProvinces();
			orderNotSavedAtFirst = (Boolean) session
					.getAttribute("listNotSavedAtFirst");
			BasicUserDTO basicUserDTO = new BasicUserDTO();
			basicUserDTO.setTypeId(USER_TYPE);
			List<User> usersListSession = (List<User>) session
					.getAttribute("usersListSession");
			if (usersListSession == null) {
				List<UserSessionDTO> listAllUsers = userService
						.getAllUsers(basicUserDTO);
				usersList = new ArrayList<User>();
				for (UserSessionDTO userDTO : listAllUsers) {
					User user = new User();
					user.setId(userDTO.getId());
					user.setLogin(userDTO.getLogin());
					usersList.add(user);
				}
				session.setAttribute("usersListSession", usersList);
			} else{
				usersList = usersListSession;
			}
			
			listOrdersDTO = (ArrayList<OrdersDTO>) session.getAttribute("listOrdersDTOReport");
			
			reportDateBetween = (Integer) session.getAttribute("reportDateBetween");
			if (reportDateBetween == null) {
				reportDateBetween = 0;
				session.setAttribute("reportDateBetween", reportDateBetween);
			}

			//Added for the new field
			switchBetweenClientLoginAndPoNumber = (Integer) session.getAttribute("switchBetweenClientLoginAndPoNumber");
			if (switchBetweenClientLoginAndPoNumber == null) {
				switchBetweenClientLoginAndPoNumber = 0;
				session.setAttribute("switchBetweenClientLoginAndPoNumber", switchBetweenClientLoginAndPoNumber);
			}
			switchBetweenLsOrderAndClientOrderId = (Integer) session.getAttribute("switchBetweenLsOrderAndClientOrderId");
			if (switchBetweenLsOrderAndClientOrderId == null) {
				switchBetweenLsOrderAndClientOrderId = 0;
				session.setAttribute("switchBetweenLsOrderAndClientOrderId", switchBetweenLsOrderAndClientOrderId);
			}
			switchBetweenStatusAndClientOther = (Integer) session.getAttribute("switchBetweenStatusAndClientOther");
			if (switchBetweenStatusAndClientOther == null) {
				switchBetweenStatusAndClientOther = 0;
				session.setAttribute("switchBetweenStatusAndClientOther", switchBetweenStatusAndClientOther);
			}

			/*------ always check if the Admin select all orders ------------
					if The Admin select all orders change checkBoxItem value 
			  ---------------------------------------------------------------*/
			if (selectAllOrdersSignal != null && selectAllOrdersSignal != 0L) {
				if (checkBoxItem != null) {
					session.setAttribute("checkBoxItem", checkBoxItem);
					session.setAttribute("allOrdersSelectedSignal", 0L);
					if (checkBoxItem)
						session.setAttribute("allOrdersSelectedSignal", 1L);
				}
			}
			checkBoxItem = (Boolean) session.getAttribute("checkBoxItem");
			if (checkBoxItem == null)
				checkBoxItem = false;
			/*------ always recovery creationDate from strCreationDate ------
						always keep the user search options
			  ---------------------------------------------------------------*/
			creationDateStart = null;
			SimpleDateFormat frm = new SimpleDateFormat("dd/MM/yyyy");
			if (((strCreationDateStart) != null)
					&& (!"".equals(strCreationDateStart))) {
				try {
					Date date = frm.parse(strCreationDateStart);
					creationDateStart = date;
					creationDateStartArg = date;
				} catch (Exception pe) {
					creationDateStart = null;
					addActionError("Please enter a date in the correct format");
				}
			}
			if (creationDateStart == null) {
				Date date = frm.parse("01/01/1900");
				creationDateStartArg = date;
			}
			creationDateEnd = null;
			if (((strCreationDateEnd) != null)
					&& (!"".equals(strCreationDateEnd))) {
				frm = new SimpleDateFormat("dd/MM/yyyy");
				try {
					Date date = frm.parse(strCreationDateEnd);
					creationDateEnd = date;
					creationDateEndArg = date;
				} catch (Exception pe) {
					creationDateEnd = null;
					addActionError("Please enter a date in the correct format");
				}
			}
			if (creationDateEnd == null) {
				creationDateEndArg = new Date();
			}

			/*------ always recovery Status from selectedStatus key ------
						always keep the status search options
			  ---------------------------------------------------------------*/
			status = getStatusSelected(selectedStatus);

			/*----------- always initialized listPages if not done ----------
				   		    and check if is there next listPages
			  ---------------------------------------------------------------*/
			nextListPages = (Integer) session.getAttribute("nextListPages");
			if (nextListPages == null)
				nextListPages = 0;
			if (indexSet == null || indexSet == -1) {
				indexSet = (Integer) session.getAttribute("indexSet");
				if (indexSet == null)
					indexSet = 0;
			}
			listIndexSet = (List<OrdersDTO>) session
					.getAttribute("listIndexSet");
			if (listIndexSet == null)
				initalizeListIndexSet(session, orderService);

			/*----------------- When Admin Click on the pageIndex ----------------------------------
										catch  page index
			 ---------------------------------------------------------------------------------------*/
			//Toggle Switch between PO Date and Shipping date
			if (dateBetweenSignal != null && dateBetweenSignal != 0L) {
				reportDateBetween = ((reportDateBetween == null || reportDateBetween == 0) ? 1: 0);
				listOrdersDTO = new ArrayList<OrdersDTO>();
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				session.setAttribute("reportDateBetween", reportDateBetween);
				return SUCCESS;
			}
		
			//Toggle Switch between Client Login and PO Number	
//			switchBetweenClientLoginAndPoNumber=(Integer)session.getAttribute("switchBetweenClientLoginAndPoNumber");
			
			if (switchBetweenClientLoginAndPoNumberSignal != null && switchBetweenClientLoginAndPoNumberSignal != 0L) {
				switchBetweenClientLoginAndPoNumber = ((switchBetweenClientLoginAndPoNumber == null 
						|| switchBetweenClientLoginAndPoNumber == 0) ? 1: 0);
				listOrdersDTO = new ArrayList<OrdersDTO>();
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				session.setAttribute("switchBetweenClientLoginAndPoNumber", switchBetweenClientLoginAndPoNumber);
				return SUCCESS;
			}
			
			//Switching between "ls_Order" and "Client Order Id"	
//			switchBetweenLsOrderAndClientOrderId = (Integer)session.getAttribute("switchBetweenLsOrderAndClientOrderId");
			
			if (switchBetweenLsOrderAndClientOrderIdSignal != null && switchBetweenLsOrderAndClientOrderIdSignal != 0L) {
				switchBetweenLsOrderAndClientOrderId = ((switchBetweenLsOrderAndClientOrderId == null 
						|| switchBetweenLsOrderAndClientOrderId == 0) ? 1: 0);
				listOrdersDTO = new ArrayList<OrdersDTO>();
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				session.setAttribute("switchBetweenLsOrderAndClientOrderId", switchBetweenLsOrderAndClientOrderId);
				return SUCCESS;
			}
			
			//Switching between "Status" and "Client Other Id"
//			switchBetweenStatusAndClientOther = (Integer)session.getAttribute("switchBetweenStatusAndClientOther");
			
			if (switchBetweenStatusAndClientOtherSignal != null && switchBetweenStatusAndClientOtherSignal != 0L) {
				switchBetweenStatusAndClientOther = ((switchBetweenStatusAndClientOther == null 
						|| switchBetweenStatusAndClientOther == 0) ? 1: 0);
				listOrdersDTO = new ArrayList<OrdersDTO>();
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				session.setAttribute("switchBetweenStatusAndClientOther", switchBetweenStatusAndClientOther);
				return SUCCESS;
			}
			
			if (switchBetweenOptionFieldsSignal != null && switchBetweenOptionFields != 0L) {
				switchBetweenOptionFields++;
				if (switchBetweenOptionFields == 4) switchBetweenOptionFields = 0;
				
			}
			

			
			
			/*----------------- When Admin Click on the pageIndex ----------------------------------
										catch  page index
			 ---------------------------------------------------------------------------------------*/
			if (pageIndexSignal != null && pageIndexSignal != 0L) {
				OrdersDTO orderDTO = (OrdersDTO) session.getAttribute("orderPageSelected");
				if (orderDTO != null)
					orderDTO.setCssStyle("");
				OrdersDTO orderPageSelected = listIndexSet.get(indexList);
				orderPageSelected
						.setCssStyle("background-color:#FFFF99;border:1px solid #CCCCCC;");
				indexSet = orderPageSelected.getIndex() - 1;
				indexSet = indexSet * PAGE_ITEMS_COUNT;
				session.setAttribute("indexSet", indexSet);
				session.setAttribute("listIndexSet", listIndexSet);
				session.setAttribute("orderPageSelected", orderPageSelected);
			}

			/*----------------- When Admin Click on the nextListPages ------------------------------
						recreate listIndexSet started with index>index+10 and indexSet>indexSet+10
			 ---------------------------------------------------------------------------------------*/
			if (nextListPagesSignal != null && nextListPagesSignal != 0L
					&& listIndexSet.size() > 0) {
				OrdersDTO orderDTOPrevious = (OrdersDTO) session
						.getAttribute("orderPageSelected");
				if (orderDTOPrevious != null)
					orderDTOPrevious.setCssStyle("");
				OrdersDTO orderDTO = listIndexSet.get(listIndexSet.size() - 1);
				if (orderDTO != null)
					nextListPages = orderDTO.getIndex() + 1;
				
				Long totalOrders = orderService.getCountOrders(creationDateStartArg,
						creationDateEndArg, reportDateBetween, userLogin, lsOrderId,
						status,productOrderNumberSearch,clientOrderNumber,clientOther);
				
				String strcount = totalOrders.toString();
				Integer sizeList = Integer.parseInt(strcount)
						/ PAGE_ITEMS_COUNT;
				if (nextListPages <= sizeList + 1) {
					listIndexSet = new ArrayList<OrdersDTO>();
					for (int i = nextListPages; i <= sizeList + 1
							&& i <= nextListPages + 10; i++) {
						OrdersDTO ord = new OrdersDTO();
						ord.setCssStyle("");
						ord.setIndex(i);
						listIndexSet.add(ord);
					}
					if (nextListPages <= sizeList + 1) {
						indexSet = nextListPages - 1;
						OrdersDTO orderPageSelected = listIndexSet.get(0);
						orderPageSelected
								.setCssStyle("background-color:#FFFF99;border:1px solid #CCCCCC;");
						indexSet = indexSet * PAGE_ITEMS_COUNT;
						session.setAttribute("indexSet", indexSet);
						session.setAttribute("nextListPages", nextListPages);
						session.setAttribute("listIndexSet", listIndexSet);
						session.setAttribute("orderPageSelected",
								orderPageSelected);
					}
				}
			}

			/*----------------- When Admin Click on the previousListPages --------------------------
					recreate listIndexSet started with index< index-10 and indexSet<indexSet-10
			 ---------------------------------------------------------------------------------------*/
			if (prevListPagesSignal != null && prevListPagesSignal != 0L
					&& listIndexSet.size() > 0) {
				OrdersDTO orderDTOPrevious = (OrdersDTO) session
						.getAttribute("orderPageSelected");
				if (orderDTOPrevious != null)
					orderDTOPrevious.setCssStyle("");
				nextListPages = (Integer) session.getAttribute("nextListPages");
				if (nextListPages != null && nextListPages >= 11) {
					prevListPages = nextListPages - 11;
					listIndexSet = new ArrayList<OrdersDTO>();
					for (int i = prevListPages; i < nextListPages; i++) {
						OrdersDTO ord = new OrdersDTO();
						ord.setCssStyle("");
						ord.setIndex(i);
						listIndexSet.add(ord);
					}
					indexSet = prevListPages - 1;
					OrdersDTO orderPageSelected = listIndexSet.get(0);
					orderPageSelected
							.setCssStyle("background-color:#FFFF99;border:1px solid #CCCCCC;");
					indexSet = indexSet * PAGE_ITEMS_COUNT;
					nextListPages = prevListPages;
					session.setAttribute("nextListPages", nextListPages);
					session.setAttribute("indexSet", indexSet);
					session.setAttribute("listIndexSet", listIndexSet);
					session.setAttribute("orderPageSelected", orderPageSelected);
				}
			}

			/*----------------- When Admin change province -----------------------------------------
								Check a list off this province
			 ---------------------------------------------------------------------------------------*/
			hashProvinces = (Hashtable<String, ProvinceDTO>) session
					.getAttribute("hashProvinces");
			if (hashProvinces == null) {
				listProvinces = productService.getAllProvinces();
				Hashtable<String, ProvinceDTO> hashProvinces = new Hashtable<String, ProvinceDTO>();
				for (ProvinceDTO prov : listProvinces) {
					hashProvinces.put(prov.getCode(), prov);
				}
				session.setAttribute("hashProvinces", hashProvinces);
			}
			if (code != null && !code.equals("") && listOrdersDTO != null) {
				ProvinceDTO provinceDTO = hashProvinces.get(code);
				if (provinceDTO != null) {
					clientProvince = provinceDTO.getCode();
				}
			}// else listCities=new ArrayList<CityDTO>();
			if (listOrdersDTO != null && indexOrder != -1) {
				orderToEdit = listOrdersDTO.get(indexOrder);
				if (orderToEdit != null) {
					orderToEdit.setClientProvince(code);
					session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				}
			}

			/*------------------------------- Refresh listOrdersDTO------------------------------------
						Refresh listOrders before generation of invoiced orders XLS file 
				 ------------------------------------------------------------------------------------------*/
			invoicedOrdersRefresh = (Long) session
					.getAttribute("invoicedOrdersRefresh");
			if (invoicedOrdersRefresh != null && invoicedOrdersRefresh != 0L) {
				listIndexColumn = (ArrayList<Integer>) session
						.getAttribute("listIndexColumn");
				if (listIndexColumn == null)
					listIndexColumn = getNewListIndexColumn();
				lsOrderId = lsOrderId.toUpperCase();
				
				//New Searching Functionality
				listOrdersDTO = orderService.searchOrdersWithOptionsAndSorting(
						creationDateStartArg, creationDateEndArg,
						reportDateBetween,orderDTOObj,listIndexColumn, PAGE_ITEMS_COUNT, indexSet);
				//Old Searching Functionality				
//				listOrdersDTO = orderService.searchOrdersWithOptionsAndSorting(
//						creationDateStartArg, creationDateEndArg,
//						reportDateBetween, userLogin, lsOrderId, status,
//						listIndexColumn, PAGE_ITEMS_COUNT, indexSet);
				
				if (findOrdersSignal != null && findOrdersSignal != 0L)
					initalizeListIndexSet(session, orderService);
				// Color in RED rows containing a GroupItems
				for (OrdersDTO orderDTO : listOrdersDTO) {
					if (orderDTO != null && orderDTO.getStatus() != null
							&& orderDTO.getStatus().equals("shipped")) {
						Long count = productService.isGroupProductID(orderDTO
								.getProductId());
						if (count != null && count >= 1) {
							orderDTO.setCssStyle("background-color: rgb(248,150,140); border-right:1px solid #CCCCCC;border-left:1px solid #CCCCCC;border-top:1px solid #CCCCCC;");
						}
					}
				}

				// keep search parameters to use in other
				// classes(PrintOrdersToPDF, ...)
				indexSet = 0;
				session.setAttribute("indexSet", indexSet);
				nextListPages = 0;
				session.setAttribute("nextListPages", nextListPages);
				session.setAttribute("selectedStatus", selectedStatus);
				session.setAttribute("creationDateStartArg",creationDateStartArg);
				session.setAttribute("creationDateEndArg", creationDateEndArg);
				session.setAttribute("reportDateBetween", reportDateBetween);
				session.setAttribute("lsOrderId", lsOrderId);
				session.setAttribute("userLogin", userLogin);
				session.setAttribute("status", status);
				session.setAttribute("listIndexColumn", listIndexColumn);
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				session.setAttribute("invoicedOrdersRefresh", 0L);
				
				session.setAttribute("productOrderNumberSearch", productOrderNumberSearch);
				session.setAttribute("clientOrderNumber", clientOrderNumber);
				session.setAttribute("clientOther", clientOther);
				return SUCCESS;
			}

			/*------------ When Admin click on the Button "Delete Order" in The OrderDtailPop --------------
								show other pop to confirm Order Delete
			  ----------------------------------------------------------------------------------------------*/
			if (deleteOrderSignal != null && deleteOrderSignal != 0L) {
				message = "Attention! if you click on \"Delete Order\" you can not restore it.";
				orderToEdit = listOrdersDTO.get(indexOrder);
				if (confirmDeleteSignal != null && confirmDeleteSignal == 0L) { // Delete
																				// Order
																				// Request
					showOrderDetailPop = "display:block;visibility:visible;";
					showConfirmDeleteOrderPop = "display:block;visibility:visible;";
				} else if (confirmDeleteSignal == 1L) { // Delete Order
														// Confirmed
					orderService.deleteOrderByLsOrderId(orderToEdit);
					// Save this operation in table operation
					OperationsDTO operationDTO = new OperationsDTO();
					User userAdmin = (User) session.getAttribute("userAdmin");
					if (userAdmin != null)
						operationDTO.setUserId(userAdmin.getId());
					operationDTO.setOperationDate(new Date());
					operationDTO.setOperationType("Delete Order");
					String dataBefore = "[PARTNER NAME:"
							+ orderToEdit.getUserLogin() + "];";
					dataBefore += " [LS_ORDER_ID:" + orderToEdit.getLsOrderId()
							+ "];";
					dataBefore += " [PRODUCT_ORDER_NUMBER:"
							+ orderToEdit.getProductOrderNumber() + "];";
					dataBefore += " [CLIENT_FIRST_NAME:"
							+ orderToEdit.getClientFirstName() + "];";
					dataBefore += " [CLIENT_LAST_NAME:"
							+ orderToEdit.getClientLastName() + "];";
					dataBefore += " [CLIENT_POSTAL_CODE:"
							+ orderToEdit.getClientPostalCode() + "];";
					dataBefore += " [LS_PRODUCT_ID:"
							+ orderToEdit.getLsProductID() + "];";
					dataBefore += " [UNIT_PRICE:" + orderToEdit.getUnitPrice()
							+ "];";
					dataBefore += " [STATUS:" + orderToEdit.getStatus() + "];";
					operationDTO.setDataBefore(dataBefore);
					operationDTO.setDataBefore(operationDTO.getDataBefore());
					operationDTO.setDataAfter("");
					operationsService.insertOperation(operationDTO);
					// Remove order from the list orders
					listOrdersDTO.remove(orderToEdit);
					session.setAttribute("listOrdersDTOReport", listOrdersDTO);
					showOrderDetailPop = "visibility:hidden;display:none;";
					showConfirmDeleteOrderPop = "visibility:hidden;display:none;";
					// initialize index orders
					int indexOrder = 0;
					int indexRow = 0;
					for (OrdersDTO orderDTO : listOrdersDTO) {
						orderDTO.setIndex(indexOrder);
						indexOrder++;
						indexRow = 0;
						for (OrdersRows orderRows : orderDTO.getRowsList()) {
							orderRows.setIndex(indexRow);
							indexRow++;
						}
					}
					session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				} else { // Cancel Order Delete
					showOrderDetailPop = "display:block;visibility:visible;";
					showConfirmDeleteOrderPop = "visibility:hidden;display:none;";
				}
				return SUCCESS;
			}

			/*------ When Admin click the "Edit link" in the Order Table for Edit NOTE -----
							show only field Edit Note
			  ------------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& showOnlyEditNote != null && showOnlyEditNote != 0L) {
				orderToEdit = listOrdersDTO.get(indexOrder);
				for (OrdersDTO order : listOrdersDTO) {
					order.setShowOnlyEditNote(0L);
					order.setCssRow("");
				}
				orderToEdit.setShowOnlyEditNote(1L);
				orderToEdit.setCssRow("background-color:#FF9966;");
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				listOrdersDTO = (ArrayList<OrdersDTO>) session
						.getAttribute("listOrdersDTOReport");
				return SUCCESS;
			}

			/*------------ When Admin click on link "Save Edit Note in the Orders Table" ----------
													save Only  notes
			  -------------------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& saveOnlyNoteSignal != null && saveOnlyNoteSignal != 0L) {
				if (indexOrder != null) {
					orderToEdit = listOrdersDTO.get(indexOrder);
					if (orderToEdit != null) {
						orderToEdit.setNotes(notes);
						orderToEdit.setShowRowShipping(0L);
						orderToEdit.setShowOnlyEditNote(0L);
						orderToEdit.setCssRow("");
						// Save Note
						Boolean sucess = orderService
								.updateShippingOrderElements(orderToEdit);
						session.setAttribute("listOrdersDTOReport",
								listOrdersDTO);
					}
				}
				return SUCCESS;
			}

			/*------------ When Admin click the "Edit link" in the Order Table -------------
								show fields to edit shipping parameters
			  ------------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& showRowShipping != null && showRowShipping != 0L) {

				orderToEdit = listOrdersDTO.get(indexOrder);
				for (OrdersDTO order : listOrdersDTO) {
					order.setShowRowShipping(0L);
					order.setCssRow("");
				}
				// only Admins who has Active = true of action name='All' can
				// change shipping settings
				// of orders shipped or invoiced
				if (usersPrivChangeShippedStatus == null
						&& orderToEdit.getStatus() != null
						&& (orderToEdit.getStatus().equals("shipped") || orderToEdit
								.getStatus().equals("invoiced"))) {
					showRowShipping = 0L;
					return SUCCESS;
				}

				if (orderToEdit != null) {
					orderToEdit.setShowRowShipping(1L);
					orderToEdit.setShowOnlyEditNote(1L);
					orderToEdit.setCssRow("background-color:#FF9966;");
					session.setAttribute("listOrdersDTOReport", listOrdersDTO);
					listOrdersDTO = (ArrayList<OrdersDTO>) session
							.getAttribute("listOrdersDTOReport");
				}
				if (orderToEdit.getStatus().equals("open")) {
					statusId = 0L;
				} else if (orderToEdit.getStatus().equals("progress")) {
					statusId = 1L;
				} else if (orderToEdit.getStatus().equals("shipped")) {
					statusId = 2L;
				} else if (orderToEdit.getStatus().equals("invoiced")) {
					statusId = 3L;
				} else if (orderToEdit.getStatus().equals("canceled")) {
					statusId = 4L;
				}
				return SUCCESS;
			}

			/*------------ When Admin click on link "Save in the Orders Table" ----------
							save all shipping parameters and notes
			 ----------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& saveShippingSignal != null && saveShippingSignal != 0L) {
				if (indexOrder != null) {
					orderToEdit = listOrdersDTO.get(indexOrder);
					if (orderToEdit != null) {
						Date shippedDateToEdit = null;
						frm = new SimpleDateFormat("dd/MM/yyyy");
						if (((strShippedDate) != null)
								&& (!"".equals(strShippedDate))) {
							strShippedDate = strShippedDate.replaceAll(" ", "");
							try {
								Date date = frm.parse(strShippedDate);
								shippedDateToEdit = date;
							} catch (Exception pe) {
								shippedDateToEdit = null;
							}
						}
						if (((strShippedDate) != null)
								&& (!"".equals(strShippedDate))
								&& strShippedDate.length() <= 8)
							shippedDateToEdit = orderToEdit.getShippedDate();
						Double shippingPrice = null;
						// Double currencyShippingPrice=null;
						if (strShippingPrice != null
								&& !strShippingPrice.equals("")) {
							strShippingPrice = strShippingPrice.replaceAll(" ",
									"");
							int index = strShippingPrice.indexOf(",");
							if (index >= 0) {
								String strUnitPrice1 = strShippingPrice
										.substring(0, index);
								String strUnitPrice2 = strShippingPrice
										.substring(index + 1,
												strShippingPrice.length());
								strShippingPrice = strUnitPrice1 + "."
										+ strUnitPrice2;
							}

							try {
								shippingPrice = Double
										.parseDouble(strShippingPrice);
								/*
								 * if(shippingPrice!=null &&
								 * orderToEdit.getCurrencyId()!=null &&
								 * orderToEdit.getCurrencyId()!=1 &&
								 * orderToEdit.getCurrencyRate()!=null) {
								 * currencyShippingPrice = shippingPrice *
								 * orderToEdit.getCurrencyRate();
								 * currencyShippingPrice = (double)
								 * Math.round(currencyShippingPrice*100)/100; }
								 */
							} catch (Exception pe) {
								shippingPrice = null;
							}
						}

						if (trakingNumber != null)
							trakingNumber = trakingNumber.replaceAll(
									"^ +| +$|( )+", "$1");
						if (shippingCompany != null)
							shippingCompany = shippingCompany.replaceAll(
									"^ +| +$|( )+", "$1");
						orderToEdit.setShippingPrice(shippingPrice);
						// orderToEdit.setCurrencyShippingPrice(currencyShippingPrice);
						// orderToEdit.getRowsList().get(0).setCurrencyShippingPrice(currencyShippingPrice);
						orderToEdit.setShippedDate(shippedDateToEdit);
						orderToEdit.setNotes(notes);
						if (newStatus != null && !newStatus.equals(""))
							orderToEdit.setStatus(newStatus);
						orderToEdit.setShippingCompany(shippingCompany);
						orderToEdit.setTrackingNumber(trakingNumber);
						orderToEdit.setShowRowShipping(0L);
						orderToEdit.setShowOnlyEditNote(0L);
						OrdersRows row = orderToEdit.getRowsList().get(0);
						row.setShippingPrice(shippingPrice);
						row.setShippingCompany(shippingCompany);
						row.setTrackingNumber(trakingNumber);
						orderToEdit.setCssRow("");

						if (newStatus != null && !newStatus.equals("")) { // if
																			// admin
																			// click
																			// on
																			// the
																			// save
																			// behind
																			// status
							orderService.updateStatusByLsOrderId(
									orderToEdit.getLsOrderId(), newStatus);
							orderToEdit.setStatus(newStatus);
							if (!newStatus.equals("shipped")
									&& !newStatus.equals("invoiced")
									&& !newStatus.equals("canceled")) {
								orderToEdit.setShippingPrice(null);
								orderToEdit.setTrackingNumber(null);
								orderToEdit.setShippedDate(null);
							}

						} else {// if admin click on the save other than Status
							if (orderToEdit.getShippedDate() != null
									&& orderToEdit.getTrackingNumber() != null
									&& !orderToEdit.getTrackingNumber().equals(
											"")
									&& orderToEdit.getShippingCompany() != null
									&& !orderToEdit.getShippingCompany()
											.equals("")
									&& orderToEdit.getShippingPrice() != null
									&& orderToEdit.getStatus() != null) {
								if (orderToEdit.getStatus().equals("open")
										|| orderToEdit.getStatus().equals(
												"progress")) {
									orderService.updateStatusByLsOrderId(
											orderToEdit.getLsOrderId(),
											"shipped");
									orderToEdit.setStatus("shipped");
								}
							} else {
								if (usersPrivChangeShippedStatus != null
										&& !orderToEdit.getStatus().equals(
												"open")
										&& !orderToEdit.getStatus().equals(
												"progress")) {
									orderService.updateStatusByLsOrderId(
											orderToEdit.getLsOrderId(),
											"progress");
									orderToEdit.setStatus("progress");
								}
							}
						}
						// if admin click on the save other then status(save
						// notes, save shipping company ...)
						Boolean sucess = orderService
								.updateShippingOrderElements(orderToEdit);
						session.setAttribute("listOrdersDTOReport",
								listOrdersDTO);
					}
				}
				return SUCCESS;
			}

			/*------------ When Admin click on icon findOrders.png ----------
								check user and complete infos client
			 ----------------------------------------------------------------*/
			if (findOrdersSignal != null
					&& findOrdersSignal != 0L
					|| (pageIndexSignal != null && pageIndexSignal != 0L)
					|| (nextListPagesSignal != null && nextListPagesSignal != 0L)
					|| (prevListPagesSignal != null && prevListPagesSignal != 0L)) {
				// session.setAttribute("allOrdersSelectedSignal",0L);
				// if admin click on search icon initialize checkBoxItem to
				// false
				if (findOrdersSignal != null && findOrdersSignal != 0L) {
					session.setAttribute("allOrdersSelectedSignal", 0L);
					checkBoxItem = false;
					session.setAttribute("checkBoxItem", checkBoxItem);
					indexSet = 0;
					session.setAttribute("indexSet", indexSet);
					nextListPages = 0;
					session.setAttribute("nextListPages", nextListPages);
					session.setAttribute("selectedStatus", selectedStatus);

				}
				// if admin navigate on pages keep the previous sorting
				if (((pageIndexSignal != null && pageIndexSignal != 0L)
						|| (nextListPagesSignal != null && nextListPagesSignal != 0L) || (prevListPagesSignal != null && prevListPagesSignal != 0L))) {
					listIndexColumn = (ArrayList<Integer>) session
							.getAttribute("listIndexColumn");
					if (listIndexColumn == null)
						listIndexColumn = getNewListIndexColumn();
				} else { // prepare new sorting
					listIndexColumn = getNewListIndexColumn();
				}

				lsOrderId = lsOrderId.toUpperCase();
				// if(findOrdersSignal!=null &&
				// findOrdersSignal!=0L)initalizeListIndexSet(session,orderService
				// );
				
				//Old Working Methods
//				listOrdersDTO = orderService.searchOrdersWithOptionsAndSorting(
//						creationDateStartArg, creationDateEndArg,
//						reportDateBetween, userLogin, lsOrderId, status,
//						listIndexColumn, PAGE_ITEMS_COUNT, indexSet);
				
				//New Functionality with same mapping
				listOrdersDTO = orderService.searchOrdersWithOptionsAndSortingNew(
								creationDateStartArg, creationDateEndArg,
								reportDateBetween, userLogin, lsOrderId,
								status, listIndexColumn, PAGE_ITEMS_COUNT,
								indexSet, productOrderNumberSearch,clientOrderNumber,
								clientOther);

//				//New Searching Functionality
//				listOrdersDTO = orderService.searchOrdersWithOptionsAndSorting(
//						creationDateStartArg, creationDateEndArg,
//						reportDateBetween, orderDTOObj, listIndexColumn,
//						PAGE_ITEMS_COUNT, indexSet);
				
				
				// Color in RED rows containing a GroupItems
				for (OrdersDTO orderDTO : listOrdersDTO) {
					if (orderDTO != null && orderDTO.getStatus() != null
							&& orderDTO.getStatus().equals("shipped")) {
						Long count = productService.isGroupProductID(orderDTO
								.getProductId());
						if (count != null && count >= 1) {
							orderDTO.setCssStyle("background-color: rgb(248,150,140); border-right:1px solid #CCCCCC;border-left:1px solid #CCCCCC;border-top:1px solid #CCCCCC;");
						}
					}
				}

				// keep search parameters to use in other
				// classes(PrintOrdersToPDF, ...)
				session.setAttribute("creationDateStartArg",
						creationDateStartArg);
				session.setAttribute("creationDateEndArg", creationDateEndArg);
				session.setAttribute("reportDateBetween", reportDateBetween);
				session.setAttribute("lsOrderId", lsOrderId);
				session.setAttribute("userLogin", userLogin);
				session.setAttribute("status", status);
				//For newly added field
				session.setAttribute("productOrderNumberSearch", productOrderNumberSearch);

				session.setAttribute("listIndexColumn", listIndexColumn);
				session.setAttribute("sizeResult", sizeResult);
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				if (findOrdersSignal != null && findOrdersSignal != 0L)
					initalizeListIndexSet(session, orderService);
				return SUCCESS;
			}

			/*------------ When Admin click on the icon sorting of column ----------
							seach result with option of sorting list
			 -----------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& sortingOrdersSignal != null && sortingOrdersSignal != 0L) {
				listIndexColumn = (List<Integer>) session
						.getAttribute("listIndexColumn");
				asc = (asc == 1 ? -1 : 1);
				int nextElement = listIndexColumn.get(0);
				fieldForSorting = asc * fieldForSorting;
				listIndexColumn.set(0, fieldForSorting);
				for (int i = 1; i < listIndexColumn.size(); i++) {
					int element = listIndexColumn.get(i);
					listIndexColumn.set(i, nextElement);
					nextElement = element;
				}
				
				//New Functionality with same mapping
				listOrdersDTO = orderService.searchOrdersWithOptionsAndSortingNew(
								creationDateStartArg, creationDateEndArg,
								reportDateBetween, userLogin, lsOrderId,
								status, listIndexColumn, PAGE_ITEMS_COUNT,
								indexSet, productOrderNumberSearch,clientOrderNumber,
								clientOther);
				
//				listOrdersDTO = orderService.searchOrdersWithOptionsAndSorting(
//						creationDateStartArg, creationDateEndArg,
//						reportDateBetween, userLogin, lsOrderId, status,
//						listIndexColumn, PAGE_ITEMS_COUNT, indexSet);
				
//				// New Searching Functionality
//				listOrdersDTO = orderService.searchOrdersWithOptionsAndSorting(
//						creationDateStartArg, creationDateEndArg,
//						reportDateBetween, orderDTOObj, listIndexColumn,
//						PAGE_ITEMS_COUNT, indexSet);
				
				int balance = 0;
				int OrderIndex = 0;
				for (OrdersDTO orDTO : listOrdersDTO) {
					balance = (balance == 1 ? 0 : 1);
					if (balance == 1) {
						orDTO.setCssStyle("background-color: rgb(245,249,252);border-right: 1px solid #CCCCCC;border-left:1px solid #CCCCCC;border-top:  1px solid #CCCCCC;");
					} else {
						orDTO.setCssStyle("background-color: color:white;border-right:1px solid #CCCCCC;border-left:1px solid #CCCCCC;border-top:1px solid #CCCCCC;");
					}
					orDTO.setIndex(OrderIndex);
					OrderIndex++;
				}
				session.setAttribute("listIndexColumn", listIndexColumn);
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				session.setAttribute("asc", asc);
				return SUCCESS;
			}

			/*------ when Admin click on the lsOrder link in table -----------
					show popup detail and allow admin to update Order
			  ---------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& editOrderSignal != null && editOrderSignal != 0L) {
				orderToEdit = listOrdersDTO.get(indexOrder);
				if (orderToEdit == null)
					orderToEdit = new OrdersDTO();
				if (orderToEdit.getProductOrderDate() == null)
					strProductOrderDate = "";
				showOrderDetailPop = "display:block;visibility:visible;";
				return SUCCESS;
			}

			/*--- when Admin click on the cancel Button of orderDetailPop ---
					we mast just hide popup OrderDetail
			  ---------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& cancelSignal != null && cancelSignal != 0L) {
				showOrderDetailPop = "visibility:hidden;display:none;";
				return SUCCESS;
			}

			/*-------------------- When Admin left lsProduct TextField -------------
								check userPrice in DB, and write it in web view
			 -----------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& checkProductPriceSignal != null
					&& checkProductPriceSignal != 0L) {
				OrdersDTO orderDTOToUpdate = listOrdersDTO.get(indexOrder);
				orderDTOToUpdate = fillDataOrderDTO(orderDTOToUpdate);
				OrdersRows orderRowToUpadate = orderDTOToUpdate.getRowsList()
						.get(indexRow);
				UserProductPriceDTO userProductPrice = productService
						.getUsrPPriceByLsproductId(userId, lsProductID);
				orderRowToUpadate.setCss("");
				orderRowToUpadate.setCssPrice("");
				if (userProductPrice == null) {
					orderRowToUpadate.setCss("background-color:red;");
					orderRowToUpadate.setProductDescription("");
					orderRowToUpadate.setStock(null);
					orderRowToUpadate.setProductId(null);
					orderRowToUpadate.setLsProductID(lsProductID);
					orderRowToUpadate.setLsPrice(null);
				} else {
					Double usrPrice = orderRowToUpadate.getUnitPrice();
					if (usrPrice == null)
						usrPrice = 0D;
					if (usrPrice < userProductPrice.getPriceNum()) {
						orderRowToUpadate.setCssPrice("background-color:red;");
					}
					orderRowToUpadate.setProductDescription(userProductPrice
							.getProductTitle());
					orderRowToUpadate.setStock(userProductPrice.getStock());
					orderRowToUpadate.setProductId(userProductPrice
							.getProductId());
					orderRowToUpadate.setLsProductID(userProductPrice
							.getLsProductId());
					orderRowToUpadate
							.setLsPrice(userProductPrice.getPriceNum());
				}
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				orderToEdit = orderDTOToUpdate;
				listOrdersDTO = (List<OrdersDTO>) session
						.getAttribute("listOrdersDTOReport");
				showOrderDetailPop = "display:block;visibility:visible;";
				return SUCCESS;
			}

			/*----------------- When Admin check on saveTemporaryRow Icon --------------------------
					we must first obtained the object that contains the list of rows,
					after we accede to the row by index recovered by web view and change it
			 ---------------------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& saveTemporaryRowSignal != null
					&& saveTemporaryRowSignal != 0L) {
				OrdersDTO orderDTOToUpdate = listOrdersDTO.get(indexOrder);
				orderDTOToUpdate = fillDataOrderDTO(orderDTOToUpdate);
				OrdersRows orderRowToSaveMemory = orderDTOToUpdate
						.getRowsList().get(indexRow);
				orderRowToSaveMemory.setIcon("images/orders/itemValidated.png");
				if (orderRowToSaveMemory != null) {
					orderRowToSaveMemory.setQuantity(quantity);
					orderRowToSaveMemory.setLsProductID(lsProductID);
					orderRowToSaveMemory
							.setProductDescription(productDescription);
					orderRowToSaveMemory.setUnitPrice(unitPrice);
					orderRowToSaveMemory
							.setCssPrice("background-color:#FF6666;");
					orderRowToSaveMemory
							.setCssQuantity("background-color:#FF6666;");
					if (quantity != null && quantity > 0D)
						orderRowToSaveMemory.setCssQuantity("");
					if (unitPrice != null
							&& orderRowToSaveMemory.getLsPrice() != null
							&& unitPrice >= orderRowToSaveMemory.getLsPrice())
						orderRowToSaveMemory.setCssPrice("");
					orderRowToSaveMemory.setShippingFee(shippingFee);
					orderRowToSaveMemory.setShippingPrice(shippingFee);
					orderRowToSaveMemory.setShippingCompany(shippingCompany);
					orderRowToSaveMemory.setTrackingNumber(trakingNumber);
					if (orderRowToSaveMemory.getCurrencyId() != null
							&& orderRowToSaveMemory.getCurrencyId() != 1
							&& orderRowToSaveMemory.getCurrencyRate() != null) {
						if (unitPrice != null) {
							orderRowToSaveMemory
									.setCurrencyUnitPrice(unitPrice);
							unitPrice = unitPrice
									/ orderRowToSaveMemory.getCurrencyRate();
							unitPrice = (double) Math.round(unitPrice * 100) / 100;
							orderRowToSaveMemory.setUnitPrice(unitPrice);
						}
						/*
						 * if(shippingFee!=null) {
						 * orderRowToSaveMemory.setCurrencyShippingPrice
						 * (shippingFee); shippingFee =
						 * shippingFee/orderRowToSaveMemory.getCurrencyRate();
						 * shippingFee = (double)
						 * Math.round(shippingFee*100)/100;
						 * orderRowToSaveMemory.setShippingPrice(shippingFee); }
						 */
					}
					int indexOrder = 0;
					int indexRow = 0;
					for (OrdersDTO orderDTO : listOrdersDTO) {
						orderDTO.setIndex(indexOrder);
						indexOrder++;
						indexRow = 0;
						for (OrdersRows orderRows : orderDTO.getRowsList()) {
							orderRows.setIndex(indexRow);
							indexRow++;
						}
					}
					session.setAttribute("listOrdersDTOReport", listOrdersDTO);
					listOrdersDTO = (List<OrdersDTO>) session
							.getAttribute("listOrdersDTOReport");
				}
				orderToEdit = listOrdersDTO.get(indexOrder);
				// Change totalPrice also
				if (orderToEdit.getRowsList().get(0) != null
						&& orderToEdit.getRowsList().get(0).getQuantity() != null
						&& orderToEdit.getRowsList().get(0)
								.getQuantityToSplit() != null
						&& orderToEdit.getRowsList().get(0).getUnitPrice() != null) {
					Double priceTotal = orderToEdit.getRowsList().get(0)
							.getUnitPrice()
							* orderToEdit.getRowsList().get(0)
									.getQuantityToSplit();
					priceTotal = (double) Math.round(priceTotal * 100) / 100;
					orderToEdit.setTotalPrice(priceTotal);
				}
				showOrderDetailPop = "display:block;visibility:visible;";
				return SUCCESS;
			}

			/*------- When Admin click on addSimilarRow Icon on the OrderDetailPop --------
								Add one Row Similar at the previews
			  -----------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& addSimilarRowSignal != null && addSimilarRowSignal != 0L) {
				OrdersDTO orderDTOToUpdate = listOrdersDTO.get(indexOrder);
				// generate lsOrderId to new order
				orderDTOToUpdate = fillDataOrderDTO(orderDTOToUpdate);
				OrdersRows orderRowToClone = orderDTOToUpdate.getRowsList()
						.get(indexRow);
				if (orderRowToClone != null) {
					if (!orderRowToClone.getIcon().equals(
							"images/orders/itemValidated.png")) {
						orderRowToClone.setQuantity(quantity);
						orderRowToClone.setLsProductID(lsProductID);
						orderRowToClone.setStock(stock);
						orderRowToClone
								.setProductDescription(productDescription);
						orderRowToClone.setUnitPrice(unitPrice);
						orderRowToClone.setShippingFee(shippingFee);
						orderRowToClone.setShippingCompany(shippingCompany);
						orderRowToClone.setTrackingNumber(trakingNumber);
					}
					orderRowToClone.setIcon("images/orders/itemValidated.png");
					OrdersRows orderRowToAdd = DTOFactory
							.getOrderRowClone(orderRowToClone);
					orderRowToAdd.setId(-1L);
					// Add currencyId
					if (orderRowToClone.getCurrencyId() != null)
						orderRowToAdd.setCurrencyId(orderRowToClone
								.getCurrencyId());

					orderDTOToUpdate.getRowsList().add(indexRow + 1,
							orderRowToAdd);
					int indexOrder = 0;
					int indexRow = 0;
					for (OrdersDTO orderDTO : listOrdersDTO) {
						orderDTO.setIndex(indexOrder);
						indexOrder++;
						indexRow = 0;
						for (OrdersRows orderRows : orderDTO.getRowsList()) {
							orderRows.setIndex(indexRow);
							indexRow++;
						}
					}
					session.setAttribute("listOrdersDTOReport", listOrdersDTO);
					listOrdersDTO = (List<OrdersDTO>) session
							.getAttribute("listOrdersDTOReport");
				}
				orderToEdit = listOrdersDTO.get(indexOrder);
				showOrderDetailPop = "display:block;visibility:visible;";
				return SUCCESS;
			}

			/*-------- When Admin click on Delete Row Icon of orderDetail Popup-----------
									Delete this row using index
			 -----------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& deleteRowSignal != null && deleteRowSignal != 0L) {
				OrdersDTO orderDTO = listOrdersDTO.get(indexOrder);
				orderDTO = fillDataOrderDTO(orderDTO);
				int nb = orderService.nbOrderRowsNotDeleted(orderDTO
						.getRowsList());
				if (orderDTO != null && orderDTO.getRowsList().size() > 1) {
					for (int i = 0; i < orderDTO.getRowsList().size(); i++) {
						if (i == indexRow && nb > 1) {
							orderDTO.getRowsList().get(i).setToDelete(1);
							break;
						}
					}
				}
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				orderToEdit = listOrdersDTO.get(indexOrder);
				showOrderDetailPop = "display:block;visibility:visible;";
				return SUCCESS;
			}

			/*------ when Admin click on the button save of orderDetail ------------------
					 save order and hide pup  
			  ----------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& saveOrdersSignal != null && saveOrdersSignal != 0L) {
				session.setAttribute("orderNotSavedAtFirst", null);
				orderToEdit = listOrdersDTO.get(indexOrder);
				orderToEdit = fillDataOrderDTO(orderToEdit);

				// add special handling shipping
				User user = null;
				if (orderToEdit.getUserLogin() != null)
					user = userService.getUserByLogin(orderToEdit
							.getUserLogin());
				if (user != null) {
					Double totalPrice = null;
					orderToEdit.setSpecialHandlingName(user
							.getSpecialHandlingName());
					orderToEdit.setSpecialHandlingFee(user
							.getSpecialHandlingFee());
					if (orderToEdit.getRowsList().get(0).getQuantity() != null
							&& orderToEdit.getRowsList().get(0).getUnitPrice() != null) {
						totalPrice = orderToEdit.getRowsList().get(0)
								.getQuantity()
								* orderToEdit.getRowsList().get(0)
										.getUnitPrice();
						totalPrice = (double) Math.round(totalPrice * 100) / 100;
					}

					orderToEdit.setTotalPrice(totalPrice);
				}

				orderService.updateOrderByLsOrderId(orderToEdit);
				for (OrdersRows row : orderToEdit.getRowsList()) {
					if (row.getId() == -1)
						row.setId(0L);
				}
				OrdersRows row = orderToEdit.getRowsList().get(0);
				if (row != null) {
					orderToEdit.getShippedDate();
					orderToEdit.setLsPrice(row.getLsPrice());
					orderToEdit.setLsProductID(row.getLsProductID());
					orderToEdit.setProductDescription(row
							.getProductDescription());
					orderToEdit.setQuantity(row.getQuantity());
				}
				orderToEdit = DTOFactory.getOrderDTOConsideredMissingInfo(
						orderToEdit, hashProvinces);
				listIndexColumn = (List<Integer>) session
						.getAttribute("listIndexColumn");
				
//				listOrdersDTO = orderService.searchOrdersWithOptionsAndSorting(
//						creationDateStartArg, creationDateEndArg,
//						reportDateBetween, userLogin, lsOrderId, status,
//						listIndexColumn, PAGE_ITEMS_COUNT, indexSet);
				

				//New Functionality with same mapping
				listOrdersDTO = orderService.searchOrdersWithOptionsAndSortingNew(
								creationDateStartArg, creationDateEndArg,
								reportDateBetween, userLogin, lsOrderId,
								status, listIndexColumn, PAGE_ITEMS_COUNT,
								indexSet, productOrderNumberSearch,clientOrderNumber,
								clientOther);				
				
				// New Searching Functionality
//				listOrdersDTO = orderService.searchOrdersWithOptionsAndSorting(
//						creationDateStartArg, creationDateEndArg,
//						reportDateBetween, orderDTOObj, listIndexColumn,
//						PAGE_ITEMS_COUNT, indexSet);
				
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				message = "Saving has completed successfuly";
				showSaveSuccessPop = "display:block;visibility:visible;";
				showOrderDetailPop = "display:block;visibility:visible;";
				return SUCCESS;
			}

			/*------ When user change Quantity to split in orderDetailPop -----------
					 prepare order to split from two other orders witch
				 	 one must have a lsOrder with underscore 
			 ------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& quantityToChangeSignal != null
					&& quantityToChangeSignal != 0L) {
				OrdersDTO orderToChangeQt = listOrdersDTO.get(indexOrder);
				OrdersRows orderRow = orderToChangeQt.getRowsList().get(
						indexRow);
				orderToChangeQt = fillDataOrderDTO(orderToChangeQt);
				if (quantityToChange < orderRow.getQuantity())
					orderRow.setQuantityToSplit(quantityToChange);
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				listOrdersDTO = (List<OrdersDTO>) session
						.getAttribute("listOrdersDTOReport");
				orderToEdit = listOrdersDTO.get(indexOrder);
				showOrderDetailPop = "display:block;visibility:visible;";
				return SUCCESS;
			}

			/*-------------------- Duplicate Order ----------------------------------------
							Create order in just in memory
			 -----------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& duplicateOrderSignal != null
					&& duplicateOrderSignal != 0L) {
				OrdersDTO orderToClone = listOrdersDTO.get(indexOrder);
				orderToClone = fillDataOrderDTO(orderToClone);
				hashOrders = new Hashtable<String, OrdersDTO>();
				for (OrdersDTO ord : listOrdersDTO) {
					hashOrders.put(ord.getLsOrderId(), ord);
				}
				OrdersDTO orderClone = DTOFactory
						.getOrderDTOSplitted(orderToClone);
				if (orderClone != null) {
					orderClone.setDuplicate(true);
					String lsOrder = orderClone.getLsOrderId();
					String strlsOrder = orderService.generateLsOrderId(lsOrder,
							hashOrders);
					orderClone.setLsOrderId(strlsOrder);// rgb(116,180,209)
					orderClone
							.setCssStyle("background-color:#FFFF99;border-right: 1px solid #CCCCCC;border-left:1px solid #CCCCCC;border-top:  1px solid #CCCCCC;");
					orderToEdit = orderClone;
					orderToEdit.setBackgroundColor("background-color:#FFFF99;");
					listOrdersDTO.add(indexOrder + 1, orderClone);
					indexOrder = 0;
					for (OrdersDTO ord : listOrdersDTO) {
						ord.setIndex(indexOrder);
						indexOrder++;
					}
					orderService.updateOrderByLsOrderId(orderToClone);
					orderService.insertOrderWithRows(orderClone);
					orderClone.setDuplicate(false);
					for (OrdersRows row : orderClone.getRowsList()) {
						if (row.getId() < 0L)
							row.setId(0L);
					}
					if (listOrdersDTO.size() > 0) {
						session.setAttribute("listOrdersDTOReport",
								listOrdersDTO);
					}
				} else
					orderToEdit = orderToClone;
				showOrderDetailPop = "display:block;visibility:visible;";
				return SUCCESS;
			}

			/*-------------------- When user check print item -----------------------------
					Add or remove this element from the orders to print
			 -----------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& okSaveSuccessPopSignal != null
					&& okSaveSuccessPopSignal != 0L) {
				showSaveSuccessPop = "visibility:hidden;display:none;";
				showOrderDetailPop = "visibility:hidden;display:none;";
				return SUCCESS;
			}
		} catch (Exception e) {
			e.printStackTrace();
			return "input";
		}
		return SUCCESS;
	}

	/*
	 * ==========================================================================
	 * =============== fill all fields of order without rows
	 * ====================
	 * =====================================================================
	 */
	public OrdersDTO fillDataOrderDTO(OrdersDTO orderDTO) {
		SimpleDateFormat frm = new SimpleDateFormat("dd/MM/yyyy");
		orderDTO.setClientLastName(clientLastName);
		orderDTO.setClientFirstName(clientFirstName);
		orderDTO.setClientOtherNames(clientOtherNames);
		orderDTO.setClientStreet(clientStreet);
		orderDTO.setClientOtherStreet(clientOtherStreet);
		orderDTO.setClientCity(clientCity);
		orderDTO.setClientProvince(code);
		orderDTO.setClientPostalCode(clientPostalCode);
		orderDTO.setClientPhone(clientPhone);
		orderDTO.setClientEmail(clientEmail);
		orderDTO.setProductOrderNumber(productOrderNumberSearch);
		orderDTO.setCompanyHeader(companyHeader);
		if (((strProductOrderDate) != null)
				&& (!"".equals(strProductOrderDate))) {
			frm = new SimpleDateFormat("dd/MM/yyyy");
			try {
				Date date = frm.parse(strProductOrderDate);
				orderDTO.setProductOrderDate(date);
			} catch (Exception pe) {
				addActionError("Please enter a date in the correct format");
			}
		}

		if (((strCreationOrderDate) != null)
				&& (!"".equals(strCreationOrderDate))) {
			frm = new SimpleDateFormat("dd/MM/yyyy");
			try {
				Date date = frm.parse(strCreationOrderDate);
				orderDTO.setCreationDate(date);
			} catch (Exception pe) {
				addActionError("Please enter a date in the correct format");
			}
		}

		if (((strRequiredDate) != null) && (!"".equals(strRequiredDate))) {
			frm = new SimpleDateFormat("dd/MM/yyyy");
			try {
				Date date = frm.parse(strRequiredDate);
				orderDTO.setRequiredDate(date);
			} catch (Exception pe) {
				addActionError("Please enter a date in the correct format");
			}
		}
		return orderDTO;
	}

	/*
	 * ==========================================================================
	 * =============== initialize ListIndexSet
	 * ==================================
	 * =======================================================
	 */
	public void initalizeListIndexSet(HttpSession session,
			OrdersService orderService) throws ServiceException {
		listIndexSet = new ArrayList<OrdersDTO>();
		totalOrders = orderService.getCountOrders(creationDateStartArg,
				creationDateEndArg, reportDateBetween, userLogin, lsOrderId,
				status,productOrderNumberSearch,clientOrderNumber,clientOther);
		
		String strcount = totalOrders.toString();
		Integer sizeList = Integer.parseInt(strcount) / PAGE_ITEMS_COUNT;
		nextListPages = 1;
		session.setAttribute("nextListPages", nextListPages);
		for (int i = 1; i <= sizeList + 1 && i <= 11; i++) {
			OrdersDTO ord = new OrdersDTO();
			ord.setCssStyle("");
			ord.setIndex(i);
			listIndexSet.add(ord);
		}
		indexSet = 0;
		session.setAttribute("indexSet", indexSet);
		session.setAttribute("totalOrders", totalOrders);
		session.setAttribute("listIndexSet", listIndexSet);
		session.setAttribute("productOrderNumberSearch", productOrderNumberSearch);

	}

	/*
	 * ==========================================================================
	 * =============== initialize listIndexColumn
	 * ================================
	 * =========================================================
	 */
	List<Integer> getNewListIndexColumn() {
		List<Integer> reult = new ArrayList<Integer>();
		for (int i = 0; i <= 34; i++) {
			if (i != 2 && i <= 13) {
				reult.add(i);
				if (i != 0)
					reult.add(-i);
			}
			if (i == 30 || i == 31 || i == 34) {
				reult.add(i);
				reult.add(-i);
			}
		}
		return reult;
	}

	/*
	 * ==========================================================================
	 * =============== getStatus Selected by Admin for searching
	 * ================
	 * =========================================================================
	 */
	public String getStatusSelected(Integer StatusIndex) {
		String result = "";
		switch (StatusIndex) {
		case 0:
			result = "open";
			break;
		case 1:
			result = "progress";
			break;
		case 2:
			result = "shipped";
			break;
		case 3:
			result = "invoiced";
			break;
		case 4:
			result = "canceled";
			break;
		default:
			result = "";
		}
		return result;
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.Argument.bind(Argument.java:35)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.bindArguments(AbstractMethodDeclaration.java:83)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:406)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1147)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1235)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:540)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:883)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:928)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:189)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:255)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:190)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:89)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:728)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:788)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1244)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:102)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)

!ENTRY org.eclipse.jdt.ui 4 2 2015-04-15 11:42:24.764
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:233)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:255)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:190)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:89)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:728)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:788)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1244)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:102)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)
Caused by: java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.Argument.bind(Argument.java:35)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.bindArguments(AbstractMethodDeclaration.java:83)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:406)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1147)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1235)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:540)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:883)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:928)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:189)
	... 16 more
Caused by: java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.Argument.bind(Argument.java:35)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.bindArguments(AbstractMethodDeclaration.java:83)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:406)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1147)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1235)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:540)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:883)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:928)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:189)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:255)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:190)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:89)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:728)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:788)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1244)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:102)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2015-04-15 11:42:24.764
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.Argument.bind(Argument.java:35)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.bindArguments(AbstractMethodDeclaration.java:83)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:406)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1147)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1235)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:540)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:883)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:928)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:189)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:255)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:190)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:89)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:728)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:788)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1244)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:102)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2015-04-15 11:42:24.764
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.Argument.bind(Argument.java:35)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.bindArguments(AbstractMethodDeclaration.java:83)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:406)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1147)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1235)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:540)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:883)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:928)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:189)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:255)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:190)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:89)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:728)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:788)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1244)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:102)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)

!ENTRY org.eclipse.jdt.ui 4 0 2015-04-15 11:42:24.764
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:233)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:255)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:190)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:89)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:728)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:788)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1244)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:102)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)
Caused by: java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.Argument.bind(Argument.java:35)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.bindArguments(AbstractMethodDeclaration.java:83)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:406)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1147)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1235)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:540)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:883)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:928)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:189)
	... 16 more
Caused by: java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.Argument.bind(Argument.java:35)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.bindArguments(AbstractMethodDeclaration.java:83)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:406)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1147)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1235)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:540)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:883)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:928)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:189)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:255)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:190)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:89)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:728)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:788)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1244)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:102)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2015-04-15 11:42:24.764
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.Argument.bind(Argument.java:35)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.bindArguments(AbstractMethodDeclaration.java:83)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:406)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1147)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1235)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:540)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:883)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:928)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:189)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:255)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:190)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:89)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:728)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:788)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1244)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:102)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)
!SESSION 2015-04-15 11:42:35.625 -----------------------------------------------
eclipse.buildId=M20110210-1200
java.version=1.7.0_17
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_CA
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product

!ENTRY org.eclipse.jdt.core 4 4 2015-04-15 11:59:28.758
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.loyauty.web.struts.action.orders;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.List;

import javax.servlet.http.HttpSession;
import lombok.Getter;
import lombok.Setter;

import com.loyauty.exception.ServiceException;
import com.loyauty.exception.ServiceLocatorException;
import com.loyauty.model.OrdersRows;
import com.loyauty.model.User;
import com.loyauty.service.core.DTOFactory;
import com.loyauty.service.core.dto.BasicUserDTO;
import com.loyauty.service.core.dto.OperationsDTO;
import com.loyauty.service.core.dto.OrdersDTO;
import com.loyauty.service.core.dto.ProvinceDTO;
import com.loyauty.service.core.dto.UserProductPriceDTO;
import com.loyauty.service.core.dto.UserSessionDTO;
import com.loyauty.service.core.dto.UsersPrivilegesDTO;
import com.loyauty.service.operations.OperationsService;
import com.loyauty.service.orders.OrdersService;
import com.loyauty.service.product.ProductService;
import com.loyauty.service.user.UserService;
import com.loyauty.web.struts.action.LoyautyAction;

public class ReportOrders extends LoyautyAction {
	private static final long serialVersionUID = -3811760851445730062L;
	private UserService userService;
	private ProductService productService;
	private OrdersService orderService;
	private OperationsService operationsService;
	@Getter
	@Setter
	private String userLogin;
	@Getter
	@Setter
	private List<User> usersList;
	private static int USER_TYPE = 2;
	@Getter
	@Setter
	List<OrdersDTO> listOrdersDTO;
	@Getter
	@Setter
	List<OrdersDTO> listStatus;
	@Getter
	@Setter
	private String lsOrderId;
	@Getter
	@Setter
	Long poYpop;
	@Getter
	@Setter
	Long poXpop;
	@Getter
	@Setter
	private Long pageTop = 0L;
	@Getter
	@Setter
	private Date creationDate;
	@Getter
	@Setter
	private Long findOrdersSignal;
	private String status;
	@Getter
	@Setter
	private Long sizeResult = 0L;
	@Getter
	@Setter
	private Long sorting;
	@Getter
	@Setter
	private Long sortingOrdersSignal;
	@Getter
	@Setter
	private Integer fieldForSorting;
	@Getter
	@Setter
	private Integer asc;
	@Getter
	@Setter
	private Integer scrollDivRowsLeft;
	@Getter
	@Setter
	private Integer scrollPageLeft;
	@Getter
	@Setter
	private Integer scrollDivRowsTop;
	@Getter
	@Setter
	private String strCreationDateStart;
	@Getter
	@Setter
	private String strCreationDateEnd;
	@Getter
	@Setter
	private Date creationDateStart;
	@Getter
	@Setter
	private Date creationDateEnd;
	private Date creationDateStartArg;
	private Date creationDateEndArg;
	@Getter
	@Setter
	private Integer selectedStatus;
	@Getter
	@Setter
	private Long editOrderSignal;
	@Getter
	@Setter
	private Long cancelSignal;
	@Getter
	@Setter
	private Integer indexOrder;
	@Getter
	@Setter
	private OrdersDTO orderToEdit;
	@Getter
	@Setter
	private String strProductOrderDate;
	@Getter
	@Setter
	private String lsProductID;
	@Getter
	@Setter
	Integer indexRow;
	@Getter
	@Setter
	private String showOrderDetailPop;
	@Getter
	@Setter
	private Long userId;
	@Getter
	@Setter
	private Long checkProductPriceSignal;
	@Getter
	@Setter
	private Long saveTemporaryRowSignal;
	@Getter
	@Setter
	private Long addSimilarRowSignal;
	@Getter
	@Setter
	private Long deleteRowSignal;
	@Getter
	@Setter
	private Long saveOrdersSignal;
	@Getter
	@Setter
	private Boolean checkBoxPrint;

	// recovery Data Order
	@Getter
	@Setter
	private String clientLastName;
	@Getter
	@Setter
	private String clientFirstName;
	@Getter
	@Setter
	private String clientOtherNames;
	@Getter
	@Setter
	private String clientStreet;
	@Getter
	@Setter
	private String clientOtherStreet;
	@Getter
	@Setter
	private String clientCity;
	@Getter
	@Setter
	private String clientProvince;
	@Getter
	@Setter
	private String clientPostalCode;
	@Getter
	@Setter
	private String clientPhone;
	@Getter
	@Setter
	private String clientEmail;
//	@Getter
//	@Setter
//	private String productOrderNumber;
	@Getter
	@Setter
	private String strRequiredDate;

	// recovery data row
	@Getter
	@Setter
	private Double quantity;
	@Getter
	@Setter
	private String notes;
	@Getter
	@Setter
	private Double quantityToChange;
	@Getter
	@Setter
	private Double stock;
	@Getter
	@Setter
	private String productDescription;
	@Getter
	@Setter
	private Double unitPrice;
	@Getter
	@Setter
	private Double shippingFee;
	@Getter
	@Setter
	private String shippingCompany;
	@Getter
	@Setter
	private String companyHeader;

	@Getter
	@Setter
	private Long quantityToChangeSignal;
	@Getter
	@Setter
	private Long duplicateOrderSignal;
	@Getter
	@Setter
	private String strCreationDate;
	@Getter
	@Setter
	private String strCreationOrderDate;
	@Getter
	@Setter
	private User usr;
	@Getter
	@Setter
	private String showSaveSuccessPop;
	// showSaveSuccessPop="display:block;visibility:visible;";
	// showSaveSuccessPop="visibility:hidden;display:none;";
	@Getter
	@Setter
	private String message;
	@Getter
	@Setter
	private Long okSaveSuccessPopSignal;
	@Getter
	@Setter
	private Long showRowShipping;
	@Getter
	@Setter
	private Long showOnlyEditNote;
	@Getter
	@Setter
	private Long saveShippingSignal;
	@Getter
	@Setter
	private Long saveOnlyNoteSignal;
	@Getter
	@Setter
	private String code;
	@Getter
	@Setter
	private Long cityId;
	@Getter
	@Setter
	private List<ProvinceDTO> listProvinces;
	private Hashtable<String, ProvinceDTO> hashProvinces;
	@Getter
	@Setter
	private Boolean orderNotSavedAtFirst;
	@Getter
	@Setter
	private String strShippedDate;
	@Getter
	@Setter
	private String strShippingPrice;
	@Getter
	@Setter
	private String showConfirmDeleteOrderPop;
	@Getter
	@Setter
	private Long deleteOrderSignal;
	@Getter
	@Setter
	private Long confirmDeleteSignal;
	@Getter
	@Setter
	private UsersPrivilegesDTO userPrivileges;
	@Getter
	@Setter
	private UsersPrivilegesDTO usersPrivShippedToInvoiced;
	@Getter
	@Setter
	private UsersPrivilegesDTO usersPrivChangeShippedStatus;
	@Getter
	@Setter
	private HashMap<Integer, String> hashStatus;
	@Getter
	@Setter
	private Long statusId;
	@Getter
	@Setter
	private String strPrint;
	@Getter
	@Setter
	private Integer testSignal;
	@Getter
	@Setter
	private String newStatus;
	Long invoicedOrdersRefresh;
	@Getter
	@Setter
	private Integer reportDateBetween;
	@Getter
	@Setter
	private Long dateBetweenSignal;
	@Getter
	@Setter
	private Long selectAllOrdersSignal;
	@Getter
	@Setter
	private Boolean checkBoxItem;
	// ------Pagination
	@Getter
	@Setter
	Long pageIndexSignal;
	@Getter
	@Setter
	Long prevListPagesSignal;
	@Getter
	@Setter
	Long nextListPagesSignal;
	@Getter
	@Setter
	Long totalOrders;
	@Getter
	@Setter
	Integer nextListPages;
	@Getter
	@Setter
	Integer prevListPages;
	@Getter
	@Setter
	Integer indexSet = 0;
	@Getter
	@Setter
	Integer indexList;
	@Getter
	@Setter
	List<OrdersDTO> listIndexSet;
	@Getter
	@Setter
	Integer PAGE_ITEMS_COUNT = 100;
	
	//New Added Field in the search option as toggle functionality
	@Getter
	@Setter
	private String productOrderNumberSearch;
	@Getter
	@Setter
	private String trakingNumber;
	@Getter
	@Setter
	private String  clientOther;
	@Getter	@Setter
	private String	 clientOrderNumber;
	
	@Getter	@Setter
	private Integer switchBetweenClientLoginAndPoNumberSignal;
	@Getter	@Setter
	private Integer switchBetweenClientLoginAndPoNumber;
	//New Added Field in the search option as toggle functionality
	@Getter	@Setter
	private Integer switchBetweenLsOrderAndClientOrderIdSignal;
	@Getter	@Setter
	private Integer switchBetweenLsOrderAndClientOrderId;
	@Getter	@Setter
	private Integer switchBetweenStatusAndClientOtherSignal;
	@Getter	@Setter
	private Integer switchBetweenStatusAndClientOther;
	//Added for the multiple functionality in switching  
	@Getter	@Setter
	private Integer switchBetweenOptionFieldsSignal;
	@Getter	@Setter
	private Integer switchBetweenOptionFields;
	
	// ------Pagination

	/*
	 * ==========================================================================
	 * =============== Default constructor
	 * ======================================
	 * ===================================================
	 */
	public ReportOrders() throws ServiceLocatorException {
		super();
		userService = getServiceLocator().getUserService();
		orderService = getServiceLocator().getOrderService();
		productService = getServiceLocator().getProductService();
		operationsService = getServiceLocator().getOperationsService();
	}

	/*
	 * ==========================================================================
	 * =============== method execute
	 * ============================================
	 * =============================================
	 */
	@SuppressWarnings({ "rawtypes", "unchecked" })
	@Override
	public String execute() throws Exception {
		System.out.println("Product Order Number: "+ productOrderNumberSearch);
		System.out.println("Tracking Number: "+ trakingNumber);
		System.out.println("Client Order ID: "+ clientOrderNumber);
		System.out.println("Client Other ID: "+ clientOther);
		
		//Create new object or Order to modify the search functionality
		OrdersDTO orderDTOObj=new OrdersDTO();
		orderDTOObj.setLsOrderId(lsOrderId);
		orderDTOObj.setUserLogin(userLogin);
		orderDTOObj.setStatus(status);
		orderDTOObj.setProductOrderNumber(productOrderNumberSearch);
		orderDTOObj.setClientOrderNumber(clientOrderNumber);
		orderDTOObj.setClientOtherId(clientOther);
		
		HttpSession session = request.getSession(true);

		if (showOrderDetailPop == null)
			showOrderDetailPop = "visibility:hidden;display:none;";
		if (showConfirmDeleteOrderPop == null)
			showConfirmDeleteOrderPop = "visibility:hidden;display:none;";
		if (showSaveSuccessPop == null)
			showSaveSuccessPop = "visibility:hidden;display:none;";
		if (poYpop == null)
			poYpop = 100L;
		if (poXpop == null)
			poXpop = 100L;
		Hashtable<String, OrdersDTO> hashOrders;
		if (selectedStatus == null)
			selectedStatus = -1;
		sizeResult = (Long) session.getAttribute("sizeResult");
		totalOrders = (Long) session.getAttribute("totalOrders");
		if (totalOrders == null)
			totalOrders = 0L;
		asc = (Integer) session.getAttribute("asc");
		if (asc == null)
			asc = 0;
		if (sizeResult == null)
			sizeResult = 0L;
		if (indexOrder == null)
			indexOrder = 0;
		userPrivileges = (UsersPrivilegesDTO) session.getAttribute("userPrivileges");
		usersPrivShippedToInvoiced = (UsersPrivilegesDTO) session.getAttribute("usersPrivShippedToInvoiced");
		usersPrivChangeShippedStatus = (UsersPrivilegesDTO) session
				.getAttribute("usersPrivChangeShippedStatus");
		hashStatus = (HashMap<Integer, String>) session
				.getAttribute("hashStatus");
		if (hashStatus == null) {
			hashStatus = new HashMap<Integer, String>();
			hashStatus.put(0, "");
			hashStatus.put(1, "open");
			hashStatus.put(2, "progress");
		}
		List<Integer> listIndexColumn = new ArrayList<Integer>();
		// fill list status
		listStatus = (ArrayList<OrdersDTO>) session.getAttribute("listStatus");
		if (listStatus == null) {
			listStatus = new ArrayList<OrdersDTO>();
			OrdersDTO orderDTOOpen = new OrdersDTO();
			orderDTOOpen.setStatus("open");
			orderDTOOpen.setId(0L);
			listStatus.add(orderDTOOpen);
			OrdersDTO orderDTOProgress = new OrdersDTO();
			orderDTOProgress.setStatus("progress");
			orderDTOProgress.setId(1L);
			listStatus.add(orderDTOProgress);
			if (usersPrivChangeShippedStatus != null) {
				OrdersDTO orderDTOShipped = new OrdersDTO();
				orderDTOShipped.setStatus("shipped");
				orderDTOShipped.setId(2L);
				listStatus.add(orderDTOShipped);
			}

		}

		try {

			/*-------------------- recovery users list -----------------------------------
							Recovery users list in session
			 -----------------------------------------------------------------------------*/
			// recovery provinces
			listProvinces = (List<ProvinceDTO>) session
					.getAttribute("listProvinces");
			if (listProvinces == null)
				listProvinces = productService.getAllProvinces();
			orderNotSavedAtFirst = (Boolean) session
					.getAttribute("listNotSavedAtFirst");
			BasicUserDTO basicUserDTO = new BasicUserDTO();
			basicUserDTO.setTypeId(USER_TYPE);
			List<User> usersListSession = (List<User>) session
					.getAttribute("usersListSession");
			if (usersListSession == null) {
				List<UserSessionDTO> listAllUsers = userService
						.getAllUsers(basicUserDTO);
				usersList = new ArrayList<User>();
				for (UserSessionDTO userDTO : listAllUsers) {
					User user = new User();
					user.setId(userDTO.getId());
					user.setLogin(userDTO.getLogin());
					usersList.add(user);
				}
				session.setAttribute("usersListSession", usersList);
			} else{
				usersList = usersListSession;
			}
			
			listOrdersDTO = (ArrayList<OrdersDTO>) session.getAttribute("listOrdersDTOReport");
			
			reportDateBetween = (Integer) session.getAttribute("reportDateBetween");
			if (reportDateBetween == null) {
				reportDateBetween = 0;
				session.setAttribute("reportDateBetween", reportDateBetween);
			}

			//Added for the new field
			switchBetweenClientLoginAndPoNumber = (Integer) session.getAttribute("switchBetweenClientLoginAndPoNumber");
			if (switchBetweenClientLoginAndPoNumber == null) {
				switchBetweenClientLoginAndPoNumber = 0;
				session.setAttribute("switchBetweenClientLoginAndPoNumber", switchBetweenClientLoginAndPoNumber);
			}
			switchBetweenLsOrderAndClientOrderId = (Integer) session.getAttribute("switchBetweenLsOrderAndClientOrderId");
			if (switchBetweenLsOrderAndClientOrderId == null) {
				switchBetweenLsOrderAndClientOrderId = 0;
				session.setAttribute("switchBetweenLsOrderAndClientOrderId", switchBetweenLsOrderAndClientOrderId);
			}
			switchBetweenStatusAndClientOther = (Integer) session.getAttribute("switchBetweenStatusAndClientOther");
			if (switchBetweenStatusAndClientOther == null) {
				switchBetweenStatusAndClientOther = 0;
				session.setAttribute("switchBetweenStatusAndClientOther", switchBetweenStatusAndClientOther);
			}
			
			switchBetweenOptionFields = (Integer) session.getAttribute("switchBetweenOptionFields");
			if (switchBetweenStatusAndClientOther == null) {
				switchBetweenStatusAndClientOther = 0;
				session.setAttribute("switchBetweenStatusAndClientOther", switchBetweenStatusAndClientOther);
			}

			/*------ always check if the Admin select all orders ------------
					if The Admin select all orders change checkBoxItem value 
			  ---------------------------------------------------------------*/
			if (selectAllOrdersSignal != null && selectAllOrdersSignal != 0L) {
				if (checkBoxItem != null) {
					session.setAttribute("checkBoxItem", checkBoxItem);
					session.setAttribute("allOrdersSelectedSignal", 0L);
					if (checkBoxItem)
						session.setAttribute("allOrdersSelectedSignal", 1L);
				}
			}
			checkBoxItem = (Boolean) session.getAttribute("checkBoxItem");
			if (checkBoxItem == null)
				checkBoxItem = false;
			/*------ always recovery creationDate from strCreationDate ------
						always keep the user search options
			  ---------------------------------------------------------------*/
			creationDateStart = null;
			SimpleDateFormat frm = new SimpleDateFormat("dd/MM/yyyy");
			if (((strCreationDateStart) != null)
					&& (!"".equals(strCreationDateStart))) {
				try {
					Date date = frm.parse(strCreationDateStart);
					creationDateStart = date;
					creationDateStartArg = date;
				} catch (Exception pe) {
					creationDateStart = null;
					addActionError("Please enter a date in the correct format");
				}
			}
			if (creationDateStart == null) {
				Date date = frm.parse("01/01/1900");
				creationDateStartArg = date;
			}
			creationDateEnd = null;
			if (((strCreationDateEnd) != null)
					&& (!"".equals(strCreationDateEnd))) {
				frm = new SimpleDateFormat("dd/MM/yyyy");
				try {
					Date date = frm.parse(strCreationDateEnd);
					creationDateEnd = date;
					creationDateEndArg = date;
				} catch (Exception pe) {
					creationDateEnd = null;
					addActionError("Please enter a date in the correct format");
				}
			}
			if (creationDateEnd == null) {
				creationDateEndArg = new Date();
			}

			/*------ always recovery Status from selectedStatus key ------
						always keep the status search options
			  ---------------------------------------------------------------*/
			status = getStatusSelected(selectedStatus);

			/*----------- always initialized listPages if not done ----------
				   		    and check if is there next listPages
			  ---------------------------------------------------------------*/
			nextListPages = (Integer) session.getAttribute("nextListPages");
			if (nextListPages == null)
				nextListPages = 0;
			if (indexSet == null || indexSet == -1) {
				indexSet = (Integer) session.getAttribute("indexSet");
				if (indexSet == null)
					indexSet = 0;
			}
			listIndexSet = (List<OrdersDTO>) session
					.getAttribute("listIndexSet");
			if (listIndexSet == null)
				initalizeListIndexSet(session, orderService);

			/*----------------- When Admin Click on the pageIndex ----------------------------------
										catch  page index
			 ---------------------------------------------------------------------------------------*/
			//Toggle Switch between PO Date and Shipping date
			if (dateBetweenSignal != null && dateBetweenSignal != 0L) {
				reportDateBetween = ((reportDateBetween == null || reportDateBetween == 0) ? 1: 0);
				listOrdersDTO = new ArrayList<OrdersDTO>();
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				session.setAttribute("reportDateBetween", reportDateBetween);
				return SUCCESS;
			}
		
			//Toggle Switch between Client Login and PO Number	
//			switchBetweenClientLoginAndPoNumber=(Integer)session.getAttribute("switchBetweenClientLoginAndPoNumber");
			
			if (switchBetweenClientLoginAndPoNumberSignal != null && switchBetweenClientLoginAndPoNumberSignal != 0L) {
				switchBetweenClientLoginAndPoNumber = ((switchBetweenClientLoginAndPoNumber == null 
						|| switchBetweenClientLoginAndPoNumber == 0) ? 1: 0);
				listOrdersDTO = new ArrayList<OrdersDTO>();
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				session.setAttribute("switchBetweenClientLoginAndPoNumber", switchBetweenClientLoginAndPoNumber);
				return SUCCESS;
			}
			
			//Switching between "ls_Order" and "Client Order Id"	
//			switchBetweenLsOrderAndClientOrderId = (Integer)session.getAttribute("switchBetweenLsOrderAndClientOrderId");
			
			if (switchBetweenLsOrderAndClientOrderIdSignal != null && switchBetweenLsOrderAndClientOrderIdSignal != 0L) {
				switchBetweenLsOrderAndClientOrderId = ((switchBetweenLsOrderAndClientOrderId == null 
						|| switchBetweenLsOrderAndClientOrderId == 0) ? 1: 0);
				listOrdersDTO = new ArrayList<OrdersDTO>();
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				session.setAttribute("switchBetweenLsOrderAndClientOrderId", switchBetweenLsOrderAndClientOrderId);
				return SUCCESS;
			}
			
			//Switching between "Status" and "Client Other Id"
//			switchBetweenStatusAndClientOther = (Integer)session.getAttribute("switchBetweenStatusAndClientOther");
			
			if (switchBetweenStatusAndClientOtherSignal != null && switchBetweenStatusAndClientOtherSignal != 0L) {
				switchBetweenStatusAndClientOther = ((switchBetweenStatusAndClientOther == null 
						|| switchBetweenStatusAndClientOther == 0) ? 1: 0);
				listOrdersDTO = new ArrayList<OrdersDTO>();
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				session.setAttribute("switchBetweenStatusAndClientOther", switchBetweenStatusAndClientOther);
				return SUCCESS;
			}
			
			if (switchBetweenOptionFieldsSignal != null && switchBetweenOptionFields != 0L) {
				switchBetweenOptionFields++;
				if (switchBetweenOptionFields == 4) switchBetweenOptionFields = 0;
				
			}
			

			
			
			/*----------------- When Admin Click on the pageIndex ----------------------------------
										catch  page index
			 ---------------------------------------------------------------------------------------*/
			if (pageIndexSignal != null && pageIndexSignal != 0L) {
				OrdersDTO orderDTO = (OrdersDTO) session.getAttribute("orderPageSelected");
				if (orderDTO != null)
					orderDTO.setCssStyle("");
				OrdersDTO orderPageSelected = listIndexSet.get(indexList);
				orderPageSelected
						.setCssStyle("background-color:#FFFF99;border:1px solid #CCCCCC;");
				indexSet = orderPageSelected.getIndex() - 1;
				indexSet = indexSet * PAGE_ITEMS_COUNT;
				session.setAttribute("indexSet", indexSet);
				session.setAttribute("listIndexSet", listIndexSet);
				session.setAttribute("orderPageSelected", orderPageSelected);
			}

			/*----------------- When Admin Click on the nextListPages ------------------------------
						recreate listIndexSet started with index>index+10 and indexSet>indexSet+10
			 ---------------------------------------------------------------------------------------*/
			if (nextListPagesSignal != null && nextListPagesSignal != 0L
					&& listIndexSet.size() > 0) {
				OrdersDTO orderDTOPrevious = (OrdersDTO) session
						.getAttribute("orderPageSelected");
				if (orderDTOPrevious != null)
					orderDTOPrevious.setCssStyle("");
				OrdersDTO orderDTO = listIndexSet.get(listIndexSet.size() - 1);
				if (orderDTO != null)
					nextListPages = orderDTO.getIndex() + 1;
				
				Long totalOrders = orderService.getCountOrders(creationDateStartArg,
						creationDateEndArg, reportDateBetween, userLogin, lsOrderId,
						status,productOrderNumberSearch,clientOrderNumber,clientOther);
				
				String strcount = totalOrders.toString();
				Integer sizeList = Integer.parseInt(strcount)
						/ PAGE_ITEMS_COUNT;
				if (nextListPages <= sizeList + 1) {
					listIndexSet = new ArrayList<OrdersDTO>();
					for (int i = nextListPages; i <= sizeList + 1
							&& i <= nextListPages + 10; i++) {
						OrdersDTO ord = new OrdersDTO();
						ord.setCssStyle("");
						ord.setIndex(i);
						listIndexSet.add(ord);
					}
					if (nextListPages <= sizeList + 1) {
						indexSet = nextListPages - 1;
						OrdersDTO orderPageSelected = listIndexSet.get(0);
						orderPageSelected
								.setCssStyle("background-color:#FFFF99;border:1px solid #CCCCCC;");
						indexSet = indexSet * PAGE_ITEMS_COUNT;
						session.setAttribute("indexSet", indexSet);
						session.setAttribute("nextListPages", nextListPages);
						session.setAttribute("listIndexSet", listIndexSet);
						session.setAttribute("orderPageSelected",
								orderPageSelected);
					}
				}
			}

			/*----------------- When Admin Click on the previousListPages --------------------------
					recreate listIndexSet started with index< index-10 and indexSet<indexSet-10
			 ---------------------------------------------------------------------------------------*/
			if (prevListPagesSignal != null && prevListPagesSignal != 0L
					&& listIndexSet.size() > 0) {
				OrdersDTO orderDTOPrevious = (OrdersDTO) session
						.getAttribute("orderPageSelected");
				if (orderDTOPrevious != null)
					orderDTOPrevious.setCssStyle("");
				nextListPages = (Integer) session.getAttribute("nextListPages");
				if (nextListPages != null && nextListPages >= 11) {
					prevListPages = nextListPages - 11;
					listIndexSet = new ArrayList<OrdersDTO>();
					for (int i = prevListPages; i < nextListPages; i++) {
						OrdersDTO ord = new OrdersDTO();
						ord.setCssStyle("");
						ord.setIndex(i);
						listIndexSet.add(ord);
					}
					indexSet = prevListPages - 1;
					OrdersDTO orderPageSelected = listIndexSet.get(0);
					orderPageSelected
							.setCssStyle("background-color:#FFFF99;border:1px solid #CCCCCC;");
					indexSet = indexSet * PAGE_ITEMS_COUNT;
					nextListPages = prevListPages;
					session.setAttribute("nextListPages", nextListPages);
					session.setAttribute("indexSet", indexSet);
					session.setAttribute("listIndexSet", listIndexSet);
					session.setAttribute("orderPageSelected", orderPageSelected);
				}
			}

			/*----------------- When Admin change province -----------------------------------------
								Check a list off this province
			 ---------------------------------------------------------------------------------------*/
			hashProvinces = (Hashtable<String, ProvinceDTO>) session
					.getAttribute("hashProvinces");
			if (hashProvinces == null) {
				listProvinces = productService.getAllProvinces();
				Hashtable<String, ProvinceDTO> hashProvinces = new Hashtable<String, ProvinceDTO>();
				for (ProvinceDTO prov : listProvinces) {
					hashProvinces.put(prov.getCode(), prov);
				}
				session.setAttribute("hashProvinces", hashProvinces);
			}
			if (code != null && !code.equals("") && listOrdersDTO != null) {
				ProvinceDTO provinceDTO = hashProvinces.get(code);
				if (provinceDTO != null) {
					clientProvince = provinceDTO.getCode();
				}
			}// else listCities=new ArrayList<CityDTO>();
			if (listOrdersDTO != null && indexOrder != -1) {
				orderToEdit = listOrdersDTO.get(indexOrder);
				if (orderToEdit != null) {
					orderToEdit.setClientProvince(code);
					session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				}
			}

			/*------------------------------- Refresh listOrdersDTO------------------------------------
						Refresh listOrders before generation of invoiced orders XLS file 
				 ------------------------------------------------------------------------------------------*/
			invoicedOrdersRefresh = (Long) session
					.getAttribute("invoicedOrdersRefresh");
			if (invoicedOrdersRefresh != null && invoicedOrdersRefresh != 0L) {
				listIndexColumn = (ArrayList<Integer>) session
						.getAttribute("listIndexColumn");
				if (listIndexColumn == null)
					listIndexColumn = getNewListIndexColumn();
				lsOrderId = lsOrderId.toUpperCase();
				
				//New Searching Functionality
				listOrdersDTO = orderService.searchOrdersWithOptionsAndSorting(
						creationDateStartArg, creationDateEndArg,
						reportDateBetween,orderDTOObj,listIndexColumn, PAGE_ITEMS_COUNT, indexSet);
				//Old Searching Functionality				
//				listOrdersDTO = orderService.searchOrdersWithOptionsAndSorting(
//						creationDateStartArg, creationDateEndArg,
//						reportDateBetween, userLogin, lsOrderId, status,
//						listIndexColumn, PAGE_ITEMS_COUNT, indexSet);
				
				if (findOrdersSignal != null && findOrdersSignal != 0L)
					initalizeListIndexSet(session, orderService);
				// Color in RED rows containing a GroupItems
				for (OrdersDTO orderDTO : listOrdersDTO) {
					if (orderDTO != null && orderDTO.getStatus() != null
							&& orderDTO.getStatus().equals("shipped")) {
						Long count = productService.isGroupProductID(orderDTO
								.getProductId());
						if (count != null && count >= 1) {
							orderDTO.setCssStyle("background-color: rgb(248,150,140); border-right:1px solid #CCCCCC;border-left:1px solid #CCCCCC;border-top:1px solid #CCCCCC;");
						}
					}
				}

				// keep search parameters to use in other
				// classes(PrintOrdersToPDF, ...)
				indexSet = 0;
				session.setAttribute("indexSet", indexSet);
				nextListPages = 0;
				session.setAttribute("nextListPages", nextListPages);
				session.setAttribute("selectedStatus", selectedStatus);
				session.setAttribute("creationDateStartArg",creationDateStartArg);
				session.setAttribute("creationDateEndArg", creationDateEndArg);
				session.setAttribute("reportDateBetween", reportDateBetween);
				session.setAttribute("lsOrderId", lsOrderId);
				session.setAttribute("userLogin", userLogin);
				session.setAttribute("status", status);
				session.setAttribute("listIndexColumn", listIndexColumn);
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				session.setAttribute("invoicedOrdersRefresh", 0L);
				
				session.setAttribute("productOrderNumberSearch", productOrderNumberSearch);
				session.setAttribute("clientOrderNumber", clientOrderNumber);
				session.setAttribute("clientOther", clientOther);
				return SUCCESS;
			}

			/*------------ When Admin click on the Button "Delete Order" in The OrderDtailPop --------------
								show other pop to confirm Order Delete
			  ----------------------------------------------------------------------------------------------*/
			if (deleteOrderSignal != null && deleteOrderSignal != 0L) {
				message = "Attention! if you click on \"Delete Order\" you can not restore it.";
				orderToEdit = listOrdersDTO.get(indexOrder);
				if (confirmDeleteSignal != null && confirmDeleteSignal == 0L) { // Delete
																				// Order
																				// Request
					showOrderDetailPop = "display:block;visibility:visible;";
					showConfirmDeleteOrderPop = "display:block;visibility:visible;";
				} else if (confirmDeleteSignal == 1L) { // Delete Order
														// Confirmed
					orderService.deleteOrderByLsOrderId(orderToEdit);
					// Save this operation in table operation
					OperationsDTO operationDTO = new OperationsDTO();
					User userAdmin = (User) session.getAttribute("userAdmin");
					if (userAdmin != null)
						operationDTO.setUserId(userAdmin.getId());
					operationDTO.setOperationDate(new Date());
					operationDTO.setOperationType("Delete Order");
					String dataBefore = "[PARTNER NAME:"
							+ orderToEdit.getUserLogin() + "];";
					dataBefore += " [LS_ORDER_ID:" + orderToEdit.getLsOrderId()
							+ "];";
					dataBefore += " [PRODUCT_ORDER_NUMBER:"
							+ orderToEdit.getProductOrderNumber() + "];";
					dataBefore += " [CLIENT_FIRST_NAME:"
							+ orderToEdit.getClientFirstName() + "];";
					dataBefore += " [CLIENT_LAST_NAME:"
							+ orderToEdit.getClientLastName() + "];";
					dataBefore += " [CLIENT_POSTAL_CODE:"
							+ orderToEdit.getClientPostalCode() + "];";
					dataBefore += " [LS_PRODUCT_ID:"
							+ orderToEdit.getLsProductID() + "];";
					dataBefore += " [UNIT_PRICE:" + orderToEdit.getUnitPrice()
							+ "];";
					dataBefore += " [STATUS:" + orderToEdit.getStatus() + "];";
					operationDTO.setDataBefore(dataBefore);
					operationDTO.setDataBefore(operationDTO.getDataBefore());
					operationDTO.setDataAfter("");
					operationsService.insertOperation(operationDTO);
					// Remove order from the list orders
					listOrdersDTO.remove(orderToEdit);
					session.setAttribute("listOrdersDTOReport", listOrdersDTO);
					showOrderDetailPop = "visibility:hidden;display:none;";
					showConfirmDeleteOrderPop = "visibility:hidden;display:none;";
					// initialize index orders
					int indexOrder = 0;
					int indexRow = 0;
					for (OrdersDTO orderDTO : listOrdersDTO) {
						orderDTO.setIndex(indexOrder);
						indexOrder++;
						indexRow = 0;
						for (OrdersRows orderRows : orderDTO.getRowsList()) {
							orderRows.setIndex(indexRow);
							indexRow++;
						}
					}
					session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				} else { // Cancel Order Delete
					showOrderDetailPop = "display:block;visibility:visible;";
					showConfirmDeleteOrderPop = "visibility:hidden;display:none;";
				}
				return SUCCESS;
			}

			/*------ When Admin click the "Edit link" in the Order Table for Edit NOTE -----
							show only field Edit Note
			  ------------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& showOnlyEditNote != null && showOnlyEditNote != 0L) {
				orderToEdit = listOrdersDTO.get(indexOrder);
				for (OrdersDTO order : listOrdersDTO) {
					order.setShowOnlyEditNote(0L);
					order.setCssRow("");
				}
				orderToEdit.setShowOnlyEditNote(1L);
				orderToEdit.setCssRow("background-color:#FF9966;");
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				listOrdersDTO = (ArrayList<OrdersDTO>) session
						.getAttribute("listOrdersDTOReport");
				return SUCCESS;
			}

			/*------------ When Admin click on link "Save Edit Note in the Orders Table" ----------
													save Only  notes
			  -------------------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& saveOnlyNoteSignal != null && saveOnlyNoteSignal != 0L) {
				if (indexOrder != null) {
					orderToEdit = listOrdersDTO.get(indexOrder);
					if (orderToEdit != null) {
						orderToEdit.setNotes(notes);
						orderToEdit.setShowRowShipping(0L);
						orderToEdit.setShowOnlyEditNote(0L);
						orderToEdit.setCssRow("");
						// Save Note
						Boolean sucess = orderService
								.updateShippingOrderElements(orderToEdit);
						session.setAttribute("listOrdersDTOReport",
								listOrdersDTO);
					}
				}
				return SUCCESS;
			}

			/*------------ When Admin click the "Edit link" in the Order Table -------------
								show fields to edit shipping parameters
			  ------------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& showRowShipping != null && showRowShipping != 0L) {

				orderToEdit = listOrdersDTO.get(indexOrder);
				for (OrdersDTO order : listOrdersDTO) {
					order.setShowRowShipping(0L);
					order.setCssRow("");
				}
				// only Admins who has Active = true of action name='All' can
				// change shipping settings
				// of orders shipped or invoiced
				if (usersPrivChangeShippedStatus == null
						&& orderToEdit.getStatus() != null
						&& (orderToEdit.getStatus().equals("shipped") || orderToEdit
								.getStatus().equals("invoiced"))) {
					showRowShipping = 0L;
					return SUCCESS;
				}

				if (orderToEdit != null) {
					orderToEdit.setShowRowShipping(1L);
					orderToEdit.setShowOnlyEditNote(1L);
					orderToEdit.setCssRow("background-color:#FF9966;");
					session.setAttribute("listOrdersDTOReport", listOrdersDTO);
					listOrdersDTO = (ArrayList<OrdersDTO>) session
							.getAttribute("listOrdersDTOReport");
				}
				if (orderToEdit.getStatus().equals("open")) {
					statusId = 0L;
				} else if (orderToEdit.getStatus().equals("progress")) {
					statusId = 1L;
				} else if (orderToEdit.getStatus().equals("shipped")) {
					statusId = 2L;
				} else if (orderToEdit.getStatus().equals("invoiced")) {
					statusId = 3L;
				} else if (orderToEdit.getStatus().equals("canceled")) {
					statusId = 4L;
				}
				return SUCCESS;
			}

			/*------------ When Admin click on link "Save in the Orders Table" ----------
							save all shipping parameters and notes
			 ----------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& saveShippingSignal != null && saveShippingSignal != 0L) {
				if (indexOrder != null) {
					orderToEdit = listOrdersDTO.get(indexOrder);
					if (orderToEdit != null) {
						Date shippedDateToEdit = null;
						frm = new SimpleDateFormat("dd/MM/yyyy");
						if (((strShippedDate) != null)
								&& (!"".equals(strShippedDate))) {
							strShippedDate = strShippedDate.replaceAll(" ", "");
							try {
								Date date = frm.parse(strShippedDate);
								shippedDateToEdit = date;
							} catch (Exception pe) {
								shippedDateToEdit = null;
							}
						}
						if (((strShippedDate) != null)
								&& (!"".equals(strShippedDate))
								&& strShippedDate.length() <= 8)
							shippedDateToEdit = orderToEdit.getShippedDate();
						Double shippingPrice = null;
						// Double currencyShippingPrice=null;
						if (strShippingPrice != null
								&& !strShippingPrice.equals("")) {
							strShippingPrice = strShippingPrice.replaceAll(" ",
									"");
							int index = strShippingPrice.indexOf(",");
							if (index >= 0) {
								String strUnitPrice1 = strShippingPrice
										.substring(0, index);
								String strUnitPrice2 = strShippingPrice
										.substring(index + 1,
												strShippingPrice.length());
								strShippingPrice = strUnitPrice1 + "."
										+ strUnitPrice2;
							}

							try {
								shippingPrice = Double
										.parseDouble(strShippingPrice);
								/*
								 * if(shippingPrice!=null &&
								 * orderToEdit.getCurrencyId()!=null &&
								 * orderToEdit.getCurrencyId()!=1 &&
								 * orderToEdit.getCurrencyRate()!=null) {
								 * currencyShippingPrice = shippingPrice *
								 * orderToEdit.getCurrencyRate();
								 * currencyShippingPrice = (double)
								 * Math.round(currencyShippingPrice*100)/100; }
								 */
							} catch (Exception pe) {
								shippingPrice = null;
							}
						}

						if (trakingNumber != null)
							trakingNumber = trakingNumber.replaceAll(
									"^ +| +$|( )+", "$1");
						if (shippingCompany != null)
							shippingCompany = shippingCompany.replaceAll(
									"^ +| +$|( )+", "$1");
						orderToEdit.setShippingPrice(shippingPrice);
						// orderToEdit.setCurrencyShippingPrice(currencyShippingPrice);
						// orderToEdit.getRowsList().get(0).setCurrencyShippingPrice(currencyShippingPrice);
						orderToEdit.setShippedDate(shippedDateToEdit);
						orderToEdit.setNotes(notes);
						if (newStatus != null && !newStatus.equals(""))
							orderToEdit.setStatus(newStatus);
						orderToEdit.setShippingCompany(shippingCompany);
						orderToEdit.setTrackingNumber(trakingNumber);
						orderToEdit.setShowRowShipping(0L);
						orderToEdit.setShowOnlyEditNote(0L);
						OrdersRows row = orderToEdit.getRowsList().get(0);
						row.setShippingPrice(shippingPrice);
						row.setShippingCompany(shippingCompany);
						row.setTrackingNumber(trakingNumber);
						orderToEdit.setCssRow("");

						if (newStatus != null && !newStatus.equals("")) { // if
																			// admin
																			// click
																			// on
																			// the
																			// save
																			// behind
																			// status
							orderService.updateStatusByLsOrderId(
									orderToEdit.getLsOrderId(), newStatus);
							orderToEdit.setStatus(newStatus);
							if (!newStatus.equals("shipped")
									&& !newStatus.equals("invoiced")
									&& !newStatus.equals("canceled")) {
								orderToEdit.setShippingPrice(null);
								orderToEdit.setTrackingNumber(null);
								orderToEdit.setShippedDate(null);
							}

						} else {// if admin click on the save other than Status
							if (orderToEdit.getShippedDate() != null
									&& orderToEdit.getTrackingNumber() != null
									&& !orderToEdit.getTrackingNumber().equals(
											"")
									&& orderToEdit.getShippingCompany() != null
									&& !orderToEdit.getShippingCompany()
											.equals("")
									&& orderToEdit.getShippingPrice() != null
									&& orderToEdit.getStatus() != null) {
								if (orderToEdit.getStatus().equals("open")
										|| orderToEdit.getStatus().equals(
												"progress")) {
									orderService.updateStatusByLsOrderId(
											orderToEdit.getLsOrderId(),
											"shipped");
									orderToEdit.setStatus("shipped");
								}
							} else {
								if (usersPrivChangeShippedStatus != null
										&& !orderToEdit.getStatus().equals(
												"open")
										&& !orderToEdit.getStatus().equals(
												"progress")) {
									orderService.updateStatusByLsOrderId(
											orderToEdit.getLsOrderId(),
											"progress");
									orderToEdit.setStatus("progress");
								}
							}
						}
						// if admin click on the save other then status(save
						// notes, save shipping company ...)
						Boolean sucess = orderService
								.updateShippingOrderElements(orderToEdit);
						session.setAttribute("listOrdersDTOReport",
								listOrdersDTO);
					}
				}
				return SUCCESS;
			}

			/*------------ When Admin click on icon findOrders.png ----------
								check user and complete infos client
			 ----------------------------------------------------------------*/
			if (findOrdersSignal != null
					&& findOrdersSignal != 0L
					|| (pageIndexSignal != null && pageIndexSignal != 0L)
					|| (nextListPagesSignal != null && nextListPagesSignal != 0L)
					|| (prevListPagesSignal != null && prevListPagesSignal != 0L)) {
				// session.setAttribute("allOrdersSelectedSignal",0L);
				// if admin click on search icon initialize checkBoxItem to
				// false
				if (findOrdersSignal != null && findOrdersSignal != 0L) {
					session.setAttribute("allOrdersSelectedSignal", 0L);
					checkBoxItem = false;
					session.setAttribute("checkBoxItem", checkBoxItem);
					indexSet = 0;
					session.setAttribute("indexSet", indexSet);
					nextListPages = 0;
					session.setAttribute("nextListPages", nextListPages);
					session.setAttribute("selectedStatus", selectedStatus);

				}
				// if admin navigate on pages keep the previous sorting
				if (((pageIndexSignal != null && pageIndexSignal != 0L)
						|| (nextListPagesSignal != null && nextListPagesSignal != 0L) || (prevListPagesSignal != null && prevListPagesSignal != 0L))) {
					listIndexColumn = (ArrayList<Integer>) session
							.getAttribute("listIndexColumn");
					if (listIndexColumn == null)
						listIndexColumn = getNewListIndexColumn();
				} else { // prepare new sorting
					listIndexColumn = getNewListIndexColumn();
				}

				lsOrderId = lsOrderId.toUpperCase();
				// if(findOrdersSignal!=null &&
				// findOrdersSignal!=0L)initalizeListIndexSet(session,orderService
				// );
				
				//Old Working Methods
//				listOrdersDTO = orderService.searchOrdersWithOptionsAndSorting(
//						creationDateStartArg, creationDateEndArg,
//						reportDateBetween, userLogin, lsOrderId, status,
//						listIndexColumn, PAGE_ITEMS_COUNT, indexSet);
				
				//New Functionality with same mapping
				listOrdersDTO = orderService.searchOrdersWithOptionsAndSortingNew(
								creationDateStartArg, creationDateEndArg,
								reportDateBetween, userLogin, lsOrderId,
								status, listIndexColumn, PAGE_ITEMS_COUNT,
								indexSet, productOrderNumberSearch,clientOrderNumber,
								clientOther);

//				//New Searching Functionality
//				listOrdersDTO = orderService.searchOrdersWithOptionsAndSorting(
//						creationDateStartArg, creationDateEndArg,
//						reportDateBetween, orderDTOObj, listIndexColumn,
//						PAGE_ITEMS_COUNT, indexSet);
				
				
				// Color in RED rows containing a GroupItems
				for (OrdersDTO orderDTO : listOrdersDTO) {
					if (orderDTO != null && orderDTO.getStatus() != null
							&& orderDTO.getStatus().equals("shipped")) {
						Long count = productService.isGroupProductID(orderDTO
								.getProductId());
						if (count != null && count >= 1) {
							orderDTO.setCssStyle("background-color: rgb(248,150,140); border-right:1px solid #CCCCCC;border-left:1px solid #CCCCCC;border-top:1px solid #CCCCCC;");
						}
					}
				}

				// keep search parameters to use in other
				// classes(PrintOrdersToPDF, ...)
				session.setAttribute("creationDateStartArg",
						creationDateStartArg);
				session.setAttribute("creationDateEndArg", creationDateEndArg);
				session.setAttribute("reportDateBetween", reportDateBetween);
				session.setAttribute("lsOrderId", lsOrderId);
				session.setAttribute("userLogin", userLogin);
				session.setAttribute("status", status);
				//For newly added field
				session.setAttribute("productOrderNumberSearch", productOrderNumberSearch);

				session.setAttribute("listIndexColumn", listIndexColumn);
				session.setAttribute("sizeResult", sizeResult);
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				if (findOrdersSignal != null && findOrdersSignal != 0L)
					initalizeListIndexSet(session, orderService);
				return SUCCESS;
			}

			/*------------ When Admin click on the icon sorting of column ----------
							seach result with option of sorting list
			 -----------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& sortingOrdersSignal != null && sortingOrdersSignal != 0L) {
				listIndexColumn = (List<Integer>) session
						.getAttribute("listIndexColumn");
				asc = (asc == 1 ? -1 : 1);
				int nextElement = listIndexColumn.get(0);
				fieldForSorting = asc * fieldForSorting;
				listIndexColumn.set(0, fieldForSorting);
				for (int i = 1; i < listIndexColumn.size(); i++) {
					int element = listIndexColumn.get(i);
					listIndexColumn.set(i, nextElement);
					nextElement = element;
				}
				
				//New Functionality with same mapping
				listOrdersDTO = orderService.searchOrdersWithOptionsAndSortingNew(
								creationDateStartArg, creationDateEndArg,
								reportDateBetween, userLogin, lsOrderId,
								status, listIndexColumn, PAGE_ITEMS_COUNT,
								indexSet, productOrderNumberSearch,clientOrderNumber,
								clientOther);
				
//				listOrdersDTO = orderService.searchOrdersWithOptionsAndSorting(
//						creationDateStartArg, creationDateEndArg,
//						reportDateBetween, userLogin, lsOrderId, status,
//						listIndexColumn, PAGE_ITEMS_COUNT, indexSet);
				
//				// New Searching Functionality
//				listOrdersDTO = orderService.searchOrdersWithOptionsAndSorting(
//						creationDateStartArg, creationDateEndArg,
//						reportDateBetween, orderDTOObj, listIndexColumn,
//						PAGE_ITEMS_COUNT, indexSet);
				
				int balance = 0;
				int OrderIndex = 0;
				for (OrdersDTO orDTO : listOrdersDTO) {
					balance = (balance == 1 ? 0 : 1);
					if (balance == 1) {
						orDTO.setCssStyle("background-color: rgb(245,249,252);border-right: 1px solid #CCCCCC;border-left:1px solid #CCCCCC;border-top:  1px solid #CCCCCC;");
					} else {
						orDTO.setCssStyle("background-color: color:white;border-right:1px solid #CCCCCC;border-left:1px solid #CCCCCC;border-top:1px solid #CCCCCC;");
					}
					orDTO.setIndex(OrderIndex);
					OrderIndex++;
				}
				session.setAttribute("listIndexColumn", listIndexColumn);
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				session.setAttribute("asc", asc);
				return SUCCESS;
			}

			/*------ when Admin click on the lsOrder link in table -----------
					show popup detail and allow admin to update Order
			  ---------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& editOrderSignal != null && editOrderSignal != 0L) {
				orderToEdit = listOrdersDTO.get(indexOrder);
				if (orderToEdit == null)
					orderToEdit = new OrdersDTO();
				if (orderToEdit.getProductOrderDate() == null)
					strProductOrderDate = "";
				showOrderDetailPop = "display:block;visibility:visible;";
				return SUCCESS;
			}

			/*--- when Admin click on the cancel Button of orderDetailPop ---
					we mast just hide popup OrderDetail
			  ---------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& cancelSignal != null && cancelSignal != 0L) {
				showOrderDetailPop = "visibility:hidden;display:none;";
				return SUCCESS;
			}

			/*-------------------- When Admin left lsProduct TextField -------------
								check userPrice in DB, and write it in web view
			 -----------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& checkProductPriceSignal != null
					&& checkProductPriceSignal != 0L) {
				OrdersDTO orderDTOToUpdate = listOrdersDTO.get(indexOrder);
				orderDTOToUpdate = fillDataOrderDTO(orderDTOToUpdate);
				OrdersRows orderRowToUpadate = orderDTOToUpdate.getRowsList()
						.get(indexRow);
				UserProductPriceDTO userProductPrice = productService
						.getUsrPPriceByLsproductId(userId, lsProductID);
				orderRowToUpadate.setCss("");
				orderRowToUpadate.setCssPrice("");
				if (userProductPrice == null) {
					orderRowToUpadate.setCss("background-color:red;");
					orderRowToUpadate.setProductDescription("");
					orderRowToUpadate.setStock(null);
					orderRowToUpadate.setProductId(null);
					orderRowToUpadate.setLsProductID(lsProductID);
					orderRowToUpadate.setLsPrice(null);
				} else {
					Double usrPrice = orderRowToUpadate.getUnitPrice();
					if (usrPrice == null)
						usrPrice = 0D;
					if (usrPrice < userProductPrice.getPriceNum()) {
						orderRowToUpadate.setCssPrice("background-color:red;");
					}
					orderRowToUpadate.setProductDescription(userProductPrice
							.getProductTitle());
					orderRowToUpadate.setStock(userProductPrice.getStock());
					orderRowToUpadate.setProductId(userProductPrice
							.getProductId());
					orderRowToUpadate.setLsProductID(userProductPrice
							.getLsProductId());
					orderRowToUpadate
							.setLsPrice(userProductPrice.getPriceNum());
				}
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				orderToEdit = orderDTOToUpdate;
				listOrdersDTO = (List<OrdersDTO>) session
						.getAttribute("listOrdersDTOReport");
				showOrderDetailPop = "display:block;visibility:visible;";
				return SUCCESS;
			}

			/*----------------- When Admin check on saveTemporaryRow Icon --------------------------
					we must first obtained the object that contains the list of rows,
					after we accede to the row by index recovered by web view and change it
			 ---------------------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& saveTemporaryRowSignal != null
					&& saveTemporaryRowSignal != 0L) {
				OrdersDTO orderDTOToUpdate = listOrdersDTO.get(indexOrder);
				orderDTOToUpdate = fillDataOrderDTO(orderDTOToUpdate);
				OrdersRows orderRowToSaveMemory = orderDTOToUpdate
						.getRowsList().get(indexRow);
				orderRowToSaveMemory.setIcon("images/orders/itemValidated.png");
				if (orderRowToSaveMemory != null) {
					orderRowToSaveMemory.setQuantity(quantity);
					orderRowToSaveMemory.setLsProductID(lsProductID);
					orderRowToSaveMemory
							.setProductDescription(productDescription);
					orderRowToSaveMemory.setUnitPrice(unitPrice);
					orderRowToSaveMemory
							.setCssPrice("background-color:#FF6666;");
					orderRowToSaveMemory
							.setCssQuantity("background-color:#FF6666;");
					if (quantity != null && quantity > 0D)
						orderRowToSaveMemory.setCssQuantity("");
					if (unitPrice != null
							&& orderRowToSaveMemory.getLsPrice() != null
							&& unitPrice >= orderRowToSaveMemory.getLsPrice())
						orderRowToSaveMemory.setCssPrice("");
					orderRowToSaveMemory.setShippingFee(shippingFee);
					orderRowToSaveMemory.setShippingPrice(shippingFee);
					orderRowToSaveMemory.setShippingCompany(shippingCompany);
					orderRowToSaveMemory.setTrackingNumber(trakingNumber);
					if (orderRowToSaveMemory.getCurrencyId() != null
							&& orderRowToSaveMemory.getCurrencyId() != 1
							&& orderRowToSaveMemory.getCurrencyRate() != null) {
						if (unitPrice != null) {
							orderRowToSaveMemory
									.setCurrencyUnitPrice(unitPrice);
							unitPrice = unitPrice
									/ orderRowToSaveMemory.getCurrencyRate();
							unitPrice = (double) Math.round(unitPrice * 100) / 100;
							orderRowToSaveMemory.setUnitPrice(unitPrice);
						}
						/*
						 * if(shippingFee!=null) {
						 * orderRowToSaveMemory.setCurrencyShippingPrice
						 * (shippingFee); shippingFee =
						 * shippingFee/orderRowToSaveMemory.getCurrencyRate();
						 * shippingFee = (double)
						 * Math.round(shippingFee*100)/100;
						 * orderRowToSaveMemory.setShippingPrice(shippingFee); }
						 */
					}
					int indexOrder = 0;
					int indexRow = 0;
					for (OrdersDTO orderDTO : listOrdersDTO) {
						orderDTO.setIndex(indexOrder);
						indexOrder++;
						indexRow = 0;
						for (OrdersRows orderRows : orderDTO.getRowsList()) {
							orderRows.setIndex(indexRow);
							indexRow++;
						}
					}
					session.setAttribute("listOrdersDTOReport", listOrdersDTO);
					listOrdersDTO = (List<OrdersDTO>) session
							.getAttribute("listOrdersDTOReport");
				}
				orderToEdit = listOrdersDTO.get(indexOrder);
				// Change totalPrice also
				if (orderToEdit.getRowsList().get(0) != null
						&& orderToEdit.getRowsList().get(0).getQuantity() != null
						&& orderToEdit.getRowsList().get(0)
								.getQuantityToSplit() != null
						&& orderToEdit.getRowsList().get(0).getUnitPrice() != null) {
					Double priceTotal = orderToEdit.getRowsList().get(0)
							.getUnitPrice()
							* orderToEdit.getRowsList().get(0)
									.getQuantityToSplit();
					priceTotal = (double) Math.round(priceTotal * 100) / 100;
					orderToEdit.setTotalPrice(priceTotal);
				}
				showOrderDetailPop = "display:block;visibility:visible;";
				return SUCCESS;
			}

			/*------- When Admin click on addSimilarRow Icon on the OrderDetailPop --------
								Add one Row Similar at the previews
			  -----------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& addSimilarRowSignal != null && addSimilarRowSignal != 0L) {
				OrdersDTO orderDTOToUpdate = listOrdersDTO.get(indexOrder);
				// generate lsOrderId to new order
				orderDTOToUpdate = fillDataOrderDTO(orderDTOToUpdate);
				OrdersRows orderRowToClone = orderDTOToUpdate.getRowsList()
						.get(indexRow);
				if (orderRowToClone != null) {
					if (!orderRowToClone.getIcon().equals(
							"images/orders/itemValidated.png")) {
						orderRowToClone.setQuantity(quantity);
						orderRowToClone.setLsProductID(lsProductID);
						orderRowToClone.setStock(stock);
						orderRowToClone
								.setProductDescription(productDescription);
						orderRowToClone.setUnitPrice(unitPrice);
						orderRowToClone.setShippingFee(shippingFee);
						orderRowToClone.setShippingCompany(shippingCompany);
						orderRowToClone.setTrackingNumber(trakingNumber);
					}
					orderRowToClone.setIcon("images/orders/itemValidated.png");
					OrdersRows orderRowToAdd = DTOFactory
							.getOrderRowClone(orderRowToClone);
					orderRowToAdd.setId(-1L);
					// Add currencyId
					if (orderRowToClone.getCurrencyId() != null)
						orderRowToAdd.setCurrencyId(orderRowToClone
								.getCurrencyId());

					orderDTOToUpdate.getRowsList().add(indexRow + 1,
							orderRowToAdd);
					int indexOrder = 0;
					int indexRow = 0;
					for (OrdersDTO orderDTO : listOrdersDTO) {
						orderDTO.setIndex(indexOrder);
						indexOrder++;
						indexRow = 0;
						for (OrdersRows orderRows : orderDTO.getRowsList()) {
							orderRows.setIndex(indexRow);
							indexRow++;
						}
					}
					session.setAttribute("listOrdersDTOReport", listOrdersDTO);
					listOrdersDTO = (List<OrdersDTO>) session
							.getAttribute("listOrdersDTOReport");
				}
				orderToEdit = listOrdersDTO.get(indexOrder);
				showOrderDetailPop = "display:block;visibility:visible;";
				return SUCCESS;
			}

			/*-------- When Admin click on Delete Row Icon of orderDetail Popup-----------
									Delete this row using index
			 -----------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& deleteRowSignal != null && deleteRowSignal != 0L) {
				OrdersDTO orderDTO = listOrdersDTO.get(indexOrder);
				orderDTO = fillDataOrderDTO(orderDTO);
				int nb = orderService.nbOrderRowsNotDeleted(orderDTO
						.getRowsList());
				if (orderDTO != null && orderDTO.getRowsList().size() > 1) {
					for (int i = 0; i < orderDTO.getRowsList().size(); i++) {
						if (i == indexRow && nb > 1) {
							orderDTO.getRowsList().get(i).setToDelete(1);
							break;
						}
					}
				}
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				orderToEdit = listOrdersDTO.get(indexOrder);
				showOrderDetailPop = "display:block;visibility:visible;";
				return SUCCESS;
			}

			/*------ when Admin click on the button save of orderDetail ------------------
					 save order and hide pup  
			  ----------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& saveOrdersSignal != null && saveOrdersSignal != 0L) {
				session.setAttribute("orderNotSavedAtFirst", null);
				orderToEdit = listOrdersDTO.get(indexOrder);
				orderToEdit = fillDataOrderDTO(orderToEdit);

				// add special handling shipping
				User user = null;
				if (orderToEdit.getUserLogin() != null)
					user = userService.getUserByLogin(orderToEdit
							.getUserLogin());
				if (user != null) {
					Double totalPrice = null;
					orderToEdit.setSpecialHandlingName(user
							.getSpecialHandlingName());
					orderToEdit.setSpecialHandlingFee(user
							.getSpecialHandlingFee());
					if (orderToEdit.getRowsList().get(0).getQuantity() != null
							&& orderToEdit.getRowsList().get(0).getUnitPrice() != null) {
						totalPrice = orderToEdit.getRowsList().get(0)
								.getQuantity()
								* orderToEdit.getRowsList().get(0)
										.getUnitPrice();
						totalPrice = (double) Math.round(totalPrice * 100) / 100;
					}

					orderToEdit.setTotalPrice(totalPrice);
				}

				orderService.updateOrderByLsOrderId(orderToEdit);
				for (OrdersRows row : orderToEdit.getRowsList()) {
					if (row.getId() == -1)
						row.setId(0L);
				}
				OrdersRows row = orderToEdit.getRowsList().get(0);
				if (row != null) {
					orderToEdit.getShippedDate();
					orderToEdit.setLsPrice(row.getLsPrice());
					orderToEdit.setLsProductID(row.getLsProductID());
					orderToEdit.setProductDescription(row
							.getProductDescription());
					orderToEdit.setQuantity(row.getQuantity());
				}
				orderToEdit = DTOFactory.getOrderDTOConsideredMissingInfo(
						orderToEdit, hashProvinces);
				listIndexColumn = (List<Integer>) session
						.getAttribute("listIndexColumn");
				
//				listOrdersDTO = orderService.searchOrdersWithOptionsAndSorting(
//						creationDateStartArg, creationDateEndArg,
//						reportDateBetween, userLogin, lsOrderId, status,
//						listIndexColumn, PAGE_ITEMS_COUNT, indexSet);
				

				//New Functionality with same mapping
				listOrdersDTO = orderService.searchOrdersWithOptionsAndSortingNew(
								creationDateStartArg, creationDateEndArg,
								reportDateBetween, userLogin, lsOrderId,
								status, listIndexColumn, PAGE_ITEMS_COUNT,
								indexSet, productOrderNumberSearch,clientOrderNumber,
								clientOther);				
				
				// New Searching Functionality
//				listOrdersDTO = orderService.searchOrdersWithOptionsAndSorting(
//						creationDateStartArg, creationDateEndArg,
//						reportDateBetween, orderDTOObj, listIndexColumn,
//						PAGE_ITEMS_COUNT, indexSet);
				
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				message = "Saving has completed successfuly";
				showSaveSuccessPop = "display:block;visibility:visible;";
				showOrderDetailPop = "display:block;visibility:visible;";
				return SUCCESS;
			}

			/*------ When user change Quantity to split in orderDetailPop -----------
					 prepare order to split from two other orders witch
				 	 one must have a lsOrder with underscore 
			 ------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& quantityToChangeSignal != null
					&& quantityToChangeSignal != 0L) {
				OrdersDTO orderToChangeQt = listOrdersDTO.get(indexOrder);
				OrdersRows orderRow = orderToChangeQt.getRowsList().get(
						indexRow);
				orderToChangeQt = fillDataOrderDTO(orderToChangeQt);
				if (quantityToChange < orderRow.getQuantity())
					orderRow.setQuantityToSplit(quantityToChange);
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				listOrdersDTO = (List<OrdersDTO>) session
						.getAttribute("listOrdersDTOReport");
				orderToEdit = listOrdersDTO.get(indexOrder);
				showOrderDetailPop = "display:block;visibility:visible;";
				return SUCCESS;
			}

			/*-------------------- Duplicate Order ----------------------------------------
							Create order in just in memory
			 -----------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& duplicateOrderSignal != null
					&& duplicateOrderSignal != 0L) {
				OrdersDTO orderToClone = listOrdersDTO.get(indexOrder);
				orderToClone = fillDataOrderDTO(orderToClone);
				hashOrders = new Hashtable<String, OrdersDTO>();
				for (OrdersDTO ord : listOrdersDTO) {
					hashOrders.put(ord.getLsOrderId(), ord);
				}
				OrdersDTO orderClone = DTOFactory
						.getOrderDTOSplitted(orderToClone);
				if (orderClone != null) {
					orderClone.setDuplicate(true);
					String lsOrder = orderClone.getLsOrderId();
					String strlsOrder = orderService.generateLsOrderId(lsOrder,
							hashOrders);
					orderClone.setLsOrderId(strlsOrder);// rgb(116,180,209)
					orderClone
							.setCssStyle("background-color:#FFFF99;border-right: 1px solid #CCCCCC;border-left:1px solid #CCCCCC;border-top:  1px solid #CCCCCC;");
					orderToEdit = orderClone;
					orderToEdit.setBackgroundColor("background-color:#FFFF99;");
					listOrdersDTO.add(indexOrder + 1, orderClone);
					indexOrder = 0;
					for (OrdersDTO ord : listOrdersDTO) {
						ord.setIndex(indexOrder);
						indexOrder++;
					}
					orderService.updateOrderByLsOrderId(orderToClone);
					orderService.insertOrderWithRows(orderClone);
					orderClone.setDuplicate(false);
					for (OrdersRows row : orderClone.getRowsList()) {
						if (row.getId() < 0L)
							row.setId(0L);
					}
					if (listOrdersDTO.size() > 0) {
						session.setAttribute("listOrdersDTOReport",
								listOrdersDTO);
					}
				} else
					orderToEdit = orderToClone;
				showOrderDetailPop = "display:block;visibility:visible;";
				return SUCCESS;
			}

			/*-------------------- When user check print item -----------------------------
					Add or remove this element from the orders to print
			 -----------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& okSaveSuccessPopSignal != null
					&& okSaveSuccessPopSignal != 0L) {
				showSaveSuccessPop = "visibility:hidden;display:none;";
				showOrderDetailPop = "visibility:hidden;display:none;";
				return SUCCESS;
			}
		} catch (Exception e) {
			e.printStackTrace();
			return "input";
		}
		return SUCCESS;
	}

	/*
	 * ==========================================================================
	 * =============== fill all fields of order without rows
	 * ====================
	 * =====================================================================
	 */
	public OrdersDTO fillDataOrderDTO(OrdersDTO orderDTO) {
		SimpleDateFormat frm = new SimpleDateFormat("dd/MM/yyyy");
		orderDTO.setClientLastName(clientLastName);
		orderDTO.setClientFirstName(clientFirstName);
		orderDTO.setClientOtherNames(clientOtherNames);
		orderDTO.setClientStreet(clientStreet);
		orderDTO.setClientOtherStreet(clientOtherStreet);
		orderDTO.setClientCity(clientCity);
		orderDTO.setClientProvince(code);
		orderDTO.setClientPostalCode(clientPostalCode);
		orderDTO.setClientPhone(clientPhone);
		orderDTO.setClientEmail(clientEmail);
		orderDTO.setProductOrderNumber(productOrderNumberSearch);
		orderDTO.setCompanyHeader(companyHeader);
		if (((strProductOrderDate) != null)
				&& (!"".equals(strProductOrderDate))) {
			frm = new SimpleDateFormat("dd/MM/yyyy");
			try {
				Date date = frm.parse(strProductOrderDate);
				orderDTO.setProductOrderDate(date);
			} catch (Exception pe) {
				addActionError("Please enter a date in the correct format");
			}
		}

		if (((strCreationOrderDate) != null)
				&& (!"".equals(strCreationOrderDate))) {
			frm = new SimpleDateFormat("dd/MM/yyyy");
			try {
				Date date = frm.parse(strCreationOrderDate);
				orderDTO.setCreationDate(date);
			} catch (Exception pe) {
				addActionError("Please enter a date in the correct format");
			}
		}

		if (((strRequiredDate) != null) && (!"".equals(strRequiredDate))) {
			frm = new SimpleDateFormat("dd/MM/yyyy");
			try {
				Date date = frm.parse(strRequiredDate);
				orderDTO.setRequiredDate(date);
			} catch (Exception pe) {
				addActionError("Please enter a date in the correct format");
			}
		}
		return orderDTO;
	}

	/*
	 * ==========================================================================
	 * =============== initialize ListIndexSet
	 * ==================================
	 * =======================================================
	 */
	public void initalizeListIndexSet(HttpSession session,
			OrdersService orderService) throws ServiceException {
		listIndexSet = new ArrayList<OrdersDTO>();
		totalOrders = orderService.getCountOrders(creationDateStartArg,
				creationDateEndArg, reportDateBetween, userLogin, lsOrderId,
				status,productOrderNumberSearch,clientOrderNumber,clientOther);
		
		String strcount = totalOrders.toString();
		Integer sizeList = Integer.parseInt(strcount) / PAGE_ITEMS_COUNT;
		nextListPages = 1;
		session.setAttribute("nextListPages", nextListPages);
		for (int i = 1; i <= sizeList + 1 && i <= 11; i++) {
			OrdersDTO ord = new OrdersDTO();
			ord.setCssStyle("");
			ord.setIndex(i);
			listIndexSet.add(ord);
		}
		indexSet = 0;
		session.setAttribute("indexSet", indexSet);
		session.setAttribute("totalOrders", totalOrders);
		session.setAttribute("listIndexSet", listIndexSet);
		session.setAttribute("productOrderNumberSearch", productOrderNumberSearch);

	}

	/*
	 * ==========================================================================
	 * =============== initialize listIndexColumn
	 * ================================
	 * =========================================================
	 */
	List<Integer> getNewListIndexColumn() {
		List<Integer> reult = new ArrayList<Integer>();
		for (int i = 0; i <= 34; i++) {
			if (i != 2 && i <= 13) {
				reult.add(i);
				if (i != 0)
					reult.add(-i);
			}
			if (i == 30 || i == 31 || i == 34) {
				reult.add(i);
				reult.add(-i);
			}
		}
		return reult;
	}

	/*
	 * ==========================================================================
	 * =============== getStatus Selected by Admin for searching
	 * ================
	 * =========================================================================
	 */
	public String getStatusSelected(Integer StatusIndex) {
		String result = "";
		switch (StatusIndex) {
		case 0:
			result = "open";
			break;
		case 1:
			result = "progress";
			break;
		case 2:
			result = "shipped";
			break;
		case 3:
			result = "invoiced";
			break;
		case 4:
			result = "canceled";
			break;
		default:
			result = "";
		}
		return result;
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.Argument.bind(Argument.java:35)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.bindArguments(AbstractMethodDeclaration.java:83)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:406)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1147)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1235)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:540)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:883)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:928)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:189)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:255)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:190)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:89)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:728)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:788)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1244)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:102)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)

!ENTRY org.eclipse.jdt.ui 4 2 2015-04-15 11:59:28.780
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:233)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:255)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:190)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:89)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:728)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:788)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1244)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:102)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)
Caused by: java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.Argument.bind(Argument.java:35)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.bindArguments(AbstractMethodDeclaration.java:83)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:406)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1147)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1235)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:540)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:883)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:928)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:189)
	... 16 more
Caused by: java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.Argument.bind(Argument.java:35)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.bindArguments(AbstractMethodDeclaration.java:83)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:406)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1147)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1235)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:540)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:883)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:928)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:189)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:255)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:190)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:89)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:728)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:788)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1244)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:102)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2015-04-15 11:59:28.781
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.Argument.bind(Argument.java:35)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.bindArguments(AbstractMethodDeclaration.java:83)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:406)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1147)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1235)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:540)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:883)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:928)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:189)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:255)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:190)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:89)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:728)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:788)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1244)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:102)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2015-04-15 11:59:28.782
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.Argument.bind(Argument.java:35)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.bindArguments(AbstractMethodDeclaration.java:83)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:406)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1147)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1235)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:540)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:883)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:928)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:189)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:255)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:190)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:89)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:728)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:788)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1244)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:102)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)

!ENTRY org.eclipse.jdt.ui 4 0 2015-04-15 11:59:28.782
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:233)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:255)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:190)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:89)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:728)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:788)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1244)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:102)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)
Caused by: java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.Argument.bind(Argument.java:35)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.bindArguments(AbstractMethodDeclaration.java:83)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:406)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1147)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1235)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:540)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:883)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:928)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:189)
	... 16 more
Caused by: java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.Argument.bind(Argument.java:35)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.bindArguments(AbstractMethodDeclaration.java:83)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:406)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1147)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1235)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:540)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:883)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:928)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:189)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:255)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:190)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:89)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:728)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:788)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1244)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:102)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2015-04-15 11:59:28.782
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.Argument.bind(Argument.java:35)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.bindArguments(AbstractMethodDeclaration.java:83)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:406)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1147)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1235)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:540)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:883)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:928)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:189)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:255)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:190)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:89)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:728)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:788)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1244)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:102)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)

!ENTRY org.eclipse.ui 4 0 2015-04-15 12:44:17.088
!MESSAGE Unhandled event loop exception
!STACK 0
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.Argument.bind(Argument.java:35)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.bindArguments(AbstractMethodDeclaration.java:83)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:406)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1147)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1235)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:540)
	at org.eclipse.jdt.internal.codeassist.SelectionEngine.select(SelectionEngine.java:927)
	at org.eclipse.jdt.internal.core.Openable.codeSelect(Openable.java:162)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeSelect(CompilationUnit.java:377)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeSelect(CompilationUnit.java:371)
	at org.eclipse.jdt.internal.ui.javaeditor.JavaElementHyperlinkDetector.detectHyperlinks(JavaElementHyperlinkDetector.java:67)
	at org.eclipse.ui.texteditor.HyperlinkDetectorRegistry$HyperlinkDetectorDelegate.detectHyperlinks(HyperlinkDetectorRegistry.java:80)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.findHyperlinks(HyperlinkManager.java:276)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.mouseMove(HyperlinkManager.java:452)
	at org.eclipse.swt.widgets.TypedListener.handleEvent(TypedListener.java:205)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:84)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1053)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:4066)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3657)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2640)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2604)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2438)
	at org.eclipse.ui.internal.Workbench$7.run(Workbench.java:671)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:664)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:115)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:196)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:369)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:601)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:620)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:575)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1408)

!ENTRY org.eclipse.core.resources 4 2 2015-04-15 12:44:18.136
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.core.resources".
!STACK 0
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.resolveStatements(MethodDeclaration.java:134)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:410)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1147)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1235)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:540)
	at org.eclipse.jdt.internal.compiler.Compiler.process(Compiler.java:759)
	at org.eclipse.jdt.internal.compiler.ProcessTaskManager.run(ProcessTaskManager.java:137)
	at java.lang.Thread.run(Thread.java:722)

!ENTRY org.eclipse.core.resources 4 75 2015-04-15 12:44:18.159
!MESSAGE Errors occurred during the build.
!SUBENTRY 1 org.eclipse.jdt.core 4 75 2015-04-15 12:44:18.159
!MESSAGE Errors running builder 'Java Builder' on project 'loyaltySource_admin'.
!STACK 0
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.resolveStatements(MethodDeclaration.java:134)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:410)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1147)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1235)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:540)
	at org.eclipse.jdt.internal.compiler.Compiler.process(Compiler.java:759)
	at org.eclipse.jdt.internal.compiler.ProcessTaskManager.run(ProcessTaskManager.java:137)
	at java.lang.Thread.run(Thread.java:722)

!ENTRY org.eclipse.ui 4 0 2015-04-15 12:44:18.842
!MESSAGE Unhandled event loop exception
!STACK 0
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.Argument.bind(Argument.java:35)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.bindArguments(AbstractMethodDeclaration.java:83)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:406)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1147)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1235)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:540)
	at org.eclipse.jdt.internal.codeassist.SelectionEngine.select(SelectionEngine.java:927)
	at org.eclipse.jdt.internal.core.Openable.codeSelect(Openable.java:162)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeSelect(CompilationUnit.java:377)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeSelect(CompilationUnit.java:371)
	at org.eclipse.jdt.internal.ui.javaeditor.JavaElementHyperlinkDetector.detectHyperlinks(JavaElementHyperlinkDetector.java:67)
	at org.eclipse.ui.texteditor.HyperlinkDetectorRegistry$HyperlinkDetectorDelegate.detectHyperlinks(HyperlinkDetectorRegistry.java:80)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.findHyperlinks(HyperlinkManager.java:276)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.mouseMove(HyperlinkManager.java:452)
	at org.eclipse.swt.widgets.TypedListener.handleEvent(TypedListener.java:205)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:84)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1053)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:4066)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3657)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2640)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2604)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2438)
	at org.eclipse.ui.internal.Workbench$7.run(Workbench.java:671)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:664)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:115)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:196)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:369)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:601)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:620)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:575)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1408)

!ENTRY org.eclipse.jdt.core 4 4 2015-04-15 12:44:25.071
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.loyauty.web.struts.action.orders;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.List;

import javax.servlet.http.HttpSession;
import lombok.Getter;
import lombok.Setter;

import com.loyauty.exception.ServiceException;
import com.loyauty.exception.ServiceLocatorException;
import com.loyauty.model.OrdersRows;
import com.loyauty.model.User;
import com.loyauty.service.core.DTOFactory;
import com.loyauty.service.core.dto.BasicUserDTO;
import com.loyauty.service.core.dto.OperationsDTO;
import com.loyauty.service.core.dto.OrdersDTO;
import com.loyauty.service.core.dto.ProvinceDTO;
import com.loyauty.service.core.dto.UserProductPriceDTO;
import com.loyauty.service.core.dto.UserSessionDTO;
import com.loyauty.service.core.dto.UsersPrivilegesDTO;
import com.loyauty.service.operations.OperationsService;
import com.loyauty.service.orders.OrdersService;
import com.loyauty.service.product.ProductService;
import com.loyauty.service.user.UserService;
import com.loyauty.web.struts.action.LoyautyAction;

public class ReportOrders extends LoyautyAction {
	private static final long serialVersionUID = -3811760851445730062L;
	private UserService userService;
	private ProductService productService;
	private OrdersService orderService;
	private OperationsService operationsService;
	@Getter
	@Setter
	private String userLogin;
	@Getter
	@Setter
	private List<User> usersList;
	private static int USER_TYPE = 2;
	@Getter
	@Setter
	List<OrdersDTO> listOrdersDTO;
	@Getter
	@Setter
	List<OrdersDTO> listStatus;
	@Getter
	@Setter
	private String lsOrderId;
	@Getter
	@Setter
	Long poYpop;
	@Getter
	@Setter
	Long poXpop;
	@Getter
	@Setter
	private Long pageTop = 0L;
	@Getter
	@Setter
	private Date creationDate;
	@Getter
	@Setter
	private Long findOrdersSignal;
	private String status;
	@Getter
	@Setter
	private Long sizeResult = 0L;
	@Getter
	@Setter
	private Long sorting;
	@Getter
	@Setter
	private Long sortingOrdersSignal;
	@Getter
	@Setter
	private Integer fieldForSorting;
	@Getter
	@Setter
	private Integer asc;
	@Getter
	@Setter
	private Integer scrollDivRowsLeft;
	@Getter
	@Setter
	private Integer scrollPageLeft;
	@Getter
	@Setter
	private Integer scrollDivRowsTop;
	@Getter
	@Setter
	private String strCreationDateStart;
	@Getter
	@Setter
	private String strCreationDateEnd;
	@Getter
	@Setter
	private Date creationDateStart;
	@Getter
	@Setter
	private Date creationDateEnd;
	private Date creationDateStartArg;
	private Date creationDateEndArg;
	@Getter
	@Setter
	private Integer selectedStatus;
	@Getter
	@Setter
	private Long editOrderSignal;
	@Getter
	@Setter
	private Long cancelSignal;
	@Getter
	@Setter
	private Integer indexOrder;
	@Getter
	@Setter
	private OrdersDTO orderToEdit;
	@Getter
	@Setter
	private String strProductOrderDate;
	@Getter
	@Setter
	private String lsProductID;
	@Getter
	@Setter
	Integer indexRow;
	@Getter
	@Setter
	private String showOrderDetailPop;
	@Getter
	@Setter
	private Long userId;
	@Getter
	@Setter
	private Long checkProductPriceSignal;
	@Getter
	@Setter
	private Long saveTemporaryRowSignal;
	@Getter
	@Setter
	private Long addSimilarRowSignal;
	@Getter
	@Setter
	private Long deleteRowSignal;
	@Getter
	@Setter
	private Long saveOrdersSignal;
	@Getter
	@Setter
	private Boolean checkBoxPrint;

	// recovery Data Order
	@Getter
	@Setter
	private String clientLastName;
	@Getter
	@Setter
	private String clientFirstName;
	@Getter
	@Setter
	private String clientOtherNames;
	@Getter
	@Setter
	private String clientStreet;
	@Getter
	@Setter
	private String clientOtherStreet;
	@Getter
	@Setter
	private String clientCity;
	@Getter
	@Setter
	private String clientProvince;
	@Getter
	@Setter
	private String clientPostalCode;
	@Getter
	@Setter
	private String clientPhone;
	@Getter
	@Setter
	private String clientEmail;
//	@Getter
//	@Setter
//	private String productOrderNumber;
	@Getter
	@Setter
	private String strRequiredDate;

	// recovery data row
	@Getter
	@Setter
	private Double quantity;
	@Getter
	@Setter
	private String notes;
	@Getter
	@Setter
	private Double quantityToChange;
	@Getter
	@Setter
	private Double stock;
	@Getter
	@Setter
	private String productDescription;
	@Getter
	@Setter
	private Double unitPrice;
	@Getter
	@Setter
	private Double shippingFee;
	@Getter
	@Setter
	private String shippingCompany;
	@Getter
	@Setter
	private String companyHeader;

	@Getter
	@Setter
	private Long quantityToChangeSignal;
	@Getter
	@Setter
	private Long duplicateOrderSignal;
	@Getter
	@Setter
	private String strCreationDate;
	@Getter
	@Setter
	private String strCreationOrderDate;
	@Getter
	@Setter
	private User usr;
	@Getter
	@Setter
	private String showSaveSuccessPop;
	// showSaveSuccessPop="display:block;visibility:visible;";
	// showSaveSuccessPop="visibility:hidden;display:none;";
	@Getter
	@Setter
	private String message;
	@Getter
	@Setter
	private Long okSaveSuccessPopSignal;
	@Getter
	@Setter
	private Long showRowShipping;
	@Getter
	@Setter
	private Long showOnlyEditNote;
	@Getter
	@Setter
	private Long saveShippingSignal;
	@Getter
	@Setter
	private Long saveOnlyNoteSignal;
	@Getter
	@Setter
	private String code;
	@Getter
	@Setter
	private Long cityId;
	@Getter
	@Setter
	private List<ProvinceDTO> listProvinces;
	private Hashtable<String, ProvinceDTO> hashProvinces;
	@Getter
	@Setter
	private Boolean orderNotSavedAtFirst;
	@Getter
	@Setter
	private String strShippedDate;
	@Getter
	@Setter
	private String strShippingPrice;
	@Getter
	@Setter
	private String showConfirmDeleteOrderPop;
	@Getter
	@Setter
	private Long deleteOrderSignal;
	@Getter
	@Setter
	private Long confirmDeleteSignal;
	@Getter
	@Setter
	private UsersPrivilegesDTO userPrivileges;
	@Getter
	@Setter
	private UsersPrivilegesDTO usersPrivShippedToInvoiced;
	@Getter
	@Setter
	private UsersPrivilegesDTO usersPrivChangeShippedStatus;
	@Getter
	@Setter
	private HashMap<Integer, String> hashStatus;
	@Getter
	@Setter
	private Long statusId;
	@Getter
	@Setter
	private String strPrint;
	@Getter
	@Setter
	private Integer testSignal;
	@Getter
	@Setter
	private String newStatus;
	Long invoicedOrdersRefresh;
	@Getter
	@Setter
	private Integer reportDateBetween;
	@Getter
	@Setter
	private Long dateBetweenSignal;
	@Getter
	@Setter
	private Long selectAllOrdersSignal;
	@Getter
	@Setter
	private Boolean checkBoxItem;
	// ------Pagination
	@Getter
	@Setter
	Long pageIndexSignal;
	@Getter
	@Setter
	Long prevListPagesSignal;
	@Getter
	@Setter
	Long nextListPagesSignal;
	@Getter
	@Setter
	Long totalOrders;
	@Getter
	@Setter
	Integer nextListPages;
	@Getter
	@Setter
	Integer prevListPages;
	@Getter
	@Setter
	Integer indexSet = 0;
	@Getter
	@Setter
	Integer indexList;
	@Getter
	@Setter
	List<OrdersDTO> listIndexSet;
	@Getter
	@Setter
	Integer PAGE_ITEMS_COUNT = 100;
	
	//New Added Field in the search option as toggle functionality
	@Getter
	@Setter
	private String productOrderNumberSearch;
	@Getter
	@Setter
	private String trakingNumber;
	@Getter
	@Setter
	private String  clientOther;
	@Getter	@Setter
	private String	 clientOrderNumber;
	
	@Getter	@Setter
	private Integer switchBetweenClientLoginAndPoNumberSignal;
	@Getter	@Setter
	private Integer switchBetweenClientLoginAndPoNumber;
	//New Added Field in the search option as toggle functionality
	@Getter	@Setter
	private Integer switchBetweenLsOrderAndClientOrderIdSignal;
	@Getter	@Setter
	private Integer switchBetweenLsOrderAndClientOrderId;
	@Getter	@Setter
	private Integer switchBetweenStatusAndClientOtherSignal;
	@Getter	@Setter
	private Integer switchBetweenStatusAndClientOther;
	//Added for the multiple functionality in switching  
	@Getter	@Setter
	private Integer switchBetweenOptionFieldsSignal;
	@Getter	@Setter
	private Integer switchBetweenOptionField;
	
	// ------Pagination

	/*
	 * ==========================================================================
	 * =============== Default constructor
	 * ======================================
	 * ===================================================
	 */
	public ReportOrders() throws ServiceLocatorException {
		super();
		userService = getServiceLocator().getUserService();
		orderService = getServiceLocator().getOrderService();
		productService = getServiceLocator().getProductService();
		operationsService = getServiceLocator().getOperationsService();
	}

	/*
	 * ==========================================================================
	 * =============== method execute
	 * ============================================
	 * =============================================
	 */
	@SuppressWarnings({ "rawtypes", "unchecked" })
	@Override
	public String execute() throws Exception {
		System.out.println("Product Order Number: "+ productOrderNumberSearch);
		System.out.println("Tracking Number: "+ trakingNumber);
		System.out.println("Client Order ID: "+ clientOrderNumber);
		System.out.println("Client Other ID: "+ clientOther);
		System.out.println(switchBetweenOptionField);
//		switchBetweenOptionFields=2;
		//Create new object or Order to modify the search functionality
		OrdersDTO orderDTOObj=new OrdersDTO();
		orderDTOObj.setLsOrderId(lsOrderId);
		orderDTOObj.setUserLogin(userLogin);
		orderDTOObj.setStatus(status);
		orderDTOObj.setProductOrderNumber(productOrderNumberSearch);
		orderDTOObj.setClientOrderNumber(clientOrderNumber);
		orderDTOObj.setClientOtherId(clientOther);
		
		HttpSession session = request.getSession(true);

		if (showOrderDetailPop == null)
			showOrderDetailPop = "visibility:hidden;display:none;";
		if (showConfirmDeleteOrderPop == null)
			showConfirmDeleteOrderPop = "visibility:hidden;display:none;";
		if (showSaveSuccessPop == null)
			showSaveSuccessPop = "visibility:hidden;display:none;";
		if (poYpop == null)
			poYpop = 100L;
		if (poXpop == null)
			poXpop = 100L;
		Hashtable<String, OrdersDTO> hashOrders;
		if (selectedStatus == null)
			selectedStatus = -1;
		sizeResult = (Long) session.getAttribute("sizeResult");
		totalOrders = (Long) session.getAttribute("totalOrders");
		if (totalOrders == null)
			totalOrders = 0L;
		asc = (Integer) session.getAttribute("asc");
		if (asc == null)
			asc = 0;
		if (sizeResult == null)
			sizeResult = 0L;
		if (indexOrder == null)
			indexOrder = 0;
		userPrivileges = (UsersPrivilegesDTO) session.getAttribute("userPrivileges");
		usersPrivShippedToInvoiced = (UsersPrivilegesDTO) session.getAttribute("usersPrivShippedToInvoiced");
		usersPrivChangeShippedStatus = (UsersPrivilegesDTO) session
				.getAttribute("usersPrivChangeShippedStatus");
		hashStatus = (HashMap<Integer, String>) session
				.getAttribute("hashStatus");
		if (hashStatus == null) {
			hashStatus = new HashMap<Integer, String>();
			hashStatus.put(0, "");
			hashStatus.put(1, "open");
			hashStatus.put(2, "progress");
		}
		List<Integer> listIndexColumn = new ArrayList<Integer>();
		// fill list status
		listStatus = (ArrayList<OrdersDTO>) session.getAttribute("listStatus");
		if (listStatus == null) {
			listStatus = new ArrayList<OrdersDTO>();
			OrdersDTO orderDTOOpen = new OrdersDTO();
			orderDTOOpen.setStatus("open");
			orderDTOOpen.setId(0L);
			listStatus.add(orderDTOOpen);
			OrdersDTO orderDTOProgress = new OrdersDTO();
			orderDTOProgress.setStatus("progress");
			orderDTOProgress.setId(1L);
			listStatus.add(orderDTOProgress);
			if (usersPrivChangeShippedStatus != null) {
				OrdersDTO orderDTOShipped = new OrdersDTO();
				orderDTOShipped.setStatus("shipped");
				orderDTOShipped.setId(2L);
				listStatus.add(orderDTOShipped);
			}

		}

		try {

			/*-------------------- recovery users list -----------------------------------
							Recovery users list in session
			 -----------------------------------------------------------------------------*/
			// recovery provinces
			listProvinces = (List<ProvinceDTO>) session
					.getAttribute("listProvinces");
			if (listProvinces == null)
				listProvinces = productService.getAllProvinces();
			orderNotSavedAtFirst = (Boolean) session
					.getAttribute("listNotSavedAtFirst");
			BasicUserDTO basicUserDTO = new BasicUserDTO();
			basicUserDTO.setTypeId(USER_TYPE);
			List<User> usersListSession = (List<User>) session
					.getAttribute("usersListSession");
			if (usersListSession == null) {
				List<UserSessionDTO> listAllUsers = userService
						.getAllUsers(basicUserDTO);
				usersList = new ArrayList<User>();
				for (UserSessionDTO userDTO : listAllUsers) {
					User user = new User();
					user.setId(userDTO.getId());
					user.setLogin(userDTO.getLogin());
					usersList.add(user);
				}
				session.setAttribute("usersListSession", usersList);
			} else{
				usersList = usersListSession;
			}
			
			listOrdersDTO = (ArrayList<OrdersDTO>) session.getAttribute("listOrdersDTOReport");
			
			reportDateBetween = (Integer) session.getAttribute("reportDateBetween");
			if (reportDateBetween == null) {
				reportDateBetween = 0;
				session.setAttribute("reportDateBetween", reportDateBetween);
			}

			//Added for the new field
			switchBetweenClientLoginAndPoNumber = (Integer) session.getAttribute("switchBetweenClientLoginAndPoNumber");
			if (switchBetweenClientLoginAndPoNumber == null) {
				switchBetweenClientLoginAndPoNumber = 0;
				session.setAttribute("switchBetweenClientLoginAndPoNumber", switchBetweenClientLoginAndPoNumber);
			}
			switchBetweenLsOrderAndClientOrderId = (Integer) session.getAttribute("switchBetweenLsOrderAndClientOrderId");
			if (switchBetweenLsOrderAndClientOrderId == null) {
				switchBetweenLsOrderAndClientOrderId = 0;
				session.setAttribute("switchBetweenLsOrderAndClientOrderId", switchBetweenLsOrderAndClientOrderId);
			}
			switchBetweenStatusAndClientOther = (Integer) session.getAttribute("switchBetweenStatusAndClientOther");
			if (switchBetweenStatusAndClientOther == null) {
				switchBetweenStatusAndClientOther = 0;
				session.setAttribute("switchBetweenStatusAndClientOther", switchBetweenStatusAndClientOther);
			}
			
			switchBetweenOptionFields = (Integer) session.getAttribute("switchBetweenOptionFields");
			if (switchBetweenOptionField == null) {
				switchBetweenOptionField = 0;
				session.setAttribute("switchBetweenOptionField", switchBetweenOptionField);
			}

			/*------ always check if the Admin select all orders ------------
					if The Admin select all orders change checkBoxItem value 
			  ---------------------------------------------------------------*/
			if (selectAllOrdersSignal != null && selectAllOrdersSignal != 0L) {
				if (checkBoxItem != null) {
					session.setAttribute("checkBoxItem", checkBoxItem);
					session.setAttribute("allOrdersSelectedSignal", 0L);
					if (checkBoxItem)
						session.setAttribute("allOrdersSelectedSignal", 1L);
				}
			}
			checkBoxItem = (Boolean) session.getAttribute("checkBoxItem");
			if (checkBoxItem == null)
				checkBoxItem = false;
			/*------ always recovery creationDate from strCreationDate ------
						always keep the user search options
			  ---------------------------------------------------------------*/
			creationDateStart = null;
			SimpleDateFormat frm = new SimpleDateFormat("dd/MM/yyyy");
			if (((strCreationDateStart) != null)
					&& (!"".equals(strCreationDateStart))) {
				try {
					Date date = frm.parse(strCreationDateStart);
					creationDateStart = date;
					creationDateStartArg = date;
				} catch (Exception pe) {
					creationDateStart = null;
					addActionError("Please enter a date in the correct format");
				}
			}
			if (creationDateStart == null) {
				Date date = frm.parse("01/01/1900");
				creationDateStartArg = date;
			}
			creationDateEnd = null;
			if (((strCreationDateEnd) != null)
					&& (!"".equals(strCreationDateEnd))) {
				frm = new SimpleDateFormat("dd/MM/yyyy");
				try {
					Date date = frm.parse(strCreationDateEnd);
					creationDateEnd = date;
					creationDateEndArg = date;
				} catch (Exception pe) {
					creationDateEnd = null;
					addActionError("Please enter a date in the correct format");
				}
			}
			if (creationDateEnd == null) {
				creationDateEndArg = new Date();
			}

			/*------ always recovery Status from selectedStatus key ------
						always keep the status search options
			  ---------------------------------------------------------------*/
			status = getStatusSelected(selectedStatus);

			/*----------- always initialized listPages if not done ----------
				   		    and check if is there next listPages
			  ---------------------------------------------------------------*/
			nextListPages = (Integer) session.getAttribute("nextListPages");
			if (nextListPages == null)
				nextListPages = 0;
			if (indexSet == null || indexSet == -1) {
				indexSet = (Integer) session.getAttribute("indexSet");
				if (indexSet == null)
					indexSet = 0;
			}
			listIndexSet = (List<OrdersDTO>) session
					.getAttribute("listIndexSet");
			if (listIndexSet == null)
				initalizeListIndexSet(session, orderService);

			/*----------------- When Admin Click on the pageIndex ----------------------------------
										catch  page index
			 ---------------------------------------------------------------------------------------*/
			//Toggle Switch between PO Date and Shipping date
			if (dateBetweenSignal != null && dateBetweenSignal != 0L) {
				reportDateBetween = ((reportDateBetween == null || reportDateBetween == 0) ? 1: 0);
				listOrdersDTO = new ArrayList<OrdersDTO>();
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				session.setAttribute("reportDateBetween", reportDateBetween);
				return SUCCESS;
			}
		
			//Toggle Switch between Client Login and PO Number	
//			switchBetweenClientLoginAndPoNumber=(Integer)session.getAttribute("switchBetweenClientLoginAndPoNumber");
			
			if (switchBetweenClientLoginAndPoNumberSignal != null && switchBetweenClientLoginAndPoNumberSignal != 0L) {
				switchBetweenClientLoginAndPoNumber = ((switchBetweenClientLoginAndPoNumber == null 
						|| switchBetweenClientLoginAndPoNumber == 0) ? 1: 0);
				listOrdersDTO = new ArrayList<OrdersDTO>();
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				session.setAttribute("switchBetweenClientLoginAndPoNumber", switchBetweenClientLoginAndPoNumber);
				return SUCCESS;
			}
			
			//Switching between "ls_Order" and "Client Order Id"	
//			switchBetweenLsOrderAndClientOrderId = (Integer)session.getAttribute("switchBetweenLsOrderAndClientOrderId");
			
			if (switchBetweenLsOrderAndClientOrderIdSignal != null && switchBetweenLsOrderAndClientOrderIdSignal != 0L) {
				switchBetweenLsOrderAndClientOrderId = ((switchBetweenLsOrderAndClientOrderId == null 
						|| switchBetweenLsOrderAndClientOrderId == 0) ? 1: 0);
				listOrdersDTO = new ArrayList<OrdersDTO>();
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				session.setAttribute("switchBetweenLsOrderAndClientOrderId", switchBetweenLsOrderAndClientOrderId);
				return SUCCESS;
			}
			
			//Switching between "Status" and "Client Other Id"
//			switchBetweenStatusAndClientOther = (Integer)session.getAttribute("switchBetweenStatusAndClientOther");
			
			if (switchBetweenStatusAndClientOtherSignal != null && switchBetweenStatusAndClientOtherSignal != 0L) {
				switchBetweenStatusAndClientOther = ((switchBetweenStatusAndClientOther == null 
						|| switchBetweenStatusAndClientOther == 0) ? 1: 0);
				listOrdersDTO = new ArrayList<OrdersDTO>();
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				session.setAttribute("switchBetweenStatusAndClientOther", switchBetweenStatusAndClientOther);
				return SUCCESS;
			}
			
			if (switchBetweenOptionFieldsSignal != null && switchBetweenOptionFields != 0L) {
				switchBetweenOptionFields++;
				if (switchBetweenOptionFields == 4) switchBetweenOptionFields = 0;
				
			}
			

			
			
			/*----------------- When Admin Click on the pageIndex ----------------------------------
										catch  page index
			 ---------------------------------------------------------------------------------------*/
			if (pageIndexSignal != null && pageIndexSignal != 0L) {
				OrdersDTO orderDTO = (OrdersDTO) session.getAttribute("orderPageSelected");
				if (orderDTO != null)
					orderDTO.setCssStyle("");
				OrdersDTO orderPageSelected = listIndexSet.get(indexList);
				orderPageSelected
						.setCssStyle("background-color:#FFFF99;border:1px solid #CCCCCC;");
				indexSet = orderPageSelected.getIndex() - 1;
				indexSet = indexSet * PAGE_ITEMS_COUNT;
				session.setAttribute("indexSet", indexSet);
				session.setAttribute("listIndexSet", listIndexSet);
				session.setAttribute("orderPageSelected", orderPageSelected);
			}

			/*----------------- When Admin Click on the nextListPages ------------------------------
						recreate listIndexSet started with index>index+10 and indexSet>indexSet+10
			 ---------------------------------------------------------------------------------------*/
			if (nextListPagesSignal != null && nextListPagesSignal != 0L
					&& listIndexSet.size() > 0) {
				OrdersDTO orderDTOPrevious = (OrdersDTO) session
						.getAttribute("orderPageSelected");
				if (orderDTOPrevious != null)
					orderDTOPrevious.setCssStyle("");
				OrdersDTO orderDTO = listIndexSet.get(listIndexSet.size() - 1);
				if (orderDTO != null)
					nextListPages = orderDTO.getIndex() + 1;
				
				Long totalOrders = orderService.getCountOrders(creationDateStartArg,
						creationDateEndArg, reportDateBetween, userLogin, lsOrderId,
						status,productOrderNumberSearch,clientOrderNumber,clientOther);
				
				String strcount = totalOrders.toString();
				Integer sizeList = Integer.parseInt(strcount)
						/ PAGE_ITEMS_COUNT;
				if (nextListPages <= sizeList + 1) {
					listIndexSet = new ArrayList<OrdersDTO>();
					for (int i = nextListPages; i <= sizeList + 1
							&& i <= nextListPages + 10; i++) {
						OrdersDTO ord = new OrdersDTO();
						ord.setCssStyle("");
						ord.setIndex(i);
						listIndexSet.add(ord);
					}
					if (nextListPages <= sizeList + 1) {
						indexSet = nextListPages - 1;
						OrdersDTO orderPageSelected = listIndexSet.get(0);
						orderPageSelected
								.setCssStyle("background-color:#FFFF99;border:1px solid #CCCCCC;");
						indexSet = indexSet * PAGE_ITEMS_COUNT;
						session.setAttribute("indexSet", indexSet);
						session.setAttribute("nextListPages", nextListPages);
						session.setAttribute("listIndexSet", listIndexSet);
						session.setAttribute("orderPageSelected",
								orderPageSelected);
					}
				}
			}

			/*----------------- When Admin Click on the previousListPages --------------------------
					recreate listIndexSet started with index< index-10 and indexSet<indexSet-10
			 ---------------------------------------------------------------------------------------*/
			if (prevListPagesSignal != null && prevListPagesSignal != 0L
					&& listIndexSet.size() > 0) {
				OrdersDTO orderDTOPrevious = (OrdersDTO) session
						.getAttribute("orderPageSelected");
				if (orderDTOPrevious != null)
					orderDTOPrevious.setCssStyle("");
				nextListPages = (Integer) session.getAttribute("nextListPages");
				if (nextListPages != null && nextListPages >= 11) {
					prevListPages = nextListPages - 11;
					listIndexSet = new ArrayList<OrdersDTO>();
					for (int i = prevListPages; i < nextListPages; i++) {
						OrdersDTO ord = new OrdersDTO();
						ord.setCssStyle("");
						ord.setIndex(i);
						listIndexSet.add(ord);
					}
					indexSet = prevListPages - 1;
					OrdersDTO orderPageSelected = listIndexSet.get(0);
					orderPageSelected
							.setCssStyle("background-color:#FFFF99;border:1px solid #CCCCCC;");
					indexSet = indexSet * PAGE_ITEMS_COUNT;
					nextListPages = prevListPages;
					session.setAttribute("nextListPages", nextListPages);
					session.setAttribute("indexSet", indexSet);
					session.setAttribute("listIndexSet", listIndexSet);
					session.setAttribute("orderPageSelected", orderPageSelected);
				}
			}

			/*----------------- When Admin change province -----------------------------------------
								Check a list off this province
			 ---------------------------------------------------------------------------------------*/
			hashProvinces = (Hashtable<String, ProvinceDTO>) session
					.getAttribute("hashProvinces");
			if (hashProvinces == null) {
				listProvinces = productService.getAllProvinces();
				Hashtable<String, ProvinceDTO> hashProvinces = new Hashtable<String, ProvinceDTO>();
				for (ProvinceDTO prov : listProvinces) {
					hashProvinces.put(prov.getCode(), prov);
				}
				session.setAttribute("hashProvinces", hashProvinces);
			}
			if (code != null && !code.equals("") && listOrdersDTO != null) {
				ProvinceDTO provinceDTO = hashProvinces.get(code);
				if (provinceDTO != null) {
					clientProvince = provinceDTO.getCode();
				}
			}// else listCities=new ArrayList<CityDTO>();
			if (listOrdersDTO != null && indexOrder != -1) {
				orderToEdit = listOrdersDTO.get(indexOrder);
				if (orderToEdit != null) {
					orderToEdit.setClientProvince(code);
					session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				}
			}

			/*------------------------------- Refresh listOrdersDTO------------------------------------
						Refresh listOrders before generation of invoiced orders XLS file 
				 ------------------------------------------------------------------------------------------*/
			invoicedOrdersRefresh = (Long) session
					.getAttribute("invoicedOrdersRefresh");
			if (invoicedOrdersRefresh != null && invoicedOrdersRefresh != 0L) {
				listIndexColumn = (ArrayList<Integer>) session
						.getAttribute("listIndexColumn");
				if (listIndexColumn == null)
					listIndexColumn = getNewListIndexColumn();
				lsOrderId = lsOrderId.toUpperCase();
				
				//New Searching Functionality
				listOrdersDTO = orderService.searchOrdersWithOptionsAndSorting(
						creationDateStartArg, creationDateEndArg,
						reportDateBetween,orderDTOObj,listIndexColumn, PAGE_ITEMS_COUNT, indexSet);
				//Old Searching Functionality				
//				listOrdersDTO = orderService.searchOrdersWithOptionsAndSorting(
//						creationDateStartArg, creationDateEndArg,
//						reportDateBetween, userLogin, lsOrderId, status,
//						listIndexColumn, PAGE_ITEMS_COUNT, indexSet);
				
				if (findOrdersSignal != null && findOrdersSignal != 0L)
					initalizeListIndexSet(session, orderService);
				// Color in RED rows containing a GroupItems
				for (OrdersDTO orderDTO : listOrdersDTO) {
					if (orderDTO != null && orderDTO.getStatus() != null
							&& orderDTO.getStatus().equals("shipped")) {
						Long count = productService.isGroupProductID(orderDTO
								.getProductId());
						if (count != null && count >= 1) {
							orderDTO.setCssStyle("background-color: rgb(248,150,140); border-right:1px solid #CCCCCC;border-left:1px solid #CCCCCC;border-top:1px solid #CCCCCC;");
						}
					}
				}

				// keep search parameters to use in other
				// classes(PrintOrdersToPDF, ...)
				indexSet = 0;
				session.setAttribute("indexSet", indexSet);
				nextListPages = 0;
				session.setAttribute("nextListPages", nextListPages);
				session.setAttribute("selectedStatus", selectedStatus);
				session.setAttribute("creationDateStartArg",creationDateStartArg);
				session.setAttribute("creationDateEndArg", creationDateEndArg);
				session.setAttribute("reportDateBetween", reportDateBetween);
				session.setAttribute("lsOrderId", lsOrderId);
				session.setAttribute("userLogin", userLogin);
				session.setAttribute("status", status);
				session.setAttribute("listIndexColumn", listIndexColumn);
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				session.setAttribute("invoicedOrdersRefresh", 0L);
				
				session.setAttribute("productOrderNumberSearch", productOrderNumberSearch);
				session.setAttribute("clientOrderNumber", clientOrderNumber);
				session.setAttribute("clientOther", clientOther);
				return SUCCESS;
			}

			/*------------ When Admin click on the Button "Delete Order" in The OrderDtailPop --------------
								show other pop to confirm Order Delete
			  ----------------------------------------------------------------------------------------------*/
			if (deleteOrderSignal != null && deleteOrderSignal != 0L) {
				message = "Attention! if you click on \"Delete Order\" you can not restore it.";
				orderToEdit = listOrdersDTO.get(indexOrder);
				if (confirmDeleteSignal != null && confirmDeleteSignal == 0L) { // Delete
																				// Order
																				// Request
					showOrderDetailPop = "display:block;visibility:visible;";
					showConfirmDeleteOrderPop = "display:block;visibility:visible;";
				} else if (confirmDeleteSignal == 1L) { // Delete Order
														// Confirmed
					orderService.deleteOrderByLsOrderId(orderToEdit);
					// Save this operation in table operation
					OperationsDTO operationDTO = new OperationsDTO();
					User userAdmin = (User) session.getAttribute("userAdmin");
					if (userAdmin != null)
						operationDTO.setUserId(userAdmin.getId());
					operationDTO.setOperationDate(new Date());
					operationDTO.setOperationType("Delete Order");
					String dataBefore = "[PARTNER NAME:"
							+ orderToEdit.getUserLogin() + "];";
					dataBefore += " [LS_ORDER_ID:" + orderToEdit.getLsOrderId()
							+ "];";
					dataBefore += " [PRODUCT_ORDER_NUMBER:"
							+ orderToEdit.getProductOrderNumber() + "];";
					dataBefore += " [CLIENT_FIRST_NAME:"
							+ orderToEdit.getClientFirstName() + "];";
					dataBefore += " [CLIENT_LAST_NAME:"
							+ orderToEdit.getClientLastName() + "];";
					dataBefore += " [CLIENT_POSTAL_CODE:"
							+ orderToEdit.getClientPostalCode() + "];";
					dataBefore += " [LS_PRODUCT_ID:"
							+ orderToEdit.getLsProductID() + "];";
					dataBefore += " [UNIT_PRICE:" + orderToEdit.getUnitPrice()
							+ "];";
					dataBefore += " [STATUS:" + orderToEdit.getStatus() + "];";
					operationDTO.setDataBefore(dataBefore);
					operationDTO.setDataBefore(operationDTO.getDataBefore());
					operationDTO.setDataAfter("");
					operationsService.insertOperation(operationDTO);
					// Remove order from the list orders
					listOrdersDTO.remove(orderToEdit);
					session.setAttribute("listOrdersDTOReport", listOrdersDTO);
					showOrderDetailPop = "visibility:hidden;display:none;";
					showConfirmDeleteOrderPop = "visibility:hidden;display:none;";
					// initialize index orders
					int indexOrder = 0;
					int indexRow = 0;
					for (OrdersDTO orderDTO : listOrdersDTO) {
						orderDTO.setIndex(indexOrder);
						indexOrder++;
						indexRow = 0;
						for (OrdersRows orderRows : orderDTO.getRowsList()) {
							orderRows.setIndex(indexRow);
							indexRow++;
						}
					}
					session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				} else { // Cancel Order Delete
					showOrderDetailPop = "display:block;visibility:visible;";
					showConfirmDeleteOrderPop = "visibility:hidden;display:none;";
				}
				return SUCCESS;
			}

			/*------ When Admin click the "Edit link" in the Order Table for Edit NOTE -----
							show only field Edit Note
			  ------------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& showOnlyEditNote != null && showOnlyEditNote != 0L) {
				orderToEdit = listOrdersDTO.get(indexOrder);
				for (OrdersDTO order : listOrdersDTO) {
					order.setShowOnlyEditNote(0L);
					order.setCssRow("");
				}
				orderToEdit.setShowOnlyEditNote(1L);
				orderToEdit.setCssRow("background-color:#FF9966;");
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				listOrdersDTO = (ArrayList<OrdersDTO>) session
						.getAttribute("listOrdersDTOReport");
				return SUCCESS;
			}

			/*------------ When Admin click on link "Save Edit Note in the Orders Table" ----------
													save Only  notes
			  -------------------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& saveOnlyNoteSignal != null && saveOnlyNoteSignal != 0L) {
				if (indexOrder != null) {
					orderToEdit = listOrdersDTO.get(indexOrder);
					if (orderToEdit != null) {
						orderToEdit.setNotes(notes);
						orderToEdit.setShowRowShipping(0L);
						orderToEdit.setShowOnlyEditNote(0L);
						orderToEdit.setCssRow("");
						// Save Note
						Boolean sucess = orderService
								.updateShippingOrderElements(orderToEdit);
						session.setAttribute("listOrdersDTOReport",
								listOrdersDTO);
					}
				}
				return SUCCESS;
			}

			/*------------ When Admin click the "Edit link" in the Order Table -------------
								show fields to edit shipping parameters
			  ------------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& showRowShipping != null && showRowShipping != 0L) {

				orderToEdit = listOrdersDTO.get(indexOrder);
				for (OrdersDTO order : listOrdersDTO) {
					order.setShowRowShipping(0L);
					order.setCssRow("");
				}
				// only Admins who has Active = true of action name='All' can
				// change shipping settings
				// of orders shipped or invoiced
				if (usersPrivChangeShippedStatus == null
						&& orderToEdit.getStatus() != null
						&& (orderToEdit.getStatus().equals("shipped") || orderToEdit
								.getStatus().equals("invoiced"))) {
					showRowShipping = 0L;
					return SUCCESS;
				}

				if (orderToEdit != null) {
					orderToEdit.setShowRowShipping(1L);
					orderToEdit.setShowOnlyEditNote(1L);
					orderToEdit.setCssRow("background-color:#FF9966;");
					session.setAttribute("listOrdersDTOReport", listOrdersDTO);
					listOrdersDTO = (ArrayList<OrdersDTO>) session
							.getAttribute("listOrdersDTOReport");
				}
				if (orderToEdit.getStatus().equals("open")) {
					statusId = 0L;
				} else if (orderToEdit.getStatus().equals("progress")) {
					statusId = 1L;
				} else if (orderToEdit.getStatus().equals("shipped")) {
					statusId = 2L;
				} else if (orderToEdit.getStatus().equals("invoiced")) {
					statusId = 3L;
				} else if (orderToEdit.getStatus().equals("canceled")) {
					statusId = 4L;
				}
				return SUCCESS;
			}

			/*------------ When Admin click on link "Save in the Orders Table" ----------
							save all shipping parameters and notes
			 ----------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& saveShippingSignal != null && saveShippingSignal != 0L) {
				if (indexOrder != null) {
					orderToEdit = listOrdersDTO.get(indexOrder);
					if (orderToEdit != null) {
						Date shippedDateToEdit = null;
						frm = new SimpleDateFormat("dd/MM/yyyy");
						if (((strShippedDate) != null)
								&& (!"".equals(strShippedDate))) {
							strShippedDate = strShippedDate.replaceAll(" ", "");
							try {
								Date date = frm.parse(strShippedDate);
								shippedDateToEdit = date;
							} catch (Exception pe) {
								shippedDateToEdit = null;
							}
						}
						if (((strShippedDate) != null)
								&& (!"".equals(strShippedDate))
								&& strShippedDate.length() <= 8)
							shippedDateToEdit = orderToEdit.getShippedDate();
						Double shippingPrice = null;
						// Double currencyShippingPrice=null;
						if (strShippingPrice != null
								&& !strShippingPrice.equals("")) {
							strShippingPrice = strShippingPrice.replaceAll(" ",
									"");
							int index = strShippingPrice.indexOf(",");
							if (index >= 0) {
								String strUnitPrice1 = strShippingPrice
										.substring(0, index);
								String strUnitPrice2 = strShippingPrice
										.substring(index + 1,
												strShippingPrice.length());
								strShippingPrice = strUnitPrice1 + "."
										+ strUnitPrice2;
							}

							try {
								shippingPrice = Double
										.parseDouble(strShippingPrice);
								/*
								 * if(shippingPrice!=null &&
								 * orderToEdit.getCurrencyId()!=null &&
								 * orderToEdit.getCurrencyId()!=1 &&
								 * orderToEdit.getCurrencyRate()!=null) {
								 * currencyShippingPrice = shippingPrice *
								 * orderToEdit.getCurrencyRate();
								 * currencyShippingPrice = (double)
								 * Math.round(currencyShippingPrice*100)/100; }
								 */
							} catch (Exception pe) {
								shippingPrice = null;
							}
						}

						if (trakingNumber != null)
							trakingNumber = trakingNumber.replaceAll(
									"^ +| +$|( )+", "$1");
						if (shippingCompany != null)
							shippingCompany = shippingCompany.replaceAll(
									"^ +| +$|( )+", "$1");
						orderToEdit.setShippingPrice(shippingPrice);
						// orderToEdit.setCurrencyShippingPrice(currencyShippingPrice);
						// orderToEdit.getRowsList().get(0).setCurrencyShippingPrice(currencyShippingPrice);
						orderToEdit.setShippedDate(shippedDateToEdit);
						orderToEdit.setNotes(notes);
						if (newStatus != null && !newStatus.equals(""))
							orderToEdit.setStatus(newStatus);
						orderToEdit.setShippingCompany(shippingCompany);
						orderToEdit.setTrackingNumber(trakingNumber);
						orderToEdit.setShowRowShipping(0L);
						orderToEdit.setShowOnlyEditNote(0L);
						OrdersRows row = orderToEdit.getRowsList().get(0);
						row.setShippingPrice(shippingPrice);
						row.setShippingCompany(shippingCompany);
						row.setTrackingNumber(trakingNumber);
						orderToEdit.setCssRow("");

						if (newStatus != null && !newStatus.equals("")) { // if
																			// admin
																			// click
																			// on
																			// the
																			// save
																			// behind
																			// status
							orderService.updateStatusByLsOrderId(
									orderToEdit.getLsOrderId(), newStatus);
							orderToEdit.setStatus(newStatus);
							if (!newStatus.equals("shipped")
									&& !newStatus.equals("invoiced")
									&& !newStatus.equals("canceled")) {
								orderToEdit.setShippingPrice(null);
								orderToEdit.setTrackingNumber(null);
								orderToEdit.setShippedDate(null);
							}

						} else {// if admin click on the save other than Status
							if (orderToEdit.getShippedDate() != null
									&& orderToEdit.getTrackingNumber() != null
									&& !orderToEdit.getTrackingNumber().equals(
											"")
									&& orderToEdit.getShippingCompany() != null
									&& !orderToEdit.getShippingCompany()
											.equals("")
									&& orderToEdit.getShippingPrice() != null
									&& orderToEdit.getStatus() != null) {
								if (orderToEdit.getStatus().equals("open")
										|| orderToEdit.getStatus().equals(
												"progress")) {
									orderService.updateStatusByLsOrderId(
											orderToEdit.getLsOrderId(),
											"shipped");
									orderToEdit.setStatus("shipped");
								}
							} else {
								if (usersPrivChangeShippedStatus != null
										&& !orderToEdit.getStatus().equals(
												"open")
										&& !orderToEdit.getStatus().equals(
												"progress")) {
									orderService.updateStatusByLsOrderId(
											orderToEdit.getLsOrderId(),
											"progress");
									orderToEdit.setStatus("progress");
								}
							}
						}
						// if admin click on the save other then status(save
						// notes, save shipping company ...)
						Boolean sucess = orderService
								.updateShippingOrderElements(orderToEdit);
						session.setAttribute("listOrdersDTOReport",
								listOrdersDTO);
					}
				}
				return SUCCESS;
			}

			/*------------ When Admin click on icon findOrders.png ----------
								check user and complete infos client
			 ----------------------------------------------------------------*/
			if (findOrdersSignal != null
					&& findOrdersSignal != 0L
					|| (pageIndexSignal != null && pageIndexSignal != 0L)
					|| (nextListPagesSignal != null && nextListPagesSignal != 0L)
					|| (prevListPagesSignal != null && prevListPagesSignal != 0L)) {
				// session.setAttribute("allOrdersSelectedSignal",0L);
				// if admin click on search icon initialize checkBoxItem to
				// false
				if (findOrdersSignal != null && findOrdersSignal != 0L) {
					session.setAttribute("allOrdersSelectedSignal", 0L);
					checkBoxItem = false;
					session.setAttribute("checkBoxItem", checkBoxItem);
					indexSet = 0;
					session.setAttribute("indexSet", indexSet);
					nextListPages = 0;
					session.setAttribute("nextListPages", nextListPages);
					session.setAttribute("selectedStatus", selectedStatus);

				}
				// if admin navigate on pages keep the previous sorting
				if (((pageIndexSignal != null && pageIndexSignal != 0L)
						|| (nextListPagesSignal != null && nextListPagesSignal != 0L) || (prevListPagesSignal != null && prevListPagesSignal != 0L))) {
					listIndexColumn = (ArrayList<Integer>) session
							.getAttribute("listIndexColumn");
					if (listIndexColumn == null)
						listIndexColumn = getNewListIndexColumn();
				} else { // prepare new sorting
					listIndexColumn = getNewListIndexColumn();
				}

				lsOrderId = lsOrderId.toUpperCase();
				// if(findOrdersSignal!=null &&
				// findOrdersSignal!=0L)initalizeListIndexSet(session,orderService
				// );
				
				//Old Working Methods
//				listOrdersDTO = orderService.searchOrdersWithOptionsAndSorting(
//						creationDateStartArg, creationDateEndArg,
//						reportDateBetween, userLogin, lsOrderId, status,
//						listIndexColumn, PAGE_ITEMS_COUNT, indexSet);
				
				//New Functionality with same mapping
				listOrdersDTO = orderService.searchOrdersWithOptionsAndSortingNew(
								creationDateStartArg, creationDateEndArg,
								reportDateBetween, userLogin, lsOrderId,
								status, listIndexColumn, PAGE_ITEMS_COUNT,
								indexSet, productOrderNumberSearch,clientOrderNumber,
								clientOther);

//				//New Searching Functionality
//				listOrdersDTO = orderService.searchOrdersWithOptionsAndSorting(
//						creationDateStartArg, creationDateEndArg,
//						reportDateBetween, orderDTOObj, listIndexColumn,
//						PAGE_ITEMS_COUNT, indexSet);
				
				
				// Color in RED rows containing a GroupItems
				for (OrdersDTO orderDTO : listOrdersDTO) {
					if (orderDTO != null && orderDTO.getStatus() != null
							&& orderDTO.getStatus().equals("shipped")) {
						Long count = productService.isGroupProductID(orderDTO
								.getProductId());
						if (count != null && count >= 1) {
							orderDTO.setCssStyle("background-color: rgb(248,150,140); border-right:1px solid #CCCCCC;border-left:1px solid #CCCCCC;border-top:1px solid #CCCCCC;");
						}
					}
				}

				// keep search parameters to use in other
				// classes(PrintOrdersToPDF, ...)
				session.setAttribute("creationDateStartArg",
						creationDateStartArg);
				session.setAttribute("creationDateEndArg", creationDateEndArg);
				session.setAttribute("reportDateBetween", reportDateBetween);
				session.setAttribute("lsOrderId", lsOrderId);
				session.setAttribute("userLogin", userLogin);
				session.setAttribute("status", status);
				//For newly added field
				session.setAttribute("productOrderNumberSearch", productOrderNumberSearch);

				session.setAttribute("listIndexColumn", listIndexColumn);
				session.setAttribute("sizeResult", sizeResult);
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				if (findOrdersSignal != null && findOrdersSignal != 0L)
					initalizeListIndexSet(session, orderService);
				return SUCCESS;
			}

			/*------------ When Admin click on the icon sorting of column ----------
							seach result with option of sorting list
			 -----------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& sortingOrdersSignal != null && sortingOrdersSignal != 0L) {
				listIndexColumn = (List<Integer>) session
						.getAttribute("listIndexColumn");
				asc = (asc == 1 ? -1 : 1);
				int nextElement = listIndexColumn.get(0);
				fieldForSorting = asc * fieldForSorting;
				listIndexColumn.set(0, fieldForSorting);
				for (int i = 1; i < listIndexColumn.size(); i++) {
					int element = listIndexColumn.get(i);
					listIndexColumn.set(i, nextElement);
					nextElement = element;
				}
				
				//New Functionality with same mapping
				listOrdersDTO = orderService.searchOrdersWithOptionsAndSortingNew(
								creationDateStartArg, creationDateEndArg,
								reportDateBetween, userLogin, lsOrderId,
								status, listIndexColumn, PAGE_ITEMS_COUNT,
								indexSet, productOrderNumberSearch,clientOrderNumber,
								clientOther);
				
//				listOrdersDTO = orderService.searchOrdersWithOptionsAndSorting(
//						creationDateStartArg, creationDateEndArg,
//						reportDateBetween, userLogin, lsOrderId, status,
//						listIndexColumn, PAGE_ITEMS_COUNT, indexSet);
				
//				// New Searching Functionality
//				listOrdersDTO = orderService.searchOrdersWithOptionsAndSorting(
//						creationDateStartArg, creationDateEndArg,
//						reportDateBetween, orderDTOObj, listIndexColumn,
//						PAGE_ITEMS_COUNT, indexSet);
				
				int balance = 0;
				int OrderIndex = 0;
				for (OrdersDTO orDTO : listOrdersDTO) {
					balance = (balance == 1 ? 0 : 1);
					if (balance == 1) {
						orDTO.setCssStyle("background-color: rgb(245,249,252);border-right: 1px solid #CCCCCC;border-left:1px solid #CCCCCC;border-top:  1px solid #CCCCCC;");
					} else {
						orDTO.setCssStyle("background-color: color:white;border-right:1px solid #CCCCCC;border-left:1px solid #CCCCCC;border-top:1px solid #CCCCCC;");
					}
					orDTO.setIndex(OrderIndex);
					OrderIndex++;
				}
				session.setAttribute("listIndexColumn", listIndexColumn);
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				session.setAttribute("asc", asc);
				return SUCCESS;
			}

			/*------ when Admin click on the lsOrder link in table -----------
					show popup detail and allow admin to update Order
			  ---------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& editOrderSignal != null && editOrderSignal != 0L) {
				orderToEdit = listOrdersDTO.get(indexOrder);
				if (orderToEdit == null)
					orderToEdit = new OrdersDTO();
				if (orderToEdit.getProductOrderDate() == null)
					strProductOrderDate = "";
				showOrderDetailPop = "display:block;visibility:visible;";
				return SUCCESS;
			}

			/*--- when Admin click on the cancel Button of orderDetailPop ---
					we mast just hide popup OrderDetail
			  ---------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& cancelSignal != null && cancelSignal != 0L) {
				showOrderDetailPop = "visibility:hidden;display:none;";
				return SUCCESS;
			}

			/*-------------------- When Admin left lsProduct TextField -------------
								check userPrice in DB, and write it in web view
			 -----------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& checkProductPriceSignal != null
					&& checkProductPriceSignal != 0L) {
				OrdersDTO orderDTOToUpdate = listOrdersDTO.get(indexOrder);
				orderDTOToUpdate = fillDataOrderDTO(orderDTOToUpdate);
				OrdersRows orderRowToUpadate = orderDTOToUpdate.getRowsList()
						.get(indexRow);
				UserProductPriceDTO userProductPrice = productService
						.getUsrPPriceByLsproductId(userId, lsProductID);
				orderRowToUpadate.setCss("");
				orderRowToUpadate.setCssPrice("");
				if (userProductPrice == null) {
					orderRowToUpadate.setCss("background-color:red;");
					orderRowToUpadate.setProductDescription("");
					orderRowToUpadate.setStock(null);
					orderRowToUpadate.setProductId(null);
					orderRowToUpadate.setLsProductID(lsProductID);
					orderRowToUpadate.setLsPrice(null);
				} else {
					Double usrPrice = orderRowToUpadate.getUnitPrice();
					if (usrPrice == null)
						usrPrice = 0D;
					if (usrPrice < userProductPrice.getPriceNum()) {
						orderRowToUpadate.setCssPrice("background-color:red;");
					}
					orderRowToUpadate.setProductDescription(userProductPrice
							.getProductTitle());
					orderRowToUpadate.setStock(userProductPrice.getStock());
					orderRowToUpadate.setProductId(userProductPrice
							.getProductId());
					orderRowToUpadate.setLsProductID(userProductPrice
							.getLsProductId());
					orderRowToUpadate
							.setLsPrice(userProductPrice.getPriceNum());
				}
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				orderToEdit = orderDTOToUpdate;
				listOrdersDTO = (List<OrdersDTO>) session
						.getAttribute("listOrdersDTOReport");
				showOrderDetailPop = "display:block;visibility:visible;";
				return SUCCESS;
			}

			/*----------------- When Admin check on saveTemporaryRow Icon --------------------------
					we must first obtained the object that contains the list of rows,
					after we accede to the row by index recovered by web view and change it
			 ---------------------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& saveTemporaryRowSignal != null
					&& saveTemporaryRowSignal != 0L) {
				OrdersDTO orderDTOToUpdate = listOrdersDTO.get(indexOrder);
				orderDTOToUpdate = fillDataOrderDTO(orderDTOToUpdate);
				OrdersRows orderRowToSaveMemory = orderDTOToUpdate
						.getRowsList().get(indexRow);
				orderRowToSaveMemory.setIcon("images/orders/itemValidated.png");
				if (orderRowToSaveMemory != null) {
					orderRowToSaveMemory.setQuantity(quantity);
					orderRowToSaveMemory.setLsProductID(lsProductID);
					orderRowToSaveMemory
							.setProductDescription(productDescription);
					orderRowToSaveMemory.setUnitPrice(unitPrice);
					orderRowToSaveMemory
							.setCssPrice("background-color:#FF6666;");
					orderRowToSaveMemory
							.setCssQuantity("background-color:#FF6666;");
					if (quantity != null && quantity > 0D)
						orderRowToSaveMemory.setCssQuantity("");
					if (unitPrice != null
							&& orderRowToSaveMemory.getLsPrice() != null
							&& unitPrice >= orderRowToSaveMemory.getLsPrice())
						orderRowToSaveMemory.setCssPrice("");
					orderRowToSaveMemory.setShippingFee(shippingFee);
					orderRowToSaveMemory.setShippingPrice(shippingFee);
					orderRowToSaveMemory.setShippingCompany(shippingCompany);
					orderRowToSaveMemory.setTrackingNumber(trakingNumber);
					if (orderRowToSaveMemory.getCurrencyId() != null
							&& orderRowToSaveMemory.getCurrencyId() != 1
							&& orderRowToSaveMemory.getCurrencyRate() != null) {
						if (unitPrice != null) {
							orderRowToSaveMemory
									.setCurrencyUnitPrice(unitPrice);
							unitPrice = unitPrice
									/ orderRowToSaveMemory.getCurrencyRate();
							unitPrice = (double) Math.round(unitPrice * 100) / 100;
							orderRowToSaveMemory.setUnitPrice(unitPrice);
						}
						/*
						 * if(shippingFee!=null) {
						 * orderRowToSaveMemory.setCurrencyShippingPrice
						 * (shippingFee); shippingFee =
						 * shippingFee/orderRowToSaveMemory.getCurrencyRate();
						 * shippingFee = (double)
						 * Math.round(shippingFee*100)/100;
						 * orderRowToSaveMemory.setShippingPrice(shippingFee); }
						 */
					}
					int indexOrder = 0;
					int indexRow = 0;
					for (OrdersDTO orderDTO : listOrdersDTO) {
						orderDTO.setIndex(indexOrder);
						indexOrder++;
						indexRow = 0;
						for (OrdersRows orderRows : orderDTO.getRowsList()) {
							orderRows.setIndex(indexRow);
							indexRow++;
						}
					}
					session.setAttribute("listOrdersDTOReport", listOrdersDTO);
					listOrdersDTO = (List<OrdersDTO>) session
							.getAttribute("listOrdersDTOReport");
				}
				orderToEdit = listOrdersDTO.get(indexOrder);
				// Change totalPrice also
				if (orderToEdit.getRowsList().get(0) != null
						&& orderToEdit.getRowsList().get(0).getQuantity() != null
						&& orderToEdit.getRowsList().get(0)
								.getQuantityToSplit() != null
						&& orderToEdit.getRowsList().get(0).getUnitPrice() != null) {
					Double priceTotal = orderToEdit.getRowsList().get(0)
							.getUnitPrice()
							* orderToEdit.getRowsList().get(0)
									.getQuantityToSplit();
					priceTotal = (double) Math.round(priceTotal * 100) / 100;
					orderToEdit.setTotalPrice(priceTotal);
				}
				showOrderDetailPop = "display:block;visibility:visible;";
				return SUCCESS;
			}

			/*------- When Admin click on addSimilarRow Icon on the OrderDetailPop --------
								Add one Row Similar at the previews
			  -----------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& addSimilarRowSignal != null && addSimilarRowSignal != 0L) {
				OrdersDTO orderDTOToUpdate = listOrdersDTO.get(indexOrder);
				// generate lsOrderId to new order
				orderDTOToUpdate = fillDataOrderDTO(orderDTOToUpdate);
				OrdersRows orderRowToClone = orderDTOToUpdate.getRowsList()
						.get(indexRow);
				if (orderRowToClone != null) {
					if (!orderRowToClone.getIcon().equals(
							"images/orders/itemValidated.png")) {
						orderRowToClone.setQuantity(quantity);
						orderRowToClone.setLsProductID(lsProductID);
						orderRowToClone.setStock(stock);
						orderRowToClone
								.setProductDescription(productDescription);
						orderRowToClone.setUnitPrice(unitPrice);
						orderRowToClone.setShippingFee(shippingFee);
						orderRowToClone.setShippingCompany(shippingCompany);
						orderRowToClone.setTrackingNumber(trakingNumber);
					}
					orderRowToClone.setIcon("images/orders/itemValidated.png");
					OrdersRows orderRowToAdd = DTOFactory
							.getOrderRowClone(orderRowToClone);
					orderRowToAdd.setId(-1L);
					// Add currencyId
					if (orderRowToClone.getCurrencyId() != null)
						orderRowToAdd.setCurrencyId(orderRowToClone
								.getCurrencyId());

					orderDTOToUpdate.getRowsList().add(indexRow + 1,
							orderRowToAdd);
					int indexOrder = 0;
					int indexRow = 0;
					for (OrdersDTO orderDTO : listOrdersDTO) {
						orderDTO.setIndex(indexOrder);
						indexOrder++;
						indexRow = 0;
						for (OrdersRows orderRows : orderDTO.getRowsList()) {
							orderRows.setIndex(indexRow);
							indexRow++;
						}
					}
					session.setAttribute("listOrdersDTOReport", listOrdersDTO);
					listOrdersDTO = (List<OrdersDTO>) session
							.getAttribute("listOrdersDTOReport");
				}
				orderToEdit = listOrdersDTO.get(indexOrder);
				showOrderDetailPop = "display:block;visibility:visible;";
				return SUCCESS;
			}

			/*-------- When Admin click on Delete Row Icon of orderDetail Popup-----------
									Delete this row using index
			 -----------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& deleteRowSignal != null && deleteRowSignal != 0L) {
				OrdersDTO orderDTO = listOrdersDTO.get(indexOrder);
				orderDTO = fillDataOrderDTO(orderDTO);
				int nb = orderService.nbOrderRowsNotDeleted(orderDTO
						.getRowsList());
				if (orderDTO != null && orderDTO.getRowsList().size() > 1) {
					for (int i = 0; i < orderDTO.getRowsList().size(); i++) {
						if (i == indexRow && nb > 1) {
							orderDTO.getRowsList().get(i).setToDelete(1);
							break;
						}
					}
				}
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				orderToEdit = listOrdersDTO.get(indexOrder);
				showOrderDetailPop = "display:block;visibility:visible;";
				return SUCCESS;
			}

			/*------ when Admin click on the button save of orderDetail ------------------
					 save order and hide pup  
			  ----------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& saveOrdersSignal != null && saveOrdersSignal != 0L) {
				session.setAttribute("orderNotSavedAtFirst", null);
				orderToEdit = listOrdersDTO.get(indexOrder);
				orderToEdit = fillDataOrderDTO(orderToEdit);

				// add special handling shipping
				User user = null;
				if (orderToEdit.getUserLogin() != null)
					user = userService.getUserByLogin(orderToEdit
							.getUserLogin());
				if (user != null) {
					Double totalPrice = null;
					orderToEdit.setSpecialHandlingName(user
							.getSpecialHandlingName());
					orderToEdit.setSpecialHandlingFee(user
							.getSpecialHandlingFee());
					if (orderToEdit.getRowsList().get(0).getQuantity() != null
							&& orderToEdit.getRowsList().get(0).getUnitPrice() != null) {
						totalPrice = orderToEdit.getRowsList().get(0)
								.getQuantity()
								* orderToEdit.getRowsList().get(0)
										.getUnitPrice();
						totalPrice = (double) Math.round(totalPrice * 100) / 100;
					}

					orderToEdit.setTotalPrice(totalPrice);
				}

				orderService.updateOrderByLsOrderId(orderToEdit);
				for (OrdersRows row : orderToEdit.getRowsList()) {
					if (row.getId() == -1)
						row.setId(0L);
				}
				OrdersRows row = orderToEdit.getRowsList().get(0);
				if (row != null) {
					orderToEdit.getShippedDate();
					orderToEdit.setLsPrice(row.getLsPrice());
					orderToEdit.setLsProductID(row.getLsProductID());
					orderToEdit.setProductDescription(row
							.getProductDescription());
					orderToEdit.setQuantity(row.getQuantity());
				}
				orderToEdit = DTOFactory.getOrderDTOConsideredMissingInfo(
						orderToEdit, hashProvinces);
				listIndexColumn = (List<Integer>) session
						.getAttribute("listIndexColumn");
				
//				listOrdersDTO = orderService.searchOrdersWithOptionsAndSorting(
//						creationDateStartArg, creationDateEndArg,
//						reportDateBetween, userLogin, lsOrderId, status,
//						listIndexColumn, PAGE_ITEMS_COUNT, indexSet);
				

				//New Functionality with same mapping
				listOrdersDTO = orderService.searchOrdersWithOptionsAndSortingNew(
								creationDateStartArg, creationDateEndArg,
								reportDateBetween, userLogin, lsOrderId,
								status, listIndexColumn, PAGE_ITEMS_COUNT,
								indexSet, productOrderNumberSearch,clientOrderNumber,
								clientOther);				
				
				// New Searching Functionality
//				listOrdersDTO = orderService.searchOrdersWithOptionsAndSorting(
//						creationDateStartArg, creationDateEndArg,
//						reportDateBetween, orderDTOObj, listIndexColumn,
//						PAGE_ITEMS_COUNT, indexSet);
				
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				message = "Saving has completed successfuly";
				showSaveSuccessPop = "display:block;visibility:visible;";
				showOrderDetailPop = "display:block;visibility:visible;";
				return SUCCESS;
			}

			/*------ When user change Quantity to split in orderDetailPop -----------
					 prepare order to split from two other orders witch
				 	 one must have a lsOrder with underscore 
			 ------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& quantityToChangeSignal != null
					&& quantityToChangeSignal != 0L) {
				OrdersDTO orderToChangeQt = listOrdersDTO.get(indexOrder);
				OrdersRows orderRow = orderToChangeQt.getRowsList().get(
						indexRow);
				orderToChangeQt = fillDataOrderDTO(orderToChangeQt);
				if (quantityToChange < orderRow.getQuantity())
					orderRow.setQuantityToSplit(quantityToChange);
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				listOrdersDTO = (List<OrdersDTO>) session
						.getAttribute("listOrdersDTOReport");
				orderToEdit = listOrdersDTO.get(indexOrder);
				showOrderDetailPop = "display:block;visibility:visible;";
				return SUCCESS;
			}

			/*-------------------- Duplicate Order ----------------------------------------
							Create order in just in memory
			 -----------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& duplicateOrderSignal != null
					&& duplicateOrderSignal != 0L) {
				OrdersDTO orderToClone = listOrdersDTO.get(indexOrder);
				orderToClone = fillDataOrderDTO(orderToClone);
				hashOrders = new Hashtable<String, OrdersDTO>();
				for (OrdersDTO ord : listOrdersDTO) {
					hashOrders.put(ord.getLsOrderId(), ord);
				}
				OrdersDTO orderClone = DTOFactory
						.getOrderDTOSplitted(orderToClone);
				if (orderClone != null) {
					orderClone.setDuplicate(true);
					String lsOrder = orderClone.getLsOrderId();
					String strlsOrder = orderService.generateLsOrderId(lsOrder,
							hashOrders);
					orderClone.setLsOrderId(strlsOrder);// rgb(116,180,209)
					orderClone
							.setCssStyle("background-color:#FFFF99;border-right: 1px solid #CCCCCC;border-left:1px solid #CCCCCC;border-top:  1px solid #CCCCCC;");
					orderToEdit = orderClone;
					orderToEdit.setBackgroundColor("background-color:#FFFF99;");
					listOrdersDTO.add(indexOrder + 1, orderClone);
					indexOrder = 0;
					for (OrdersDTO ord : listOrdersDTO) {
						ord.setIndex(indexOrder);
						indexOrder++;
					}
					orderService.updateOrderByLsOrderId(orderToClone);
					orderService.insertOrderWithRows(orderClone);
					orderClone.setDuplicate(false);
					for (OrdersRows row : orderClone.getRowsList()) {
						if (row.getId() < 0L)
							row.setId(0L);
					}
					if (listOrdersDTO.size() > 0) {
						session.setAttribute("listOrdersDTOReport",
								listOrdersDTO);
					}
				} else
					orderToEdit = orderToClone;
				showOrderDetailPop = "display:block;visibility:visible;";
				return SUCCESS;
			}

			/*-------------------- When user check print item -----------------------------
					Add or remove this element from the orders to print
			 -----------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& okSaveSuccessPopSignal != null
					&& okSaveSuccessPopSignal != 0L) {
				showSaveSuccessPop = "visibility:hidden;display:none;";
				showOrderDetailPop = "visibility:hidden;display:none;";
				return SUCCESS;
			}
		} catch (Exception e) {
			e.printStackTrace();
			return "input";
		}
		return SUCCESS;
	}

	/*
	 * ==========================================================================
	 * =============== fill all fields of order without rows
	 * ====================
	 * =====================================================================
	 */
	public OrdersDTO fillDataOrderDTO(OrdersDTO orderDTO) {
		SimpleDateFormat frm = new SimpleDateFormat("dd/MM/yyyy");
		orderDTO.setClientLastName(clientLastName);
		orderDTO.setClientFirstName(clientFirstName);
		orderDTO.setClientOtherNames(clientOtherNames);
		orderDTO.setClientStreet(clientStreet);
		orderDTO.setClientOtherStreet(clientOtherStreet);
		orderDTO.setClientCity(clientCity);
		orderDTO.setClientProvince(code);
		orderDTO.setClientPostalCode(clientPostalCode);
		orderDTO.setClientPhone(clientPhone);
		orderDTO.setClientEmail(clientEmail);
		orderDTO.setProductOrderNumber(productOrderNumberSearch);
		orderDTO.setCompanyHeader(companyHeader);
		if (((strProductOrderDate) != null)
				&& (!"".equals(strProductOrderDate))) {
			frm = new SimpleDateFormat("dd/MM/yyyy");
			try {
				Date date = frm.parse(strProductOrderDate);
				orderDTO.setProductOrderDate(date);
			} catch (Exception pe) {
				addActionError("Please enter a date in the correct format");
			}
		}

		if (((strCreationOrderDate) != null)
				&& (!"".equals(strCreationOrderDate))) {
			frm = new SimpleDateFormat("dd/MM/yyyy");
			try {
				Date date = frm.parse(strCreationOrderDate);
				orderDTO.setCreationDate(date);
			} catch (Exception pe) {
				addActionError("Please enter a date in the correct format");
			}
		}

		if (((strRequiredDate) != null) && (!"".equals(strRequiredDate))) {
			frm = new SimpleDateFormat("dd/MM/yyyy");
			try {
				Date date = frm.parse(strRequiredDate);
				orderDTO.setRequiredDate(date);
			} catch (Exception pe) {
				addActionError("Please enter a date in the correct format");
			}
		}
		return orderDTO;
	}

	/*
	 * ==========================================================================
	 * =============== initialize ListIndexSet
	 * ==================================
	 * =======================================================
	 */
	public void initalizeListIndexSet(HttpSession session,
			OrdersService orderService) throws ServiceException {
		listIndexSet = new ArrayList<OrdersDTO>();
		totalOrders = orderService.getCountOrders(creationDateStartArg,
				creationDateEndArg, reportDateBetween, userLogin, lsOrderId,
				status,productOrderNumberSearch,clientOrderNumber,clientOther);
		
		String strcount = totalOrders.toString();
		Integer sizeList = Integer.parseInt(strcount) / PAGE_ITEMS_COUNT;
		nextListPages = 1;
		session.setAttribute("nextListPages", nextListPages);
		for (int i = 1; i <= sizeList + 1 && i <= 11; i++) {
			OrdersDTO ord = new OrdersDTO();
			ord.setCssStyle("");
			ord.setIndex(i);
			listIndexSet.add(ord);
		}
		indexSet = 0;
		session.setAttribute("indexSet", indexSet);
		session.setAttribute("totalOrders", totalOrders);
		session.setAttribute("listIndexSet", listIndexSet);
		session.setAttribute("productOrderNumberSearch", productOrderNumberSearch);

	}

	/*
	 * ==========================================================================
	 * =============== initialize listIndexColumn
	 * ================================
	 * =========================================================
	 */
	List<Integer> getNewListIndexColumn() {
		List<Integer> reult = new ArrayList<Integer>();
		for (int i = 0; i <= 34; i++) {
			if (i != 2 && i <= 13) {
				reult.add(i);
				if (i != 0)
					reult.add(-i);
			}
			if (i == 30 || i == 31 || i == 34) {
				reult.add(i);
				reult.add(-i);
			}
		}
		return reult;
	}

	/*
	 * ==========================================================================
	 * =============== getStatus Selected by Admin for searching
	 * ================
	 * =========================================================================
	 */
	public String getStatusSelected(Integer StatusIndex) {
		String result = "";
		switch (StatusIndex) {
		case 0:
			result = "open";
			break;
		case 1:
			result = "progress";
			break;
		case 2:
			result = "shipped";
			break;
		case 3:
			result = "invoiced";
			break;
		case 4:
			result = "canceled";
			break;
		default:
			result = "";
		}
		return result;
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.Argument.bind(Argument.java:35)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.bindArguments(AbstractMethodDeclaration.java:83)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:406)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1147)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1235)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:540)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:883)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:928)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:189)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:255)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:190)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:89)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:728)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:788)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1244)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:102)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)

!ENTRY org.eclipse.jdt.ui 4 2 2015-04-15 12:44:25.072
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:233)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:255)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:190)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:89)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:728)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:788)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1244)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:102)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)
Caused by: java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.Argument.bind(Argument.java:35)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.bindArguments(AbstractMethodDeclaration.java:83)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:406)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1147)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1235)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:540)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:883)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:928)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:189)
	... 16 more
Caused by: java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.Argument.bind(Argument.java:35)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.bindArguments(AbstractMethodDeclaration.java:83)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:406)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1147)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1235)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:540)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:883)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:928)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:189)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:255)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:190)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:89)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:728)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:788)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1244)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:102)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2015-04-15 12:44:25.073
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.Argument.bind(Argument.java:35)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.bindArguments(AbstractMethodDeclaration.java:83)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:406)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1147)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1235)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:540)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:883)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:928)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:189)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:255)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:190)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:89)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:728)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:788)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1244)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:102)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2015-04-15 12:44:25.073
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.Argument.bind(Argument.java:35)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.bindArguments(AbstractMethodDeclaration.java:83)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:406)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1147)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1235)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:540)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:883)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:928)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:189)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:255)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:190)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:89)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:728)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:788)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1244)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:102)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)

!ENTRY org.eclipse.jdt.ui 4 0 2015-04-15 12:44:25.073
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:233)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:255)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:190)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:89)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:728)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:788)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1244)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:102)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)
Caused by: java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.Argument.bind(Argument.java:35)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.bindArguments(AbstractMethodDeclaration.java:83)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:406)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1147)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1235)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:540)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:883)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:928)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:189)
	... 16 more
Caused by: java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.Argument.bind(Argument.java:35)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.bindArguments(AbstractMethodDeclaration.java:83)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:406)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1147)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1235)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:540)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:883)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:928)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:189)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:255)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:190)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:89)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:728)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:788)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1244)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:102)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2015-04-15 12:44:25.074
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.Argument.bind(Argument.java:35)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.bindArguments(AbstractMethodDeclaration.java:83)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:406)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1147)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1235)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:540)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:883)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:928)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:189)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:255)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:190)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:89)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:728)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:788)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1244)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:102)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)

!ENTRY org.eclipse.core.resources 4 2 2015-04-15 12:44:25.140
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.core.resources".
!STACK 0
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.resolveStatements(MethodDeclaration.java:134)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:410)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1147)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1235)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:540)
	at org.eclipse.jdt.internal.compiler.Compiler.process(Compiler.java:759)
	at org.eclipse.jdt.internal.compiler.ProcessTaskManager.run(ProcessTaskManager.java:137)
	at java.lang.Thread.run(Thread.java:722)

!ENTRY org.eclipse.core.resources 4 75 2015-04-15 12:44:25.220
!MESSAGE Errors occurred during the build.
!SUBENTRY 1 org.eclipse.jdt.core 4 75 2015-04-15 12:44:25.220
!MESSAGE Errors running builder 'Java Builder' on project 'loyaltySource_admin'.
!STACK 0
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.resolveStatements(MethodDeclaration.java:134)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:410)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1147)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1235)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:540)
	at org.eclipse.jdt.internal.compiler.Compiler.process(Compiler.java:759)
	at org.eclipse.jdt.internal.compiler.ProcessTaskManager.run(ProcessTaskManager.java:137)
	at java.lang.Thread.run(Thread.java:722)

!ENTRY org.eclipse.jdt.debug 4 125 2015-04-15 13:19:37.316
!MESSAGE Internal error logged from JDI Debug: 
!STACK 1
org.eclipse.debug.core.DebugException: Invalid stack frame
	at org.eclipse.jdt.internal.debug.core.model.JDIStackFrame.getUnderlyingStackFrame(JDIStackFrame.java:1010)
	at org.eclipse.jdt.internal.debug.core.model.JDIStackFrame.getUnderlyingThisObject(JDIStackFrame.java:700)
	at org.eclipse.jdt.internal.debug.core.model.JDIStackFrame.getThis(JDIStackFrame.java:1058)
	at org.eclipse.jdt.internal.debug.ui.JavaDebugHover.getHoverInfo2(JavaDebugHover.java:362)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:82)
	at org.eclipse.jface.text.TextViewerHoverManager$4.run(TextViewerHoverManager.java:166)
!SUBENTRY 1 org.eclipse.jdt.debug 4 100 2015-04-15 13:19:37.316
!MESSAGE Invalid stack frame

!ENTRY org.eclipse.jdt.debug 4 125 2015-04-16 11:03:20.831
!MESSAGE Internal error logged from JDI Debug: 
!STACK 1
org.eclipse.debug.core.DebugException: Invalid stack frame
	at org.eclipse.jdt.internal.debug.core.model.JDIStackFrame.getUnderlyingStackFrame(JDIStackFrame.java:1010)
	at org.eclipse.jdt.internal.debug.core.model.JDIStackFrame.getUnderlyingThisObject(JDIStackFrame.java:700)
	at org.eclipse.jdt.internal.debug.core.model.JDIStackFrame.getThis(JDIStackFrame.java:1058)
	at org.eclipse.jdt.internal.debug.ui.JavaDebugHover.getHoverInfo2(JavaDebugHover.java:362)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:82)
	at org.eclipse.jface.text.TextViewerHoverManager$4.run(TextViewerHoverManager.java:166)
!SUBENTRY 1 org.eclipse.jdt.debug 4 100 2015-04-16 11:03:20.831
!MESSAGE Invalid stack frame
!SESSION 2015-04-17 09:00:39.522 -----------------------------------------------
eclipse.buildId=M20110210-1200
java.version=1.7.0_17
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_CA
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product

!ENTRY org.eclipse.jdt.core 4 4 2015-04-17 11:47:13.577
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.loyauty.web.struts.action.orders;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.List;

import javax.servlet.http.HttpSession;
import lombok.Getter;
import lombok.Setter;

import com.loyauty.exception.ServiceException;
import com.loyauty.exception.ServiceLocatorException;
import com.loyauty.model.OrdersRows;
import com.loyauty.model.User;
import com.loyauty.service.core.DTOFactory;
import com.loyauty.service.core.dto.BasicUserDTO;
import com.loyauty.service.core.dto.OperationsDTO;
import com.loyauty.service.core.dto.OrdersDTO;
import com.loyauty.service.core.dto.ProvinceDTO;
import com.loyauty.service.core.dto.UserProductPriceDTO;
import com.loyauty.service.core.dto.UserSessionDTO;
import com.loyauty.service.core.dto.UsersPrivilegesDTO;
import com.loyauty.service.operations.OperationsService;
import com.loyauty.service.orders.OrdersService;
import com.loyauty.service.product.ProductService;
import com.loyauty.service.user.UserService;
import com.loyauty.web.struts.action.LoyautyAction;

public class ReportOrders extends LoyautyAction {
	private static final long serialVersionUID = -3811760851445730062L;
	private UserService userService;
	private ProductService productService;
	private OrdersService orderService;
	private OperationsService operationsService;
	@Getter
	@Setter
	private String userLogin;
	@Getter
	@Setter
	private List<User> usersList;
	private static int USER_TYPE = 2;
	@Getter
	@Setter
	List<OrdersDTO> listOrdersDTO;
	@Getter
	@Setter
	List<OrdersDTO> listStatus;
	@Getter
	@Setter
	private String lsOrderId;
	@Getter
	@Setter
	Long poYpop;
	@Getter
	@Setter
	Long poXpop;
	@Getter
	@Setter
	private Long pageTop = 0L;
	@Getter
	@Setter
	private Date creationDate;
	@Getter
	@Setter
	private Long findOrdersSignal;
	private String status;
	@Getter
	@Setter
	private Long sizeResult = 0L;
	@Getter
	@Setter
	private Long sorting;
	@Getter
	@Setter
	private Long sortingOrdersSignal;
	@Getter
	@Setter
	private Integer fieldForSorting;
	@Getter
	@Setter
	private Integer asc;
	@Getter
	@Setter
	private Integer scrollDivRowsLeft;
	@Getter
	@Setter
	private Integer scrollPageLeft;
	@Getter
	@Setter
	private Integer scrollDivRowsTop;
	@Getter
	@Setter
	private String strCreationDateStart;
	@Getter
	@Setter
	private String strCreationDateEnd;
	@Getter
	@Setter
	private Date creationDateStart;
	@Getter
	@Setter
	private Date creationDateEnd;
	private Date creationDateStartArg;
	private Date creationDateEndArg;
	@Getter
	@Setter
	private Integer selectedStatus;
	@Getter
	@Setter
	private Long editOrderSignal;
	@Getter
	@Setter
	private Long cancelSignal;
	@Getter
	@Setter
	private Integer indexOrder;
	@Getter
	@Setter
	private OrdersDTO orderToEdit;
	@Getter
	@Setter
	private String strProductOrderDate;
	@Getter
	@Setter
	private String lsProductID;
	@Getter
	@Setter
	Integer indexRow;
	@Getter
	@Setter
	private String showOrderDetailPop;
	@Getter
	@Setter
	private Long userId;
	@Getter
	@Setter
	private Long checkProductPriceSignal;
	@Getter
	@Setter
	private Long saveTemporaryRowSignal;
	@Getter
	@Setter
	private Long addSimilarRowSignal;
	@Getter
	@Setter
	private Long deleteRowSignal;
	@Getter
	@Setter
	private Long saveOrdersSignal;
	@Getter
	@Setter
	private Boolean checkBoxPrint;

	// recovery Data Order
	@Getter
	@Setter
	private String clientLastName;
	@Getter
	@Setter
	private String clientFirstName;
	@Getter
	@Setter
	private String clientOtherNames;
	@Getter
	@Setter
	private String clientStreet;
	@Getter
	@Setter
	private String clientOtherStreet;
	@Getter
	@Setter
	private String clientCity;
	@Getter
	@Setter
	private String clientProvince;
	@Getter
	@Setter
	private String clientPostalCode;
	@Getter
	@Setter
	private String clientPhone;
	@Getter
	@Setter
	private String clientEmail;
//	@Getter
//	@Setter
//	private String productOrderNumber;
	@Getter
	@Setter
	private String strRequiredDate;

	// recovery data row
	@Getter
	@Setter
	private Double quantity;
	@Getter
	@Setter
	private String notes;
	@Getter
	@Setter
	private Double quantityToChange;
	@Getter
	@Setter
	private Double stock;
	@Getter
	@Setter
	private String productDescription;
	@Getter
	@Setter
	private Double unitPrice;
	@Getter
	@Setter
	private Double shippingFee;
	@Getter
	@Setter
	private String shippingCompany;
	@Getter
	@Setter
	private String companyHeader;

	@Getter
	@Setter
	private Long quantityToChangeSignal;
	@Getter
	@Setter
	private Long duplicateOrderSignal;
	@Getter
	@Setter
	private String strCreationDate;
	@Getter
	@Setter
	private String strCreationOrderDate;
	@Getter
	@Setter
	private User usr;
	@Getter
	@Setter
	private String showSaveSuccessPop;
	// showSaveSuccessPop="display:block;visibility:visible;";
	// showSaveSuccessPop="visibility:hidden;display:none;";
	@Getter
	@Setter
	private String message;
	@Getter
	@Setter
	private Long okSaveSuccessPopSignal;
	@Getter
	@Setter
	private Long showRowShipping;
	@Getter
	@Setter
	private Long showOnlyEditNote;
	@Getter
	@Setter
	private Long saveShippingSignal;
	@Getter
	@Setter
	private Long saveOnlyNoteSignal;
	@Getter
	@Setter
	private String code;
	@Getter
	@Setter
	private Long cityId;
	@Getter
	@Setter
	private List<ProvinceDTO> listProvinces;
	private Hashtable<String, ProvinceDTO> hashProvinces;
	@Getter
	@Setter
	private Boolean orderNotSavedAtFirst;
	@Getter
	@Setter
	private String strShippedDate;
	@Getter
	@Setter
	private String strShippingPrice;
	@Getter
	@Setter
	private String showConfirmDeleteOrderPop;
	@Getter
	@Setter
	private Long deleteOrderSignal;
	@Getter
	@Setter
	private Long confirmDeleteSignal;
	@Getter
	@Setter
	private UsersPrivilegesDTO userPrivileges;
	@Getter
	@Setter
	private UsersPrivilegesDTO usersPrivShippedToInvoiced;
	@Getter
	@Setter
	private UsersPrivilegesDTO usersPrivChangeShippedStatus;
	@Getter
	@Setter
	private HashMap<Integer, String> hashStatus;
	@Getter
	@Setter
	private Long statusId;
	@Getter
	@Setter
	private String strPrint;
	@Getter
	@Setter
	private Integer testSignal;
	@Getter
	@Setter
	private String newStatus;
	Long invoicedOrdersRefresh;
	@Getter
	@Setter
	private Integer reportDateBetween;
	@Getter
	@Setter
	private Long dateBetweenSignal;
	@Getter
	@Setter
	private Long selectAllOrdersSignal;
	@Getter
	@Setter
	private Boolean checkBoxItem;
	// ------Pagination
	@Getter
	@Setter
	Long pageIndexSignal;
	@Getter
	@Setter
	Long prevListPagesSignal;
	@Getter
	@Setter
	Long nextListPagesSignal;
	@Getter
	@Setter
	Long totalOrders;
	@Getter
	@Setter
	Integer nextListPages;
	@Getter
	@Setter
	Integer prevListPages;
	@Getter
	@Setter
	Integer indexSet = 0;
	@Getter
	@Setter
	Integer indexList;
	@Getter
	@Setter
	List<OrdersDTO> listIndexSet;
	@Getter
	@Setter
	Integer PAGE_ITEMS_COUNT = 100;
	
	//New Added Field in the search option as toggle functionality
	@Getter
	@Setter
	private String productOrderNumberSearch;
	@Getter
	@Setter
	private String trakingNumber;
	@Getter
	@Setter
	private String  clientOther;
	@Getter	@Setter
	private String	 clientOrderNumber;
	
	@Getter	@Setter
	private Integer switchBetweenClientLoginAndPoNumberSignal;
	@Getter	@Setter
	private Integer switchBetweenClientLoginAndPoNumber;
	//New Added Field in the search option as toggle functionality
	@Getter	@Setter
	private Integer switchBetweenLsOrderAndClientOrderIdSignal;
	@Getter	@Setter
	private Integer switchBetweenLsOrderAndClientOrderId;
	@Getter	@Setter
	private Integer switchBetweenStatusAndClientOtherSignal;
	@Getter	@Setter
	private Integer switchBetweenStatusAndClientOther;
	//Added for the multiple functionality in switching  
	@Getter	@Setter
	private Integer switchBetweenOptionFieldsSignal;
	@Getter	@Setter
	private Integer switchBetweenOptionFields;
	
	// ------Pagination

	/*
	 * ==========================================================================
	 * =============== Default constructor
	 * ======================================
	 * ===================================================
	 */
	public ReportOrders() throws ServiceLocatorException {
		super();
		userService = getServiceLocator().getUserService();
		orderService = getServiceLocator().getOrderService();
		productService = getServiceLocator().getProductService();
		operationsService = getServiceLocator().getOperationsService();
		switchBetweenOptionFields = 0;
		
		
	}

	/*
	 * ==========================================================================
	 * =============== method execute
	 * ============================================
	 * =============================================
	 */
	@SuppressWarnings({ "rawtypes", "unchecked" })
	@Override
	public String execute() throws Exception {
		System.out.println("Product Order Number: "+ productOrderNumberSearch);
		System.out.println("Tracking Number: "+ trakingNumber);
		System.out.println("Client Order ID: "+ clientOrderNumber);
		System.out.println("Client Other ID: "+ clientOther);
		System.out.println(switchBetweenOptionFields);
//		switchBetweenOptionFields=2;
		//Create new object or Order to modify the search functionality
		OrdersDTO orderDTOObj=new OrdersDTO();
		orderDTOObj.setLsOrderId(lsOrderId);
		orderDTOObj.setUserLogin(userLogin);
		orderDTOObj.setStatus(status);
		orderDTOObj.setProductOrderNumber(productOrderNumberSearch);
		orderDTOObj.setClientOrderNumber(clientOrderNumber);
		orderDTOObj.setClientOtherId(clientOther);
		
		HttpSession session = request.getSession(true);
		
		
		if (showOrderDetailPop == null)
			showOrderDetailPop = "visibility:hidden;display:none;";
		if (showConfirmDeleteOrderPop == null)
			showConfirmDeleteOrderPop = "visibility:hidden;display:none;";
		if (showSaveSuccessPop == null)
			showSaveSuccessPop = "visibility:hidden;display:none;";
		if (poYpop == null)
			poYpop = 100L;
		if (poXpop == null)
			poXpop = 100L;
		Hashtable<String, OrdersDTO> hashOrders;
		if (selectedStatus == null)
			selectedStatus = -1;
		sizeResult = (Long) session.getAttribute("sizeResult");
		totalOrders = (Long) session.getAttribute("totalOrders");
		if (totalOrders == null)
			totalOrders = 0L;
		asc = (Integer) session.getAttribute("asc");
		if (asc == null)
			asc = 0;
		if (sizeResult == null)
			sizeResult = 0L;
		if (indexOrder == null)
			indexOrder = 0;
		userPrivileges = (UsersPrivilegesDTO) session.getAttribute("userPrivileges");
		usersPrivShippedToInvoiced = (UsersPrivilegesDTO) session.getAttribute("usersPrivShippedToInvoiced");
		usersPrivChangeShippedStatus = (UsersPrivilegesDTO) session
				.getAttribute("usersPrivChangeShippedStatus");
		hashStatus = (HashMap<Integer, String>) session
				.getAttribute("hashStatus");
		if (hashStatus == null) {
			hashStatus = new HashMap<Integer, String>();
			hashStatus.put(0, "");
			hashStatus.put(1, "open");
			hashStatus.put(2, "progress");
		}
		List<Integer> listIndexColumn = new ArrayList<Integer>();
		// fill list status
		listStatus = (ArrayList<OrdersDTO>) session.getAttribute("listStatus");
		if (listStatus == null) {
			listStatus = new ArrayList<OrdersDTO>();
			OrdersDTO orderDTOOpen = new OrdersDTO();
			orderDTOOpen.setStatus("open");
			orderDTOOpen.setId(0L);
			listStatus.add(orderDTOOpen);
			OrdersDTO orderDTOProgress = new OrdersDTO();
			orderDTOProgress.setStatus("progress");
			orderDTOProgress.setId(1L);
			listStatus.add(orderDTOProgress);
			if (usersPrivChangeShippedStatus != null) {
				OrdersDTO orderDTOShipped = new OrdersDTO();
				orderDTOShipped.setStatus("shipped");
				orderDTOShipped.setId(2L);
				listStatus.add(orderDTOShipped);
			}

		}

		try {

			/*-------------------- recovery users list -----------------------------------
							Recovery users list in session
			 -----------------------------------------------------------------------------*/
			// recovery provinces
			listProvinces = (List<ProvinceDTO>) session
					.getAttribute("listProvinces");
			if (listProvinces == null)
				listProvinces = productService.getAllProvinces();
			orderNotSavedAtFirst = (Boolean) session
					.getAttribute("listNotSavedAtFirst");
			BasicUserDTO basicUserDTO = new BasicUserDTO();
			basicUserDTO.setTypeId(USER_TYPE);
			List<User> usersListSession = (List<User>) session
					.getAttribute("usersListSession");
			if (usersListSession == null) {
				List<UserSessionDTO> listAllUsers = userService
						.getAllUsers(basicUserDTO);
				usersList = new ArrayList<User>();
				for (UserSessionDTO userDTO : listAllUsers) {
					User user = new User();
					user.setId(userDTO.getId());
					user.setLogin(userDTO.getLogin());
					usersList.add(user);
				}
				session.setAttribute("usersListSession", usersList);
			} else{
				usersList = usersListSession;
			}
			
			listOrdersDTO = (ArrayList<OrdersDTO>) session.getAttribute("listOrdersDTOReport");
			
			reportDateBetween = (Integer) session.getAttribute("reportDateBetween");
			if (reportDateBetween == null) {
				reportDateBetween = 0;
				session.setAttribute("reportDateBetween", reportDateBetween);
			}

			//Added for the new field
			switchBetweenClientLoginAndPoNumber = (Integer) session.getAttribute("switchBetweenClientLoginAndPoNumber");
			if (switchBetweenClientLoginAndPoNumber == null) {
				switchBetweenClientLoginAndPoNumber = 0;
				session.setAttribute("switchBetweenClientLoginAndPoNumber", switchBetweenClientLoginAndPoNumber);
			}
			switchBetweenLsOrderAndClientOrderId = (Integer) session.getAttribute("switchBetweenLsOrderAndClientOrderId");
			if (switchBetweenLsOrderAndClientOrderId == null) {
				switchBetweenLsOrderAndClientOrderId = 0;
				session.setAttribute("switchBetweenLsOrderAndClientOrderId", switchBetweenLsOrderAndClientOrderId);
			}
			switchBetweenStatusAndClientOther = (Integer) session.getAttribute("switchBetweenStatusAndClientOther");
			if (switchBetweenStatusAndClientOther == null) {
				switchBetweenStatusAndClientOther = 0;
				session.setAttribute("switchBetweenStatusAndClientOther", switchBetweenStatusAndClientOther);
			}
			
			switchBetweenOptionFields = (Integer) session.getAttribute("switchBetweenOptionFields");
			if (switchBetweenOptionFields == null) {
				switchBetweenOptionFields = 0;
				session.setAttribute("switchBetweenOptionFields", switchBetweenOptionFields);
			}

			/*------ always check if the Admin select all orders ------------
					if The Admin select all orders change checkBoxItem value 
			  ---------------------------------------------------------------*/
			if (selectAllOrdersSignal != null && selectAllOrdersSignal != 0L) {
				if (checkBoxItem != null) {
					session.setAttribute("checkBoxItem", checkBoxItem);
					session.setAttribute("allOrdersSelectedSignal", 0L);
					if (checkBoxItem)
						session.setAttribute("allOrdersSelectedSignal", 1L);
				}
			}
			checkBoxItem = (Boolean) session.getAttribute("checkBoxItem");
			if (checkBoxItem == null)
				checkBoxItem = false;
			/*------ always recovery creationDate from strCreationDate ------
						always keep the user search options
			  ---------------------------------------------------------------*/
			creationDateStart = null;
			SimpleDateFormat frm = new SimpleDateFormat("dd/MM/yyyy");
			if (((strCreationDateStart) != null)
					&& (!"".equals(strCreationDateStart))) {
				try {
					Date date = frm.parse(strCreationDateStart);
					creationDateStart = date;
					creationDateStartArg = date;
				} catch (Exception pe) {
					creationDateStart = null;
					addActionError("Please enter a date in the correct format");
				}
			}
			if (creationDateStart == null) {
				Date date = frm.parse("01/01/1900");
				creationDateStartArg = date;
			}
			creationDateEnd = null;
			if (((strCreationDateEnd) != null)
					&& (!"".equals(strCreationDateEnd))) {
				frm = new SimpleDateFormat("dd/MM/yyyy");
				try {
					Date date = frm.parse(strCreationDateEnd);
					creationDateEnd = date;
					creationDateEndArg = date;
				} catch (Exception pe) {
					creationDateEnd = null;
					addActionError("Please enter a date in the correct format");
				}
			}
			if (creationDateEnd == null) {
				creationDateEndArg = new Date();
			}

			/*------ always recovery Status from selectedStatus key ------
						always keep the status search options
			  ---------------------------------------------------------------*/
			status = getStatusSelected(selectedStatus);

			/*----------- always initialized listPages if not done ----------
				   		    and check if is there next listPages
			  ---------------------------------------------------------------*/
			nextListPages = (Integer) session.getAttribute("nextListPages");
			if (nextListPages == null)
				nextListPages = 0;
			if (indexSet == null || indexSet == -1) {
				indexSet = (Integer) session.getAttribute("indexSet");
				if (indexSet == null)
					indexSet = 0;
			}
			listIndexSet = (List<OrdersDTO>) session
					.getAttribute("listIndexSet");
			if (listIndexSet == null)
				initalizeListIndexSet(session, orderService);

			/*----------------- When Admin Click on the pageIndex ----------------------------------
										catch  page index
			 ---------------------------------------------------------------------------------------*/
			//Toggle Switch between PO Date and Shipping date
			if (dateBetweenSignal != null && dateBetweenSignal != 0L) {
				reportDateBetween = ((reportDateBetween == null || reportDateBetween == 0) ? 1: 0);
				listOrdersDTO = new ArrayList<OrdersDTO>();
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				session.setAttribute("reportDateBetween", reportDateBetween);
				return SUCCESS;
			}
		
			//Toggle Switch between Client Login and PO Number	
//			switchBetweenClientLoginAndPoNumber=(Integer)session.getAttribute("switchBetweenClientLoginAndPoNumber");
			
			if (switchBetweenClientLoginAndPoNumberSignal != null && switchBetweenClientLoginAndPoNumberSignal != 0L) {
				switchBetweenClientLoginAndPoNumber = ((switchBetweenClientLoginAndPoNumber == null 
						|| switchBetweenClientLoginAndPoNumber == 0) ? 1: 0);
				listOrdersDTO = new ArrayList<OrdersDTO>();
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				session.setAttribute("switchBetweenClientLoginAndPoNumber", switchBetweenClientLoginAndPoNumber);
				return SUCCESS;
			}
			
			//Switching between "ls_Order" and "Client Order Id"	
//			switchBetweenLsOrderAndClientOrderId = (Integer)session.getAttribute("switchBetweenLsOrderAndClientOrderId");
			
			if (switchBetweenLsOrderAndClientOrderIdSignal != null && switchBetweenLsOrderAndClientOrderIdSignal != 0L) {
				switchBetweenLsOrderAndClientOrderId = ((switchBetweenLsOrderAndClientOrderId == null 
						|| switchBetweenLsOrderAndClientOrderId == 0) ? 1: 0);
				listOrdersDTO = new ArrayList<OrdersDTO>();
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				session.setAttribute("switchBetweenLsOrderAndClientOrderId", switchBetweenLsOrderAndClientOrderId);
				return SUCCESS;
			}
			
			//Switching between "Status" and "Client Other Id"
//			switchBetweenStatusAndClientOther = (Integer)session.getAttribute("switchBetweenStatusAndClientOther");
			
			if (switchBetweenStatusAndClientOtherSignal != null && switchBetweenStatusAndClientOtherSignal != 0L) {
				switchBetweenStatusAndClientOther = ((switchBetweenStatusAndClientOther == null 
						|| switchBetweenStatusAndClientOther == 0) ? 1: 0);
				listOrdersDTO = new ArrayList<OrdersDTO>();
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				session.setAttribute("switchBetweenStatusAndClientOther", switchBetweenStatusAndClientOther);
				return SUCCESS;
			}
			
			if (switchBetweenOptionFieldsSignal != null && switchBetweenOptionFieldsSignal != 0L) {
//				switchBetweenOptionFields = ((
//						switchBetweenOptionFieldsSignal == null 
//						|| switchBetweenOptionFieldsSignal == 0) ? 4: 0);

				switchBetweenOptionFields++;
				listOrdersDTO = new ArrayList<OrdersDTO>();
//				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				session.setAttribute("switchBetweenOptionFields", switchBetweenOptionFields);
				if (switchBetweenOptionFields == 4){
					switchBetweenOptionFields = 0;
					session.setAttribute("switchBetweenOptionFields", switchBetweenOptionFields);
				} 
				
				return SUCCESS;

				
			}
			

			
			
			/*----------------- When Admin Click on the pageIndex ----------------------------------
										catch  page index
			 ---------------------------------------------------------------------------------------*/
			if (pageIndexSignal != null && pageIndexSignal != 0L) {
				OrdersDTO orderDTO = (OrdersDTO) session.getAttribute("orderPageSelected");
				if (orderDTO != null)
					orderDTO.setCssStyle("");
				OrdersDTO orderPageSelected = listIndexSet.get(indexList);
				orderPageSelected
						.setCssStyle("background-color:#FFFF99;border:1px solid #CCCCCC;");
				indexSet = orderPageSelected.getIndex() - 1;
				indexSet = indexSet * PAGE_ITEMS_COUNT;
				session.setAttribute("indexSet", indexSet);
				session.setAttribute("listIndexSet", listIndexSet);
				session.setAttribute("orderPageSelected", orderPageSelected);
			}

			/*----------------- When Admin Click on the nextListPages ------------------------------
						recreate listIndexSet started with index>index+10 and indexSet>indexSet+10
			 ---------------------------------------------------------------------------------------*/
			if (nextListPagesSignal != null && nextListPagesSignal != 0L
					&& listIndexSet.size() > 0) {
				OrdersDTO orderDTOPrevious = (OrdersDTO) session
						.getAttribute("orderPageSelected");
				if (orderDTOPrevious != null)
					orderDTOPrevious.setCssStyle("");
				OrdersDTO orderDTO = listIndexSet.get(listIndexSet.size() - 1);
				if (orderDTO != null)
					nextListPages = orderDTO.getIndex() + 1;
				
				Long totalOrders = orderService.getCountOrders(creationDateStartArg,
						creationDateEndArg, reportDateBetween, userLogin, lsOrderId,
						status,productOrderNumberSearch,clientOrderNumber,clientOther);
				
				String strcount = totalOrders.toString();
				Integer sizeList = Integer.parseInt(strcount)
						/ PAGE_ITEMS_COUNT;
				if (nextListPages <= sizeList + 1) {
					listIndexSet = new ArrayList<OrdersDTO>();
					for (int i = nextListPages; i <= sizeList + 1
							&& i <= nextListPages + 10; i++) {
						OrdersDTO ord = new OrdersDTO();
						ord.setCssStyle("");
						ord.setIndex(i);
						listIndexSet.add(ord);
					}
					if (nextListPages <= sizeList + 1) {
						indexSet = nextListPages - 1;
						OrdersDTO orderPageSelected = listIndexSet.get(0);
						orderPageSelected
								.setCssStyle("background-color:#FFFF99;border:1px solid #CCCCCC;");
						indexSet = indexSet * PAGE_ITEMS_COUNT;
						session.setAttribute("indexSet", indexSet);
						session.setAttribute("nextListPages", nextListPages);
						session.setAttribute("listIndexSet", listIndexSet);
						session.setAttribute("orderPageSelected",
								orderPageSelected);
					}
				}
			}

			/*----------------- When Admin Click on the previousListPages --------------------------
					recreate listIndexSet started with index< index-10 and indexSet<indexSet-10
			 ---------------------------------------------------------------------------------------*/
			if (prevListPagesSignal != null && prevListPagesSignal != 0L
					&& listIndexSet.size() > 0) {
				OrdersDTO orderDTOPrevious = (OrdersDTO) session
						.getAttribute("orderPageSelected");
				if (orderDTOPrevious != null)
					orderDTOPrevious.setCssStyle("");
				nextListPages = (Integer) session.getAttribute("nextListPages");
				if (nextListPages != null && nextListPages >= 11) {
					prevListPages = nextListPages - 11;
					listIndexSet = new ArrayList<OrdersDTO>();
					for (int i = prevListPages; i < nextListPages; i++) {
						OrdersDTO ord = new OrdersDTO();
						ord.setCssStyle("");
						ord.setIndex(i);
						listIndexSet.add(ord);
					}
					indexSet = prevListPages - 1;
					OrdersDTO orderPageSelected = listIndexSet.get(0);
					orderPageSelected
							.setCssStyle("background-color:#FFFF99;border:1px solid #CCCCCC;");
					indexSet = indexSet * PAGE_ITEMS_COUNT;
					nextListPages = prevListPages;
					session.setAttribute("nextListPages", nextListPages);
					session.setAttribute("indexSet", indexSet);
					session.setAttribute("listIndexSet", listIndexSet);
					session.setAttribute("orderPageSelected", orderPageSelected);
				}
			}

			/*----------------- When Admin change province -----------------------------------------
								Check a list off this province
			 ---------------------------------------------------------------------------------------*/
			hashProvinces = (Hashtable<String, ProvinceDTO>) session
					.getAttribute("hashProvinces");
			if (hashProvinces == null) {
				listProvinces = productService.getAllProvinces();
				Hashtable<String, ProvinceDTO> hashProvinces = new Hashtable<String, ProvinceDTO>();
				for (ProvinceDTO prov : listProvinces) {
					hashProvinces.put(prov.getCode(), prov);
				}
				session.setAttribute("hashProvinces", hashProvinces);
			}
			if (code != null && !code.equals("") && listOrdersDTO != null) {
				ProvinceDTO provinceDTO = hashProvinces.get(code);
				if (provinceDTO != null) {
					clientProvince = provinceDTO.getCode();
				}
			}// else listCities=new ArrayList<CityDTO>();
			if (listOrdersDTO != null && indexOrder != -1) {
				orderToEdit = listOrdersDTO.get(indexOrder);
				if (orderToEdit != null) {
					orderToEdit.setClientProvince(code);
					session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				}
			}

			/*------------------------------- Refresh listOrdersDTO------------------------------------
						Refresh listOrders before generation of invoiced orders XLS file 
				 ------------------------------------------------------------------------------------------*/
			invoicedOrdersRefresh = (Long) session
					.getAttribute("invoicedOrdersRefresh");
			if (invoicedOrdersRefresh != null && invoicedOrdersRefresh != 0L) {
				listIndexColumn = (ArrayList<Integer>) session
						.getAttribute("listIndexColumn");
				if (listIndexColumn == null)
					listIndexColumn = getNewListIndexColumn();
				lsOrderId = lsOrderId.toUpperCase();
				
				//New Searching Functionality
				listOrdersDTO = orderService.searchOrdersWithOptionsAndSorting(
						creationDateStartArg, creationDateEndArg,
						reportDateBetween,orderDTOObj,listIndexColumn, PAGE_ITEMS_COUNT, indexSet);
				//Old Searching Functionality				
//				listOrdersDTO = orderService.searchOrdersWithOptionsAndSorting(
//						creationDateStartArg, creationDateEndArg,
//						reportDateBetween, userLogin, lsOrderId, status,
//						listIndexColumn, PAGE_ITEMS_COUNT, indexSet);
				
				if (findOrdersSignal != null && findOrdersSignal != 0L)
					initalizeListIndexSet(session, orderService);
				// Color in RED rows containing a GroupItems
				for (OrdersDTO orderDTO : listOrdersDTO) {
					if (orderDTO != null && orderDTO.getStatus() != null
							&& orderDTO.getStatus().equals("shipped")) {
						Long count = productService.isGroupProductID(orderDTO
								.getProductId());
						if (count != null && count >= 1) {
							orderDTO.setCssStyle("background-color: rgb(248,150,140); border-right:1px solid #CCCCCC;border-left:1px solid #CCCCCC;border-top:1px solid #CCCCCC;");
						}
					}
				}

				// keep search parameters to use in other
				// classes(PrintOrdersToPDF, ...)
				indexSet = 0;
				session.setAttribute("indexSet", indexSet);
				nextListPages = 0;
				session.setAttribute("nextListPages", nextListPages);
				session.setAttribute("selectedStatus", selectedStatus);
				session.setAttribute("creationDateStartArg",creationDateStartArg);
				session.setAttribute("creationDateEndArg", creationDateEndArg);
				session.setAttribute("reportDateBetween", reportDateBetween);
				session.setAttribute("lsOrderId", lsOrderId);
				session.setAttribute("userLogin", userLogin);
				session.setAttribute("status", status);
				session.setAttribute("listIndexColumn", listIndexColumn);
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				session.setAttribute("invoicedOrdersRefresh", 0L);
				
				session.setAttribute("productOrderNumberSearch", productOrderNumberSearch);
				session.setAttribute("clientOrderNumber", clientOrderNumber);
				session.setAttribute("clientOther", clientOther);
				session.setAttribute("switchBetweenOptionFields", switchBetweenOptionFields);
				return SUCCESS;
			}

			/*------------ When Admin click on the Button "Delete Order" in The OrderDtailPop --------------
								show other pop to confirm Order Delete
			  ----------------------------------------------------------------------------------------------*/
			if (deleteOrderSignal != null && deleteOrderSignal != 0L) {
				message = "Attention! if you click on \"Delete Order\" you can not restore it.";
				orderToEdit = listOrdersDTO.get(indexOrder);
				if (confirmDeleteSignal != null && confirmDeleteSignal == 0L) { // Delete
																				// Order
																				// Request
					showOrderDetailPop = "display:block;visibility:visible;";
					showConfirmDeleteOrderPop = "display:block;visibility:visible;";
				} else if (confirmDeleteSignal == 1L) { // Delete Order
														// Confirmed
					orderService.deleteOrderByLsOrderId(orderToEdit);
					// Save this operation in table operation
					OperationsDTO operationDTO = new OperationsDTO();
					User userAdmin = (User) session.getAttribute("userAdmin");
					if (userAdmin != null)
						operationDTO.setUserId(userAdmin.getId());
					operationDTO.setOperationDate(new Date());
					operationDTO.setOperationType("Delete Order");
					String dataBefore = "[PARTNER NAME:"
							+ orderToEdit.getUserLogin() + "];";
					dataBefore += " [LS_ORDER_ID:" + orderToEdit.getLsOrderId()
							+ "];";
					dataBefore += " [PRODUCT_ORDER_NUMBER:"
							+ orderToEdit.getProductOrderNumber() + "];";
					dataBefore += " [CLIENT_FIRST_NAME:"
							+ orderToEdit.getClientFirstName() + "];";
					dataBefore += " [CLIENT_LAST_NAME:"
							+ orderToEdit.getClientLastName() + "];";
					dataBefore += " [CLIENT_POSTAL_CODE:"
							+ orderToEdit.getClientPostalCode() + "];";
					dataBefore += " [LS_PRODUCT_ID:"
							+ orderToEdit.getLsProductID() + "];";
					dataBefore += " [UNIT_PRICE:" + orderToEdit.getUnitPrice()
							+ "];";
					dataBefore += " [STATUS:" + orderToEdit.getStatus() + "];";
					operationDTO.setDataBefore(dataBefore);
					operationDTO.setDataBefore(operationDTO.getDataBefore());
					operationDTO.setDataAfter("");
					operationsService.insertOperation(operationDTO);
					// Remove order from the list orders
					listOrdersDTO.remove(orderToEdit);
					session.setAttribute("listOrdersDTOReport", listOrdersDTO);
					showOrderDetailPop = "visibility:hidden;display:none;";
					showConfirmDeleteOrderPop = "visibility:hidden;display:none;";
					// initialize index orders
					int indexOrder = 0;
					int indexRow = 0;
					for (OrdersDTO orderDTO : listOrdersDTO) {
						orderDTO.setIndex(indexOrder);
						indexOrder++;
						indexRow = 0;
						for (OrdersRows orderRows : orderDTO.getRowsList()) {
							orderRows.setIndex(indexRow);
							indexRow++;
						}
					}
					session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				} else { // Cancel Order Delete
					showOrderDetailPop = "display:block;visibility:visible;";
					showConfirmDeleteOrderPop = "visibility:hidden;display:none;";
				}
				return SUCCESS;
			}

			/*------ When Admin click the "Edit link" in the Order Table for Edit NOTE -----
							show only field Edit Note
			  ------------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& showOnlyEditNote != null && showOnlyEditNote != 0L) {
				orderToEdit = listOrdersDTO.get(indexOrder);
				for (OrdersDTO order : listOrdersDTO) {
					order.setShowOnlyEditNote(0L);
					order.setCssRow("");
				}
				orderToEdit.setShowOnlyEditNote(1L);
				orderToEdit.setCssRow("background-color:#FF9966;");
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				listOrdersDTO = (ArrayList<OrdersDTO>) session
						.getAttribute("listOrdersDTOReport");
				return SUCCESS;
			}

			/*------------ When Admin click on link "Save Edit Note in the Orders Table" ----------
													save Only  notes
			  -------------------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& saveOnlyNoteSignal != null && saveOnlyNoteSignal != 0L) {
				if (indexOrder != null) {
					orderToEdit = listOrdersDTO.get(indexOrder);
					if (orderToEdit != null) {
						orderToEdit.setNotes(notes);
						orderToEdit.setShowRowShipping(0L);
						orderToEdit.setShowOnlyEditNote(0L);
						orderToEdit.setCssRow("");
						// Save Note
						Boolean sucess = orderService
								.updateShippingOrderElements(orderToEdit);
						session.setAttribute("listOrdersDTOReport",
								listOrdersDTO);
					}
				}
				return SUCCESS;
			}

			/*------------ When Admin click the "Edit link" in the Order Table -------------
								show fields to edit shipping parameters
			  ------------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& showRowShipping != null && showRowShipping != 0L) {

				orderToEdit = listOrdersDTO.get(indexOrder);
				for (OrdersDTO order : listOrdersDTO) {
					order.setShowRowShipping(0L);
					order.setCssRow("");
				}
				// only Admins who has Active = true of action name='All' can
				// change shipping settings
				// of orders shipped or invoiced
				if (usersPrivChangeShippedStatus == null
						&& orderToEdit.getStatus() != null
						&& (orderToEdit.getStatus().equals("shipped") || orderToEdit
								.getStatus().equals("invoiced"))) {
					showRowShipping = 0L;
					return SUCCESS;
				}

				if (orderToEdit != null) {
					orderToEdit.setShowRowShipping(1L);
					orderToEdit.setShowOnlyEditNote(1L);
					orderToEdit.setCssRow("background-color:#FF9966;");
					session.setAttribute("listOrdersDTOReport", listOrdersDTO);
					listOrdersDTO = (ArrayList<OrdersDTO>) session
							.getAttribute("listOrdersDTOReport");
				}
				if (orderToEdit.getStatus().equals("open")) {
					statusId = 0L;
				} else if (orderToEdit.getStatus().equals("progress")) {
					statusId = 1L;
				} else if (orderToEdit.getStatus().equals("shipped")) {
					statusId = 2L;
				} else if (orderToEdit.getStatus().equals("invoiced")) {
					statusId = 3L;
				} else if (orderToEdit.getStatus().equals("canceled")) {
					statusId = 4L;
				}
				return SUCCESS;
			}

			/*------------ When Admin click on link "Save in the Orders Table" ----------
							save all shipping parameters and notes
			 ----------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& saveShippingSignal != null && saveShippingSignal != 0L) {
				if (indexOrder != null) {
					orderToEdit = listOrdersDTO.get(indexOrder);
					if (orderToEdit != null) {
						Date shippedDateToEdit = null;
						frm = new SimpleDateFormat("dd/MM/yyyy");
						if (((strShippedDate) != null)
								&& (!"".equals(strShippedDate))) {
							strShippedDate = strShippedDate.replaceAll(" ", "");
							try {
								Date date = frm.parse(strShippedDate);
								shippedDateToEdit = date;
							} catch (Exception pe) {
								shippedDateToEdit = null;
							}
						}
						if (((strShippedDate) != null)
								&& (!"".equals(strShippedDate))
								&& strShippedDate.length() <= 8)
							shippedDateToEdit = orderToEdit.getShippedDate();
						Double shippingPrice = null;
						// Double currencyShippingPrice=null;
						if (strShippingPrice != null
								&& !strShippingPrice.equals("")) {
							strShippingPrice = strShippingPrice.replaceAll(" ",
									"");
							int index = strShippingPrice.indexOf(",");
							if (index >= 0) {
								String strUnitPrice1 = strShippingPrice
										.substring(0, index);
								String strUnitPrice2 = strShippingPrice
										.substring(index + 1,
												strShippingPrice.length());
								strShippingPrice = strUnitPrice1 + "."
										+ strUnitPrice2;
							}

							try {
								shippingPrice = Double
										.parseDouble(strShippingPrice);
								/*
								 * if(shippingPrice!=null &&
								 * orderToEdit.getCurrencyId()!=null &&
								 * orderToEdit.getCurrencyId()!=1 &&
								 * orderToEdit.getCurrencyRate()!=null) {
								 * currencyShippingPrice = shippingPrice *
								 * orderToEdit.getCurrencyRate();
								 * currencyShippingPrice = (double)
								 * Math.round(currencyShippingPrice*100)/100; }
								 */
							} catch (Exception pe) {
								shippingPrice = null;
							}
						}

						if (trakingNumber != null)
							trakingNumber = trakingNumber.replaceAll(
									"^ +| +$|( )+", "$1");
						if (shippingCompany != null)
							shippingCompany = shippingCompany.replaceAll(
									"^ +| +$|( )+", "$1");
						orderToEdit.setShippingPrice(shippingPrice);
						// orderToEdit.setCurrencyShippingPrice(currencyShippingPrice);
						// orderToEdit.getRowsList().get(0).setCurrencyShippingPrice(currencyShippingPrice);
						orderToEdit.setShippedDate(shippedDateToEdit);
						orderToEdit.setNotes(notes);
						if (newStatus != null && !newStatus.equals(""))
							orderToEdit.setStatus(newStatus);
						orderToEdit.setShippingCompany(shippingCompany);
						orderToEdit.setTrackingNumber(trakingNumber);
						orderToEdit.setShowRowShipping(0L);
						orderToEdit.setShowOnlyEditNote(0L);
						OrdersRows row = orderToEdit.getRowsList().get(0);
						row.setShippingPrice(shippingPrice);
						row.setShippingCompany(shippingCompany);
						row.setTrackingNumber(trakingNumber);
						orderToEdit.setCssRow("");

						if (newStatus != null && !newStatus.equals("")) { // if
																			// admin
																			// click
																			// on
																			// the
																			// save
																			// behind
																			// status
							orderService.updateStatusByLsOrderId(
									orderToEdit.getLsOrderId(), newStatus);
							orderToEdit.setStatus(newStatus);
							if (!newStatus.equals("shipped")
									&& !newStatus.equals("invoiced")
									&& !newStatus.equals("canceled")) {
								orderToEdit.setShippingPrice(null);
								orderToEdit.setTrackingNumber(null);
								orderToEdit.setShippedDate(null);
							}

						} else {// if admin click on the save other than Status
							if (orderToEdit.getShippedDate() != null
									&& orderToEdit.getTrackingNumber() != null
									&& !orderToEdit.getTrackingNumber().equals(
											"")
									&& orderToEdit.getShippingCompany() != null
									&& !orderToEdit.getShippingCompany()
											.equals("")
									&& orderToEdit.getShippingPrice() != null
									&& orderToEdit.getStatus() != null) {
								if (orderToEdit.getStatus().equals("open")
										|| orderToEdit.getStatus().equals(
												"progress")) {
									orderService.updateStatusByLsOrderId(
											orderToEdit.getLsOrderId(),
											"shipped");
									orderToEdit.setStatus("shipped");
								}
							} else {
								if (usersPrivChangeShippedStatus != null
										&& !orderToEdit.getStatus().equals(
												"open")
										&& !orderToEdit.getStatus().equals(
												"progress")) {
									orderService.updateStatusByLsOrderId(
											orderToEdit.getLsOrderId(),
											"progress");
									orderToEdit.setStatus("progress");
								}
							}
						}
						// if admin click on the save other then status(save
						// notes, save shipping company ...)
						Boolean sucess = orderService
								.updateShippingOrderElements(orderToEdit);
						session.setAttribute("listOrdersDTOReport",
								listOrdersDTO);
					}
				}
				return SUCCESS;
			}

			/*------------ When Admin click on icon findOrders.png ----------
								check user and complete infos client
			 ----------------------------------------------------------------*/
			if (findOrdersSignal != null
					&& findOrdersSignal != 0L
					|| (pageIndexSignal != null && pageIndexSignal != 0L)
					|| (nextListPagesSignal != null && nextListPagesSignal != 0L)
					|| (prevListPagesSignal != null && prevListPagesSignal != 0L)) {
				// session.setAttribute("allOrdersSelectedSignal",0L);
				// if admin click on search icon initialize checkBoxItem to
				// false
				if (findOrdersSignal != null && findOrdersSignal != 0L) {
					session.setAttribute("allOrdersSelectedSignal", 0L);
					checkBoxItem = false;
					session.setAttribute("checkBoxItem", checkBoxItem);
					indexSet = 0;
					session.setAttribute("indexSet", indexSet);
					nextListPages = 0;
					session.setAttribute("nextListPages", nextListPages);
					session.setAttribute("selectedStatus", selectedStatus);

				}
				// if admin navigate on pages keep the previous sorting
				if (((pageIndexSignal != null && pageIndexSignal != 0L)
						|| (nextListPagesSignal != null && nextListPagesSignal != 0L) || (prevListPagesSignal != null && prevListPagesSignal != 0L))) {
					listIndexColumn = (ArrayList<Integer>) session
							.getAttribute("listIndexColumn");
					if (listIndexColumn == null)
						listIndexColumn = getNewListIndexColumn();
				} else { // prepare new sorting
					listIndexColumn = getNewListIndexColumn();
				}

				lsOrderId = lsOrderId.toUpperCase();
				// if(findOrdersSignal!=null &&
				// findOrdersSignal!=0L)initalizeListIndexSet(session,orderService
				// );
				
				//Old Working Methods
//				listOrdersDTO = orderService.searchOrdersWithOptionsAndSorting(
//						creationDateStartArg, creationDateEndArg,
//						reportDateBetween, userLogin, lsOrderId, status,
//						listIndexColumn, PAGE_ITEMS_COUNT, indexSet);
				
				//New Functionality with same mapping
				listOrdersDTO = orderService.searchOrdersWithOptionsAndSortingNew(
								creationDateStartArg, creationDateEndArg,
								reportDateBetween, userLogin, lsOrderId,
								status, listIndexColumn, PAGE_ITEMS_COUNT,
								indexSet, productOrderNumberSearch,clientOrderNumber,
								clientOther);

//				//New Searching Functionality
//				listOrdersDTO = orderService.searchOrdersWithOptionsAndSorting(
//						creationDateStartArg, creationDateEndArg,
//						reportDateBetween, orderDTOObj, listIndexColumn,
//						PAGE_ITEMS_COUNT, indexSet);
				
				
				// Color in RED rows containing a GroupItems
				for (OrdersDTO orderDTO : listOrdersDTO) {
					if (orderDTO != null && orderDTO.getStatus() != null
							&& orderDTO.getStatus().equals("shipped")) {
						Long count = productService.isGroupProductID(orderDTO
								.getProductId());
						if (count != null && count >= 1) {
							orderDTO.setCssStyle("background-color: rgb(248,150,140); border-right:1px solid #CCCCCC;border-left:1px solid #CCCCCC;border-top:1px solid #CCCCCC;");
						}
					}
				}

				// keep search parameters to use in other
				// classes(PrintOrdersToPDF, ...)
				session.setAttribute("creationDateStartArg",
						creationDateStartArg);
				session.setAttribute("creationDateEndArg", creationDateEndArg);
				session.setAttribute("reportDateBetween", reportDateBetween);
				session.setAttribute("lsOrderId", lsOrderId);
				session.setAttribute("userLogin", userLogin);
				session.setAttribute("status", status);
				//For newly added field
				session.setAttribute("productOrderNumberSearch", productOrderNumberSearch);
				session.setAttribute("switchBetweenOptionFields", switchBetweenOptionFields);

				session.setAttribute("listIndexColumn", listIndexColumn);
				session.setAttribute("sizeResult", sizeResult);
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				if (findOrdersSignal != null && findOrdersSignal != 0L)
					initalizeListIndexSet(session, orderService);
				return SUCCESS;
			}

			/*------------ When Admin click on the icon sorting of column ----------
							seach result with option of sorting list
			 -----------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& sortingOrdersSignal != null && sortingOrdersSignal != 0L) {
				listIndexColumn = (List<Integer>) session
						.getAttribute("listIndexColumn");
				asc = (asc == 1 ? -1 : 1);
				int nextElement = listIndexColumn.get(0);
				fieldForSorting = asc * fieldForSorting;
				listIndexColumn.set(0, fieldForSorting);
				for (int i = 1; i < listIndexColumn.size(); i++) {
					int element = listIndexColumn.get(i);
					listIndexColumn.set(i, nextElement);
					nextElement = element;
				}
				
				//New Functionality with same mapping
				listOrdersDTO = orderService.searchOrdersWithOptionsAndSortingNew(
								creationDateStartArg, creationDateEndArg,
								reportDateBetween, userLogin, lsOrderId,
								status, listIndexColumn, PAGE_ITEMS_COUNT,
								indexSet, productOrderNumberSearch,clientOrderNumber,
								clientOther);
				
//				listOrdersDTO = orderService.searchOrdersWithOptionsAndSorting(
//						creationDateStartArg, creationDateEndArg,
//						reportDateBetween, userLogin, lsOrderId, status,
//						listIndexColumn, PAGE_ITEMS_COUNT, indexSet);
				
//				// New Searching Functionality
//				listOrdersDTO = orderService.searchOrdersWithOptionsAndSorting(
//						creationDateStartArg, creationDateEndArg,
//						reportDateBetween, orderDTOObj, listIndexColumn,
//						PAGE_ITEMS_COUNT, indexSet);
				
				int balance = 0;
				int OrderIndex = 0;
				for (OrdersDTO orDTO : listOrdersDTO) {
					balance = (balance == 1 ? 0 : 1);
					if (balance == 1) {
						orDTO.setCssStyle("background-color: rgb(245,249,252);border-right: 1px solid #CCCCCC;border-left:1px solid #CCCCCC;border-top:  1px solid #CCCCCC;");
					} else {
						orDTO.setCssStyle("background-color: color:white;border-right:1px solid #CCCCCC;border-left:1px solid #CCCCCC;border-top:1px solid #CCCCCC;");
					}
					orDTO.setIndex(OrderIndex);
					OrderIndex++;
				}
				session.setAttribute("listIndexColumn", listIndexColumn);
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				session.setAttribute("asc", asc);
				return SUCCESS;
			}

			/*------ when Admin click on the lsOrder link in table -----------
					show popup detail and allow admin to update Order
			  ---------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& editOrderSignal != null && editOrderSignal != 0L) {
				orderToEdit = listOrdersDTO.get(indexOrder);
				if (orderToEdit == null)
					orderToEdit = new OrdersDTO();
				if (orderToEdit.getProductOrderDate() == null)
					strProductOrderDate = "";
				showOrderDetailPop = "display:block;visibility:visible;";
				return SUCCESS;
			}

			/*--- when Admin click on the cancel Button of orderDetailPop ---
					we mast just hide popup OrderDetail
			  ---------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& cancelSignal != null && cancelSignal != 0L) {
				showOrderDetailPop = "visibility:hidden;display:none;";
				return SUCCESS;
			}

			/*-------------------- When Admin left lsProduct TextField -------------
								check userPrice in DB, and write it in web view
			 -----------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& checkProductPriceSignal != null
					&& checkProductPriceSignal != 0L) {
				OrdersDTO orderDTOToUpdate = listOrdersDTO.get(indexOrder);
				orderDTOToUpdate = fillDataOrderDTO(orderDTOToUpdate);
				OrdersRows orderRowToUpadate = orderDTOToUpdate.getRowsList()
						.get(indexRow);
				UserProductPriceDTO userProductPrice = productService
						.getUsrPPriceByLsproductId(userId, lsProductID);
				orderRowToUpadate.setCss("");
				orderRowToUpadate.setCssPrice("");
				if (userProductPrice == null) {
					orderRowToUpadate.setCss("background-color:red;");
					orderRowToUpadate.setProductDescription("");
					orderRowToUpadate.setStock(null);
					orderRowToUpadate.setProductId(null);
					orderRowToUpadate.setLsProductID(lsProductID);
					orderRowToUpadate.setLsPrice(null);
				} else {
					Double usrPrice = orderRowToUpadate.getUnitPrice();
					if (usrPrice == null)
						usrPrice = 0D;
					if (usrPrice < userProductPrice.getPriceNum()) {
						orderRowToUpadate.setCssPrice("background-color:red;");
					}
					orderRowToUpadate.setProductDescription(userProductPrice
							.getProductTitle());
					orderRowToUpadate.setStock(userProductPrice.getStock());
					orderRowToUpadate.setProductId(userProductPrice
							.getProductId());
					orderRowToUpadate.setLsProductID(userProductPrice
							.getLsProductId());
					orderRowToUpadate
							.setLsPrice(userProductPrice.getPriceNum());
				}
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				orderToEdit = orderDTOToUpdate;
				listOrdersDTO = (List<OrdersDTO>) session
						.getAttribute("listOrdersDTOReport");
				showOrderDetailPop = "display:block;visibility:visible;";
				return SUCCESS;
			}

			/*----------------- When Admin check on saveTemporaryRow Icon --------------------------
					we must first obtained the object that contains the list of rows,
					after we accede to the row by index recovered by web view and change it
			 ---------------------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& saveTemporaryRowSignal != null
					&& saveTemporaryRowSignal != 0L) {
				OrdersDTO orderDTOToUpdate = listOrdersDTO.get(indexOrder);
				orderDTOToUpdate = fillDataOrderDTO(orderDTOToUpdate);
				OrdersRows orderRowToSaveMemory = orderDTOToUpdate
						.getRowsList().get(indexRow);
				orderRowToSaveMemory.setIcon("images/orders/itemValidated.png");
				if (orderRowToSaveMemory != null) {
					orderRowToSaveMemory.setQuantity(quantity);
					orderRowToSaveMemory.setLsProductID(lsProductID);
					orderRowToSaveMemory
							.setProductDescription(productDescription);
					orderRowToSaveMemory.setUnitPrice(unitPrice);
					orderRowToSaveMemory
							.setCssPrice("background-color:#FF6666;");
					orderRowToSaveMemory
							.setCssQuantity("background-color:#FF6666;");
					if (quantity != null && quantity > 0D)
						orderRowToSaveMemory.setCssQuantity("");
					if (unitPrice != null
							&& orderRowToSaveMemory.getLsPrice() != null
							&& unitPrice >= orderRowToSaveMemory.getLsPrice())
						orderRowToSaveMemory.setCssPrice("");
					orderRowToSaveMemory.setShippingFee(shippingFee);
					orderRowToSaveMemory.setShippingPrice(shippingFee);
					orderRowToSaveMemory.setShippingCompany(shippingCompany);
					orderRowToSaveMemory.setTrackingNumber(trakingNumber);
					if (orderRowToSaveMemory.getCurrencyId() != null
							&& orderRowToSaveMemory.getCurrencyId() != 1
							&& orderRowToSaveMemory.getCurrencyRate() != null) {
						if (unitPrice != null) {
							orderRowToSaveMemory
									.setCurrencyUnitPrice(unitPrice);
							unitPrice = unitPrice
									/ orderRowToSaveMemory.getCurrencyRate();
							unitPrice = (double) Math.round(unitPrice * 100) / 100;
							orderRowToSaveMemory.setUnitPrice(unitPrice);
						}
						/*
						 * if(shippingFee!=null) {
						 * orderRowToSaveMemory.setCurrencyShippingPrice
						 * (shippingFee); shippingFee =
						 * shippingFee/orderRowToSaveMemory.getCurrencyRate();
						 * shippingFee = (double)
						 * Math.round(shippingFee*100)/100;
						 * orderRowToSaveMemory.setShippingPrice(shippingFee); }
						 */
					}
					int indexOrder = 0;
					int indexRow = 0;
					for (OrdersDTO orderDTO : listOrdersDTO) {
						orderDTO.setIndex(indexOrder);
						indexOrder++;
						indexRow = 0;
						for (OrdersRows orderRows : orderDTO.getRowsList()) {
							orderRows.setIndex(indexRow);
							indexRow++;
						}
					}
					session.setAttribute("listOrdersDTOReport", listOrdersDTO);
					listOrdersDTO = (List<OrdersDTO>) session
							.getAttribute("listOrdersDTOReport");
				}
				orderToEdit = listOrdersDTO.get(indexOrder);
				// Change totalPrice also
				if (orderToEdit.getRowsList().get(0) != null
						&& orderToEdit.getRowsList().get(0).getQuantity() != null
						&& orderToEdit.getRowsList().get(0)
								.getQuantityToSplit() != null
						&& orderToEdit.getRowsList().get(0).getUnitPrice() != null) {
					Double priceTotal = orderToEdit.getRowsList().get(0)
							.getUnitPrice()
							* orderToEdit.getRowsList().get(0)
									.getQuantityToSplit();
					priceTotal = (double) Math.round(priceTotal * 100) / 100;
					orderToEdit.setTotalPrice(priceTotal);
				}
				showOrderDetailPop = "display:block;visibility:visible;";
				return SUCCESS;
			}

			/*------- When Admin click on addSimilarRow Icon on the OrderDetailPop --------
								Add one Row Similar at the previews
			  -----------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& addSimilarRowSignal != null && addSimilarRowSignal != 0L) {
				OrdersDTO orderDTOToUpdate = listOrdersDTO.get(indexOrder);
				// generate lsOrderId to new order
				orderDTOToUpdate = fillDataOrderDTO(orderDTOToUpdate);
				OrdersRows orderRowToClone = orderDTOToUpdate.getRowsList()
						.get(indexRow);
				if (orderRowToClone != null) {
					if (!orderRowToClone.getIcon().equals(
							"images/orders/itemValidated.png")) {
						orderRowToClone.setQuantity(quantity);
						orderRowToClone.setLsProductID(lsProductID);
						orderRowToClone.setStock(stock);
						orderRowToClone
								.setProductDescription(productDescription);
						orderRowToClone.setUnitPrice(unitPrice);
						orderRowToClone.setShippingFee(shippingFee);
						orderRowToClone.setShippingCompany(shippingCompany);
						orderRowToClone.setTrackingNumber(trakingNumber);
					}
					orderRowToClone.setIcon("images/orders/itemValidated.png");
					OrdersRows orderRowToAdd = DTOFactory
							.getOrderRowClone(orderRowToClone);
					orderRowToAdd.setId(-1L);
					// Add currencyId
					if (orderRowToClone.getCurrencyId() != null)
						orderRowToAdd.setCurrencyId(orderRowToClone
								.getCurrencyId());

					orderDTOToUpdate.getRowsList().add(indexRow + 1,
							orderRowToAdd);
					int indexOrder = 0;
					int indexRow = 0;
					for (OrdersDTO orderDTO : listOrdersDTO) {
						orderDTO.setIndex(indexOrder);
						indexOrder++;
						indexRow = 0;
						for (OrdersRows orderRows : orderDTO.getRowsList()) {
							orderRows.setIndex(indexRow);
							indexRow++;
						}
					}
					session.setAttribute("listOrdersDTOReport", listOrdersDTO);
					listOrdersDTO = (List<OrdersDTO>) session
							.getAttribute("listOrdersDTOReport");
				}
				orderToEdit = listOrdersDTO.get(indexOrder);
				showOrderDetailPop = "display:block;visibility:visible;";
				return SUCCESS;
			}

			/*-------- When Admin click on Delete Row Icon of orderDetail Popup-----------
									Delete this row using index
			 -----------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& deleteRowSignal != null && deleteRowSignal != 0L) {
				OrdersDTO orderDTO = listOrdersDTO.get(indexOrder);
				orderDTO = fillDataOrderDTO(orderDTO);
				int nb = orderService.nbOrderRowsNotDeleted(orderDTO
						.getRowsList());
				if (orderDTO != null && orderDTO.getRowsList().size() > 1) {
					for (int i = 0; i < orderDTO.getRowsList().size(); i++) {
						if (i == indexRow && nb > 1) {
							orderDTO.getRowsList().get(i).setToDelete(1);
							break;
						}
					}
				}
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				orderToEdit = listOrdersDTO.get(indexOrder);
				showOrderDetailPop = "display:block;visibility:visible;";
				return SUCCESS;
			}

			/*------ when Admin click on the button save of orderDetail ------------------
					 save order and hide pup  
			  ----------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& saveOrdersSignal != null && saveOrdersSignal != 0L) {
				session.setAttribute("orderNotSavedAtFirst", null);
				orderToEdit = listOrdersDTO.get(indexOrder);
				orderToEdit = fillDataOrderDTO(orderToEdit);

				// add special handling shipping
				User user = null;
				if (orderToEdit.getUserLogin() != null)
					user = userService.getUserByLogin(orderToEdit
							.getUserLogin());
				if (user != null) {
					Double totalPrice = null;
					orderToEdit.setSpecialHandlingName(user
							.getSpecialHandlingName());
					orderToEdit.setSpecialHandlingFee(user
							.getSpecialHandlingFee());
					if (orderToEdit.getRowsList().get(0).getQuantity() != null
							&& orderToEdit.getRowsList().get(0).getUnitPrice() != null) {
						totalPrice = orderToEdit.getRowsList().get(0)
								.getQuantity()
								* orderToEdit.getRowsList().get(0)
										.getUnitPrice();
						totalPrice = (double) Math.round(totalPrice * 100) / 100;
					}

					orderToEdit.setTotalPrice(totalPrice);
				}

				orderService.updateOrderByLsOrderId(orderToEdit);
				for (OrdersRows row : orderToEdit.getRowsList()) {
					if (row.getId() == -1)
						row.setId(0L);
				}
				OrdersRows row = orderToEdit.getRowsList().get(0);
				if (row != null) {
					orderToEdit.getShippedDate();
					orderToEdit.setLsPrice(row.getLsPrice());
					orderToEdit.setLsProductID(row.getLsProductID());
					orderToEdit.setProductDescription(row
							.getProductDescription());
					orderToEdit.setQuantity(row.getQuantity());
				}
				orderToEdit = DTOFactory.getOrderDTOConsideredMissingInfo(
						orderToEdit, hashProvinces);
				listIndexColumn = (List<Integer>) session
						.getAttribute("listIndexColumn");
				
//				listOrdersDTO = orderService.searchOrdersWithOptionsAndSorting(
//						creationDateStartArg, creationDateEndArg,
//						reportDateBetween, userLogin, lsOrderId, status,
//						listIndexColumn, PAGE_ITEMS_COUNT, indexSet);
				

				//New Functionality with same mapping
				listOrdersDTO = orderService.searchOrdersWithOptionsAndSortingNew(
								creationDateStartArg, creationDateEndArg,
								reportDateBetween, userLogin, lsOrderId,
								status, listIndexColumn, PAGE_ITEMS_COUNT,
								indexSet, productOrderNumberSearch,clientOrderNumber,
								clientOther);				
				
				// New Searching Functionality
//				listOrdersDTO = orderService.searchOrdersWithOptionsAndSorting(
//						creationDateStartArg, creationDateEndArg,
//						reportDateBetween, orderDTOObj, listIndexColumn,
//						PAGE_ITEMS_COUNT, indexSet);
				
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				message = "Saving has completed successfuly";
				showSaveSuccessPop = "display:block;visibility:visible;";
				showOrderDetailPop = "display:block;visibility:visible;";
				return SUCCESS;
			}

			/*------ When user change Quantity to split in orderDetailPop -----------
					 prepare order to split from two other orders witch
				 	 one must have a lsOrder with underscore 
			 ------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& quantityToChangeSignal != null
					&& quantityToChangeSignal != 0L) {
				OrdersDTO orderToChangeQt = listOrdersDTO.get(indexOrder);
				OrdersRows orderRow = orderToChangeQt.getRowsList().get(
						indexRow);
				orderToChangeQt = fillDataOrderDTO(orderToChangeQt);
				if (quantityToChange < orderRow.getQuantity())
					orderRow.setQuantityToSplit(quantityToChange);
				session.setAttribute("listOrdersDTOReport", listOrdersDTO);
				listOrdersDTO = (List<OrdersDTO>) session
						.getAttribute("listOrdersDTOReport");
				orderToEdit = listOrdersDTO.get(indexOrder);
				showOrderDetailPop = "display:block;visibility:visible;";
				return SUCCESS;
			}

			/*-------------------- Duplicate Order ----------------------------------------
							Create order in just in memory
			 -----------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& duplicateOrderSignal != null
					&& duplicateOrderSignal != 0L) {
				OrdersDTO orderToClone = listOrdersDTO.get(indexOrder);
				orderToClone = fillDataOrderDTO(orderToClone);
				hashOrders = new Hashtable<String, OrdersDTO>();
				for (OrdersDTO ord : listOrdersDTO) {
					hashOrders.put(ord.getLsOrderId(), ord);
				}
				OrdersDTO orderClone = DTOFactory
						.getOrderDTOSplitted(orderToClone);
				if (orderClone != null) {
					orderClone.setDuplicate(true);
					String lsOrder = orderClone.getLsOrderId();
					String strlsOrder = orderService.generateLsOrderId(lsOrder,
							hashOrders);
					orderClone.setLsOrderId(strlsOrder);// rgb(116,180,209)
					orderClone
							.setCssStyle("background-color:#FFFF99;border-right: 1px solid #CCCCCC;border-left:1px solid #CCCCCC;border-top:  1px solid #CCCCCC;");
					orderToEdit = orderClone;
					orderToEdit.setBackgroundColor("background-color:#FFFF99;");
					listOrdersDTO.add(indexOrder + 1, orderClone);
					indexOrder = 0;
					for (OrdersDTO ord : listOrdersDTO) {
						ord.setIndex(indexOrder);
						indexOrder++;
					}
					orderService.updateOrderByLsOrderId(orderToClone);
					orderService.insertOrderWithRows(orderClone);
					orderClone.setDuplicate(false);
					for (OrdersRows row : orderClone.getRowsList()) {
						if (row.getId() < 0L)
							row.setId(0L);
					}
					if (listOrdersDTO.size() > 0) {
						session.setAttribute("listOrdersDTOReport",
								listOrdersDTO);
					}
				} else
					orderToEdit = orderToClone;
				showOrderDetailPop = "display:block;visibility:visible;";
				return SUCCESS;
			}

			/*-------------------- When user check print item -----------------------------
					Add or remove this element from the orders to print
			 -----------------------------------------------------------------------------*/
			if (listOrdersDTO != null && listOrdersDTO.size() > 0
					&& okSaveSuccessPopSignal != null
					&& okSaveSuccessPopSignal != 0L) {
				showSaveSuccessPop = "visibility:hidden;display:none;";
				showOrderDetailPop = "visibility:hidden;display:none;";
				return SUCCESS;
			}
		} catch (Exception e) {
			e.printStackTrace();
			return "input";
		}
		return SUCCESS;
	}

	/*
	 * ==========================================================================
	 * =============== fill all fields of order without rows
	 * ====================
	 * =====================================================================
	 */
	public OrdersDTO fillDataOrderDTO(OrdersDTO orderDTO) {
		SimpleDateFormat frm = new SimpleDateFormat("dd/MM/yyyy");
		orderDTO.setClientLastName(clientLastName);
		orderDTO.setClientFirstName(clientFirstName);
		orderDTO.setClientOtherNames(clientOtherNames);
		orderDTO.setClientStreet(clientStreet);
		orderDTO.setClientOtherStreet(clientOtherStreet);
		orderDTO.setClientCity(clientCity);
		orderDTO.setClientProvince(code);
		orderDTO.setClientPostalCode(clientPostalCode);
		orderDTO.setClientPhone(clientPhone);
		orderDTO.setClientEmail(clientEmail);
		orderDTO.setProductOrderNumber(productOrderNumberSearch);
		orderDTO.setCompanyHeader(companyHeader);
		if (((strProductOrderDate) != null)
				&& (!"".equals(strProductOrderDate))) {
			frm = new SimpleDateFormat("dd/MM/yyyy");
			try {
				Date date = frm.parse(strProductOrderDate);
				orderDTO.setProductOrderDate(date);
			} catch (Exception pe) {
				addActionError("Please enter a date in the correct format");
			}
		}

		if (((strCreationOrderDate) != null)
				&& (!"".equals(strCreationOrderDate))) {
			frm = new SimpleDateFormat("dd/MM/yyyy");
			try {
				Date date = frm.parse(strCreationOrderDate);
				orderDTO.setCreationDate(date);
			} catch (Exception pe) {
				addActionError("Please enter a date in the correct format");
			}
		}

		if (((strRequiredDate) != null) && (!"".equals(strRequiredDate))) {
			frm = new SimpleDateFormat("dd/MM/yyyy");
			try {
				Date date = frm.parse(strRequiredDate);
				orderDTO.setRequiredDate(date);
			} catch (Exception pe) {
				addActionError("Please enter a date in the correct format");
			}
		}
		return orderDTO;
	}

	/*
	 * ==========================================================================
	 * =============== initialize ListIndexSet
	 * ==================================
	 * =======================================================
	 */
	public void initalizeListIndexSet(HttpSession session,
			OrdersService orderService) throws ServiceException {
		listIndexSet = new ArrayList<OrdersDTO>();
		totalOrders = orderService.getCountOrders(creationDateStartArg,
				creationDateEndArg, reportDateBetween, userLogin, lsOrderId,
				status,productOrderNumberSearch,clientOrderNumber,clientOther);
		
		String strcount = totalOrders.toString();
		Integer sizeList = Integer.parseInt(strcount) / PAGE_ITEMS_COUNT;
		nextListPages = 1;
		session.setAttribute("nextListPages", nextListPages);
		for (int i = 1; i <= sizeList + 1 && i <= 11; i++) {
			OrdersDTO ord = new OrdersDTO();
			ord.setCssStyle("");
			ord.setIndex(i);
			listIndexSet.add(ord);
		}
		indexSet = 0;
		session.setAttribute("indexSet", indexSet);
		session.setAttribute("totalOrders", totalOrders);
		session.setAttribute("listIndexSet", listIndexSet);
		session.setAttribute("productOrderNumberSearch", productOrderNumberSearch);

	}

	/*
	 * ==========================================================================
	 * =============== initialize listIndexColumn
	 * ================================
	 * =========================================================
	 */
	List<Integer> getNewListIndexColumn() {
		List<Integer> reult = new ArrayList<Integer>();
		for (int i = 0; i <= 34; i++) {
			if (i != 2 && i <= 13) {
				reult.add(i);
				if (i != 0)
					reult.add(-i);
			}
			if (i == 30 || i == 31 || i == 34) {
				reult.add(i);
				reult.add(-i);
			}
		}
		return reult;
	}

	/*
	 * ==========================================================================
	 * =============== getStatus Selected by Admin for searching
	 * ================
	 * =========================================================================
	 */
	public String getStatusSelected(Integer StatusIndex) {
		String result = "";
		switch (StatusIndex) {
		case 0:
			result = "open";
			break;
		case 1:
			result = "progress";
			break;
		case 2:
			result = "shipped";
			break;
		case 3:
			result = "invoiced";
			break;
		case 4:
			result = "canceled";
			break;
		default:
			result = "";
		}
		return result;
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.Argument.bind(Argument.java:35)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.bindArguments(AbstractMethodDeclaration.java:83)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:406)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1147)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1235)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:540)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:883)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:928)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:189)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:255)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:190)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:89)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:728)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:788)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1244)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1205)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:133)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:102)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)

!ENTRY org.eclipse.jdt.ui 4 2 2015-04-17 11:47:13.596
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:233)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:255)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:190)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:89)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:728)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:788)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1244)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1205)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:133)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:102)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)
Caused by: java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.Argument.bind(Argument.java:35)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.bindArguments(AbstractMethodDeclaration.java:83)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:406)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1147)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1235)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:540)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:883)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:928)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:189)
	... 17 more
Caused by: java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.Argument.bind(Argument.java:35)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.bindArguments(AbstractMethodDeclaration.java:83)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:406)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1147)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1235)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:540)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:883)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:928)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:189)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:255)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:190)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:89)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:728)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:788)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1244)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1205)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:133)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:102)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2015-04-17 11:47:13.598
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.Argument.bind(Argument.java:35)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.bindArguments(AbstractMethodDeclaration.java:83)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:406)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1147)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1235)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:540)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:883)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:928)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:189)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:255)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:190)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:89)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:728)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:788)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1244)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1205)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:133)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:102)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2015-04-17 11:47:13.598
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.Argument.bind(Argument.java:35)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.bindArguments(AbstractMethodDeclaration.java:83)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:406)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1147)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1235)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:540)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:883)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:928)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:189)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:255)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:190)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:89)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:728)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:788)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1244)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1205)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:133)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:102)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)
