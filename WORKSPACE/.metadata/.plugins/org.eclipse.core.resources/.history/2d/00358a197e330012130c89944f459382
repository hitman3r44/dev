package com.loyauty.cronjob;

import java.math.BigDecimal;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;

import com.loyauty.exception.ServiceException;
import com.loyauty.exception.ServiceLocatorException;
import com.loyauty.service.ServiceLocator;
import com.loyauty.service.core.dto.CityDTO;
import com.loyauty.service.core.dto.ProductDTO;
import com.loyauty.service.core.dto.ProvinceDTO;
import com.loyauty.service.core.dto.ShippingCityDTO;
import com.loyauty.service.product.ProductService;

import ca.canadapost.cpcdp.rating.GetRatesClient;

public class UpdateShippingCityUsingSOAP {
	
	private static double POUND_TO_KG_FACTOR = .45359237;
	private static double INCH_TO_CM_FACTOR = 2.54;	
	
	private static ServiceLocator serviceLocator;
	private static ProductService productService;
		
	public static void main(String... args) {		
		serviceLocator = ServiceLocator.getInsance();		
		try {			
			productService = serviceLocator.getProductService();			
			GetRatesClient ratesClient = null;			
			long productId = 0L;
			long provinceId = 0L;
			String rate = "";
			List<ProductDTO> productDTOList = null;
			List<ProvinceDTO> provinceDTOList = null;
			List<CityDTO> cityDTOList = null;			
			String wgt = "";
			String l = "", w = "", h = "";
			double weightLbs = 0d;
			double lengthIn = 0d, widthIn = 0d, heightIn = 0d;			
			double weightKg = 0d;
			double lengthCm = 0d, widthCm = 0d, heightCm = 0d;		
			int weight = 0;
			int length = 0, width = 0, height = 0;						
			BigDecimal rateBD = new BigDecimal(0);
			double rateVal = 0d;
			ShippingCityDTO shippingCityDTO = new ShippingCityDTO();
			productDTOList = new ArrayList<ProductDTO>();
			long userId = 3L;
			long categoryGroupId = 2L;
			long categoryId = 39L;
			// long type_id = 78L;
			// long brandId = 82L;
			
			// productDTOList = productService.getAllValidStatusProductsGCTB(userId, categoryGroupId, categoryId, type_id, brandId);
			// productDTOList = productService.getAllValidStatusProductsGCT(userId, categoryGroupId, categoryId, type_id);
			productDTOList = productService.getAllValidStatusProductsGC(userId, categoryGroupId, categoryId);
			// productDTOList = productService.getAllValidStatusProductsG(userId, categoryGroupId);
			
			// productDTOList.add(productService.getProductInformation(6024L, userId));
			
			for (ProductDTO productDTO : productDTOList) {
				productId = productDTO.getId();
				provinceDTOList = productService.getAllProvinces();
				for (ProvinceDTO provinceDTO : provinceDTOList) {
					provinceId = provinceDTO.getId();
					cityDTOList = productService.getAllCities(provinceId);
					for (CityDTO cityDTO : cityDTOList) {					
						
						wgt = productDTO.getWeight();						
						if (wgt != null) {
							if (!wgt.matches("^\\s*$")) {
								weightLbs = Double.parseDouble(wgt);
								weightKg = weightLbs * POUND_TO_KG_FACTOR;
								weight = (int) Math.round(weightKg * 100) / 100;								
							} else {
								weight = 1;
							}
						} else {
							weight = 1;
						}
						
						l = productDTO.getLarge();					
						if (l != null) {
							if (!l.matches("^\\s*$")) {
								lengthIn = Double.parseDouble(l);
								lengthCm = lengthIn * INCH_TO_CM_FACTOR;
								length = (int) Math.round(lengthCm * 100) / 100;								
							} else {
								length = 1;
							}
						} else {
							length = 1;
						}
						
						w = productDTO.getWidth();					
						if (w != null) {
							if (!w.matches("^\\s*$")) {
								widthIn = Double.parseDouble(w);
								widthCm = widthIn * INCH_TO_CM_FACTOR;
								width = (int) Math.round(widthCm * 100) / 100;								
							} else {
								width = 1;
							}
						} else {
							width = 1;
						}

						h = productDTO.getHigh();					
						if (h != null) {
							if (!h.matches("^\\s*$")) {
								heightIn = Double.parseDouble(h);
								heightCm = heightIn * INCH_TO_CM_FACTOR;
								height = (int) Math.round(heightCm * 100) / 100;								
							} else {
								height = 1;
							}
						} else {
							height = 1;
						}
												
						weight = (weight == 0) ? 1 : weight;
						length = (length == 0) ? 1 : length;
						width = (width == 0) ? 1 : width;
						height = (height == 0) ? 1 : height;
						
						ratesClient = new GetRatesClient("H4C3C5", cityDTO.getPostalCode(),  weight, length, width, height);
						rateBD = ratesClient.getRates();
						rate = rateBD.toString();
						
						if (rate != null) {
							if (!rate.matches("^\\s*$") && !rate.equalsIgnoreCase("")) {		
								rateVal = Double.parseDouble(rate);
								rate = format(rateVal, "#,###.00", "en", "US");	
							} else {
								rateVal = 0d;
								rate = "0.00";
							}
							if (rate.equalsIgnoreCase(".00")) {
								rate = "0.00";
							}							
						}
						
						if (weight >= 30) {
							rate = "NOT AVAILABLE";
						}
						
						shippingCityDTO = new ShippingCityDTO();
						shippingCityDTO.setProductId(productId);
						shippingCityDTO.setCityId(cityDTO.getId());			
						shippingCityDTO.setExpeditedParcelPrice(rate);
						productService.updateShippingCityToExpeditedParcelPrice(shippingCityDTO);			
						
						rate = null;
						
					}	// for ... cityDTO
				}	// for ... provinceDTO
			}	// for ... productDTO
		
		} catch (ServiceLocatorException slx) {			
			slx.printStackTrace();
		} catch (ServiceException sx) {
			sx.printStackTrace();
		} catch (Exception x) {
			x.printStackTrace();
		}
		
		System.out.println("[RGP] UPDATE HAS SUCCESSFULLY FINISHED!!!");
		
		System.exit(0);
		
	}	// main()


	private static String format(double value, String pattern, String language, String country) {
		Locale loc = new Locale(language, country);
		NumberFormat nf = NumberFormat.getInstance(loc);
		DecimalFormat df = (DecimalFormat) nf;
		df.applyPattern(pattern);
		return nf.format(value);
	}


}
