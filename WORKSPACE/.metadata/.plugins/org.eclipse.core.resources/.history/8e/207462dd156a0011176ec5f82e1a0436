package com.loyauty.web.struts.action;

import javax.servlet.http.HttpServletRequest;

import lombok.AccessLevel;
import lombok.Getter;
import lombok.Setter;

import org.apache.log4j.Logger;
import org.apache.struts2.ServletActionContext;
import org.apache.struts2.interceptor.ServletRequestAware;

import com.loyauty.service.ServiceLocator;
import com.loyauty.util.exception.ExceptionHandler;
import com.loyauty.web.MessageKeyConstants;
import com.loyauty.web.util.LocaleUtils;
import com.opensymphony.xwork2.ActionSupport;
import com.opensymphony.xwork2.Preparable;

/**
 * This is the basic GameJab action where common properties and methods should go.
 *  
 *
 */

public class LoyautyAction extends ActionSupport implements ServletRequestAware, Preparable {

	private static final String NAMESPACES_SEPARATOR = "/";

	protected Logger log = Logger.getLogger(this.getClass());
	
	protected HttpServletRequest request;	
	
	@Getter
	private final boolean ajax = false;
	@Getter	@Setter
	private String currentLanguage;
	@Getter	@Setter
	private String pageTitleKey;
	@Getter	@Setter
	private String pageKeywordsKey;
	@Getter	@Setter
	private String pageDescriptionKey;
	
	@Getter(AccessLevel.PROTECTED)
	@Setter(AccessLevel.PRIVATE)
	private ServiceLocator serviceLocator;
	
	public LoyautyAction() {
		setServiceLocator(ServiceLocator.getInsance());
	}
	
	@Override
	public void prepare() throws Exception {
		/*
		 * filling of message keys header information
		 */
		String headerKey = null;
		String namesSpace = ServletActionContext.getActionMapping().getNamespace();
		String actionName = ServletActionContext.getActionMapping().getName();
		if (namesSpace != null && !namesSpace.equals(NAMESPACES_SEPARATOR)) {
			headerKey = namesSpace.replace(NAMESPACES_SEPARATOR, ".");
		}
		if (actionName != null) {
			headerKey = (headerKey!=null?headerKey+".":".") + actionName;
		}
		
		
		setPageTitleKey(MessageKeyConstants.PAGE_HEADER_TITLE_KEY+headerKey);
		setPageKeywordsKey(MessageKeyConstants.PAGE_HEADER_KEYWORDS_KEY+headerKey);
		setPageDescriptionKey(MessageKeyConstants.PAGE_HEADER_DESCRIPTION_KEY+headerKey);
		
		currentLanguage = LocaleUtils.getSessionLanguage(request);
	}
	
	/**
	 * Use this method when if an Action can be use in a Ajax way.
	 * If the action succeed, it chooses to return "success" in the classic way and "none" in a Ajax way.
	 * method do the choice with an "ajax=true" parameter in the request 
	 * @return "success" in the classic way and "none" in a Ajax way.
	 */
	public String getSuccessResult() {
		if (ajax) {
			return NONE;
		} else {
			return SUCCESS;
		}
	}
	
	/**
	 * Use this method when if an Action can be use in a Ajax way.
	 * If the action failed, it chooses to return "input" in the classic way and "none" in a Ajax way.
	 * method do the choice with an "ajax=true" parameter in the request 
	 * @return "success" in the classic way and "none" in a Ajax way.
	 */
	public String getInputResult() {
		if (ajax) {
			return NONE;
		} else {
			return INPUT;
		}
	}
	
	
	public String getRedirectResult() {
		if (ajax) {
			return NONE;
		} else {
			return "next";
		}
	}
	
	@Override
	public void setServletRequest(HttpServletRequest request) {
		this.request = request;
	}
	
	public void managerException(Exception e, String desc, String var)
	{
		try{
			ExceptionHandler.handleException(e, desc, var);
		}
		catch (Exception ex) {
			log.error(e.getMessage());
		}
	}
	
	public void managerException(Exception e, Class c, String var)
	{
		try{
			ExceptionHandler.handleException(e, c, null, var);
		}
		catch (Exception ex) {
			log.error(e.getMessage());
		}	
	}
	
	public void managerException(Exception e,Class c, String desc, String var)
	{
		try{
			ExceptionHandler.handleException(e, c, desc, var);}
		catch (Exception ex) {
			log.error(e.getMessage());
		}	
	}
	
	public void managerException(Exception e)
	{
		try{
			ExceptionHandler.handleException(e, null, null);
		}
		catch (Exception ex) {
			log.error(e.getMessage());
		}
	}
	
	public void managerException(Exception e , String var)
	{
		try{
			ExceptionHandler.handleException(e, null, var);
		}
		catch (Exception ex) {
			log.error(e.getMessage());
		}
	}
}
