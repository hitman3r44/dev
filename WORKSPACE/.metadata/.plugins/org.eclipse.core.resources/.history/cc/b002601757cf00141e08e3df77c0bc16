<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper

    PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"

    "http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">



<mapper namespace="com.loyauty.dao.mybatis.mappers.ProductMapper"> 

	

	<!-- Result maps -->   	

	<resultMap type="Translation" id="translationNameMap"> 

		<id property="id" 	column="nameTransId"/>

		<collection property="entries" ofType="TranslationEntry"> 

			<id property="id" 				column="nameEntryId"/> 

			<result property="transId" 		column="nameTransId"/>

			<result property="language" 	column="nameLangId"/>

			<result property="text" 		column="nameText"/> 

		</collection>

	</resultMap> 

	 
	<resultMap type="Orders" id="ordersResultMap">         
		<id property="id" column="id"/>   
	</resultMap>

	<resultMap type="Translation" id="translationDescriptionMap">

		<id property="id" 	column="descriptionTransId"/>

	    <collection property="entries" ofType="TranslationEntry">

			<id property="id" 			column="descriptionEntryId"/>

			<result property="transId" 	column="descriptionTransId"/>

			<result property="language" column="descriptionLangId"/>

			<result property="text" 	column="descriptionText"/>

		</collection>

	</resultMap>

	

	<resultMap type="Translation" id="translationSpecificationMap">

		<id property="id" 	column="specificationTransId"/>

	    <collection property="entries" ofType="TranslationEntry">

			<id property="id" 			column="specificationEntryId"/>

			<result property="transId" 	column="specificationTransId"/>

			<result property="language" column="specificationLangId"/>

			<result property="text" 	column="specificationText"/>

		</collection>

	</resultMap>

	

	<resultMap type="Translation" id="translationOtherMap"> 

		<id property="id" column="otherTransId"/>

		<collection property="entries" ofType="TranslationEntry">

			<id property="id" 			column="otherEntryId"/>

			<result property="transId"	column="otherTransId"/>

			<result property="language"	column="otherLangId"/>

			<result property="text"		column="otherText"/>

		</collection>

	</resultMap>

	

	<resultMap type="Translation" id="translationWarrantyMap">

		<id property="id" column="warrantyTransId"/>

		<collection property="entries" ofType="TranslationEntry">

			<id property="id" 			column="warrantyEntryId"/>

			<result property="transId"	column="warrantyTransId"/>

			<result property="language"	column="warrantyLangId"/>

			<result property="text"		column="warrantyText"/>

		</collection>

	</resultMap>

	

	<resultMap type="Category" id="categorySimpleResultMap">

		<id property="id" 			column="categoryId"/>	

		<result property="name" 	column="categoryName"/>

		<result property="code" 	column="categoryCode"/>  

		<result property="categoryGoupeId" 	column="categoryGoupeId"/> 



	</resultMap>	



	<resultMap type="Product" id="productResultMap">

		<id 	property="id" 						column="id"/>

		<result property="upc" 						column="upc"/>

		<result property="status" 					column="status"/>

		<result property="msrp" 					column="msrp"/>

		<result property="cost" 					column="cost"/>

		<result property="loyaltySourceProductId" 	column="loyaltySourceProductId"/>

		<result property="productWidth" 			column="widthProduct"/>

		<result property="productHigh" 				column="high"/>

		<result property="productLong" 				column="long"/>

		<result property="weight" 					column="weight"/>

		<result property="actualWidth" 				column="actualWidth"/>

		<result property="actualHeight" 			column="actualHeight"/>

		<result property="actualLength" 			column="actualLength"/>

		<result property="actualWeight" 			column="actualWeight"/>

		<result property="userId" 					column="userId"/>

		<result property="userPrice"				column="userPrice"/>		

		<result property="priceType"				column="priceType"/>

		<result property="typeId"					column="typeId"/>

		<result property="discontinuedStartDate"	column="discontinuedStartDate"/>

		<result property="loyaltyProductIdSub"		column="loyaltyProductIdSub"/>

		<result property="wereWgtDimChanged"		column="wereWgtDimChanged"/>

		<result property="consideredForXML"			column="consideredForXML"/>

		<result property="oldImageRealName"			column="oldImageRealName"/>

		<association property="name" javaType="Translation" resultMap="translationNameMap" />

	    <association property="description" javaType="Translation" resultMap="translationDescriptionMap" />

	    <association property="specification" javaType="Translation" resultMap="translationSpecificationMap" />

	    <association property="other" javaType="Translation" resultMap="translationOtherMap"/>

	    <association property="brand" javaType="Brand" resultMap="BrandMapper.brandResultMap"/>

	    <association property="category" javaType="Category" resultMap="categorySimpleResultMap"/>

	    <association property="image" column="image_id" javaType="Image" select="selectImage"/>

	    <association property="warranty" column="id" javaType="Translation" select="selectWarranty"/>

	    <collection property="modelNumberList" javaType="ArrayList" column="id" select="selectModelNumber"/>

	    <collection property="linkList" javaType="ArrayList" column="id" select="selectProductLink"/>

	    <collection property="activeClientsList" javaType="ArrayList" column="id" select="getAllActiveClients"/>	    

	</resultMap>	

	

	<resultMap type="Product" id="saleResultMap">
		<id 	property="id" 								column="id"/>
		<result property="upc" 								column="upc"/>
		<result property="status" 							column="status"/>
		<result property="msrp" 							column="msrp"/>
		<result property="cost" 							column="cost"/>
		<result property="loyaltySourceProductId" 			column="loyaltySourceProductId"/>
		<result property="productWidth" 					column="widthProduct"/>
		<result property="productHigh" 						column="high"/>
		<result property="productLong" 						column="long"/>
		<result property="weight" 							column="weight"/>
		<result property="userId" 							column="userId"/>
		<result property="userPrice"						column="userPrice"/>		
		<result property="priceType"						column="priceType"/>
		<result property="typeId"							column="typeId"/>
		<result property="discontinuedStartDate"			column="discontinuedStartDate"/>
		<result property="loyaltyProductIdSub"				column="loyaltyProductIdSub"/>
		<result property="wereWgtDimChanged"				column="wereWgtDimChanged"/>
		<result property="consideredForXML"					column="consideredForXML"/>
		<result property="oldImageRealName"					column="oldImageRealName"/>
		<result property="qtMax"							column="qtMax"/>
		<result property="saleQt"							column="saleQt"/>
		<result property="startDate"						column="startDate"/>
		<result property="endDate"							column="endDate"/>
		<result property="regularPrice"						column="regularPrice"/>
		<result property="regularPercentProfit"				column="regularPercentProfit"/>
		<result property="regularPercentDiscount"			column="regularPercentDiscount"/>
		<result property="active"							column="active"/>
		<result property="messageForClient"					column="messageForClient"/>
		<result property="saleNote"							column="saleNote"/>
		
		<result property="productSaleId"					column="productSaleId"/>
		<result property="salePrice"						column="salePrice"/>
		<result property="salePercentProfit"				column="salePercentProfit"/>
		<result property="salePercentDiscount"				column="salePercentDiscount"/>

		<association property="name" javaType="Translation" resultMap="translationNameMap" />
	    <association property="description" javaType="Translation" resultMap="translationDescriptionMap" />
	    <association property="specification" javaType="Translation" resultMap="translationSpecificationMap" />
	    <association property="other" javaType="Translation" resultMap="translationOtherMap"/>
	    <association property="brand" javaType="Brand" resultMap="BrandMapper.brandResultMap"/>
	    <association property="category" javaType="Category" resultMap="categorySimpleResultMap"/>
	    <association property="image" column="image_id" javaType="Image" select="selectImage"/>
	    <association property="warranty" column="id" javaType="Translation" select="selectWarranty"/>
	    <collection property="modelNumberList" javaType="ArrayList" column="id" select="selectModelNumber"/>
	    <collection property="linkList" javaType="ArrayList" column="id" select="selectProductLink"/>
	    <collection property="activeClientsList" javaType="ArrayList" column="id" select="getAllActiveClients"/>	    
	</resultMap>	

	<resultMap type="Product" id="productProfitResultMap">

		<id 	property="id" 			column="id"/>

		<result property="status" 		column="status"/>

		<result property="msrp" 		column="msrp"/>

		<result property="cost" 		column="cost"/>

		<association property="category" javaType="Category" resultMap="categorySimpleResultMap"/>

		<association property="brand" javaType="Brand" resultMap="BrandMapper.brandResultMap"/>

	</resultMap>

	

	<resultMap type="Product" id="lightResultMap">

		<id property="id" column="id"/>

	</resultMap>

	

	<resultMap type="UserProductPrice" id="userProductPriceResultMap">

		<id 	property="id" 				column="id"/>

		<result property="userId" 			column="userId"/>

		<result property="productId" 		column="productId"/>

		<result property="price" 			column="price"/>

		<result property="priceType"		column="priceType"/>

		<result property="userStatus"		column="userStatus"/>

		<result property="excluded" 		column="excluded"/>

		<result property="profit" 			column="profit"/>

		<result property="discount" 		column="discount"/>

		<result property="shippingCoverage" column="shippingCoverage"/>

		<result property="shippingTotalCanada" column="shippingTotalCanada"/>

	</resultMap>



	<resultMap type="Province" id="provinceResultMap">

		<id 	property="id" 					column="id"/>

		<result property="name" 				column="provinceName"/>

		<result property="code" 				column="provinceCode"/>

		<result property="populationPercent" 	column="populationPercent"/>

		<result property="taxe" 				column="taxe"/>

	</resultMap>

	

	<resultMap type="City" id="cityResultMap">

		<id 	property="id" 					column="id"/>

		<result property="name" 				column="cityName"/>

		<result property="provinceId" 			column="provinceId"/>

		<result property="populationPercent" 	column="populationPercent"/>

		<result property="postalCode" 			column="postalCode"/>

	</resultMap>

	

	<resultMap type="ShippingCity" id="shippingCityResultMap">

		<id 	property="id" 					column="id"/>

		<result property="productId" 			column="productId"/>

		<result property="cityId" 				column="cityId"/>

		<result property="expeditedParcelPrice"	column="expeditedParcelPrice"/>

	</resultMap>

	

	<resultMap type="ShippingProvince" id="ShippingProvinceResultMap">

		<id 	property="id" 						column="id"/>

		<result property="productId" 				column="productId"/>

		<result property="provinceId" 				column="provinceId"/>

		<result property="weightedTotalProvince"	column="weightedTotalProvince"/>

	</resultMap>



	<resultMap type="ShippingTotal" id="ShippingTotalResultMap">

		<id 	property="id" 									column="id"/>

		<result property="productId" 							column="productId"/>

		<result property="provinceId" 							column="provinceId"/>

		<result property="userId" 								column="userId"/>

		<result property="weightedProvinceTotalWithCoverage" 	column="weightedProvinceTotalWithCoverage"/>		

		<result property="averageShippingTotal" 				column="averageShippingTotal"/>

	</resultMap>

	

	<resultMap type="UserProvincePopulation" id="userProvincePopulationResultMap">

		<id 	property="id" 									column="id"/>

		<result property="userId" 								column="userId"/>

		<result property="provinceId" 							column="provinceId"/>

		<result property="populationPercent" 					column="populationPercent"/>

	</resultMap>

	

	<resultMap type="AlterProductXML" id="alterProductXMLResultMap">

		<id 	property="id" 					column="id"/>

		<result property="productId" 			column="productId"/>

		<result property="brandId" 				column="brandId"/>

		<result property="categoryId" 			column="categoryId"/>

		<result property="typeId" 				column="typeId"/>

		<result property="imageId" 				column="imageId"/>

		<result property="statusId" 			column="statusId"/>

		<result property="nameEn" 				column="nameEn"/>

		<result property="nameFr" 				column="nameFr"/>

		<result property="descriptionEn" 		column="descriptionEn"/>

		<result property="descriptionFr" 		column="descriptionFr"/>

		<result property="specificationEn" 		column="specificationEn"/>

		<result property="specificationFr"		column="specificationFr"/>

		<result property="otherEn" 				column="otherEn"/>

		<result property="otherFr" 				column="otherFr"/>

		<result property="warrantyEn" 			column="warrantyEn"/>

		<result property="warrantyFr" 			column="warrantyFr"/>

		<result property="dimensions" 			column="dimensions"/>

		<result property="weight" 				column="weight"/>

		<result property="modelNumber" 			column="modelNumber"/>

		<result property="msrp" 				column="msrp"/>

		<result property="shipping"				column="shipping"/>

		<result property="productToBeExecuted" 	column="productToBeExecuted"/>

	</resultMap>

	

	<resultMap type="AlterUserProductXML" id="alterUserProductXMLResultMap">

		<id 	property="id" 						column="id"/>

		<result property="userId" 					column="userId"/>

		<result property="productId" 				column="productId"/>

		<result property="priceDiscount" 			column="priceDiscount"/>

		<result property="excluded" 				column="excluded"/>

		<result property="shipping" 				column="shipping"/>

		<result property="userProductToBeExecuted" 	column="userProductToBeExecuted"/>

		<result property="excludedMeaning" 			column="excludedMeaning"/>

	</resultMap>



    <resultMap type="UserProductPrice" id="countUserProductResultMap">

		<result property="count" 				column="count"/>

	</resultMap>

	

	<resultMap type="Box" id="boxResultMap">        

		<id property="id" column="id"/>   

	</resultMap>

	<resultMap type="Currency" id="currencyResultMap">        
		<id property="id" column="id"/>   
	</resultMap>

	<!-- sqls -->

	<sql id="select">

		select p.id,

			p.upc,

			p.image_id as image_id,

			p.status_id as status,

			p.msrp,

			p.cost,

			p.loyalty_source_product_id as loyaltySourceProductId,

			p.width as widthProduct,

			p.high,

			p.long,

			p.weight,

			p.note,

			p.discontinued_start_date as discontinuedStartDate,

			p.loyalty_source_product_id_sub as loyaltyProductIdSub,

			p.type_id as typeId,

			p.were_wgt_dim_changed as wereWgtDimChanged,

			p.considered_for_xml as consideredForXML,

			p.old_image_real_name as oldImageRealName,

			tn.id as nameEntryId,

			tn.trans_id as nameTransId,

			tn.lang_id as nameLangId,

			tn.text as nameText,

			td.id as descriptionEntryId,

			td.trans_id as descriptionTransId,

			td.lang_id as descriptionLangId,

			td.text as descriptionText,			

			ts.id as specificationEntryId,

			ts.trans_id as specificationTransId,

			ts.lang_id as specificationLangId,

			ts.text as specificationText,

			tx.id as otherEntryId,

			tx.trans_id as otherTransId,

			tx.lang_id as otherLangId,

			tx.text as otherText,				

			br.id as brandId,

			br.name as name,

			br.image_id as brand_image_id,

			br.description as description,

			br.code as code,

			br.creation_date as creationDate,

			ct.id as categoryId,

			ct.category_group_id as categoryGoupeId,

			ct.name as categoryName,

			ct.code as categoryCode,			

			im.id as imageId,

			im.name as imageName,

			im.real_name as realNameImg,

			im.type_id as type, 

			im.size, 

			im.height, 

			im.width, 

			im.large, 

			im.resolution,

			im.score,

			(select stock from stock ST where ST.product_id=p.id)AS stock,
			B.length AS boxLength,
			B.width  AS boxWidth,
			B.height AS boxHeight,
			PB.total_weight AS boxTotalWeight

		from product p

		left join translation_entry tn on (p.name_trans_id = tn.trans_id)

		left join translation_entry td on (p.description_trans_id = td.trans_id)

		left join translation_entry ts on (p.specification_trans_id = ts.trans_id)

		left join translation_entry tx on (p.other_trans_id = tx.trans_id)

		left join brand br on (p.brand_id = br.id)

		left join category ct on (p.category_id = ct.id)

		left join image im on (br.image_id = im.id)
		
		left join product_box PB on (PB.product_id = P.id)
		left join box B on (PB.box_id = B.id)

	</sql>

	

	<sql id="selectLight">

		select id

		from product

	</sql>

	

	<sql id="selectSearch">

		select *

		from search s

	</sql>

	

	<sql id="selectProductUser">

		select p.id,

			p.upc,

			p.image_id as image_id,

			p.status_id as status,

			p.msrp,

			p.cost,

			p.loyalty_source_product_id as loyaltySourceProductId,

			p.width as widthProduct,

			p.high,

			p.long,

			p.weight,

			p.discontinued_start_date as discontinuedStartDate,

			p.loyalty_source_product_id_sub as loyaltyProductIdSub,	

			p.type_id as typeId,		

			p.note,

			p.were_wgt_dim_changed as wereWgtDimChanged,

			p.considered_for_xml as consideredForXML,

			p.old_image_real_name as oldImageRealName,

			tn.id as nameEntryId,

			tn.trans_id as nameTransId,

			tn.lang_id as nameLangId,

			tn.text as nameText,			

			td.id as descriptionEntryId,

			td.trans_id as descriptionTransId,

			td.lang_id as descriptionLangId,

			td.text as descriptionText,			

			ts.id as specificationEntryId,

			ts.trans_id as specificationTransId,

			ts.lang_id as specificationLangId,

			ts.text as specificationText,			

			tx.id as otherEntryId,

			tx.trans_id as otherTransId,

			tx.lang_id as otherLangId,

			tx.text as otherText,		

			br.id as brandId,

			br.name as name,

			br.image_id as brand_image_id,

			br.description as description,

			br.creation_date as creationDate,

			ct.id as categoryId,

			ct.category_group_id as categoryGoupeId,

			ct.name as categoryName,

			ct.code as categoryCode,	

			im.id as imageId,

			im.name as imageName,

			im.real_name as realNameImg,

			im.type_id as type, 

			im.size, 

			im.height, 

			im.width, 

			im.large, 

			im.resolution,

			im.score,

			upp.user_id as userId,

			upp.price as userPrice,

			upp.price_type as priceType,
			
			B.length AS boxLength,
			B.width  AS boxWidth,
			B.height AS boxHeight,
			PB.total_weight AS boxTotalWeight

		from product p

		left join translation_entry tn on (p.name_trans_id = tn.trans_id)

		left join translation_entry td on (p.description_trans_id = td.trans_id)

		left join translation_entry ts on (p.specification_trans_id = ts.trans_id)

		left join translation_entry tx on (p.other_trans_id = tx.trans_id)

		left join brand br on (p.brand_id = br.id)

		left join category ct on (p.category_id = ct.id)

		left join image im on (br.image_id = im.id)

		left join user_product_price upp on (p.id = upp.product_id)
				
		left join product_box PB on (PB.product_id = P.id)
		left join box B on (PB.box_id = B.id)

	</sql>


	<sql id="selectProductUserSale">

		select p.id,

			p.upc,

			p.image_id as image_id,

			p.status_id as status,

			p.msrp,

			p.cost,

			p.loyalty_source_product_id as loyaltySourceProductId,

			p.width as widthProduct,

			p.high,

			p.long,

			p.weight,

			p.discontinued_start_date as discontinuedStartDate,

			p.type_id as typeId,		

			p.note,

			p.were_wgt_dim_changed as wereWgtDimChanged,

			p.considered_for_xml as consideredForXML,

			p.old_image_real_name as oldImageRealName,

			tn.id as nameEntryId,

			tn.trans_id as nameTransId,

			tn.lang_id as nameLangId,

			tn.text as nameText,			

			td.id as descriptionEntryId,

			td.trans_id as descriptionTransId,

			td.lang_id as descriptionLangId,

			td.text as descriptionText,			

			ts.id as specificationEntryId,

			ts.trans_id as specificationTransId,

			ts.lang_id as specificationLangId,

			ts.text as specificationText,			

			tx.id as otherEntryId,

			tx.trans_id as otherTransId,

			tx.lang_id as otherLangId,

			tx.text as otherText,		

			br.id as brandId,

			br.name as name,

			br.image_id as brand_image_id,

			br.description as description,

			br.creation_date as creationDate,

			ct.id as categoryId,

			ct.category_group_id as categoryGoupeId,

			ct.name as categoryName,

			ct.code as categoryCode,	

			im.id as imageId,

			im.name as imageName,

			im.real_name as realNameImg,

			im.type_id as type, 

			im.size, 

			im.height, 

			im.width, 

			im.large, 

			im.resolution,

			im.score,

			upp.user_id as userId,

			upp.price as userPrice,

			upp.price_type as priceType,
			
			B.length AS boxLength,
			B.width  AS boxWidth,
			B.height AS boxHeight,
			PB.total_weight AS boxTotalWeight,

			PSL.qt_max AS qtMax,
			PSL.sale_qt AS saleQt,
			PSL.start_date AS startDate,
			PSL.end_date AS endDate,

			PSL.sale_price AS salePrice,
			PSL.sale_percent_profit AS sale_percentProfit,
			PSL.sale_percent_discount AS salePercentDiscount,
			
			USL.regular_price AS regularPrice,
			USL.regular_percent_profit AS regularPercentProfit,
			USL.regular_percent_discount AS regularPercentDiscount,
			USL.active AS active,
			PSL.id AS productSaleId,
			PSL.message_for_client AS messageForClient,
			PSL.sale_note AS saleNote,
			PSL.loyalty_product_id_sub AS loyaltyProductIdSub

		from product p

		left join translation_entry tn on (p.name_trans_id = tn.trans_id)

		left join translation_entry td on (p.description_trans_id = td.trans_id)

		left join translation_entry ts on (p.specification_trans_id = ts.trans_id)

		left join translation_entry tx on (p.other_trans_id = tx.trans_id)

		left join brand br on (p.brand_id = br.id)

		left join category ct on (p.category_id = ct.id)

		left join image im on (br.image_id = im.id)

		left join user_product_price upp on (p.id = upp.product_id)
				
		left join product_box PB on (PB.product_id = P.id)
		left join box B on (PB.box_id = B.id)
		
		left join product_sale PSL on (PSL.product_id=P.id)
		left join user_sale USL on (USL.product_sale_id=PSL.id)

	</sql>





	<sql id="selectProductSale">

	select p.id,

			p.upc,

			p.image_id as image_id,

			p.status_id as status,

			p.msrp,

			p.cost,

			p.loyalty_source_product_id as loyaltySourceProductId,

			p.width as widthProduct,

			p.high,

			p.long,

			p.weight,

			p.note,

			p.discontinued_start_date as discontinuedStartDate,

			p.type_id as typeId,

			p.were_wgt_dim_changed as wereWgtDimChanged,

			p.considered_for_xml as consideredForXML,

			p.old_image_real_name as oldImageRealName,

			tn.id as nameEntryId,

			tn.trans_id as nameTransId,

			tn.lang_id as nameLangId,

			tn.text as nameText,

			td.id as descriptionEntryId,

			td.trans_id as descriptionTransId,

			td.lang_id as descriptionLangId,

			td.text as descriptionText,			

			ts.id as specificationEntryId,

			ts.trans_id as specificationTransId,

			ts.lang_id as specificationLangId,

			ts.text as specificationText,

			tx.id as otherEntryId,

			tx.trans_id as otherTransId,

			tx.lang_id as otherLangId,

			tx.text as otherText,				

			br.id as brandId,

			br.name as name,

			br.image_id as brand_image_id,

			br.description as description,

			br.code as code,

			br.creation_date as creationDate,

			ct.id as categoryId,

			ct.category_group_id as categoryGoupeId,

			ct.name as categoryName,

			ct.code as categoryCode,			

			im.id as imageId,

			im.name as imageName,

			im.real_name as realNameImg,

			im.type_id as type, 

			im.size, 

			im.height, 

			im.width, 

			im.large, 

			im.resolution,

			im.score,

			PSL.qt_max AS qtMax,
			PSL.sale_qt AS saleQt,
			PSL.start_date AS startDate,
			PSL.end_date AS endDate,

			PSL.sale_price AS salePrice,
			PSL.sale_percent_profit AS salePercentProfit,
			PSL.sale_percent_discount AS salePercentDiscount,

			PSL.id AS productSaleId,
			PSL.message_for_client AS messageForClient,
			PSL.sale_note AS saleNote,
			PSL.active AS active,
			PSL.loyalty_product_id_sub AS loyaltyProductIdSub

		from product p

		left join translation_entry tn on (p.name_trans_id = tn.trans_id)

		left join translation_entry td on (p.description_trans_id = td.trans_id)

		left join translation_entry ts on (p.specification_trans_id = ts.trans_id)

		left join translation_entry tx on (p.other_trans_id = tx.trans_id)

		left join brand br on (p.brand_id = br.id)

		left join category ct on (p.category_id = ct.id)

		left join image im on (br.image_id = im.id)
		
		
		left join product_sale PSL on (PSL.product_id=P.id)
		

	</sql>


	<sql id="selectProductUserSearch">

		select s.*,

			   upp.user_id as userId,

			   upp.price as userPrice,

			   upp.price_type as priceType

		from search s

		left join user_product_price upp on (s.id = upp.product_id)

	</sql>

	

	<sql id="selectuserproductstatus">	

		select *

		from user_product_price upp, product p

		where upp.product_id = p.id

	</sql>

	

	<sql id="selectSimpleProductUser"> 

		select  p.id,

				p.upc,

				p.status_id as status,

				p.msrp as msrp,

				p.cost as cost,

				p.loyalty_source_product_id as loyaltySourceProductId,

				p.discontinued_start_date as discontinuedStartDate,

				p.loyalty_source_product_id_sub as loyaltyProductIdSub,

				

				tn.id as nameEntryId,

				tn.trans_id as nameTransId,

				tn.lang_id as nameLangId,

				tn.text as nameText,

				

				ts.id as specificationEntryId,

				ts.trans_id as specificationTransId,

				ts.lang_id as specificationLangId,

				ts.text as specificationText,

				

				br.id as brandId,

				br.name as name,



				ct.id as categoryId,

				ct.category_group_id as categoryGoupeId,

				ct.name as categoryName,

				ct.code as categoryCode,



				upp.user_id as userId,

				upp.price as userPrice,

				upp.price_type as priceType,

				upp.status_id as userProductStatus

				

		from product p

		left join translation_entry tn on (p.name_trans_id = tn.trans_id)

		left join specification sp on (p.type_id = sp.id)

		left join translation_entry ts on (sp.name_trans_id = ts.trans_id)

		left join brand br on (p.brand_id = br.id)

		left join category ct on (p.category_id = ct.id)

		left join user_product_price upp on (p.id = upp.product_id)

	</sql>

	

	<sql id="selectProfit">

		select p.id,

			p.upc,

			p.status_id as status,

			p.msrp,

			p.cost,

			p.brand_id,

			p.category_id as categoryId,

			p.brand_id as brandId

		from product p

	</sql>

	

	<sql id="selectBasicProduct">

		select  p.id,

				p.upc,

				p.status_id as status,

				p.msrp as msrp,

				p.cost as cost,

				p.loyalty_source_product_id as loyaltySourceProductId,

				p.discontinued_start_date as discontinuedStartDate,

				p.loyalty_source_product_id_sub as loyaltyProductIdSub,

				p.note,

				tn.id as nameEntryId,

				tn.trans_id as nameTransId,

				tn.lang_id as nameLangId,

				tn.text as nameText,				

				ts.id as specificationEntryId,

				ts.trans_id as specificationTransId,

				ts.lang_id as specificationLangId,

				ts.text as specificationText,				

				br.id as brandId,

				br.name as name,

				ct.id as categoryId,

				ct.category_group_id as categoryGoupeId,

				ct.name as categoryName,

				ct.code as categoryCode					

		from product p

		left join translation_entry tn on (p.name_trans_id = tn.trans_id)

		left join specification sp on (p.category_id = sp.category_id)

		left join translation_entry ts on (sp.name_trans_id = ts.trans_id)

		left join brand br on (p.brand_id = br.id)

		left join category ct on (p.category_id = ct.id)

	</sql>

	

	<sql id="selectUserShippingCity">

		select 	sc.id,

				sc.product_id as productId,

				sc.city_id as cityId,

				sc.expedited_parcel_price as expeditedParcelPrice

		from shipping_city sc

		left join product p on (sc.product_id = p.id)

	</sql>

	

   	<sql id="whereId">where p.id = #{id}</sql>

   	

   	<sql id="whereIdUserId">

   		where p.id = #{id}

   			  and upp.user_id = #{userId}		

   	</sql>


   	<sql id="whereClientHasSale"> 
 		WHERE PSL.id IN(SELECT PSL.id FROM product_sale PSL INNER JOIN user_sale USL ON PSL.id=USL.product_sale_id WHERE USL.user_id=#{userId} AND ((end_date IS NOT NULL AND end_date <![CDATA[>=]]>  DATE(NOW()) AND start_date IS NOT NULL AND start_date <![CDATA[<=]]>  DATE(NOW())) OR (sale_qt IS NOT NULL AND sale_qt <![CDATA[<=]]> qt_max)) AND USL.active IS TRUE AND PSL.active IS TRUE) AND
 		      upp.user_id=#{userId} AND
 		      USL.user_id=#{userId} AND
		      tn.lang_id=1   AND
		      td.lang_id =1  AND 
		      ts.lang_id=1   AND  
		      tx.lang_id=1
   	</sql>

   	<sql id="whereUerSale">
 		WHERE PSL.id IN(SELECT PSL.id FROM product_sale PSL INNER JOIN user_sale USL ON PSL.id=USL.product_sale_id WHERE PSL.product_id=#{productId} AND USL.user_id=#{userId} AND ((end_date IS NOT NULL AND end_date <![CDATA[>=]]>  DATE(NOW()) AND start_date IS NOT NULL AND start_date <![CDATA[<=]]>  DATE(NOW())) OR (sale_qt IS NOT NULL AND sale_qt <![CDATA[<=]]> qt_max)) AND USL.active IS TRUE AND PSL.active IS TRUE) AND
 		      upp.user_id=#{userId} AND
 		      USL.user_id=#{userId} AND
 		      USL.active IS TRUE  AND
 		      upp.product_id=#{productId} AND
		      tn.lang_id=1   AND
		      td.lang_id =1  AND  
		      ts.lang_id=1   AND
		      tx.lang_id=1
   	</sql>


   	<sql id="whereUerSaleWithoutSaleConditions">
 		WHERE PSL.id IN(SELECT PSL.id FROM product_sale PSL INNER JOIN user_sale USL ON PSL.id=USL.product_sale_id WHERE PSL.product_id=#{productId} AND USL.user_id=#{userId} AND PSL.active IS TRUE) AND
 		      upp.user_id=#{userId} AND
 		      USL.user_id=#{userId} AND
 		      USL.active IS TRUE  AND
 		      upp.product_id=#{productId} AND
		      tn.lang_id=1   AND
		      td.lang_id =1  AND  
		      ts.lang_id=1   AND
		      tx.lang_id=1
		      LIMIT 1
   	</sql>
   	
   	<sql id="whereProductSale">
 		<!--  WHERE PSL.id IN(SELECT id FROM product_sale PSL WHERE PSL.product_id=#{productId} AND ((end_date IS NOT NULL AND end_date <![CDATA[>=]]>  DATE(NOW()) AND start_date IS NOT NULL AND start_date <![CDATA[<=]]>  DATE(NOW())) OR (sale_qt IS NOT NULL AND sale_qt <![CDATA[<=]]> qt_max)) AND PSL.active IS TRUE)AND -->
 		 WHERE PSL.id IN(SELECT id FROM product_sale PSL WHERE PSL.product_id=#{productId} AND PSL.active IS TRUE)AND
 		      P.id=#{productId} AND
		      tn.lang_id=1   AND
		      td.lang_id =1  AND
		      ts.lang_id=1   AND
		      tx.lang_id=1
		      LIMIT 1
   	</sql>
   	

   	<sql id="selectUserProductPrice">

		select 	upp.id,

				upp.user_id as userId,

				upp.product_id as productId,

				upp.price as price,

				upp.price_type as priceType,

				upp.status_id as userStatus,

				upp.is_excluded as excluded,

				upp.percent_profit as profit,

				upp.percent_discount as discount,

				upp.shipping_coverage as shippingCoverage,

				upp.shipping_total_canada as shippingTotalCanada

		from user_product_price upp

	</sql>

	

 	<sql id="selectPPriceByLsproductId">

		SELECT 	upp.id,

				p.upc,

				(SELECT text FROM translation_entry WHERE trans_id=p.name_trans_id AND lang_id=1)AS productTitle,

				(SELECT stock FROM stock WHERE stock.product_id=p.id)AS stock,

				upp.user_id AS userId,

				upp.product_id AS productId,

				p.loyalty_source_product_id as lsProductId,

				CASE 

				WHEN upp.price IS NULL OR upp.price='' THEN 0

				ELSE to_number(upp.price, '999999999.99') 

				END AS priceNum,

				upp.price AS price,

				upp.price_type AS priceType,

				upp.status_id AS userStatus,

				upp.is_excluded AS excluded,

				upp.percent_profit AS profit,

				upp.percent_discount AS discount,

				upp.shipping_coverage AS shippingCoverage,

				upp.shipping_total_canada AS shippingTotalCanada

		FROM  user_product_price upp INNER JOIN product p ON upp.product_id=p.id

	</sql>



   	<sql id="selectProvince">

		select 	pvc.id,

				pvc.name as provinceName,

				pvc.code as provinceCode,

				pvc.population_percent as populationPercent,

				pvc.taxe as taxe

		from province pvc

	</sql>

	

   	<sql id="selectCity">

		select 	c.id,

				c.name as cityName,

				c.province_id as provinceId,

				c.population_percent as populationPercent,

				c.postal_code as postalCode

		from city c

	</sql>

		

	<sql id="selectShippingCity">

		select 	sc.id,

				sc.product_id as productId,

				sc.city_id as cityId,

				sc.expedited_parcel_price as expeditedParcelPrice

		from shipping_city sc

	</sql>

	

	<sql id="selectShippingProvince">

		select 	sp.id,

				sp.product_id as productId,

				sp.province_id as provinceId,

				sp.weighted_total_province as weightedTotalProvince

		from shipping_province sp

	</sql>

	

	<sql id="selectShippingTotal">

		select 	st.id,

				st.product_id as productId,

				st.province_id as provinceId,

				st.user_id as userId,

				st.weighted_province_total_with_coverage as weightedProvinceTotalWithCoverage,

				st.average_shipping_total as averageShippingTotal

		from shipping_total st

	</sql>

	

	<sql id="selectUserProvincePopulation">

		select 	up_pop.id,

				up_pop.user_id as userId,

				up_pop.province_id as provinceId,

				up_pop.population_percent as populationPercent

		from user_province_population up_pop

	</sql>	

	

	<sql id="selectAlterProductXML">

		select 	p_xml.id,

				p_xml.product_id as productId,

				p_xml.brand_id as brandId,

				p_xml.category_id as categoryId,

				p_xml.type_id as typeId,

				p_xml.image_id as imageId,

				p_xml.status_id as statusId,

				p_xml.name_en as nameEn,

				p_xml.name_fr as nameFr,

				p_xml.description_en as descriptionEn,

				p_xml.description_fr as descriptionFr,

				p_xml.specification_en as specificationEn,

				p_xml.specification_fr as specificationFr,

				p_xml.other_en as otherEn,

				p_xml.other_fr as otherFr,

				p_xml.warranty_en as warrantyEn,

				p_xml.warranty_fr as warrantyFr,

				p_xml.dimensions,

				p_xml.weight,

				p_xml.model_number as modelNumber,

				p_xml.msrp,

				p_xml.shipping,
				
				p_xml.shipment,

				p_xml.product_to_be_executed as productToBeExecuted

		from alter_product_xml p_xml

	</sql>

	

	<sql id="selectAlterUserProductXML">

		select 	up_xml.id,

				up_xml.user_id as userId,

				up_xml.product_id as productId,

				up_xml.price_discount as priceDiscount,

				up_xml.excluded,

				up_xml.shipping,

				up_xml.user_product_to_be_executed as userProductToBeExecuted,

				up_xml.excluded_meaning as excludedMeaning,
				
				up_xml.price

		from alter_user_product_xml up_xml

	</sql>

	

	<sql id="userProductPriceProduct">

		select 	upp.id,

				upp.user_id as userId,

				upp.product_id as productId,

				upp.price as price,

				upp.price_type as priceType,

				upp.status_id as userStatus,

				upp.is_excluded as excluded,

				upp.percent_profit as profit,

				upp.percent_discount as discount,

				upp.shipping_coverage as shippingCoverage,

				upp.shipping_total_canada as shippingTotalCanada

		from user_product_price upp

		left join product p on (upp.product_id = p.id)

	</sql>

			

	<sql id="shippingTotalProduct">

		select 	st.id,

				st.product_id as productId,

				st.province_id as provinceId,

				st.user_id as userId,

				st.weighted_province_total_with_coverage as weightedProvinceTotalWithCoverage,

				st.average_shipping_total as averageShippingTotal

 		from shipping_total st

		left join product p on (st.product_id = p.id)

	</sql>

			

	<sql id="commonAnd">

		and p.msrp is not null

		and p.msrp not like '0.00'

		and p.cost is not null

		and p.cost not like '0.00'

		and p.status_id <![CDATA[<> ]]> 4

		and tn.lang_id = td.lang_id

	  	and td.lang_id = ts.lang_id

	  	and ts.lang_id = tx.lang_id

	</sql>

		

	

	

    <!-- Selects -->

    <select id="getProductFromId" parameterType="Long" resultMap="productResultMap">  

		<if test="userId == null">

			<include refid="select"/>

		</if>

		<if test="userId != null">

			<include refid="selectProductUser"/>

		</if>

      	where p.id = cast(#{query} as integer)

      	<if test="userId != null">

			and upp.user_id = #{userId}	

		</if>

      	order by p.id, tn.lang_id, td.lang_id, ts.lang_id, tx.lang_id

	</select>


	<select id="getBoxByProductId" parameterType="Box" resultMap="boxResultMap">
		SELECT	B.id AS id,
				CASE WHEN B.length IS NOT NULL  THEN B.length ELSE 0 END AS length,
				CASE WHEN B.width IS NOT NULL  THEN B.width ELSE 0 END AS width,
				CASE WHEN B.height IS NOT NULL  THEN B.height ELSE 0 END AS height,
				CASE WHEN PB.total_weight IS NOT NULL  THEN PB.total_weight ELSE 0 END AS totalWeight,
				PB.product_id AS productId,
				PB.creation_date AS creationDate,
				PB.update_date AS updateDate,
				PB.status_id AS statusId
		FROM box B INNER JOIN product_box PB ON B.id = PB.box_id
		WHERE PB.product_id = #{productId}
		<!-- ORDER BY PB.creation_date DESC LIMIT 1 -->
	</select>


	<select id="getCurrencySymbols" resultMap="currencyResultMap">
		SELECT	distinct(symbol) AS symbol
		FROM currency
		ORDER BY symbol
	</select>
	
	<select id="getCurrenciesButNotCAD" resultMap="currencyResultMap">
		SELECT	id AS id, symbol AS symbol, rate AS rate, creation_date AS creationDate
		FROM currency
		WHERE symbol!='CAD'
		ORDER BY symbol
	</select>
	
	<select id="getCurrencyBySymbol" parameterType="Currency" resultMap="currencyResultMap">
		SELECT	id AS id, 
				symbol AS symbol, 
				rate AS rate,  
				creation_date AS creationDate 
		FROM currency
		WHERE symbol=#{symbol}
		AND creation_date = (SELECT creation_date FROM currency WHERE symbol=#{symbol}
					ORDER BY creation_date DESC
					LIMIT 1) 
	</select>
	
	<select id="isCurrencyExists" parameterType="Currency" resultMap="currencyResultMap">
		SELECT	distinct(symbol) AS symbol
		FROM currency
		WHERE upper(symbol)=#{symbol}
		LIMIT 1
	</select>
	
	

	<select id="getProductFromIdAndUserId" parameterType="Long" resultMap="productResultMap">

		<include refid="selectProductUser"/>

      	<include refid="whereIdUserId"/>

      	order by p.id, tn.lang_id, td.lang_id, ts.lang_id, tx.lang_id

	</select>

	

	<select id="selectImage" parameterType="Long" resultType="Image">

		select im.id as id, 

			   	im.name as name, 

			   	im.real_name as realNameImg,

				im.type_id as type, 

				im.size, 

				im.height, 

				im.width, 

				im.large, 

				im.resolution,

				im.score

		from image im 

		where im.id = #{id}

	</select>

	

	<select id="selectModelNumber" parameterType="Long" resultType="ProductModelNumber">

		select pmn.id,

			   pmn.model_number as modelNumber,

			   pmn.quantity as quantity,

			   pmn.creation_date as creationDate,

			   pmn.supplier as supplier,

			   pmn.price as price,

			   pmn.msrp as msrp

		from product_model_number pmn

		where pmn.product_id = #{id}

	</select>



	<select id="getAllActiveClients" parameterType="Long" resultMap="UserMapper.userResultMap" >		

		select 	ua.id as userId, 

				ua.login, 

				ua.password, 

				ua.email, 

				ua.last_login_date as lastLoginDate,

				ua.active, 

				ua.creation_date as creationDate, 

				ua.type_id as typeId, 

				ua.code as code		   	

		from 	user_product_price upp, 

				user_account ua

		where 	upp.user_id = ua.id

		and		upp.status_id = 1		

		and 	upp.product_id = #{id}

		order by ua.login

	</select>	

	

	<select id="selectWarranty" parameterType="Long" resultMap="translationWarrantyMap">

		select tw.id as warrantyEntryId,

			   tw.trans_id as warrantyTransId,

			   tw.lang_id as warrantyLangId,

			   tw.text as warrantyText

		from translation_entry tw,

		     product p

		where p.id = #{id} 

			  and tw.trans_id = p.warranty_trans_id

	</select>

	

	<select id="selectProductLink" parameterType="Long" resultType="ProductLink">

		select pl.id,

			   pl.product_id as productId,

			   pl.link as link,

			   pl.creation_date as creationDate

		from product_link pl 

		where pl.product_id = #{id}

	</select>

		

	<select id="getAllProdcutForProfit_JustForTest" parameterType="Product" resultMap="productResultMap">

		<include refid="selectSimpleProductUser"/>

      	where upp.user_id = #{userId} 

      	and p.status_id != 4 

      	and p.brand_id = #{brand.id}

      	and p.category_id = #{category.id}

		order by p.id, tn.lang_id

	</select>

	

	<select id="getAllProdcutForProfit" parameterType="Product" resultMap="productResultMap">

		<include refid="selectSimpleProductUser"/>

      	where upp.user_id = #{userId} 

      	and p.status_id <![CDATA[<> ]]> 4 

		<if test="brand != null">

			and p.brand_id = #{brand.id}

		</if>

		<if test="category != null">

			and p.category_id = #{category.id}

		</if>

		<if test="loyaltySourceProductId != null">

			and (p.loyalty_source_product_id = #{loyaltySourceProductId}

       			or

       			array_to_string(array(select pmn.model_number from product_model_number pmn where pmn.product_id = p.id ), ' ') like '%' || #{loyaltySourceProductId} || '%') 

       	</if>

		<if test="userProductStatus != null">

			AND upp.status_id = #{userProductStatus}

		</if>		

		order by p.id, tn.lang_id

	</select>

		

	<select id="getAllProdcut" parameterType="Product" resultMap="productResultMap">

		<include refid="select"/>

		where p.status_id in (1,2,5)

		order by p.id	

	</select>

			

	<select id="getAllProdcutAnyStatus" parameterType="Product" resultMap="productResultMap">

		<include refid="select"/>

		order by p.id	

	</select>

		

	<select id="getAllProductQuery" parameterType="Query" resultMap="productResultMap">

		<include refid="selectBasicProduct"/>

      	where true

		<if test="brand != null">

			and p.brand_id = #{brand.id}

		</if>

		<if test="category != null">

			and p.category_id = #{category.id}

		</if>	

		<if test="typeId != null">

			and p.type_id = #{typeId}

		</if>

		<if test="discontinued == true">

			<if test="disabled == true">

				and p.status_id in (3, 4)

			</if>

			<if test="disabled == false">

				and p.status_id in (3)

			</if>

		</if>

		<if test="discontinued == false">

			<if test="disabled == true">

				and p.status_id in (4)

			</if>

			<if test="disabled == false">

				and p.status_id in (1, 2, 5)

			</if>

		</if>

		

		order by p.id, tn.lang_id

	</select>

	

	<select id="getProductByName" resultMap="productResultMap">

		<if test="userId == null">

			<include refid="selectSearch"/>

		</if>

		<if test="userId != null">

			<include refid="selectProductUserSearch"/>

		</if>

		where true

		<foreach collection="listQuery" item="item" index="index">

			and lower(s.search) like '%' || #{item} || '%'

		</foreach>

		<if test="userId == null">

			and s.brandid <![CDATA[<> ]]> 69

			and s.status in (1,2,3)

		</if>

		<if test="userId != null">

			and upp.user_id = #{userId}

			and s.status in (1,2,3)

		</if>

		and s.msrp is not null

		and s.msrp not like '0.00'

		and s.cost is not null

		and s.cost not like '0.00'

		and s.status <![CDATA[<> ]]> 4

	</select>	

	

	<select id="getAllProdcutByBrand"  resultMap="productResultMap">

		<if test="userId == null">

			<include refid="select"/>

		</if>

		<if test="userId != null">

			<include refid="selectProductUser"/>

		</if>

		where p.brand_id = cast(#{query} as integer)

		<if test="userId == null">

			and p.brand_id <![CDATA[<> ]]> 69

			and p.status_id in (1,2,3,5)

		</if>

		<if test="userId != null">

			and upp.user_id = #{userId}

			and p.status_id in (1,2,3,5)

		</if>

		<include refid="commonAnd"/>

		order by tn.text

	</select>	

	

	<select id="getAllProdcutByCategory"  resultMap="productResultMap">

		<if test="userId == null">

			<include refid="select"/>

		</if>

		<if test="userId != null">

			<include refid="selectProductUser"/>

		</if>

		where p.category_id = cast(#{query} as integer)

		<if test="userId == null">

			and p.brand_id <![CDATA[<> ]]> 69	

			and p.status_id in (1,2,3,5)

		</if>

		<if test="userId != null">

			and upp.user_id = #{userId}	

			and p.status_id in (1,2,3,5)

		</if>

		<include refid="commonAnd"/>

		order by tn.text

	</select>

	

	<select id="getAllProdcutBySpecification"  resultMap="productResultMap">

		<if test="userId == null">

			<include refid="select"/>

		</if>

		<if test="userId != null">

			<include refid="selectProductUser"/>

		</if>

		where p.type_id = cast(#{query} as integer)	

		<if test="userId == null">

			and p.brand_id <![CDATA[<> ]]> 69	

			and p.status_id in (1,2,3,5)

		</if>

		<if test="userId != null">

			and upp.user_id = #{userId}	

			and p.status_id in (1,2,3,5)

		</if>

		<include refid="commonAnd"/>

		order by tn.text

	</select>

	

	<select id="getAllDiscontinuedProducts" resultMap="productResultMap">

		<include refid="select"/>

		where p.status_id = 3

		order by p.id

	</select>	

	

	<select id="getProductListByCategoryGroupId" parameterType="Long" resultMap="productResultMap">

		<include refid="select"/>

		where p.category_id = ct.id

		and ct.category_group_id = #{categoryGoupeId}

		order by p.id	

	</select>	

	

	<select id="getAllProdcutByCategoryGroup"  resultMap="productResultMap">

		<if test="userId == null">

			<include refid="select"/>

		</if>

		<if test="userId != null">

			<include refid="selectProductUser"/>

		</if>	

		where ct.category_group_id = cast(#{query} as integer)

		<if test="userId == null">

			and p.brand_id <![CDATA[<> ]]> 69	

			and p.status_id in (1,2,3,5)

		</if>

		<if test="userId != null">

			and upp.user_id = #{userId}

			and ( p.status_id in (1,2,5)

			      or

			      (p.status_id in (3) 

			       and 

			       (select status_id 

			        from user_product_price

			        where user_id = #{userId}

			              and product_id = p.id

			       ) = 1

			      )

			    )

		</if>

		<include refid="commonAnd"/>

		order by tn.text

	</select>

	

	<select id="getProductIdFromLSProductId" parameterType="String" resultMap="productResultMap">

		<include refid="select"/> 

		where trim(p.loyalty_source_product_id) ilike trim(#{loyaltySourceProductId})

	</select>	

			

	<select id="getProductByLsProductId" parameterType="String" resultMap="productResultMap">	

		<include refid="select"/> 

		WHERE p.loyalty_source_product_id=#{value} 

	</select>

		

	<select id="getAllUserProductPrice" resultMap="userProductPriceResultMap">

		<include refid="selectUserProductPrice"/>

		order by id

	</select>

	

	<select id="getUserProductPriceList" parameterType="Long" resultMap="userProductPriceResultMap">

		<include refid="selectUserProductPrice"/>

		where upp.product_id = #{productId}

	</select>
	
	<select id="getUserProductPriceForActiveUsersList" parameterType="Long" resultMap="userProductPriceResultMap">
		SELECT 	upp.id,
				upp.user_id as userId,
				upp.product_id as productId,
				upp.price as price,
				upp.price_type as priceType,
				upp.status_id as userStatus,
				upp.is_excluded as excluded,
				upp.percent_profit as profit,
				upp.percent_discount as discount,
				upp.shipping_coverage as shippingCoverage,
				upp.shipping_total_canada as shippingTotalCanada
		FROM user_product_price upp inner join user_account ua on upp.user_id=ua.id
		WHERE upp.product_id = #{productId}
		AND ua.type_id = 2
		AND (ua.active IS TRUE OR ua.template IS TRUE)
	</select>
	

	<select id="getUserProductPrice" parameterType="Long" resultMap="userProductPriceResultMap">

		<include refid="selectUserProductPrice"/>

		where upp.product_id = #{productId}

		and upp.user_id = #{userId}

	</select>



	<select id="getUsrPPriceByLsproductId" parameterType="java.util.Map" resultMap="userProductPriceResultMap">

		<include refid="selectPPriceByLsproductId"/>

		WHERE upp.user_id=#{userId} 

		      AND p.loyalty_source_product_id=#{lsProductId}

	</select>	

		

	<select id="getUsrPPriceByProductId" parameterType="java.util.Map" resultMap="userProductPriceResultMap">

		<include refid="selectPPriceByLsproductId"/>

		WHERE upp.user_id=#{userId} 

		      AND p.id=#{productId}

	</select>

		

	<select id="getAllProvinces" resultMap="provinceResultMap">

		<include refid="selectProvince"/>

	</select>



	<select id="getProvince" parameterType="Long" resultMap="provinceResultMap">

		<include refid="selectProvince"/>

		where pvc.id = #{provinceId}

	</select>	

	

	<select id="getProvinceByCode" parameterType="String" resultMap="provinceResultMap">

		<include refid="selectProvince"/>

		where pvc.code = #{value}

	</select>



	<select id="getAllCities" parameterType="Long" resultMap="cityResultMap">

		<include refid="selectCity"/>

		where c.province_id = #{provinceId}

		order by c.id

	</select>


	<select id="getMostPopularCitie" parameterType="Long" resultMap="cityResultMap">
		<include refid="selectCity"/>
		WHERE c.province_id= #{provinceId} AND
		TO_NUMBER(c.population_percent, '999999999.99')>=(SELECT MAX(TO_NUMBER(CT.population_percent, '999999999.99')) FROM city CT WHERE CT.province_id=c.province_id GROUP BY CT.province_id)
		LIMIT 1
	</select>


	<select id="getMostPopularCitiesList" parameterType="Long" resultMap="cityResultMap">
		<include refid="selectCity"/>
		WHERE
		TO_NUMBER(c.population_percent, '999999999.99')>=(SELECT MAX(TO_NUMBER(CT.population_percent, '999999999.99')) FROM city CT WHERE CT.province_id=c.province_id GROUP BY CT.province_id)
	</select>


	<select id="getCities" resultMap="cityResultMap">

		<include refid="selectCity"/>

		order by c.id

	</select>

	

	<select id="getCity" parameterType="Long" resultMap="cityResultMap">

		<include refid="selectCity"/>

		where c.id = #{cityId}

	</select>	

			

	<select id="getCityByName" parameterType="String" resultMap="cityResultMap">

		<include refid="selectCity"/>

		where lower(c.name) = #{value}

	</select>	

			

	<select id="getAllValidStatusProducts" parameterType="Long" resultMap="productResultMap">

		<include refid="selectProductUser"/>

		where upp.user_id = #{userId}

		and p.status_id in (1,2,5)

		order by upp.product_id, upp.user_id

	</select>


		
	<select id="getValidProductsByUserIdAndExcluded" parameterType="Long" resultMap="productResultMap"> 
		<include refid="selectProductUser"/>
		where upp.user_id = #{userId}
		and p.status_id in (1,2,5)
		and upp.is_excluded = FALSE 
		<!--and (p.creation_date between '2014-05-30' and '2014-07-03')-->
		<!--and p.brand_id in( 249,250,251)-->
		<!--  and (p.creation_date between '2013-12-15' and '2014-01-29') OR loyalty_source_product_id='BUGC0547R'-->
		order by br.name,ct.category_group_id, ct.name, p.type_id, tn.text 
	</select>

	<select id="getAllValidStatusProductsForAllUsers" resultMap="productResultMap">

		<include refid="selectProductUser"/>

		where p.status_id in (1,2,5)

		order by ct.category_group_id, ct.name, p.type_id, br.name, tn.text

	</select>

	

	<select id="getAllValidStatusProductsG"  parameterType="Long" resultMap="productResultMap">

		<include refid="selectProductUser"/>

		where upp.user_id = #{userId}

		and p.status_id in (1,2,5)

		and ct.category_group_id = #{categoryGoupeId}

		order by ct.category_group_id, ct.name, p.type_id, br.name, tn.text

	</select>	



	<select id="getAllValidStatusProductsGC"  parameterType="Long" resultMap="productResultMap">

		<include refid="selectProductUser"/>

		where upp.user_id = #{userId}

		and p.status_id in (1,2,5)

		and ct.category_group_id = #{categoryGoupeId}

		and ct.id = #{categoryId}

		order by ct.category_group_id, ct.name, p.type_id, br.name, tn.text

	</select>	



	<select id="getAllValidStatusProductsGCT"  parameterType="Long" resultMap="productResultMap">

		<include refid="selectProductUser"/>

		where upp.user_id = #{userId}

		and p.status_id in (1,2,5)

		and ct.category_group_id = #{categoryGoupeId}

		and ct.id = #{categoryId}

		and p.type_id = #{typeId}

		order by ct.category_group_id, ct.name, p.type_id, br.name, tn.text

	</select>	



	<select id="getAllValidStatusProductsGCTB"  parameterType="Long" resultMap="productResultMap">

		<include refid="selectProductUser"/>

		where upp.user_id = #{userId}

		and p.status_id in (1,2,5)

		and ct.category_group_id = #{categoryGoupeId}

		and ct.id = #{categoryId}

		and p.type_id = #{typeId}

		and p.brand_id = #{brandId}

		order by ct.category_group_id, ct.name, p.type_id, br.name, tn.text

	</select>



	<select id="getAllValidStatusProductsGCB"  parameterType="Long" resultMap="productResultMap">

		<include refid="selectProductUser"/>

		where upp.user_id = #{userId}

		and p.status_id in (1,2,5)

		and ct.category_group_id = #{categoryGoupeId}

		and ct.id = #{categoryId}

		and p.brand_id = #{brandId}

		order by ct.category_group_id, ct.name, p.type_id, br.name, tn.text

	</select>

	<!-- 

	<select id="getProductById"  parameterType="Long" resultMap="productResultMap">

		<include refid="select"/>

		where p.id = cast(#{query} as integer)

	</select>

 	-->

	<select id="getProductById"  parameterType="Long" resultMap="productResultMap">

		<include refid="select"/>

		where p.id = #{value}

	</select>





	<select id="getShippingCity"  parameterType="Long" resultMap="shippingCityResultMap">	

		<include refid="selectShippingCity"/>

		where product_id = #{productId}

		and city_id = #{cityId}

	</select>

	

	<select id="getAllShippingCity" resultMap="shippingCityResultMap">

		<include refid="selectShippingCity"/>

		order by id

	</select>		

	

	<select id="getValidProductIdByDim"  parameterType="Product" resultMap="productResultMap">

		<include refid="select"/>

		where p.status_id in (1,2,5)

		and p.weight = #{weight}

		and p.long = #{length}

		and p.width = #{width}

		and p.high = #{height}

		order by ct.category_group_id, ct.name, p.type_id, br.name, tn.text

	</select>

	

	<select id="getShippingCityListWithZeroParcelPriceByCityId" parameterType="Long" resultMap="shippingCityResultMap">

		<include refid="selectUserShippingCity"/>

		where p.status_id in (1, 2, 5)	

		and sc.expedited_parcel_price ilike '0.00%'

		and sc.city_id = #{cityId}

	</select>

	

	<select id="getWeightedTotalProvinceFromShippingProvince" parameterType="Long" resultMap="ShippingProvinceResultMap">

		<include refid="selectShippingProvince"/>

		where sp.product_id = #{productId}

		and sp.province_id = #{provinceId}

	</select>

	

	<select id="getShippingTotalList" parameterType="Long" resultMap="ShippingTotalResultMap">

		<include refid="selectShippingTotal"/>

		where st.product_id = #{productId}

		and st.user_id = #{userId}

		order by province_id

	</select>

	

	<select id="getUserProvincePopulationList" parameterType="Long" resultMap="userProvincePopulationResultMap">

		<include refid="selectUserProvincePopulation"/>

		where up_pop.user_id = #{userId}

		order by up_pop.province_id

	</select>

		

	<select id="getAllShippingProvince" resultMap="ShippingProvinceResultMap">

		<include refid="selectShippingProvince"/>

		order by id

	</select>

	

	<select id="getAllShippingTotal" resultMap="ShippingTotalResultMap">

		<include refid="selectShippingTotal"/>

		order by id

	</select>

	

	<select id="getAllUserProvincePopulation" resultMap="userProvincePopulationResultMap">

		<include refid="selectUserProvincePopulation"/>

		order by id

	</select>

		

	<select id="getShippingTotalListByUserId" parameterType="Long" resultMap="ShippingTotalResultMap">

		<include refid="selectShippingTotal"/>

		where st.user_id = #{userId}

		order by st.id

	</select>

	

	<select id="getUserProductPriceByUserId" parameterType="Long" resultMap="userProductPriceResultMap">

		<include refid="selectUserProductPrice"/>

		where upp.user_id = #{userId}

		order by upp.id

	</select>	

	

	<select id="getUserProvincePopulationByUserId" parameterType="Long" resultMap="userProvincePopulationResultMap">

		<include refid="selectUserProvincePopulation"/>

		where up_pop.user_id = #{userId}

		order by id

	</select>

	

	<select id="getUserProvincePopulation" parameterType="Long" resultMap="userProvincePopulationResultMap">

		<include refid="selectUserProvincePopulation"/>

		where up_pop.user_id = #{userId}

		and up_pop.province_id =  #{provinceId}

	</select>

	

	<select id="getShippingCityByIDGreaterThan" parameterType="Long" resultMap="shippingCityResultMap">

		<include refid="selectShippingCity"/>

		where sc.id > #{id}

		order by sc.id

	</select>	

	

	<select id="getShippingProvinceByIDGreaterThan" parameterType="Long" resultMap="ShippingProvinceResultMap">

		<include refid="selectShippingProvince"/>

		where sp.id > #{id}

		order by sp.id

	</select>

	

	<select id="getShippingTotalByIDGreaterThan" parameterType="Long" resultMap="ShippingTotalResultMap">

		<include refid="selectShippingTotal"/>

		where st.id > #{id}

		order by st.id

	</select>

	

	<select id="getAllValidProductIds" resultMap="lightResultMap">

		<include refid="selectLight"/>

		where status_id in (1, 2, 5)

		order by id

	</select>

	

	<select id="getWereWgtDimChanged" resultMap="lightResultMap">

		<include refid="selectLight"/>

		where were_wgt_dim_changed = true

		order by id

	</select>

	

	<select id="getShippingRepeats" resultMap="lightResultMap">

		<include refid="selectLight"/>

		where status_id in (1,2,5)

		and weight = #{weight}

		and long = #{length}

		and width = #{width}

		and high = #{height}

		and id <![CDATA[<> ]]> #{id}

		order by id

	</select>

    

	<select id="getValidProductsGreaterThanId" parameterType="Long" resultMap="productResultMap">

		<include refid="select"/>

		where p.id > #{productId}

		order by p.id

	</select>

	

	<select id="getShippingTotalListByProductId" parameterType="Long" resultMap="ShippingTotalResultMap">

		<include refid="selectShippingTotal"/>

		where st.product_id = #{productId}

		order by st.id

	</select>

	

	<select id="getNullsShippingTotalCanadaOnUserProductPrice" parameterType="Long" resultMap="userProductPriceResultMap">

		<include refid="selectUserProductPrice"/>

		where upp.product_id = #{productId}

		and shipping_total_canada is null

		order by upp.id

	</select>

	

	<select id="getAlterProductXMLByProductId" parameterType="Long" resultMap="alterProductXMLResultMap">

		<include refid="selectAlterProductXML"/>

		where p_xml.product_id = #{productId}

		order by p_xml.id

	</select>

	

	<select id="getAlterUserProductXMLByProductIdAndUserId" parameterType="Long" resultMap="alterUserProductXMLResultMap">

		<include refid="selectAlterUserProductXML"/>

		where up_xml.product_id = #{productId}

		and up_xml.user_id = #{userId}

		order by up_xml.id

	</select>

	

	<select id="getProductsAsOfConsideredForXML"  parameterType="Product" resultMap="productResultMap">

		<include refid="select"/>

		where p.considered_for_xml = true

		order by p.id

	</select>

           

    <select id="getWereWgtDimChangedFromProduct" resultMap="productResultMap"> 

        <include refid="select" />

        where p.were_wgt_dim_changed = true

        order by p.id

    </select>

    

    <select id="getShippingProvince" parameterType="Long" resultMap="ShippingProvinceResultMap">

		<include refid="selectShippingProvince"/>

		where sp.product_id = #{productId}

		and sp.province_id = #{provinceId}

		order by sp.id

	</select>

	

	<select id="getShippingTotal" parameterType="Long" resultMap="ShippingTotalResultMap">

		<include refid="selectShippingTotal"/>

		where st.product_id = #{productId} 

		and st.province_id = #{provinceId} 

		and st.user_id = #{userId} 

		order by st.id 

	</select>

	

	<select id="getProductBetween" parameterType="Long" resultMap="productResultMap">

  		<include refid="select" /> 

 		where p.id <![CDATA[ >=]]> #{lower} 

 		and p.id <![CDATA[ <= ]]> #{upper} 

 		order by p.id

	</select>



	<select id="isUserBrandExcluded" parameterType="java.util.Map" resultMap="countUserProductResultMap">

		SELECT COUNT(product_id) AS count

		FROM(SELECT UPP1.product_id

		    FROM user_product_price UPP1 INNER JOIN product P1  ON P1.id= UPP1.product_id

		     WHERE UPP1.user_id=#{userId} AND P1.brand_id=#{brandId} AND UPP1.status_id='2'

		EXCEPT

		    SELECT UPP2.product_id

		    FROM user_product_price UPP2 INNER JOIN product P2  ON P2.id= UPP2.product_id

		    WHERE UPP2.user_id=#{userId} AND UPP2.status_id='2' AND P2.brand_id=#{brandId} AND  UPP2.is_excluded = TRUE) AS T

	</select>  



	<select id="nbProductActiveByBrand" parameterType="java.util.Map" resultMap="countUserProductResultMap">

			SELECT count(*) AS count 

			FROM product P inner join user_product_price UPP on UPP.product_id=P.id 

			WHERE P.brand_id=#{brandId} and UPP.user_id=#{userId} AND UPP.status_id=1

	</select>  

				

	<select id="getShippingTotalByUserIdAndCreationDate" parameterType="Long" resultMap="ShippingTotalResultMap">

		<include refid="shippingTotalProduct"/>

		where st.user_id = #{userId}

		and p.creation_date >= #{updateDate}

	</select>

	

	<select id="getUserProductPriceByUserIdAndCreationDate" parameterType="Long" resultMap="ShippingTotalResultMap">

		<include refid="userProductPriceProduct"/>

		where upp.user_id = #{userId}

		and p.creation_date >= #{updateDate}

	</select>

	

	<select id="isGroupProductID" parameterType="Long" resultType="long">

		SELECT CASE WHEN COUNT(*) > 1 OR SUM(PM.quantity) > 1 THEN 1

                   ELSE  0

                   END AS count

		FROM product_model_number PM WHERE PM.product_id = #{productId}

	</select>



	<select id="getProductsClassification" parameterType="Long" resultMap="productResultMap">

		SELECT* FROM

		(SELECT Z.product_id AS id,T.invoiced_qt as qtSold,((1+Z.brand_coefficient/100)*Z.satisfact)+((1+Z.profit_coefficient/100)*Z.profit)+((1+Z.unit_sold_coefficient/100)*T.invoiced_qt) AS classification,

		Z.loyaltySourceProductId,Z.categoryName,Z.name AS name,Z.descriptionText AS descriptiProduct,Z.msrp,Z.cost,Z.price AS userPrice,Z.profit,Z.discount

		FROM 

			(SELECT INV.product_id,(sum(CASE WHEN(SELECT count(*)FROM generate_series(1, (now()::DATE - invoiced_date::DATE::DATE)))BETWEEN 0 AND 90 THEN INV.quantity ELSE 0 END))AS invoiced_qt 

			FROM invoicing_orders INV WHERE INV.product_id IS NOT NULL GROUP BY INV.product_id) AS T

			INNER JOIN

			(SELECT upp.product_id,P.loyalty_source_product_id AS loyaltySourceProductId,

			(SELECT text FROM translation_entry WHERE trans_id=p.name_trans_id AND lang_id=1)AS descriptionText,

			(SELECT ct.name FROM category ct WHERE p.category_id = ct.id) AS categoryName,

			P.msrp AS msrp ,P.cost AS cost,upp.price AS price,upp.percent_discount AS discount,

			BR.id,BR.name AS name,BR.satisfact,UPF.brand_coefficient AS brand_coefficient,UPF.unit_sold_coefficient AS unit_sold_coefficient,UPF.profit_coefficient AS profit_coefficient,

			(CASE WHEN upp.percent_profit IS NULL OR upp.percent_profit=''  THEN 0 ELSE to_number(upp.percent_profit, '999999999.99') END)AS profit 

			FROM (user_product_price upp INNER JOIN user_profile UPF ON upp.user_id=UPF.user_id) INNER JOIN(product P INNER JOIN brand BR ON P.brand_id=BR.id) ON UPP.product_id=P.id

			WHERE upp.user_id=#{value})AS Z

		ON T.product_id=Z.product_id

		ORDER BY 3 DESC LIMIT 2000)AS G

		<!--  LIMIT 2000 -->

	</select>



	<select id="getProductNotFound" parameterType="java.util.Map" resultMap="productResultMap">

		SELECT pList.loyaltySourceProductId

		FROM(

			<foreach item="item" index="index" collection="productList" separator="  UNION " >

				SELECT	#{item.loyaltySourceProductId} AS loyaltySourceProductId

			</foreach>

			)AS pList

		EXCEPT

		SELECT loyalty_source_product_id

		FROM product

	</select>	

	<!-- the queries: "getSaleActiveByUserId" "getSaleActiveByProductIdAndUserId" used in web -->
	<select id="getSaleActiveByUserId" parameterType="Long" resultMap="saleResultMap">
		<include refid="selectProductUserSale"/>
		<include refid="whereClientHasSale"/>
	</select>

	<select id="getSaleActiveByProductIdAndUserId" parameterType="java.util.Map" resultMap="saleResultMap">
		<include refid="selectProductUserSale"/>
		<include refid="whereUerSale"/>
	</select>
	
	
	 <!-- the queries: "getSaleByProductIdAndUserId" "getSaleByProductId" used in ADMIN -->
	<select id="getSaleByProductIdAndUserId" parameterType="java.util.Map" resultMap="saleResultMap">
		<include refid="selectProductUserSale"/>
		<include refid="whereUerSaleWithoutSaleConditions"/>
	</select>
	
	
	<select id="getSaleByProductId" parameterType="java.util.Map" resultMap="saleResultMap">
		<include refid="selectProductSale"/>
		<include refid="whereProductSale"/>
	</select>
	
		
	<select id="isThereUserHavenThisSale" parameterType="Long" resultMap="saleResultMap">
		SELECT id AS userId 
		FROM user_account UC
		WHERE id NOT IN(SELECT user_id FROM user_sale USL WHERE product_sale_id=#{value}) AND
		template IS FALSE AND
		type_id=2
	</select>
	


<!-- //////////////////////////////// SALE ////////////////////////////////////////////////////////////// -->


	<!-- Inserts -->

	<insert id="insertProduct" parameterType="Product">

		<selectKey keyProperty="id" resultType="long" order="BEFORE">

      		select nextVal('product_id_seq')

    	</selectKey>

    	insert into product

    	(id, 

    	 upc,

    	 name_trans_id, 

    	 description_trans_id, 

    	 image_id, 

    	 status_id, 

    	 msrp, 

    	 cost,

    	 brand_id,

    	 loyalty_source_product_id,

    	 width,

    	 high,

    	 long,

    	 weight,

    	 category_id,

    	 specification_trans_id,

    	 type_id,

    	 other_trans_id,

    	 note,

    	 were_wgt_dim_changed,

    	 considered_for_xml,

    	 warranty_trans_id)

    	values 

    	(#{id},

    	 #{upc}, 

    	 #{name.id}, 

    	 #{description.id}, 

    	 #{image.id}, 

    	 #{status}, 

    	 #{msrp}, 

    	 #{cost}, 

    	 #{brand.id}, 

    	 trim(#{loyaltySourceProductId}),

    	 #{productWidth},

    	 #{productHigh},

    	 #{productLong},

    	 #{weight},

    	 #{category.id},

    	 #{specification.id},

    	 #{typeId},

    	 #{other.id},

    	 #{note},

    	 #{wereWgtDimChanged},

    	 #{consideredForXML},

    	 #{warranty.id})

	</insert>

	

	<select id="insertBoxAndProductBox" parameterType="Box" resultMap="boxResultMap">

		BEGIN;

		SAVEPOINT sql_updates;



		INSERT INTO box(length, width, height)

		SELECT	#{length},

				#{width}, 

				#{height}

		WHERE NOT EXISTS(SELECT * FROM box

								WHERE length = #{length} 

								AND   width  = #{width} 

								AND   height = #{height});



		INSERT INTO product_box(product_id, box_id, total_weight, status_id) 

			SELECT #{productId},

			(SELECT id FROM box WHERE length = #{length} AND width = #{width} AND height = #{height}),

			#{totalWeight},

			#{statusId}

		WHERE NOT EXISTS(SELECT * FROM product_box WHERE product_id = #{productId});



		RELEASE SAVEPOINT sql_updates;

		COMMIT;

	</select>


	<insert id="insertNewCurrency" parameterType="Currency">
		<selectKey keyProperty="id" resultType="long">
      		select currVal('currency_id_seq')
    	</selectKey>
    	INSERT INTO currency (symbol, rate)
		VALUES (#{symbol}, #{rate})
	</insert>


	<insert id="insertProductModelNumber" parameterType="ProductModelNumber">

		<selectKey keyProperty="id" resultType="long" order="BEFORE">

      		select nextVal('product_model_number_id_seq')

    	</selectKey>    	

    	insert into product_model_number

    	(id, 

    	 product_id, 

    	 model_number,

    	 quantity,

    	 supplier,

    	 price,

    	 msrp)

    	values 

    	(#{id}, 

    	 #{productId}, 

    	 #{modelNumber},

    	 #{quantity},

    	 #{supplier},

    	 #{price},

    	 #{msrp})

	</insert>	

	

	<insert id="insertUserProductPrice" parameterType="UserProductPrice">

		<selectKey keyProperty="id" resultType="long" order="BEFORE">

      		select nextVal('user_product_price_id_seq')

    	</selectKey>

		insert into user_product_price

		(	id, 

			user_id, 

			product_id, 

			price, 

			price_type, 

			status_id, 

			is_excluded, 

			percent_profit, 

			percent_discount)

		values (

			#{id}, 

			#{userId},

			#{productId},

			#{price},

			#{priceType}, 

			#{userStatus}, 

			#{excluded}, 

			#{profit}, 

			#{discount})

	</insert>

	

	<insert id="insertUserProductPriceShipping" parameterType="UserProductPrice">

		<selectKey keyProperty="id" resultType="long" order="BEFORE">

      		select nextVal('user_product_price_id_seq')

    	</selectKey>

		insert into user_product_price

		(	id, 

			user_id, 

			product_id, 

			price, 

			price_type, 

			status_id, 

			is_excluded, 

			percent_profit, 

			percent_discount,

			shipping_coverage, 

			shipping_total_canada)

		values (

			#{id}, 

			#{userId},

			#{productId},

			#{price},

			#{priceType}, 

			#{userStatus}, 

			#{excluded}, 

			#{profit}, 

			#{discount},			

			#{shippingCoverage}, 

			#{shippingTotalCanada})

	</insert>

		

	<insert id="insertProductToUsers" parameterType="Product">

		insert into user_product_price

		(user_id, product_id, status_id)

		select id,#{id},2

		from user_account ua

		where ua.type_id = 2

	</insert>

	

	<insert id="insertProductLink" parameterType="ProductLink">

		<selectKey keyProperty="id" resultType="long" order="BEFORE">

      		select nextVal('product_link_id_seq')

    	</selectKey>    

		insert into product_link

		(id,

		 product_id, 

		 link)

		values 

    	(#{id}, 

    	 #{productId},

    	 #{link})

	</insert>

	

	<insert id="insertShippingCity" parameterType="ShippingCity">

		<selectKey keyProperty="id" resultType="long" order="BEFORE">

      		select nextVal('shipping_city_id_seq')

    	</selectKey>

		insert into shipping_city

		(id,

		 product_id,

		 city_id,

		 expedited_parcel_price)

		values 

    	(#{id}, 

    	 #{productId},

    	 #{cityId},

    	 #{expeditedParcelPrice})

	</insert>



	<insert id="insertShippingCityBlank" parameterType="ShippingCity">

		<selectKey keyProperty="id" resultType="long" order="BEFORE">

      		select nextVal('shipping_city_id_seq')

    	</selectKey>

		insert into shipping_city

		(id,

		 product_id,

		 city_id)

		values 

    	(#{id}, 

    	 #{productId},

    	 #{cityId})

	</insert>



	<insert id="insertShippingProvince" parameterType="ShippingProvince">

		<selectKey keyProperty="id" resultType="long" order="BEFORE">

      		select nextVal('shipping_province_id_seq')

    	</selectKey>

		insert into shipping_province

		(id,

		 product_id,

		 province_id,		 

		 weighted_total_province)

		values 

    	(#{id}, 

    	 #{productId},

    	 #{provinceId},

    	 #{weightedTotalProvince})

	</insert>



	<insert id="insertShippingProvinceBlank" parameterType="ShippingProvince">

		<selectKey keyProperty="id" resultType="long" order="BEFORE">

      		select nextVal('shipping_province_id_seq')

    	</selectKey>

		insert into shipping_province

		(id,

		 product_id,

		 province_id)

		values 

    	(#{id}, 

    	 #{productId},

    	 #{provinceId})

	</insert>

	

	<insert id="insertShippingTotal" parameterType="ShippingTotal">

		<selectKey keyProperty="id" resultType="long" order="BEFORE">

      		select nextVal('shipping_total_id_seq')

    	</selectKey>

		insert into shipping_total

		(id,

		 product_id,

		 province_id,

		 user_id,

		 weighted_province_total_with_coverage,		 

		 average_shipping_total)

		values 

    	(#{id}, 

    	 #{productId},

    	 #{provinceId},

    	 #{userId},

    	 #{weightedProvinceTotalWithCoverage},

    	 #{averageShippingTotal})

	</insert>

	

	<insert id="insertShippingTotalBlank" parameterType="ShippingTotal">

		<selectKey keyProperty="id" resultType="long" order="BEFORE">

      		select nextVal('shipping_total_id_seq')

    	</selectKey>

		insert into shipping_total

		(id,

		 product_id,

		 province_id,

		 user_id)

		values 

    	(#{id}, 

    	 #{productId},

    	 #{provinceId},

    	 #{userId})

	</insert>

	

	<insert id="insertUserProvincePopulation" parameterType="UserProvincePopulation">

		<selectKey keyProperty="id" resultType="long" order="BEFORE">

      		select nextVal('user_province_population_id_seq')

    	</selectKey>

		insert into user_province_population

		(id,

		 user_id,

		 province_id,

		 population_percent)

		values 

    	(#{id}, 

    	 #{userId},

    	 #{provinceId},

    	 #{populationPercent})

	</insert>

		

	<insert id="insertAlterUserProductXML" parameterType="AlterUserProductXML">

		<selectKey keyProperty="id" resultType="long" order="BEFORE">

      		select nextVal('alter_user_product_xml_id_seq')

    	</selectKey>

		insert into alter_user_product_xml

		(id,

		 user_id,

		 product_id,

		 price_discount,

		 excluded,

		 shipping,

		 user_product_to_be_executed,

		 excluded_meaning,
		 
		 price)

		values 

    	(#{id}, 

    	 #{userId},

    	 #{productId},

    	 #{priceDiscount},

    	 #{excluded},

    	 #{shipping},

    	 #{userProductToBeExecuted},

    	 #{excludedMeaning},
    	 
    	 #{price})

	</insert>

	

	<insert id="insertAlterProductXML" parameterType="AlterProductXML">

		<selectKey keyProperty="id" resultType="long" order="BEFORE">

      		select nextVal('alter_product_xml_id_seq')

    	</selectKey>

		insert into alter_product_xml

		(id,

		 product_id,

		 brand_id,

		 category_id,

		 type_id,

		 image_id,

		 status_id,

		 name_en,

		 name_fr,

		 description_en,

		 description_fr,

		 specification_en,

		 specification_fr,

		 other_en,

		 other_fr,

		 warranty_en,

		 warranty_fr,

		 dimensions,

		 weight,

		 model_number,

		 msrp,

		 shipping,
		 
		 shipment,

		 product_to_be_executed)

		values 

    	(#{id},

    	 #{productId},

    	 #{brandId},

    	 #{categoryId},

    	 #{typeId},

    	 #{imageId},

    	 #{statusId},

    	 #{nameEn},

    	 #{nameFr},

    	 #{descriptionEn},

    	 #{descriptionFr},

    	 #{specificationEn},

    	 #{specificationFr},

    	 #{otherEn},

    	 #{otherFr},

    	 #{warrantyEn},

    	 #{warrantyFr},

    	 #{dimensions},

    	 #{weight},

    	 #{modelNumber},

    	 #{msrp},

		 #{shipping},
		 
		 #{shipment},

    	 #{productToBeExecuted})

	</insert>

	

	<insert id="transferUserOnUserProductPrice" parameterType="Long">	

		insert into user_product_price(
			user_id,
			product_id,
			price,
			price_type, 
			status_id, 
			percent_profit, 
			percent_discount, 
			is_excluded, 
			shipping_coverage, 
			shipping_total_canada)			
		select 
			#{to}, 
			product_id, 
			price, 
			price_type, 
			status_id, 
			percent_profit, 
			percent_discount, 
			is_excluded, 
			shipping_coverage, 
			shipping_total_canada
		from user_product_price
		where user_id = #{from}

	</insert>

	

	<insert id="transferUserOnShippingTotal" parameterType="Long">

		insert into shipping_total(
			user_id, 
			product_id, 
			province_id, 
			weighted_province_total_with_coverage, 
			average_shipping_total)
		select 
			#{to}, 
			product_id, 
			province_id, 
			weighted_province_total_with_coverage, 
			average_shipping_total
		from shipping_total
		where user_id = #{from}

	</insert>			

	

	<insert id="transferUserOnUserProvincePopulation" parameterType="Long">

		insert into user_province_population(
			user_id, 
			province_id, 
			population_percent)
		select 
			#{to}, 
			province_id, 
			population_percent
		from user_province_population
		where user_id = #{from}

	</insert>

	
	
	<select id="addProductSale" parameterType="Product" resultMap="saleResultMap">

		INSERT INTO product_sale(product_id,qt_max,sale_qt,start_date,end_date,active,message_for_client,sale_price,
							sale_percent_profit,sale_percent_discount,sale_note,loyalty_product_id_sub)
							
		(SELECT #{id},#{qtMax},#{saleQt},#{startDate},#{endDate},TRUE,#{messageForClient},#{salePrice},
				#{salePercentProfit},#{salePercentDiscount},#{saleNote},#{loyaltyProductIdSub}
		  WHERE #{id} NOT IN (SELECT product_id FROM product_sale WHERE product_id=#{id} and active IS TRUE)
		)RETURNING id;

		UPDATE product_sale SET 
				qt_max=#{qtMax},
				start_date=#{startDate},
				end_date=#{endDate},
				message_for_client=#{messageForClient},
				sale_price=#{salePrice},
				sale_percent_profit=#{salePercentProfit},
				sale_percent_discount=#{salePercentDiscount},
				sale_note=#{saleNote},
				loyalty_product_id_sub=#{loyaltyProductIdSub}
		WHERE id=#{productSaleId};
				
	</select>
	
		
	<insert id="addUserSale"  parameterType="java.util.Map">
	
		INSERT INTO user_sale(user_id,regular_price,regular_percent_profit,regular_percent_discount,active,product_sale_id)
		 
		SELECT user_id,
		
				CASE 
				WHEN UPP.price IS NULL OR UPP.price='' THEN NULL
				ELSE TO_NUMBER(UPP.price, '999999999.99')
				END AS regularPrice,
				
				CASE 
				WHEN UPP.percent_profit IS NULL OR UPP.percent_profit='' THEN NULL
				ELSE TO_NUMBER(UPP.percent_profit, '999999999.99')
				END AS regularPercentProfit,
		
				CASE 
				WHEN UPP.percent_discount IS NULL OR UPP.percent_discount='' THEN NULL
				ELSE TO_NUMBER(UPP.percent_discount, '999999999.99')
				END AS regularPercentDiscount,
				TRUE,
				#{product.productSaleId}
				
		FROM user_product_price UPP					 
			
	 	WHERE  user_id IN
			   <![CDATA[(]]>
			 		<foreach item="item" index="index" collection="usersIdListSeleted" separator="," >
			 		#{item}
					</foreach>
			   <![CDATA[)]]> AND		 
				UPP.product_id=#{product.id} AND		 
				user_id IN
		 		(SELECT id FROM user_account UC WHERE UC.id=UPP.user_id AND UC.type_id=2 AND UC.active IS TRUE)AND
				 NOT EXISTS(SELECT* FROM user_sale USL WHERE USL.user_id=UPP.user_id AND USL.product_sale_id=#{product.productSaleId})AND
				 #{product.productSaleId}<![CDATA[>]]>0;

		UPDATE  user_sale SET 
				active=FALSE
		WHERE   product_sale_id=#{product.productSaleId};

		UPDATE  user_sale SET 
				active=TRUE
		WHERE product_sale_id=#{product.productSaleId} AND
			  user_id IN
			   <![CDATA[(]]>
			 		<foreach item="item" index="index" collection="usersIdListSeleted" separator="," >
			 		#{item}
					</foreach>
			   <![CDATA[)]]>;

		UPDATE user_sale SET
		       regular_price=CASE WHEN M.price IS NOT NULL AND M.price !='' THEN ROUND((M.price)::numeric, 2) ELSE NULL END,
		       regular_percent_profit=CASE WHEN M.percent_profit IS NOT NULL AND M.percent_profit !='' THEN ROUND((M.percent_profit)::numeric, 2) ELSE NULL END,
		       regular_percent_discount=CASE WHEN M.percent_discount IS NOT NULL AND M.percent_discount !='' THEN ROUND((M.percent_discount)::numeric, 2) ELSE NULL END
		FROM(SELECT PSL.id AS product_sale_id, UPP.user_id,UPP.product_id,UPP.price,UPP.percent_profit,UPP.percent_discount 
		     FROM  user_product_price UPP INNER JOIN product_sale PSL ON PSL.product_id=UPP.product_id
		     WHERE UPP.product_id=#{product.id} AND user_id IN
		     <![CDATA[(]]>
			 		<foreach item="item" index="index" collection="usersIdListSeleted" separator="," >
			 		#{item}
					</foreach>
			  <![CDATA[)]]>
		     ) AS M
		WHERE user_sale.user_id=M.user_id AND user_sale.product_sale_id=M.product_sale_id AND user_sale.active IS TRUE   

			   
	</insert>
	

	<!-- Updates -->

	<update id="updateProduct" parameterType="Product">

		update product

		set image_id=#{image.id},upc=#{upc}, status_id=#{status}, msrp=#{msrp}, cost=#{cost}, brand_id=#{brand.id}, 

		loyalty_source_product_id= trim(#{loyaltySourceProductId}), width=#{productWidth}, high=#{productHigh},

		long=#{productLong}, weight=#{weight}, category_id=#{category.id}, type_id=#{typeId}, note=#{note},

		discontinued_start_date=#{discontinuedStartDate}, were_wgt_dim_changed=#{wereWgtDimChanged},

		loyalty_source_product_id_sub= trim(#{loyaltyProductIdSub}), warranty_trans_id=#{warranty.id},

		considered_for_xml = #{consideredForXML}

		where id=#{id}

	</update>

    

	<update id="updateProductModelNumber" parameterType="ProductModelNumber">

		update product_model_number 

		set model_number=#{modelNumber},

			quantity=#{quantity},

			supplier=#{supplier},

			price=#{price},

			msrp=#{msrp}

		where id=#{id}

	</update>

	

	<update id="updateProductLink" parameterType="ProductLink">

		update product_link 

		set link=#{link}

		where id=#{id}			

	</update>
	
	
	<update id="transferUserOnProfile"  parameterType="Long">
	
		UPDATE user_profile SET 
			multiplier=U_PROF.multiplier
		FROM(SELECT user_id,multiplier FROM user_profile WHERE user_id=#{from})AS U_PROF
		WHERE user_profile.user_id=#{to};

	</update>
	

	<update id="updateSellingPriceBrand" parameterType="UserBrandDiscount">

		update user_product_price upp set price = (

					select trim(to_char(cast(p.cost as numeric(16,2)) * (1+ cast(#{discount} as numeric(16,2))/100)::real, '99999999999.99'))

					

					   			from product p

					   			where upp.product_id = p.id and p.brand_id = #{brandId}), 

					  price_type = 1

		where upp.user_id = #{userId} 

			  and (upp.price_type = 1 or upp.price_type is null)

			  and EXISTS (select 1 

			  			 from product p 

			  			 where p.id = upp.product_id 

			  				   and p.brand_id =	#{brandId})	

	</update>

	

	<update id="updateSellingPriceCategory" parameterType="UserCategoryDiscount">

		update user_product_price upp set price = (

					select trim(to_char(cast(p.cost as numeric(16,2)) * (1+ cast(#{discount} as numeric(16,2))/100)::real, '99999999999.99'))

					   			from product p

					   			where upp.product_id = p.id and p.category_id = #{categoryId}), 

					  price_type = 2

		where upp.user_id = #{userId} and upp.price_type <![CDATA[<> ]]> 3	

	

	</update>

	

	<update id="updateSellingPriceProduct" parameterType="Product">

		update user_product_price set price = trim(to_char(#{userPrice}::real, '99999999999.99')), price_type = #{priceType}

		where product_id = #{id} and user_id= #{userId} 	

	</update>

	

	<update id="cleanDiscontinuedStartDate" parameterType="Product">

		update product set discontinued_start_date = null 

		where id = #{id} and status_id = 1 

	</update>

	

	<update id="updateStatusToDisabled" parameterType="Product">

		update product set status_id = 4 

		where id = #{id}

	</update>

	

	<update id="updateUserProductStatus" parameterType="Product">

		UPDATE user_product_price
		SET status_id =#{userProductStatus} 	
		WHERE user_id = #{userId} AND product_id =#{id};

		UPDATE user_product_price
		SET price =T.price
		FROM(SELECT UPP.user_id,UPP.product_id,UPP.price FROM user_product_price UPP INNER JOIN user_profile UPROF ON UPP.user_id=UPROF.client_category_id WHERE UPP.product_id = #{id} AND UPROF.user_id=#{userId})AS T
		WHERE user_product_price.user_id = #{userId} AND user_product_price.product_id = #{id} AND user_product_price.status_id =2


	</update>

	<update id="updateUserProductPrice" parameterType="UserProductPrice">

			UPDATE user_product_price
			SET price = #{price}, 
				price_type = #{priceType}, 
				is_excluded = #{excluded},
				percent_profit = #{profit}, 
				percent_discount = #{discount}
			WHERE user_id = #{userId}AND product_id = #{productId}

	</update>

	<update id="updateUPPShippingCoverage" parameterType="UserProductPrice">

			update user_product_price

			set shipping_coverage = #{shippingCoverage},

			creation_date = now()

			where user_id = #{userId}

			and product_id = #{productId}

	</update>



	<update id="updateUPPShippingTotalCanada" parameterType="UserProductPrice">

			update user_product_price

			set shipping_total_canada = #{shippingTotalCanada},

			creation_date = now()

			where user_id = #{userId}

			and product_id = #{productId}

	</update>



	<update id="updateShippingCityToExpeditedParcelPrice" parameterType="ShippingCity">

			update shipping_city

			set expedited_parcel_price = #{expeditedParcelPrice},

			creation_date = now()

			where product_id = #{productId}

			and city_id = #{cityId}

	</update>

	

	<update id="updateShippingProvince" parameterType="ShippingProvince">

			update shipping_province

			set weighted_total_province = #{weightedTotalProvince},

			creation_date = now()

			where product_id = #{productId}

			and province_id = #{provinceId}

	</update>

	

	<update id="updateShippingTotal" parameterType="ShippingTotal">

			update shipping_total

			set weighted_province_total_with_coverage = #{weightedProvinceTotalWithCoverage},

				average_shipping_total = #{averageShippingTotal},

				creation_date = now()				

			where product_id = #{productId}

			and province_id = #{provinceId}

			and user_id = #{userId}

	</update>

	

	<update id="updateUserProvincePopulation" parameterType="UserProvincePopulation">

			update user_province_population

			set population_percent = #{populationPercent},

			creation_date = now()

			where user_id = #{userId}

			and province_id = #{provinceId}

	</update>

	

	<update id="updateAmendingProduct" parameterType="Product">

		update product 

		set note=#{note} 

		where id=#{id}

	</update>

	

	<update id="updateAlterUserProductXML" parameterType="AlterUserProductXML">

		update alter_user_product_xml 

		set price_discount = #{priceDiscount}, excluded = #{excluded}, shipping = #{shipping},

			user_product_to_be_executed = #{userProductToBeExecuted}, 

			excluded_meaning = #{excludedMeaning}, price = #{price},
			
			alter_date = now()

		where user_id = #{userId}

		and product_id = #{productId}

	</update>



	<update id="updateAlterProductXML" parameterType="AlterProductXML">

		update alter_product_xml 

		set brand_id = #{brandId}, category_id = #{categoryId}, type_id = #{typeId},

			status_id = #{statusId}, image_id = #{imageId},

			name_en = #{nameEn}, name_fr = #{nameFr},

			description_en = #{descriptionEn}, description_fr = #{descriptionFr},

			specification_en = #{specificationEn}, specification_fr = #{specificationFr},

			other_en = #{otherEn}, other_fr = #{otherFr}, shipping = #{shipping}, shipment = #{shipment}, 

			warranty_en = #{warrantyEn}, warranty_fr = #{warrantyFr},

			dimensions = #{dimensions}, weight = #{weight}, model_number = #{modelNumber},

			msrp = #{msrp}, product_to_be_executed = #{productToBeExecuted}, alter_date = now()

		where product_id = #{productId}

	</update>

	

	<update id="closeProductConsideredForXML" parameterType="Long">

		update product

		set considered_for_xml = false

		where id=#{productId}

	</update>	

	

	<update id="closeAlterProductXML" parameterType="Long">
		update alter_product_xml
		set product_to_be_executed = false, shipment = false
		<!-- 
		, brand_id=false, category_id=false, type_id=false, image_id=false, status_id=false, name_en=false,
		name_fr=false, description_en=false, description_fr=false, specification_en=false,
		specification_fr=false, other_en=false, warranty_en=false, warranty_fr=false, 
		dimensions=false, weight=false, model_number=false, msrp=false, shipping=false
		-->
		where  product_id = #{productId}
	</update>

	

	<update id="closeAlterUserProductXML" parameterType="Long">
		update alter_user_product_xml
		set user_product_to_be_executed = false, price=false
		<!-- 
		, price_discount=false, excluded=false, shipping=false, excluded_meaning=false
		-->
		where user_id = #{userId}
		and product_id = #{productId}

	</update>



	<update id="closeProductWereWgtDimChanged" parameterType="Long">

		update product

		set were_wgt_dim_changed = false

		where id = #{productId}

	</update>



	<update id="saveOldImageIdBeforeUpdate" parameterType="Long">		

		update product

		set old_image_real_name = (select i.real_name 

									from image i, product p 

									where p.image_id = i.id 

									and p.id = #{productId})

		where id = #{productId}

	</update>

	

	<update id="updateProductBox" parameterType="Box">		

		BEGIN;

		SAVEPOINT sql_updates;

		

		INSERT INTO box(length, width, height)

		SELECT	#{length},

				#{width}, 

				#{height}

		WHERE NOT EXISTS(SELECT * FROM box

								WHERE length = #{length} 

								AND   width  = #{width} 

								AND   height = #{height});

		UPDATE product_box

		SET total_weight = #{totalWeight},

		box_id = (SELECT id FROM box WHERE length = #{length} AND width = #{width} AND height = #{height}),

		status_id = #{statusId},

		update_date = now()

		WHERE product_id  = #{productId};

		

		INSERT INTO product_box(product_id, box_id, total_weight, status_id) 

			SELECT #{productId},

			(SELECT id FROM box WHERE length = #{length} AND width = #{width} AND height = #{height}),

			#{totalWeight},

			#{statusId}

		WHERE NOT EXISTS(SELECT * FROM product_box WHERE product_id = #{productId});

		

		RELEASE SAVEPOINT sql_updates;

		COMMIT;

	</update>

	

	<update id="updateProductBoxIfCpNotVerified" parameterType="Box">		

		BEGIN;
		SAVEPOINT sql_updates;

		<!-- ................. change were_wgt_dim_changed if there a new size or wei -->
		UPDATE product SET
		       were_wgt_dim_changed=TRUE
		WHERE product.id=#{productId}  AND 
			 (NOT EXISTS(SELECT * FROM product_box PB WHERE PB.product_id=#{productId} AND status_id=1)) AND
			 (NOT EXISTS(SELECT * FROM box WHERE  length = #{length} AND width  = #{width} AND height = #{height}) OR
			  NOT EXISTS(SELECT* FROM product_box PB INNER JOIN box B ON PB.box_id=B.id WHERE PB.product_id= #{productId} AND total_weight=#{totalWeight}  AND length=#{length} AND width=#{width}  AND height=#{height}));

		INSERT INTO box(length, width, height)
		SELECT	#{length}, #{width}, #{height}
		WHERE NOT EXISTS(SELECT * FROM box WHERE  length = #{length} AND width  = #{width} AND height = #{height});

		UPDATE product_box SET 
			   total_weight = #{totalWeight},
			   box_id = (SELECT id FROM box WHERE length = #{length} AND width = #{width} AND height = #{height}),
			   status_id = 1,
			   update_date = now()
		WHERE product_id  = #{productId} AND status_id = 0;

		INSERT INTO product_box(product_id, box_id, total_weight, status_id) 
			SELECT #{productId},
			(SELECT id FROM box WHERE length = #{length} AND width = #{width} AND height = #{height}),
			#{totalWeight},	1
		WHERE NOT EXISTS(SELECT * FROM product_box WHERE product_id = #{productId});

		RELEASE SAVEPOINT sql_updates;
		COMMIT;

	</update>

	<update id="updateCurrency" parameterType="Currency">		
		BEGIN;
		SAVEPOINT sql_updates;
	
		INSERT INTO currency (symbol, rate)
			SELECT #{symbol},
			#{rate};
		
		UPDATE user_profile
		SET currency_id=(SELECT id FROM currency 
							WHERE symbol=#{symbol}
							AND creation_date = (SELECT creation_date FROM currency 
													WHERE symbol=#{symbol} 
													ORDER BY creation_date DESC 
													LIMIT 1))
		WHERE currency_id=#{id};
		
		RELEASE SAVEPOINT sql_updates;
		COMMIT;
	</update>
	

	<update id="excludeProductsByBrandAndUser" parameterType="java.util.Map">		

		UPDATE user_product_price

		SET

		<if test="exclude==true">

			   price = NULL,

	           percent_profit=NULL,

	           percent_discount=NULL,

		</if>

			   is_excluded = #{exclude}

		WHERE  user_product_price.user_id=#{userId} AND status_id='2' AND

			   user_product_price.product_id IN

			   (SELECT P.id

			   FROM product P 

			   WHERE P.brand_id=#{brandId} AND 

			         P.id=user_product_price.product_id )			   

	</update>

	

	<update id="generatProfitByBrand" parameterType="java.util.Map">		

		BEGIN;

		SAVEPOINT sql_updates;

		

		UPDATE user_product_price SET percent_profit=#{percentProfit}

		WHERE user_product_price.user_id=#{userId} AND 

			user_product_price.product_id IN(

			SELECT P.id 

			FROM user_product_price UPP INNER JOIN (product P INNER JOIN brand_category BC ON P.category_id=BC.category_id) ON P.id=UPP.product_id

			WHERE BC.brand_id=#{brandId} AND UPP.user_id=#{userId} AND UPP.status_id!='1'

			);

		

		UPDATE user_product_price SET price=T.price

		FROM

			(SELECT	to_number(P.cost, '999999999.99')*(1+to_number(UPP.percent_profit, '999999999.99')*0.01)AS price, P.id AS product_id

			 FROM user_product_price UPP INNER JOIN (product P INNER JOIN brand_category BC ON P.category_id=BC.category_id) ON P.id=UPP.product_id

			 WHERE BC.brand_id=#{brandId} and UPP.user_id=#{userId} )AS T 

		WHERE user_product_price.user_id=#{userId} AND user_product_price.product_id=T.product_id AND user_product_price.status_id!='1';



		UPDATE user_product_price SET percent_discount=to_char((Y.def/Y.msrp)*100,'999D99S')

		FROM

			(SELECT P.id AS product_id,(to_number(P.msrp, '999999999.99')-to_number(UPP.price, '999999999.99'))AS def,

				<![CDATA[

				CASE 

				WHEN to_number(P.msrp, '999999999.99')<=0 THEN 1

				ELSE to_number(P.msrp, '999999999.99')

				END AS msrp

				]]>

			 FROM user_product_price UPP INNER JOIN (product P INNER JOIN brand_category BC ON P.category_id=BC.category_id) ON P.id=UPP.product_id

			 WHERE BC.brand_id=#{brandId} and UPP.user_id=#{userId})AS Y 

		WHERE user_product_price.user_id=#{userId} AND user_product_price.product_id=Y.product_id AND user_product_price.status_id!='1';

				

		RELEASE SAVEPOINT sql_updates;

		COMMIT;

	</update>	

	

	<update id="generatProfitByCategory" parameterType="java.util.Map">		

		BEGIN;

		SAVEPOINT sql_updates;

		

		UPDATE user_product_price SET percent_profit=#{percentProfit}

		WHERE user_product_price.user_id=#{userId} AND 

			user_product_price.product_id IN(

			SELECT P.id 

			FROM product P INNER JOIN user_product_price UPP ON P.id=UPP.product_id

			WHERE P.category_id=#{categoryId} and UPP.user_id=#{userId} AND UPP.status_id!='1'

			);

		

		UPDATE user_product_price SET price=T.price

		FROM

			(SELECT	to_number(P.cost, '999999999.99')*(1+to_number(UPP.percent_profit, '999999999.99')*0.01)AS price, P.id AS product_id

			 FROM product P INNER JOIN user_product_price UPP ON P.id=UPP.product_id

			 WHERE P.category_id=#{categoryId} AND UPP.user_id=#{userId})AS T 

		WHERE user_product_price.user_id=#{userId} AND user_product_price.product_id=T.product_id AND user_product_price.status_id!='1';



		UPDATE user_product_price SET percent_discount=to_char((Y.def/Y.msrp)*100,'999D99S')

		FROM

			(SELECT P.id AS product_id,(to_number(P.msrp, '999999999.99')-to_number(UPP.price, '999999999.99'))AS def,

				<![CDATA[

				CASE 

				WHEN to_number(P.msrp, '999999999.99')<=0 THEN 1

				ELSE to_number(P.msrp, '999999999.99')

				END AS msrp

				]]>

			 FROM product P INNER JOIN user_product_price UPP ON P.id=UPP.product_id

			 WHERE P.category_id=#{categoryId} and UPP.user_id=#{userId} )AS Y 

		WHERE user_product_price.user_id=#{userId} AND user_product_price.product_id=Y.product_id AND user_product_price.status_id!='1';

		

		RELEASE SAVEPOINT sql_updates;

		COMMIT;	

	</update>

	

	<update id="updateStockByLsProductId" parameterType="Product">

		UPDATE stock

		SET stock=#{stock}

		WHERE product_id IN(SELECT id FROM product WHERE loyalty_source_product_id=#{loyaltySourceProductId})

	</update>



	<update id="updateStock" parameterType="java.util.Map" >

	 	BEGIN;

		SAVEPOINT sql_updates;

		

		UPDATE stock

		SET stock=0;



		UPDATE stock SET stock=productListMapped.stock

		FROM

		(SELECT P.id AS productId,productList.stock

		FROM (

			<foreach item="item" index="index" collection="listStock" separator="  UNION " >

				SELECT	#{item.loyaltySourceProductId} AS loyaltySourceProductId,

				        #{item.stock} AS stock

			</foreach>

			)AS productList INNER JOIN product P ON productList.loyaltySourceProductId=P.loyalty_source_product_id 

		) AS productListMapped

		WHERE stock.product_id=productListMapped.productId;



		INSERT INTO stock (product_id,stock)

		SELECT P.id AS productId,productList.stock

		FROM(

			<foreach item="item" index="index" collection="listStock" separator="  UNION " >

				SELECT	#{item.loyaltySourceProductId} AS loyaltySourceProductId,

				        #{item.stock} AS stock

			</foreach>

			)AS productList INNER JOIN product P ON productList.loyaltySourceProductId=P.loyalty_source_product_id

		WHERE NOT EXISTS(SELECT* FROM stock ST WHERE ST.product_id= P.id);

		RELEASE SAVEPOINT sql_updates;

		COMMIT;	

	</update>

	<update id="transferToUserByCreationDateLatest"  parameterType="java.util.Map" >

		UPDATE user_profile SET 
			client_category_id=#{from}, 
			manager_id=#{managerId}
		WHERE user_id=#{to};

		UPDATE user_product_price SET
			price=U_PRO_P.price,
			price_type=U_PRO_P.price_type,
			status_id=U_PRO_P.status_upp,
			is_excluded=U_PRO_P.is_excluded,
			percent_profit=U_PRO_P.percent_profit,
			percent_discount=U_PRO_P.percent_discount,
			shipping_coverage=U_PRO_P.shipping_coverage,
			shipping_total_canada=U_PRO_P.shipping_total_canada
		FROM  (select *,UPP.status_id AS status_upp,P.id AS pproduct_id  from product P INNER JOIN user_product_price UPP ON P.id=UPP.product_id where P.creation_date >= #{updateDate} AND UPP.user_id=#{from})AS U_PRO_P
		WHERE user_product_price.product_id=U_PRO_P.pproduct_id AND user_product_price.user_id=#{to} AND user_product_price.status_id=2;

	</update>


	<update id="calculateShippingRate"  parameterType="java.util.Map" >
		BEGIN;
		SAVEPOINT sql_updates;
	
		LOCK shipping_province IN EXCLUSIVE  MODE;
		LOCK user_product_price IN EXCLUSIVE  MODE;
		LOCK user_profile IN EXCLUSIVE  MODE;
		LOCK user_account IN EXCLUSIVE  MODE;
		LOCK product IN EXCLUSIVE  MODE;
		LOCK product_box IN EXCLUSIVE  MODE;
		LOCK shipping_city IN EXCLUSIVE  MODE;
		LOCK shipping_total IN EXCLUSIVE  MODE;
		LOCK city IN EXCLUSIVE  MODE;
		<!-- (I)calculate the Average Shipping price (weighted) #-->
		<!--
		UPDATE shipping_province SET weighted_total_province=CASE WHEN T.stNB !='NOT AVAILABLE' AND T.stNB IS NOT NULL  THEN ROUND((TO_NUMBER(T.stNB, '999999999.99'))::numeric, 2)|| '' ELSE T.stNB END
		FROM
			(SELECT DISTINCT shipC.product_id AS product_id ,C.province_id AS province_id ,shipC.expedited_parcel_price AS stNB
			 FROM shipping_city shipC INNER JOIN city C ON shipC.city_id=C.id
			 WHERE 
			 shipC.product_id IN(SELECT id FROM product WHERE status_id IN(1,2,5)) AND
			 shipC.product_id=#{productId} AND
			 TO_NUMBER(C.population_percent, '999999999.99')>=(SELECT MAX(TO_NUMBER(CT.population_percent, '999999999.99')) FROM city CT WHERE CT.province_id=C.province_id GROUP BY CT.province_id)
			 )AS T  
		WHERE T.province_id=shipping_province.province_id AND 
			  T.product_id NOT IN(SELECT product_id FROM product_box WHERE box_id=1) AND
		      T.product_id=shipping_province.product_id  AND
		      T.product_id=#{productId};
		 -->
		<!-- (II)calculer les couvertures -->
		<!-- 
		UPDATE user_product_price SET shipping_coverage= 1.8 * TRUNC(NB)
		FROM
		    (SELECT userP.product_id,userP.user_id,userP.price,(to_number(userP.price, '999999999.99')/100)AS NB
			FROM user_product_price userP   
			WHERE product_id IN(SELECT id FROM product WHERE status_id IN(1,2,5)) AND
			      product_id=#{productId})AS T
		WHERE T.product_id=user_product_price.product_id AND
		      T.user_id=user_product_price.user_id AND      
		      T.price IS NOT NULL AND T.price!='' AND
		      T.product_id=#{productId} AND
		      T.product_id NOT IN(SELECT product_id FROM product_box WHERE box_id=1) AND
		      user_product_price.user_id=#{userId};
 		-->
		<!-- (III)calculer le shipping_total (average Shiopping Price by Province) -->
		UPDATE shipping_total SET average_shipping_total=CASE WHEN T.weighted_total_province !='NOT AVAILABLE' AND T.weighted_total_province IS NOT NULL  THEN ROUND((((T.insurance_multiplier*to_number(T.unit_price, '999999999.99')*0.01+to_number(T.weighted_total_province, '999999999.99'))*(1+to_number(T.multiplier, '999999999.99')*0.01)))::numeric, 2) || '' ELSE T.weighted_total_province END
		FROM
		    (SELECT product_id,province_id,weighted_total_province,(SELECT multiplier FROM user_profile WHERE user_id=#{userId}) AS multiplier,(SELECT shipping_insurance_multiplier FROM user_profile WHERE user_id=#{userId})AS insurance_multiplier,(SELECT CASE WHEN  price IS NULL OR price='' THEN '0' ELSE price END FROM user_product_price UPP WHERE user_id=#{userId} AND UPP.product_id=SHIPP.product_id) AS unit_price 
			 FROM shipping_province SHIPP  
			 WHERE SHIPP.product_id IN(SELECT id FROM product WHERE status_id IN(1,2,5)) AND
			       SHIPP.product_id=#{productId})AS T
		WHERE T.product_id=shipping_total.product_id AND
		      T.province_id=shipping_total.province_id AND 
		      shipping_total.product_id=T.product_id AND
		      shipping_total.product_id=#{productId} AND
		      shipping_total.product_id NOT IN(SELECT product_id FROM product_box WHERE box_id=1)AND
		      shipping_total.user_id=#{userId};
		      
		<!-- (IIII)calculer shipping total Canada (table: user_product_price+shipping_total+user_province_population) -->      
		UPDATE user_product_price SET shipping_total_canada=CASE WHEN T.perc !=0 THEN ROUND((T.shipT/T.perc)::numeric, 2)||'' ELSE 'NOT AVAILABLE' END 
		FROM(
		SELECT  SHIPT.product_id, SHIPT.user_id, SUM((to_number(SHIPT.average_shipping_total, '999999999.99')*to_number(UPVP.population_percent, '999999999.99')*0.01)) AS shipT,SUM(to_number(UPVP.population_percent, '999999999.99')*0.01) AS perc
		FROM shipping_total SHIPT INNER JOIN user_province_population UPVP ON SHIPT.province_id=UPVP.province_id AND SHIPT.user_id=UPVP.user_id 
		WHERE SHIPT.average_shipping_total ~ '^([0-9]+.?[0-9]*|.[0-9]+)$' AND SHIPT.user_id=#{userId} AND SHIPT.product_id=#{productId}
		GROUP BY SHIPT.product_id, SHIPT.user_id) AS T
		WHERE user_product_price.user_id=#{userId} AND user_product_price.product_id=T.product_id AND user_product_price.product_id=#{productId};      

		UPDATE user_product_price SET shipping_total_canada='NOT AVAILABLE'
		FROM(SELECT user_id, product_id,COUNT(*)AS NB 
		     FROM shipping_total shipT 
		     WHERE shipT.average_shipping_total='NOT AVAILABLE' AND 
		           shipT.product_id=#{productId} AND
		           shipT.product_id IN(SELECT id FROM product WHERE status_id IN(1,2,5)) 
		           GROUP BY shipT.user_id, shipT.product_id)AS T
		WHERE user_product_price.user_id=T.user_id AND 
		      user_product_price.product_id=T.product_id AND
		      user_product_price.product_id NOT IN(SELECT product_id FROM product_box WHERE box_id=1) AND
		      T.NB>=13 AND
		      T.product_id=#{productId} AND
		      user_product_price.user_id =#{userId};
					      
		RELEASE SAVEPOINT sql_updates;
		COMMIT;	      	
	</update>


	<update id="calculateShippingRateForAllProducts"  parameterType="java.util.Map" >
		BEGIN;
		SAVEPOINT sql_updates;
	
		LOCK shipping_province IN EXCLUSIVE  MODE;
		LOCK user_product_price IN EXCLUSIVE  MODE;
		LOCK user_profile IN EXCLUSIVE  MODE;
		LOCK user_account IN EXCLUSIVE  MODE;
		LOCK product IN EXCLUSIVE  MODE;
		LOCK product_box IN EXCLUSIVE  MODE;
		LOCK shipping_city IN EXCLUSIVE  MODE;
		LOCK shipping_total IN EXCLUSIVE  MODE;
		LOCK city IN EXCLUSIVE  MODE;
		<!-- (I)calculate the Average Shipping price (weighted) #-->
		UPDATE shipping_province SET weighted_total_province=CASE WHEN T.stNB !='NOT AVAILABLE' AND T.stNB IS NOT NULL  THEN ROUND((TO_NUMBER(T.stNB, '999999999.99'))::numeric, 2)|| '' ELSE T.stNB END
		FROM
			(SELECT DISTINCT shipC.product_id AS product_id ,C.province_id AS province_id ,shipC.expedited_parcel_price AS stNB
			 FROM shipping_city shipC INNER JOIN city C ON shipC.city_id=C.id
			 WHERE 
			 shipC.product_id IN(SELECT id FROM product WHERE status_id IN(1,2,5)) AND
			 TO_NUMBER(C.population_percent, '999999999.99')>=(SELECT MAX(TO_NUMBER(CT.population_percent, '999999999.99')) FROM city CT WHERE CT.province_id=C.province_id GROUP BY CT.province_id)
			 )AS T  
		WHERE T.province_id=shipping_province.province_id AND 
			  T.product_id NOT IN(SELECT product_id FROM product_box WHERE box_id=1) AND
		      T.product_id=shipping_province.product_id;

		<!-- (II)calculer les couvertures -->
		<!--
		UPDATE user_product_price SET shipping_coverage= 1.8 * TRUNC(NB)
		FROM
		    (SELECT userP.product_id,userP.user_id,userP.price,(to_number(userP.price, '999999999.99')/100)AS NB
			FROM user_product_price userP   WHERE product_id IN(SELECT id FROM product WHERE status_id IN(1,2,5)))AS T
		WHERE T.product_id=user_product_price.product_id AND
		      T.user_id=user_product_price.user_id AND      
		      T.price IS NOT NULL AND T.price!='' AND
		      T.product_id NOT IN(SELECT product_id FROM product_box WHERE box_id=1) AND
		      user_product_price.user_id=#{userId};
		-->
		<!-- (III)calculer le shipping_total (average Shiopping Price by Province) -->
		UPDATE shipping_total SET average_shipping_total=CASE WHEN T.weighted_total_province !='NOT AVAILABLE' AND T.weighted_total_province IS NOT NULL  THEN ROUND((((T.insurance_multiplier*to_number(T.unit_price, '999999999.99')*0.01+to_number(T.weighted_total_province, '999999999.99'))*(1+to_number(T.multiplier, '999999999.99')*0.01)))::numeric, 2) || '' ELSE T.weighted_total_province END
		FROM
		    (SELECT product_id,province_id,weighted_total_province,(SELECT multiplier FROM user_profile WHERE user_id=#{userId}) AS multiplier,(SELECT shipping_insurance_multiplier FROM user_profile WHERE user_id=#{userId})AS insurance_multiplier,(SELECT CASE WHEN  price IS NULL OR price='' THEN '0' ELSE price END FROM user_product_price UPP WHERE user_id=#{userId} AND UPP.product_id=SHIPP.product_id) AS unit_price 
			 FROM shipping_province SHIPP  WHERE SHIPP.product_id IN(SELECT id FROM product WHERE status_id IN(1,2,5)))AS T
		WHERE T.product_id=shipping_total.product_id AND
		      T.province_id=shipping_total.province_id AND 
		      shipping_total.product_id=T.product_id AND
		      shipping_total.product_id NOT IN(SELECT product_id FROM product_box WHERE box_id=1)AND
		      shipping_total.user_id=#{userId};
		      
		<!-- (IIII)calculer shipping total Canada (table: user_product_price+shipping_total+user_province_population) -->
		UPDATE user_product_price SET shipping_total_canada=CASE WHEN T.perc !=0 THEN ROUND((T.shipT/T.perc)::numeric, 2)||'' ELSE 'NOT AVAILABLE' END 
		FROM
			(SELECT  SHIPT.product_id, SHIPT.user_id, SUM((to_number(SHIPT.average_shipping_total, '999999999.99')*to_number(UPVP.population_percent, '999999999.99')*0.01)) AS shipT,SUM(to_number(UPVP.population_percent, '999999999.99')*0.01) AS perc
			 FROM shipping_total SHIPT INNER JOIN user_province_population UPVP ON SHIPT.province_id=UPVP.province_id AND SHIPT.user_id=UPVP.user_id 
			 WHERE SHIPT.average_shipping_total ~ '^([0-9]+.?[0-9]*|.[0-9]+)$' AND SHIPT.user_id=#{userId}
			 GROUP BY SHIPT.product_id, SHIPT.user_id) AS T
		WHERE user_product_price.user_id=#{userId} AND user_product_price.product_id=T.product_id;

		UPDATE user_product_price SET shipping_total_canada='NOT AVAILABLE'
		FROM(SELECT user_id, product_id,COUNT(*)AS NB 
			 FROM shipping_total shipT 
			 WHERE shipT.average_shipping_total='NOT AVAILABLE' AND shipT.product_id IN(SELECT id FROM product WHERE status_id IN(1,2,5)) GROUP BY shipT.user_id, shipT.product_id)AS T
		WHERE user_product_price.user_id=T.user_id AND 
		      user_product_price.product_id=T.product_id AND
		      user_product_price.product_id NOT IN(SELECT product_id FROM product_box WHERE box_id=1) AND
		      T.NB>=13 AND
		      user_product_price.user_id =#{userId};
						      
		RELEASE SAVEPOINT sql_updates;
		COMMIT;	
	</update>




<!-- ////////////////////////////////// SALE ///////////////////////////////// -->

	<update id="disableSaleWhenOutTime" parameterType="Long">

		<!-- 1:Change price by regular price if PSL.end_date<now()-->
		UPDATE user_product_price SET
		       price=ROUND((M.regular_price)::numeric, 2), 
		       percent_profit=ROUND((M.regular_percent_profit)::numeric, 2),
		       percent_discount=ROUND((M.regular_percent_discount)::numeric, 2)
		FROM (SELECT USL.id,USL.user_id AS userId,PSL.product_id AS productId,regular_price,regular_percent_profit,regular_percent_discount 
		      FROM product_sale PSL INNER JOIN user_sale USL ON PSL.id=USL.product_sale_id 
		      WHERE PSL.end_date IS NOT NULL AND 
		            PSL.end_date <![CDATA[<]]> DATE(NOW()) AND 
		            PSL.active IS TRUE AND  
		            USL.user_id=#{value} AND 
		            PSL.product_id IN
		            (SELECT id FROM product P WHERE p.status_id IN(1,2))) AS M
		WHERE user_product_price.user_id=#{value} AND 
		      user_product_price.product_id=M.productId AND
		      user_product_price.product_id IN
			  (SELECT id FROM product P WHERE p.status_id IN(1,2));

		<!-- 2:Change loyalty_source_product_id_sub and status-->

		UPDATE product SET
		       loyalty_source_product_id_sub=Y.loyalty_product_id_sub,
		       status_id=3
		FROM (SELECT PSL.product_id,PSL.loyalty_product_id_sub 
		      FROM product_sale PSL 
		      WHERE PSL.end_date IS NOT NULL AND PSL.end_date   <![CDATA[<]]>  DATE(NOW()) AND 
		             PSL.active IS TRUE AND 
		             PSL.loyalty_product_id_sub IS NOT NULL AND 
		             PSL.loyalty_product_id_sub!='' AND 
		             PSL.product_id IN
		             (SELECT id FROM product P WHERE p.status_id IN(1,2))) AS Y
		WHERE product.id=Y.product_id;
		
		<!-- 3:Change active user_sale to false-->
		UPDATE user_sale SET
		       active=FALSE
		FROM (SELECT PSL.id 
		      FROM product_sale PSL 
		      WHERE PSL.end_date IS NOT NULL AND PSL.end_date <![CDATA[<]]> DATE(NOW()) AND 
		      PSL.active IS TRUE AND
		      PSL.product_id IN
		      (SELECT id FROM product P WHERE p.status_id IN(1,2))) AS U
		WHERE user_sale.product_sale_id=U.id AND
		      user_sale.user_id=#{value};
		      
		<!-- 4:Change active product_sale to false-->
		UPDATE product_sale SET
		       active=FALSE
		WHERE end_date IS NOT NULL AND end_date <![CDATA[<]]>  DATE(NOW()) AND 
		      product_id IN
			 (SELECT id FROM product P WHERE p.status_id IN(1,2));
		
	</update>












	<!-- Deletes -->

	<delete id="deleteProductModelNumber" parameterType="ProductModelNumber">

		delete from product_model_number

		where id=#{id}	

	</delete>

	

	<delete id="deleteShippingTotalByUserId" parameterType="Long">

		delete from shipping_total where user_id=#{userId}

	</delete>



	<delete id="deleteUserProductPriceByUserId" parameterType="Long">

		delete from user_product_price where user_id=#{userId}

	</delete>

	

	<delete id="deleteAlterUserProductXMLByUserId" parameterType="Long">

		delete from alter_user_product_xml where user_id=#{userId}

	</delete>



	<delete id="deleteUserProvincePopulationByUserId" parameterType="Long">

		delete from user_province_population where user_id=#{userId};

	</delete>

	

</mapper>

