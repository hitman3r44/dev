what,kind,bundleId,bundleVersion,description,time
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1401827634339
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1401827635301
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1401827716965
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1401827724651
started,bundle,org.eclipse.wst.jsdt.manipulation,1.0.200.v201004150600,"org.eclipse.wst.jsdt.manipulation",1401827726110
started,bundle,org.eclipse.wst.jsdt.ui,1.1.4.v201102160540,"org.eclipse.wst.jsdt.ui",1401827726112
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1401827726488
executed,command,org.eclipse.ltk.ui.refactoring,3.5.0.v20100526-0800,"org.eclipse.ltk.ui.refactoring.commands.deleteResources",1401827726496
started,bundle,org.eclipse.jdt.junit.core,3.6.1.r361_v20100825-0800,"org.eclipse.jdt.junit.core",1401827730282
executed,command,org.tigris.subversion.subclipse.ui,1.6.18,"org.tigris.subversion.subclipse.ui.synchronize",1401827745570
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1401827745880
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1401827745921
opened,view,org.eclipse.team.ui,3.5.102.R36x_v20110203-1036,"org.eclipse.team.sync.views.SynchronizeView",1401827746240
activated,perspective,org.eclipse.team.ui,3.5.102.R36x_v20110203-1036,"org.eclipse.team.ui.TeamSynchronizingPerspective",1401827746258
activated,editor,org.eclipse.jdt.ui,3.6.2.r362_v20110203,"org.eclipse.jdt.ui.CompilationUnitEditor",1401827746290
activated,view,org.eclipse.team.ui,3.5.102.R36x_v20110203-1036,"org.eclipse.team.sync.views.SynchronizeView",1401827746376
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1401827761237
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.cut",1401827817205
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.paste",1401827820700
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1401827840086
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1401827840100
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1401827840412
executed,command,org.tigris.subversion.subclipse.ui,1.6.18,"org.tigris.subversion.subclipse.ui.commit",1401827840415
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1401827840434
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1401827841135
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1401827850025
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1401827891601
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1401827891624
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1401827891919
executed,command,org.tigris.subversion.subclipse.ui,1.6.18,"org.tigris.subversion.subclipse.ui.commit",1401827891922
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1401827891937
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1401827892132
activated,perspective,,,"Hamdoune",1401827901703
activated,editor,org.eclipse.jdt.ui,3.6.2.r362_v20110203,"org.eclipse.jdt.ui.CompilationUnitEditor",1401827901727
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1401827905602
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1401827912929
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1401827913435
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1401828988554
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1401828994804
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1401829010402
activated,view,org.eclipse.ui.ide,3.6.2.M20101201-0800,"org.eclipse.ui.views.ResourceNavigator",1401829013110
executed,command,org.tigris.subversion.subclipse.ui,1.6.18,"org.tigris.subversion.subclipse.ui.synchronize",1401829032037
activated,perspective,org.eclipse.team.ui,3.5.102.R36x_v20110203-1036,"org.eclipse.team.ui.TeamSynchronizingPerspective",1401829032401
activated,editor,org.eclipse.jdt.ui,3.6.2.r362_v20110203,"org.eclipse.jdt.ui.CompilationUnitEditor",1401829032426
activated,view,org.eclipse.team.ui,3.5.102.R36x_v20110203-1036,"org.eclipse.team.sync.views.SynchronizeView",1401829032460
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1401829032499
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1401829486916
activated,editor,org.eclipse.jdt.ui,3.6.2.r362_v20110203,"org.eclipse.jdt.ui.CompilationUnitEditor",1401829491186
activated,view,org.eclipse.team.ui,3.5.102.R36x_v20110203-1036,"org.eclipse.team.sync.views.SynchronizeView",1401829498738
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1401829504000
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1401829515418
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1401829515433
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1401829515727
executed,command,org.tigris.subversion.subclipse.ui,1.6.18,"org.tigris.subversion.subclipse.ui.commit",1401829515729
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1401829515748
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1401829516122
activated,perspective,,,"Hamdoune",1401829532623
activated,editor,org.eclipse.jdt.ui,3.6.2.r362_v20110203,"org.eclipse.jdt.ui.CompilationUnitEditor",1401829532649
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1401829588126
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1401829698735
started,bundle,org.eclipse.mylyn.java.tasks,3.4.0.v20100608-0100-e3x,"org.eclipse.mylyn.java.tasks",1401829705783
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1401829753176
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1401829862685
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1401829865105
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1401829890023
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.paste",1401829899752
started,bundle,org.eclipse.jdt.junit,3.6.1.r361_v20100825-0800,"org.eclipse.jdt.junit",1401829900976
started,bundle,org.eclipse.pde.launching,3.6.0.v20100601,"org.eclipse.pde.launching",1401829900994
started,bundle,org.eclipse.ui.views.log,1.0.100.v20110210_r362,"org.eclipse.ui.views.log",1401829900997
started,bundle,org.eclipse.pde.ui,3.6.1.v20110210_r362,"org.eclipse.pde.ui",1401829900999
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.copy",1401830012513
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.paste",1401830014381
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.cut",1401830072466
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.paste",1401830075201
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.delete",1401830079804
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.delete",1401830082320
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.delete",1401830082719
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.file.save",1401830086575
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1401830097220
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1401830382088
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1401830384159
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1401830404897
activated,view,org.eclipse.wst.server.ui,1.1.207.v20110119,"org.eclipse.wst.server.ui.ServersView",1401830404926
activated,view,org.eclipse.ui.ide,3.6.2.M20101201-0800,"org.eclipse.ui.views.ResourceNavigator",1401830410483
opened,editor,org.eclipse.jdt.ui,3.6.2.r362_v20110203,"org.eclipse.jdt.ui.PropertiesFileEditor",1401830420102
activated,editor,org.eclipse.jdt.ui,3.6.2.r362_v20110203,"org.eclipse.jdt.ui.PropertiesFileEditor",1401830420133
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.file.save",1401830429960
activated,editor,org.eclipse.jdt.ui,3.6.2.r362_v20110203,"org.eclipse.jdt.ui.CompilationUnitEditor",1401830432417
closed,editor,org.eclipse.jdt.ui,3.6.2.r362_v20110203,"org.eclipse.jdt.ui.PropertiesFileEditor",1401830432417
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1401830443690
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1401830585846
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1401830596229
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1401830596236
activated,view,org.eclipse.wst.server.ui,1.1.207.v20110119,"org.eclipse.wst.server.ui.ServersView",1401830596562
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1401830597694
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1401830609843
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1401830614623
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1401830614842
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1401830617853
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1401830620003
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1401830621872
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1401830622033
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1401830627205
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1401830787526
activated,editor,org.eclipse.jdt.ui,3.6.2.r362_v20110203,"org.eclipse.jdt.ui.CompilationUnitEditor",1401830789539
executed,command,org.eclipse.jdt.debug.ui,3.5.2.v20100928a_r362,"org.eclipse.jdt.debug.ui.localJavaShortcut.run",1401830792886
activated,view,org.eclipse.ui.console,3.5.0.v20100526,"org.eclipse.ui.console.ConsoleView",1401830794109
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1401830811465
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1401830927104
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1401830931141
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1401830939318
activated,editor,org.eclipse.jdt.ui,3.6.2.r362_v20110203,"org.eclipse.jdt.ui.CompilationUnitEditor",1401830939353
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1401831024731
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1401831039628
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.paste",1401831044525
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1401831064908
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1401831072216
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.paste",1401831076665
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.undo",1401831092064
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.undo",1401831092506
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.undo",1401831093951
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.undo",1401831094484
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.undo",1401831095022
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.undo",1401831095797
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.undo",1401831096487
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.undo",1401831096921
activated,view,org.eclipse.wst.server.ui,1.1.207.v20110119,"org.eclipse.wst.server.ui.ServersView",1401831112413
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1401831116160
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1401831117490
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1401831117800
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1401831130998
activated,editor,org.eclipse.jdt.ui,3.6.2.r362_v20110203,"org.eclipse.jdt.ui.CompilationUnitEditor",1401831131021
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1401831145103
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1401831146613
executed,command,org.eclipse.ui.ide,3.6.2.M20101201-0800,"org.eclipse.ui.project.cleanAction",1401831146618
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1401831146892
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1401831147154
error,log,,,"Exception occurred during problem detection:\n----------------------------------- SOURCE BEGIN -------------------------------------\npackage com.loyauty.service.orders;\n\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.PrintWriter;\nimport java.text.SimpleDateFormat;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Calendar;\nimport java.util.Collection;\nimport java.util.Date;\nimport java.util.HashSet;\nimport java.util.Hashtable;\nimport java.util.List;\nimport java.util.Set;\n\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\nimport jxl.Cell;\nimport jxl.Sheet;\nimport jxl.Workbook;\nimport jxl.format.Alignment;\nimport jxl.format.Border;\nimport jxl.format.BorderLineStyle;\nimport jxl.format.Colour;\nimport jxl.format.VerticalAlignment;\nimport jxl.write.DateFormat;\nimport jxl.write.DateTime;\nimport jxl.write.Label;\nimport jxl.write.WritableCell;\nimport jxl.write.WritableCellFormat;\nimport jxl.write.WritableFont;\nimport jxl.write.WritableSheet;\nimport jxl.write.WritableWorkbook;\n\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Element;\nimport org.w3c.dom.Node;\nimport org.w3c.dom.NodeList;\n\nimport lombok.Getter;\nimport lombok.Setter;\nimport com.loyauty.dao.core.DaoCommand;\nimport com.loyauty.dao.core.DaoManager;\nimport com.loyauty.dao.core.DaoManagerFactory;\nimport com.loyauty.exception.DaoException;\nimport com.loyauty.exception.ServiceException;\nimport com.loyauty.exception.ServiceLocatorException;\nimport com.loyauty.model.Orders;\nimport com.loyauty.model.OrdersRows;\nimport com.loyauty.model.OrdersSpecialShipping;\nimport com.loyauty.model.Product;\nimport com.loyauty.model.User;\nimport com.loyauty.model.UserFileRecovery;\nimport com.loyauty.model.UserFilesDownloaded;\nimport com.loyauty.service.ServiceImpl;\nimport com.loyauty.service.ServiceLocator;\nimport com.loyauty.service.core.DTOFactory;\nimport com.loyauty.service.core.dto.ItemMapDTO;\nimport com.loyauty.service.core.dto.OrdersDTO;\nimport com.loyauty.service.core.dto.OrdersSpecialShippingDTO;\nimport com.loyauty.service.core.dto.ProductDTO;\nimport com.loyauty.service.core.dto.ProvinceDTO;\nimport com.loyauty.service.core.dto.UserDTO;\nimport com.loyauty.service.core.dto.UserFileDataRecoveryDTO;\nimport com.loyauty.service.core.dto.UserFileRecoveryDTO;\nimport com.loyauty.service.core.dto.UserFilesDownloadedDTO;\nimport com.loyauty.service.core.dto.UserProductPriceDTO;\nimport com.loyauty.service.product.ProductService;\nimport com.loyauty.service.user.UserService;\n\n\npublic class OrdersServiceImpl extends ServiceImpl implements OrdersService {\n\n\t//======================================== Admin's Part ========================================\n\t@Setter @Getter\n\tprotected DaoManager daoManager;\n\t\n\tprivate static ServiceLocator serviceLocator;\n\tprivate static ProductService productService;\n\tprivate static UserService userService;\n\t\n\tpublic OrdersServiceImpl() {\n\t\tsetDaoManager(DaoManagerFactory.getDaoManager());\n\t\tserviceLocator = ServiceLocator.getInstance();\n\t\t\n\t}\n\n\t/**----------------------------------------------------------\n\t  *THIS METHOD ALLOW US TO TRANSLATE ORDER DTO TO ORDER*\n\t  -----------------------------------------------------------*/\t\n\tpublic static Orders buildOrder(OrdersDTO orderDTO){\n\t\tOrders order=new Orders();\n\t\torder.setClientCity(orderDTO.getClientCity());\n\t\torder.setClientEmail(orderDTO.getClientEmail());\n\t\torder.setClientFirstName(orderDTO.getClientFirstName());\n\t\torder.setClientLastName(orderDTO.getClientLastName());\n\t\torder.setClientNumber(orderDTO.getClientNumber());\n\t\torder.setClientOrderNumber(orderDTO.getClientOrderNumber());\n\t\torder.setClientOtherNames(orderDTO.getClientOtherNames());\n\t\torder.setClientOtherStreet(orderDTO.getClientOtherStreet());\n\t\torder.setClientPhone(orderDTO.getClientPhone());\n\t\torder.setClientPostalCode(orderDTO.getClientPostalCode());\n\t\torder.setClientProvince(orderDTO.getClientProvince());\n\t\torder.setClientStreet(orderDTO.getClientStreet());\n\t\torder.setCreationDate(orderDTO.getCreationDate());\n\t\torder.setId(orderDTO.getId());\n\t\torder.setLsOrderId(orderDTO.getLsOrderId());\n\t\torder.setProductOrderNumber(orderDTO.getProductOrderNumber());\n\t\torder.setRowsList(orderDTO.getRowsList());\n\t\torder.setUserId(orderDTO.getUserId());\n\t\treturn order;\n\t}\n\n\t/**----------------------------------------------------------\n\t  *GET USER_FILE_RECOVERY BY USER_LOGIN*\n\t  -----------------------------------------------------------*/\t\n\t@Override\n\tpublic UserFileRecoveryDTO getUserFileRecoveryByUser(final String login)\n\t\t\tthrows ServiceException {\n\n\t\tUserFileRecovery result=null;\t\t\n\t\ttry{\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tresult = (UserFileRecovery) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\n\t\t\t\t\treturn daoManager.getOrdersDao().getUserFileRecoveryByUser(login);\n\t\t\t\t}\n\t\t\t});\n\t\t}catch (DaoException de) {\n\t\t\ttry {\n\t\t\t\tthrow new ServiceException(de);\n\t\t\t} catch (ServiceException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\treturn (DTOFactory.getUserFileRecoveryDTO(result));\n\t}\n\n\n\n\t/**----------------------------------------------------------\n\t *UPDATE ORDERS ROWS BY LIKE LSORDER_ID, DATE, STATUS, CLIENT*\n\t  -----------------------------------------------------------*/\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<Orders> getAllOrders(){\n\t\tList<Orders> result=null;\n\t\ttry{\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tresult = (List<Orders>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\n\t\t\t\t\treturn daoManager.getOrdersDao().getAllOrders();\n\t\t\t\t}\n\t\t\t});\n\t\t}catch (DaoException de) {\n\t\t\ttry {\n\t\t\t\tthrow new ServiceException(de);\n\t\t\t} catch (ServiceException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**----------------------------------------------------------\n\t *GET INVOICED COUNT*\n\t  -----------------------------------------------------------*/\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic Long getCountInvoicedOrders(final Date creationDateStart,final Date creationDateEnd,final Integer factorDateBetween,\n\t\t\t\t\t\t\t\t\t   final String userLogin, final String lsOrderId,final String status){\n\t\tOrders result=null;\n\t\ttry{\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tresult = (Orders) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\n\t\t\t\t\treturn daoManager.getOrdersDao().getCountInvoicedOrders(creationDateStart,creationDateEnd,factorDateBetween,userLogin, lsOrderId,status);\n\t\t\t\t}\n\t\t\t});\n\t\t}catch (DaoException de) {\n\t\t\ttry {\n\t\t\t\tthrow new ServiceException(de);\n\t\t\t} catch (ServiceException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\tLong count=result.getCount();\n\t\treturn count;\n\t}\n\n\t\t \n\n\t/**----------------------------------------------------------\n\t *GET INVOICED COUNT*\n\t  -----------------------------------------------------------*/\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic Long getCountOrders(final Date creationDateStart,final Date creationDateEnd,final Integer factorDateBetween,\n\t\t\t\t\t\t       final String userLogin, final String lsOrderId,final String status){\n\t\tOrders result=null;\n\t\ttry{\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tresult = (Orders) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\n\t\t\t\t\treturn daoManager.getOrdersDao().getCountOrders(creationDateStart,creationDateEnd,factorDateBetween,userLogin,lsOrderId,status);\n\t\t\t\t}\n\t\t\t});\n\t\t}catch (DaoException de) {\n\t\t\ttry {\n\t\t\t\tthrow new ServiceException(de);\n\t\t\t}catch (ServiceException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\tLong count=result.getCount();\n\t\treturn count;\n\t}\n\n\t/**----------------------------------------------------------\n\t  *THIS FUNCTION ALLOWS US TO TRANSFORM AN XML FILE TO A LIST \n\t   OF ORDERS*\n\t  -----------------------------------------------------------*/\t\n\t@SuppressWarnings({ ""rawtypes"", ""unchecked"" })\n\t@Override\n\tpublic Collection  toArrayListFromXML(File orderFile,String userLogin)throws Exception {\n\t\tCollection listOrdersDTO = new ArrayList();\n\t\tUserFileRecoveryDTO ufrDTO;\n\t\tString formatDate="""";\n\t\tHashtable<String, String>lsOrdersIdHash=new Hashtable<String, String>();\n\t\t/*List<Orders>listOrders=getAllOrders();\n\t\tif(listOrders!=null){\n\t\t\tfor(Orders ord:listOrders){\n\t\t\t\tlsOrdersIdHash.put(ord.getLsOrderId(), ord.getLsOrderId());\n\t\t\t}\n\t\t}*/\n\t\tproductService = serviceLocator.getProductService();\n\t\t\n\t\tif(orderFile==null)return listOrdersDTO;\n\t    List<ProvinceDTO> listProvine= productService.getAllProvinces();\n\t    UserFileDataRecoveryDTO ufDataDTO=new UserFileDataRecoveryDTO();\n        DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();\n        DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder();\n        Document doc = docBuilder.parse (orderFile);\n        ufrDTO=getUserFileRecoveryByUser(userLogin);\n        // normalize text representation\n        doc.getDocumentElement ().normalize ();\n            \n        if(ufrDTO!=null && ufrDTO.getTagRoot()!=null  && ufrDTO.getFileTypeId()==1){\n           \tNodeList listOfOrders = doc.getElementsByTagName(ufrDTO.getTagRoot());\n            for(int s=0; s<listOfOrders.getLength() ; s++){\n               \tufDataDTO=new UserFileDataRecoveryDTO();\n               \tufDataDTO.setUserId(ufrDTO.getUserId());\n                Node firstOrderNode = listOfOrders.item(s);   \n                if(firstOrderNode.getNodeType() == Node.ELEMENT_NODE){\n                         Element firstOrderElement = (Element)firstOrderNode;\n                         //--------------- 1:companyHeader -----------\n                         String companyHeader="""";\n                         if(ufrDTO.getCompanyHeader()!=null){\n\t                         NodeList companyHeaderList = firstOrderElement.getElementsByTagName(ufrDTO.getCompanyHeader());\n\t                         if(companyHeaderList!=null && companyHeaderList.getLength()>0){\n\t\t                         Element companyHeaderElement = (Element)companyHeaderList.item(0);\n\t\t                         if(companyHeaderElement!=null){\n\t\t                        \t NodeList companyHeaderFNList = companyHeaderElement.getChildNodes();\n\t\t                        \t if(companyHeaderFNList!=null && companyHeaderFNList.getLength()>0){\n\t\t                        \t\t companyHeader =((Node)companyHeaderFNList.item(0)).getNodeValue().trim(); \n\t\t                        \t }\n\t\t                         }  \n\t                         }\n                         }\n                         ufDataDTO.setCompanyHeader(companyHeader);\n                         \n                         //--------------- 2:productOrderNumber ----------------\n                         String productOrderNumber="""";\n\t                     if(ufrDTO.getProductOrderNumber()!=null){\n\t                         NodeList productOrderNumberList = firstOrderElement.getElementsByTagName(ufrDTO.getProductOrderNumber());\n\t                         if(productOrderNumberList!=null && productOrderNumberList.getLength()>0){\n\t                        \t Element productOrderNumberElement = (Element)productOrderNumberList.item(0);\n\t\t                         if(productOrderNumberElement!=null){\n\t\t                        \t NodeList productOrderNumberFNList = productOrderNumberElement.getChildNodes(); \n\t\t                        \t if(productOrderNumberFNList!=null && productOrderNumberFNList.getLength()>0){\n\t\t                        \t\t productOrderNumber =((Node)productOrderNumberFNList.item(0)).getNodeValue().trim();\n\t\t                        \t }\n\t\t                         }\n\t                         }\n                         }\n                         ufDataDTO.setProductOrderNumber(productOrderNumber);                \n                         //--------------- 3:productOrderDate -----------------\n                         String productOrderDate="""";\n                         if(ufrDTO.getProductOrderDate()!=null){\n\t                         NodeList productOrderDateList = firstOrderElement.getElementsByTagName(ufrDTO.getProductOrderDate());\n\t                         if(productOrderDateList!=null && productOrderDateList.getLength()>0){\n\t\t                         Element productOrderDateElement = (Element)productOrderDateList.item(0);\n\t\t                         if(productOrderDateElement!=null){\n\t\t                        \t NodeList productOrderDateFNList = productOrderDateElement.getChildNodes();\n\t\t\t                         if(productOrderDateFNList!=null && productOrderDateFNList.getLength()>0){\n\t\t\t                        \t productOrderDate =((Node)productOrderDateFNList.item(0)).getNodeValue().trim();\n\t\t\t                        \t productOrderDate=productOrderDate.replaceAll(""^ +| +$|( )+"", ""$1"");\n\t\t\t                         }\n\t\t                         }\n\t                         }\n                         }\n                        formatDate=ufrDTO.getFormatDate();\n                        if(formatDate==null)formatDate="""";\n             \t\t\tSimpleDateFormat sdf = new SimpleDateFormat(formatDate);\n             \t\t\tDate dateOrder=null;\n            \t\t\ttry {\n            \t\t\t\tDate date = sdf.parse(productOrderDate);\n            \t\t\t\tdateOrder=date;\n            \t\t\t}\n            \t\t\tcatch (Exception pe) {\n            \t\t\t\tdateOrder=null;\n            \t\t\t}\n                        ufDataDTO.setProductOrderDate(dateOrder);\n\n                         //--------------- 4:quantity -------------------------\n                         String strQuantity="""";\n                         if(ufrDTO.getQuantity()!=null){\n\t                         NodeList quantityList = firstOrderElement.getElementsByTagName(ufrDTO.getQuantity());\n\t                         if(quantityList!=null && quantityList.getLength()>0){\n\t\t                         Element quantityElement = (Element)quantityList.item(0);\n\t\t                         if(quantityElement!=null){\n\t\t\t                         NodeList quantityFNList = quantityElement.getChildNodes();\n\t\t\t                         if(quantityFNList!=null && quantityFNList.getLength()>0){\n\t\t\t                        \t strQuantity =((Node)quantityFNList.item(0)).getNodeValue().trim();\n\t\t\t                        \t strQuantity=strQuantity.replaceAll("" "", """");\n\t\t\t                         }\n\t\t                         }\n\t                         }\n                         }\n                         \n     \t\t\t\t\tif(strQuantity!=null && !strQuantity.equals("""")){\n     \t\t\t\t\t\tint index=strQuantity.indexOf("","");\n     \t\t\t\t\t\tif(index>=0){\n     \t\t\t\t\t\t\tString strUnitPrice1=strQuantity.substring(0, index);\n     \t\t\t\t\t\t\tString strUnitPrice2= strQuantity.substring(index+1, strQuantity.length());\n     \t\t\t\t\t\t\tstrQuantity=strUnitPrice1+"".""+strUnitPrice2;\n     \t\t\t\t\t\t}\n     \t\t\t\t\t}\n     \t\t\t\t\tDouble quantity=null;\n                      \ttry {\n                      \t\tquantity = Double.parseDouble(strQuantity);\n                      \t}\n                      \tcatch (Exception pe) {\n                      \t\tquantity=null;\n                      \t}\n                        ufDataDTO.setQuantity(quantity);\n      \n                         //--------------- 5:lsProductID ----------------------\n                         String lsProductID="""";\n                         if(ufrDTO.getLsProductID()!=null){\n\t                         NodeList lsProductIDList = firstOrderElement.getElementsByTagName(ufrDTO.getLsProductID());\n\t                         if(lsProductIDList!=null && lsProductIDList.getLength()>0){\n\t                        \t Element lsProductIDElement = (Element)lsProductIDList.item(0);\n\t                        \t if(lsProductIDElement!=null){\n\t                        \t\t NodeList lsProductIDFNList = lsProductIDElement.getChildNodes();\n\t                        \t\t if(lsProductIDFNList!=null && lsProductIDFNList.getLength()>0){\n\t                        \t\t\t lsProductID =((Node)lsProductIDFNList.item(0)).getNodeValue().trim(); \n\t                        \t\t }\n\t                        \t }\n\t                         }\n                         }\n                         \n                         ufDataDTO.setLsProductID(lsProductID);\n\n                         //--------------- 6:productDescription ------------------\n                         String productDescription="""";\n                         if(ufrDTO.getProductDescription()!=null){\n\t                         NodeList productDescriptionList = firstOrderElement.getElementsByTagName(ufrDTO.getProductDescription());\n\t                         if(productDescriptionList!=null && productDescriptionList.getLength()>0){\n\t\t                         Element productDescriptionElement = (Element)productDescriptionList.item(0);\n\t\t                         if(productDescriptionElement!=null){\n\t\t                        \t NodeList productDescriptionFNList = productDescriptionElement.getChildNodes();\n\t\t\t                         if(productDescriptionFNList!=null && productDescriptionFNList.getLength()>0){\n\t\t\t                        \t productDescription =((Node)productDescriptionFNList.item(0)).getNodeValue().trim(); \n\t\t\t                         }\n\t\t                         }\n\t                         }\n                         }\n                         productDescription=productDescription.replaceAll("","", "" "");\n                         ufDataDTO.setProductDescription(productDescription);\n\n                         //--------------- 7:unitPrice ---------------------------\n                         String strUnitPrice="""";\n                         if(ufrDTO.getUnitPrice()!=null){\n\t                         NodeList unitPriceList = firstOrderElement.getElementsByTagName(ufrDTO.getUnitPrice());\n\t                         if(unitPriceList!=null && unitPriceList.getLength()>0){\n\t\t                         Element unitPriceElement = (Element)unitPriceList.item(0);\n\t\t                         if(unitPriceElement!=null){\n\t\t\t                         NodeList unitPriceFNList = unitPriceElement.getChildNodes();\n\t\t\t                         if(unitPriceFNList!=null && unitPriceFNList.getLength()>0){\n\t\t\t                        \t strUnitPrice =((Node)unitPriceFNList.item(0)).getNodeValue().trim();  \n\t\t\t                        \t strUnitPrice= strUnitPrice.replaceAll(""\\\\$"", """");\n\t\t\t         \t\t\t\t\t strUnitPrice= strUnitPrice.replaceAll("" "", """");\n\t\t\t                         }\n\t\t                         }\n\t                         }\n                         }\n                        \n    \t\t\t\t\tif(strUnitPrice!=null && !strUnitPrice.equals("""")){\n    \t\t\t\t\t\tint index=strUnitPrice.indexOf("","");\n    \t\t\t\t\t\tif(index>=0){\n    \t\t\t\t\t\t\tString strUnitPrice1=strUnitPrice.substring(0, index);\n    \t\t\t\t\t\t\tString strUnitPrice2= strUnitPrice.substring(index+1, strUnitPrice.length());\n    \t\t\t\t\t\t\tstrUnitPrice=strUnitPrice1+"".""+strUnitPrice2;\n    \t\t\t\t\t\t}\n    \t\t\t\t\t}\n                      \tDouble ProductUnitPrice=null;\n                      \ttry {\n                      \t\tProductUnitPrice = Double.parseDouble(strUnitPrice);\n                      \t}\n                      \tcatch (Exception pe) {\n                      \t\tProductUnitPrice=null;\n                      \t}\n                         ufDataDTO.setUnitPrice(ProductUnitPrice);\n\n                         //--------------- 8:clientNumber -------------------------\n                         String clientNumber="""";\n                         if(ufrDTO.getClientNumber()!=null){\n\t                         NodeList clientNumberList = firstOrderElement.getElementsByTagName(ufrDTO.getClientNumber());\n\t                         if(clientNumberList!=null && clientNumberList.getLength()>0){\n\t\t                         Element clientNumberElement = (Element)clientNumberList.item(0);\n\t\t                         if(clientNumberElement!=null){\n\t\t                        \t NodeList clientNumberFNList = clientNumberElement.getChildNodes();\n\t\t\t                         if(clientNumberFNList!=null && clientNumberFNList.getLength()>0){\n\t\t\t                        \t clientNumber =((Node)clientNumberFNList.item(0)).getNodeValue().trim(); \n\t\t\t                         }\n\t\t                         }\n\t                         }\n                         }\n                         ufDataDTO.setClientNumber(clientNumber);\n\n                         //--------------- 9:firstName ---------------------------\n                         String firstName="""";\n                         if(ufrDTO.getClientFirstName()!=null){\n\t                         NodeList firstNameList = firstOrderElement.getElementsByTagName(ufrDTO.getClientFirstName());\n\t                         if(firstNameList!=null && firstNameList.getLength()>0){\n\t\t                         Element firstNameElement = (Element)firstNameList.item(0);\n\t\t                         if(firstNameElement!=null){\n\t\t\t                         NodeList firstNameFNList = firstNameElement.getChildNodes();\n\t\t\t                         if(firstNameFNList!=null && firstNameFNList.getLength()>0){\n\t\t\t                        \t firstName =((Node)firstNameFNList.item(0)).getNodeValue().trim();\n\t\t\t                         }\n\t\t                         }\n\t                         }\n                         }\n                         ufDataDTO.setClientFirstName(firstName);\n\n                         //--------------- 10:lastName ---------------------------\n                         String lastName="""";\n                         if(ufrDTO.getClientLastName()!=null){\n\t                         NodeList lastNameList = firstOrderElement.getElementsByTagName(ufrDTO.getClientLastName());\n\t                         if(lastNameList!=null && lastNameList.getLength()>0){\n\t\t                         Element lastNameElement = (Element)lastNameList.item(0);\n\t\t                         if(lastNameElement!=null){\n\t\t\t                         NodeList lastNameFNList = lastNameElement.getChildNodes();\n\t\t\t                         if(lastNameFNList!=null && lastNameFNList.getLength()>0){\n\t\t\t                        \t lastName =((Node)lastNameFNList.item(0)).getNodeValue().trim();\n\t\t\t                         }\n\t\t                         }\n\t                         }\n                         }\n                         ufDataDTO.setClientLastName(lastName);\n\n                         //--------------- 11:addressStreet ----------------------\n                         String addressStreet="""";\n                         if(ufrDTO.getClientStreet()!=null){\n\t                         NodeList addressStreetList = firstOrderElement.getElementsByTagName(ufrDTO.getClientStreet());\n\t                         if(addressStreetList!=null && addressStreetList.getLength()>0){\n\t\t                         Element addressStreetElement = (Element)addressStreetList.item(0);\n\t\t                         if(addressStreetElement!=null){\n\t\t                        \t NodeList addressStreetFNList = addressStreetElement.getChildNodes();\n\t\t\t                         if(addressStreetFNList!=null && addressStreetFNList.getLength()>0){\n\t\t\t                        \t addressStreet =((Node)addressStreetFNList.item(0)).getNodeValue().trim();\n\t\t\t                         }\n\t\t                         }\n\t                         }\n                         }\n                         addressStreet=addressStreet.replaceAll("","", "" "");\n                         ufDataDTO.setClientStreet(addressStreet);\n\n                         //--------------- 12:addressStreetOther ----------------\n                         String addressStreetOther="""";\n                         if(ufrDTO.getClientOtherStreet()!=null){\n\t                         NodeList addressStreetOtherList = firstOrderElement.getElementsByTagName(ufrDTO.getClientOtherStreet());\n\t                         if(addressStreetOtherList!=null && addressStreetOtherList.getLength()>0){\n\t\t                         Element addressStreetOtherElement = (Element)addressStreetOtherList.item(0);\n\t\t                         if(addressStreetOtherElement!=null){\n\t\t\t                         NodeList addressStreetOtherFNList = addressStreetOtherElement.getChildNodes();\n\t\t\t                         if(addressStreetOtherFNList!=null && addressStreetOtherFNList.getLength()>0){\n\t\t\t                        \t addressStreetOther =((Node)addressStreetOtherFNList.item(0)).getNodeValue().trim();\n\t\t\t                         }\n\t\t                         }\n\t                         }\n                         }\n                         ufDataDTO.setClientOtherStreet(addressStreetOther);\n\n                         //--------------- 13:addressCity ------------------------\n                         String addressCity="""";\n                         if(ufrDTO.getClientCity()!=null){\n\t                         NodeList addressCityList = firstOrderElement.getElementsByTagName(ufrDTO.getClientCity());\n\t                         if(addressCityList!=null && addressCityList.getLength()>0){\n\t\t                         Element addressCityElement = (Element)addressCityList.item(0);\n\t\t                         if(addressCityElement!=null){\n\t\t                        \t NodeList addressCityLNList = addressCityElement.getChildNodes();\n\t\t\t                         if(addressCityLNList!=null && addressCityLNList.getLength()>0){\n\t\t\t                        \t addressCity =((Node)addressCityLNList.item(0)).getNodeValue().trim();\n\t\t\t                         }\n\t\t                         }\n\t                         }\n                         }\n                         ufDataDTO.setClientCity(addressCity);\n\n                         //--------------- 14:addressPostalCode ---------------------\n                         String addressPostalCode="" "";\n                         if(ufrDTO.getClientPostalCode()!=null){\n\t                         NodeList addressPostalCodeList = firstOrderElement.getElementsByTagName(ufrDTO.getClientPostalCode());\n\t                         if(addressPostalCodeList!=null && addressPostalCodeList.getLength()>0){\n\t\t                         Element addressPostalCodeElement = (Element)addressPostalCodeList.item(0);\n\t\t                         if(addressPostalCodeElement!=null){\n\t\t                        \t NodeList addressPostalCodeLNList = addressPostalCodeElement.getChildNodes();\n\t\t                        \t if(addressPostalCodeLNList!=null && addressPostalCodeLNList.getLength()>0){\n\t\t                        \t\t addressPostalCode =((Node)addressPostalCodeLNList.item(0)).getNodeValue().trim();  \n\t\t                        \t }\n\t\t                         }\n\t                         }\n                         }\n                         addressPostalCode=addressPostalCode.replaceAll("" "", """");\n                         ufDataDTO.setClientPostalCode(addressPostalCode);\n\n                         //--------------- 15:addressState -------------------------\n                         String addressState="""";\n                         if(ufrDTO.getClientProvince()!=null){\n\t                         NodeList addressStateList = firstOrderElement.getElementsByTagName(ufrDTO.getClientProvince());\n\t                         if(addressStateList!=null && addressStateList.getLength()>0){\n\t\t                         Element addressStateElement = (Element)addressStateList.item(0);\n\t\t                         if(addressStateElement!=null){\n\t\t                        \t NodeList addressStateLNList = addressStateElement.getChildNodes();\n\t\t                        \t if(addressStateLNList!=null && addressStateLNList.getLength()>0){\n\t\t                        \t\taddressState =((Node)addressStateLNList.item(0)).getNodeValue().trim(); \n\t\t                  \t\t\t\tString clientProvinceToCompar=addressState.toLowerCase();\n\t\t                 \t\t\t\tclientProvinceToCompar=clientProvinceToCompar.replaceAll("" "", """");\n\t\t                 \t\t\t\tclientProvinceToCompar=clientProvinceToCompar.replaceAll(""canada"", """");\n\t\t                 \t\t\t\tclientProvinceToCompar=clientProvinceToCompar.replaceAll("","", """");\n\t\t                 \t\t\t\tclientProvinceToCompar=clientProvinceToCompar.replaceAll(""\\\\."", """");\n\t\t                 \t\t\t\tfor(ProvinceDTO prov:listProvine){\n\t\t                 \t\t\t\t\tString provName=prov.getName();\n\t\t                 \t\t\t\t\tprovName=provName.replaceAll("" "", """");\n\t\t                 \t\t\t\t\tprovName= provName.toLowerCase();\n\t\t                 \t\t\t\t\tif(clientProvinceToCompar.equals(provName) || clientProvinceToCompar.equals(prov.getCode()) ){\n\t\t                 \t\t\t\t\t\taddressState=\tprov.getCode();\n\t\t                 \t\t\t\t\t\tbreak;\n\t\t                 \t\t\t\t\t}\n\t\t                 \t\t\t\t}\n\t\t                 \t\t\t\taddressState=addressState.replaceAll(""\\\\."", """");\n\t\t                 \t\t\t\tif(clientProvinceToCompar.equals(""""))addressState=""""; \n\t\t                        \t }\n\t\t                         }\n\t                         }\n                         }\n                         ufDataDTO.setClientProvince(addressState);\n\n                         //--------------- 16:clientPhone --------------------------\n                         String clientPhone="""";\n                         if(ufrDTO.getClientPhone()!=null){\n\t                         NodeList clientPhoneList = firstOrderElement.getElementsByTagName(ufrDTO.getClientPhone());\n\t                         if(clientPhoneList!=null && clientPhoneList.getLength()>0){\n\t\t                         Element clientPhoneElement = (Element)clientPhoneList.item(0);\n\t\t                         if(clientPhoneElement!=null){\n\t\t                        \t NodeList clientPhoneLNList = clientPhoneElement.getChildNodes();\n\t\t                        \t if(clientPhoneLNList!=null && clientPhoneLNList.getLength()>0){\n\t\t                        \t\t clientPhone =((Node)clientPhoneLNList.item(0)).getNodeValue().trim(); \n\t\t                        \t }\n\t\t                         }\n\t                         }\n                         }\n\n                         //--------------- 17:client_phone_zone -------------------------\n                         String clientPhoneZone="""";\n                         if(ufrDTO.getClientPhoneZone()!=null){\n\t                         NodeList clientPhoneZoneList = firstOrderElement.getElementsByTagName(ufrDTO.getClientPhoneZone());\n\t                         if(clientPhoneZoneList!=null && clientPhoneZoneList.getLength()>0){\n\t \t                         Element clientPhoneZoneElement = (Element)clientPhoneZoneList.item(0);\n\t \t                         if(clientPhoneZoneElement!=null){\n\t \t                        \t NodeList clientPhoneZoneLNList = clientPhoneZoneElement.getChildNodes();\n\t \t                        \t if(clientPhoneZoneLNList!=null && clientPhoneZoneLNList.getLength()>0){\n\t \t                        \t\tclientPhoneZone =((Node)clientPhoneZoneLNList.item(0)).getNodeValue().trim(); \n\t \t                        \t }\n\t \t                         }\n\t                         }\n                         }\n                         if(clientPhoneZone!=null && !clientPhoneZone.equals(""""))clientPhone=clientPhoneZone+"" ""+clientPhone;\n                         ufDataDTO.setClientPhone(clientPhone);\n\n                         //--------------- 18:clientEmail -------------------------\n                         String clientEmail="""";\n                         if(ufrDTO.getClientEmail()!=null){\n\t                         NodeList clientEmailList = firstOrderElement.getElementsByTagName(ufrDTO.getClientEmail());\n\t                         if(clientEmailList!=null && clientEmailList.getLength()>0){\n\t\t                         Element clientEmailElement = (Element)clientEmailList.item(0);\n\t\t                         if(clientEmailElement!=null){\n\t\t                        \t NodeList clientEmailLNList = clientEmailElement.getChildNodes();\n\t\t                        \t if(clientEmailLNList!=null && clientEmailLNList.getLength()>0){\n\t\t                        \t\t clientEmail =((Node)clientEmailLNList.item(0)).getNodeValue().trim(); \n\t\t                        \t }\n\t\t                         }\n\t                         }\n                         }\n                         ufDataDTO.setClientEmail(clientEmail);\n\n                         //--------------- 19:requiredDate -------------------------\n                         String requiredDate="""";\n                         if(ufrDTO.getRequiredDate()!=null){\n\t                         NodeList requiredDateList = firstOrderElement.getElementsByTagName(ufrDTO.getRequiredDate());\n\t                         if(requiredDateList!=null && requiredDateList.getLength()>0){\n\t\t                         Element requiredDateElement = (Element)requiredDateList.item(0);\n\t\t                         if(requiredDateElement!=null){\n\t\t                        \t NodeList requiredDateLNList = requiredDateElement.getChildNodes();\n\t\t                        \t if(requiredDateLNList!=null && requiredDateLNList.getLength()>0){\n\t\t                        \t\t requiredDate =((Node)requiredDateLNList.item(0)).getNodeValue().trim(); \n\t\t                        \t\t requiredDate=requiredDate.replaceAll("" "", """");\n\t\t                        \t }\n\t\t                         }\n\t                         }\n                         }\n                        formatDate=ufrDTO.getFormatDate();\n                        if(formatDate==null)formatDate="""";\n                        sdf = new SimpleDateFormat(formatDate);\n              \t\t\tDate requiredDateOrder=null;\n             \t\t\ttry {\n             \t\t\t\tDate date = sdf.parse(requiredDate);\n             \t\t\t\trequiredDateOrder=date;\n             \t\t\t}\n             \t\t\tcatch (Exception pe) {\n             \t\t\t\trequiredDateOrder=null;\n             \t\t\t}                     \n                        ufDataDTO.setRequiredDate(requiredDateOrder);\n                         \n                        //--------------- 20:clients_other_names -------------------------\n                        String clientsOtherNames="""";\n                        if(ufrDTO.getClientOtherNames()!=null){\n\t                        NodeList clientsOtherNamesList = firstOrderElement.getElementsByTagName(ufrDTO.getClientOtherNames());\n\t                        if(clientsOtherNamesList!=null && clientsOtherNamesList.getLength()>0){\n\t\t                         Element clientsOtherNamesElement = (Element)clientsOtherNamesList.item(0);\n\t\t                         if(clientsOtherNamesElement!=null){\n\t\t                        \t NodeList clientsOtherNamesLNList = clientsOtherNamesElement.getChildNodes();\n\t\t                        \t if(clientsOtherNamesLNList!=null && clientsOtherNamesLNList.getLength()>0){\n\t\t                        \t\t clientsOtherNames =((Node)clientsOtherNamesLNList.item(0)).getNodeValue().trim(); \n\t\t                        \t }\n\t\t                         }\n\t                        }\n                        }\n                        ufDataDTO.setClientOtherNames(clientsOtherNames);\n\n                        //--------------- 21:lsOrderId ------------------------\n                        String code=userLogin.substring(0, 2).toUpperCase();\n                        String lsOrderId=ufDataDTO.getProductOrderNumber();\n                   \n                       int inc=0;//increment\n                       String lsOrderIdParent=lsOrderId;\n                       lsOrderIdParent=lsOrderIdParent.replaceFirst(""-"", """");\n                       lsOrderIdParent=lsOrderIdParent.replaceFirst(""_"", """");\n                       lsOrderIdParent=lsOrderIdParent.replaceFirst(""R"", """");\n                       lsOrderIdParent=lsOrderIdParent.replaceAll("" "", """");\n                       if(lsOrderIdParent.length()>14){\n                       \tint index=lsOrderIdParent.length()-14;\n                       \tlsOrderIdParent=lsOrderIdParent.substring(index, lsOrderIdParent.length());\n                       }\n                       String lsOrderIdToGenerate=code+""O""+ufDataDTO.getUserId()+lsOrderIdParent;;\n                       while(isLsOrderIdUsed(lsOrderIdToGenerate) || lsOrdersIdHash.containsKey(lsOrderIdToGenerate)){\n       \t               \tinc++; \n                           lsOrderIdToGenerate=code+""O""+ufDataDTO.getUserId()+lsOrderIdParent+""R""+inc;\n                       }\n                       lsOrdersIdHash.put(lsOrderIdToGenerate, lsOrderIdToGenerate);\n                       ufDataDTO.setLsOrderId(lsOrderIdToGenerate);\n                        \n                        //--------------- 22:clients_other_names -------------------------\n                        String shippingCompany="""";\n                        if(ufrDTO.getShippingCompany()!=null){\n\t                        NodeList shippingCompanyList = firstOrderElement.getElementsByTagName(ufrDTO.getShippingCompany());\n\t                        if(shippingCompanyList!=null && shippingCompanyList.getLength()>0){\n\t\t                         Element shippingCompanyElement = (Element)shippingCompanyList.item(0);\n\t\t                         if(shippingCompanyElement!=null){\n\t\t                        \t NodeList shippingCompanyLNList = shippingCompanyElement.getChildNodes();\n\t\t                        \t if(shippingCompanyLNList!=null && shippingCompanyLNList.getLength()>0){\n\t\t                        \t\t shippingCompany =((Node)shippingCompanyLNList.item(0)).getNodeValue().trim(); \n\t\t                        \t }\n\t\t                         }\n\t                        }\n                        }\n                        ufDataDTO.setShippingCompany(shippingCompany);\n                        \n                        //--------------- 23:Notes -------------------------\n                        String notes="""";\n                        if(ufrDTO.getNotes()!=null){\n\t                        NodeList notesList = firstOrderElement.getElementsByTagName(ufrDTO.getNotes());\n\t                        if(notesList!=null && notesList.getLength()>0){\n\t\t                         Element notesElement = (Element)notesList.item(0);\n\t\t                         if(notesElement!=null){\n\t\t                        \t NodeList notesLNList = notesElement.getChildNodes();\n\t\t                        \t if(notesLNList!=null && notesLNList.getLength()>0){\n\t\t                        \t\t notes =((Node)notesLNList.item(0)).getNodeValue().trim(); \n\t\t                        \t }\n\t\t                         }\n\t                        }\n                        }\n                        ufDataDTO.setNotes(notes);\n                        \n                        \n                        //--------------- 24:Notes -------------------------\n                        String clientProductNumber="""";\n                        if(ufrDTO.getClientProductNumber()!=null){\n\t                        NodeList clientProductNumberList = firstOrderElement.getElementsByTagName(ufrDTO.getClientProductNumber());\n\t                        if(clientProductNumberList!=null && clientProductNumberList.getLength()>0){\n\t\t                         Element clientProductNumberElement = (Element)clientProductNumberList.item(0);\n\t\t                         if(clientProductNumberElement!=null){\n\t\t                        \t NodeList clientProductNumberLNList = clientProductNumberElement.getChildNodes();\n\t\t                        \t if(clientProductNumberLNList!=null && clientProductNumberLNList.getLength()>0){\n\t\t                        \t\t clientProductNumber =((Node)clientProductNumberLNList.item(0)).getNodeValue().trim(); \n\t\t                        \t }\n\t\t                         }\n\t                        }\n                        }\n                        ufDataDTO.setClientProductNumber(clientProductNumber);\n                        \n                      //--------------- 25:clientOtherId -------------------------\n                        String clientOtherId="""";\n                        if(ufrDTO.getClientOtherId()!=null){\n\t                        NodeList clientOtherIdList = firstOrderElement.getElementsByTagName(ufrDTO.getClientOtherId());\n\t                        if(clientOtherIdList!=null && clientOtherIdList.getLength()>0){\n\t\t                         Element clientOtherIdElement = (Element)clientOtherIdList.item(0);\n\t\t                         if(clientOtherIdElement!=null){\n\t\t                        \t NodeList clientOtherIdLNList = clientOtherIdElement.getChildNodes();\n\t\t                        \t if(clientOtherIdLNList!=null && clientOtherIdLNList.getLength()>0){\n\t\t                        \t\t clientOtherId =((Node)clientOtherIdLNList.item(0)).getNodeValue().trim(); \n\t\t                        \t }\n\t\t                         }\n\t                        }\n                        }\n                        ufDataDTO.setClientOtherId(clientOtherId);\n \n                        ufDataDTO.setCreationDate(new Date());\n                        \n                        listOrdersDTO.add(ufDataDTO);\n                     }//end of if clause\n                }//end of for loop with s var\n           }//end if with condition ufrDTO!=null \n\t\treturn listOrdersDTO;\n\t}\n\n\t/**----------------------------------------------------------\n\t  *THIS FUNCTION ALLOWS US TO TRANSFORM AN XLS FILE TO A LIST \n\t   OF ORDERS*\n\t  -----------------------------------------------------------*/\t\n\t@SuppressWarnings({ ""rawtypes"", ""unchecked"" })\n\t@Override\n\tpublic Collection toArrayListFromXLS(File orderFile,String userLogin) throws Exception {\n\n\t\tUserFileRecoveryDTO ufrDTO=null;\n\t\tHashtable<String, String>lsOrdersIdHash=new Hashtable<String, String>();\n\t\t/*List<Orders>listOrders=getAllOrders();\n\t\tif(listOrders!=null){\n\t\t\tfor(Orders ord:listOrders){\n\t\t\t\tlsOrdersIdHash.put(ord.getLsOrderId(), ord.getLsOrderId());\n\t\t\t}\n\t\t}*/\n\t\t\n\t\tufrDTO=getUserFileRecoveryByUser(userLogin);\n\t\tproductService = serviceLocator.getProductService();\n\n\t\tCollection listOrderDTO = new ArrayList();\n\t\t\n\t\tif(orderFile!=null && ufrDTO!=null && (ufrDTO.getFileTypeId()==2 || ufrDTO.getFileTypeId()==3 )){\n\t\t\t//variable indicating the numbers of columns in the XLS file\n\t\t\tint ROW_TO_START = 1;\n\t\t\tint COL_COMPANY_HEADER=Integer.parseInt(ufrDTO.getCompanyHeader())-1 ;\n\t\t\tint COL_PRODUCT_ORDER_NUMBER=Integer.parseInt(ufrDTO.getProductOrderNumber())-1;//poNumber\n\t\t\tint COL_PRODUCT_ORDER_DATE=Integer.parseInt(ufrDTO.getProductOrderDate())-1; //poDate\n\t\t\tint COL_QUANTITY=Integer.parseInt(ufrDTO.getQuantity())-1;//quantity\n\t\t\tint COL_LS_PRODUCT_ID=Integer.parseInt(ufrDTO.getLsProductID())-1;//productId\n\t\t\tint COL_CLIENT_PRODUCT_NUMBER=Integer.parseInt(ufrDTO.getClientProductNumber())-1;//productId\n\t\t\tint COL_PRODUCT_DESCRIPTION=Integer.parseInt(ufrDTO.getProductDescription())-1;//description\t\n\t\t\tint COL_UNIT_PRICE=Integer.parseInt(ufrDTO.getUnitPrice())-1; //price\n\t\t\tint COL_CLIENT_NUMBER=Integer.parseInt(ufrDTO.getClientNumber())-1;//clientNumber\n\t\t\tint COL_FIRST_NAME=Integer.parseInt(ufrDTO.getClientFirstName())-1;//clientFirstName\n\t\t\tint COL_LAST_NAME=Integer.parseInt(ufrDTO.getClientLastName())-1; //clientLastName\n\t\t\tint COL_ADDRESSS_TREET=Integer.parseInt(ufrDTO.getClientStreet())-1; //clientAdress\n\t\t\tint COL_ADDRESSS_TREET_OTHER=Integer.parseInt(ufrDTO.getClientOtherStreet())-1;//clientAdressOther\n\t\t\tint COL_ADDRESS_CITY=Integer.parseInt(ufrDTO.getClientCity())-1;//clientCity\n\t\t\tint COL_ADDRESS_POSTAL_CODE=Integer.parseInt(ufrDTO.getClientPostalCode())-1;//clientPostalCode\n\t\t\tint COL_ADDRESS_STATE=Integer.parseInt(ufrDTO.getClientProvince())-1;//clientProvince\t\n\t\t\tint COL_CLIENT_PHONE=Integer.parseInt(ufrDTO.getClientPhone())-1;//clientPhone\n\t\t\tint COL_CLIENT_EMAIL=Integer.parseInt(ufrDTO.getClientEmail())-1;//clientEmail\n\t\t\t\n\t\t\tint COL_REQUIRE_DATE=Integer.parseInt(ufrDTO.getRequiredDate())-1;//requiredDate\n\t\t\tint COL_CLIENT_OTHER_NAMES=Integer.parseInt(ufrDTO.getClientOtherNames())-1;//clientsOtherNames\n\t\t\tint COL_CLIENT_PHONE_ZONE=Integer.parseInt(ufrDTO.getClientPhoneZone())-1;//clientPhoneZone\n\t\t\tint CLIENT_ORDER_NUMBER=Integer.parseInt(ufrDTO.getClientOrderNumber())-1;\n\t\t\tint CST_PRODUCT_NUMBER=Integer.parseInt(ufrDTO.getCstProductNumber())-1;\n\t\t\tint SHIPPING_COMPANY=Integer.parseInt(ufrDTO.getShippingCompany())-1;;\n\t\t\tint NOTES=Integer.parseInt(ufrDTO.getNotes())-1;\n\t\t\tint COL_CLIENT_OTHER_ID=Integer.parseInt(ufrDTO.getClientOtherId())-1;\n\n\t\t\t//Values of cells\n\t\t\tString companyHeader="""";\n\t\t\tString productOrderNumber="""";//poNumber\n\t\t\tString clientOrderNumber="""";\n\t\t\tString cstProductNumber="""";\n\t\t\tString shippingCompany="""";\n\t\t\tString notes;\n\t\t\tDate productOrderDate; //poDate\n\t\t\tDouble quantity=0D;//quantity\n\t\t\tString lsProductID="""";//productId\n\t\t\tString productDescription="""";//description\t\n\t\t\tDouble unitPrice=0D; //price\n\t\t\tString clientNumber="""";//clientNumber\n\t\t\tString clientFirstName="""";//clientFirstName\n\t\t\tString clientLastName=""""; //clientLastName\n\t\t\tString clientStreet=""""; //clientAdress\n\t\t\tString clientOtherStreet="""";//clientAdressOther\n\t\t\tString clientCity="""";//clientCity\n\t\t\tString clientPostalCode="" "";//clientPostalCode\n\t\t\tString clientProvince="""";//clientProvince\t\n\t\t\tString clientPhone="""";//clientPhone\n\t\t\tString clientEmail="""";//clientEmail\t\n\t\t\tDate   requiredDate=null;\n\t\t\tString clientOtherNames="""";\n\t\t\tString clientPhoneZone = """";\n\t\t\tString clientProductNumber = """";\n\t\t\tString clientOtherId="""";\n\n\t\t\t//Cells\n\t\t\tCell cellClientProductNumber=null;\n\t\t\tCell cellCompanyHeader= null;\n\t\t\tCell cellProductOrderNumber= null;//poNumber\n\t\t\tCell cellProductOrderDate= null;//poDate\n\t\t\tCell cellQuantity= null;//quantity\n\t\t\tCell cellLsProductID= null;;//productId\n\t\t\tCell cellProductDescription= null;//description\t\n\t\t\tCell cellUnitPrice= null;//price\n\t\t\tCell cellClientNumber= null;//clientNumber\n\t\t\tCell cellClientFirstName= null;//clientFirstName\n\t\t\tCell cellClientLastName= null; //clientLastName\n\t\t\tCell cellClientStreet= null;//clientAdress\n\t\t\tCell cellClientOtherStreet= null;//clientAdressOther\n\t\t\tCell cellClientCity= null;//clientCity\n\t\t\tCell cellClientPostalCode= null;//clientPostalCode\n\t\t\tCell cellClientProvince= null;//clientProvince\t\n\t\t\tCell cellClientPhone= null;//clientPhone\n\t\t\tCell cellClientEmail= null;//clientEmail\t\n\t\t\tCell cellRequiredDate=null;\t\t//requiredDate\n\t\t\tCell cellClientOtherNames=null; //clientsOtherNames\n\t\t\tCell cellClientPhoneZone = null;\t//clientPhoneZone\n\t\t\tCell cellClientOrderNumber=null;\n\t\t\tCell cellCstProductNumber=null;\n\t\t\tCell cellShippingCompany=null;\n\t\t\tCell cellNotes=null;\n\t\t\tCell cellClientOtherId=null;\n\n\t\t//try {\n\t\t\tList<ProvinceDTO> listProvine= productService.getAllProvinces();\n\t\t\tWorkbook existingWorkbook = Workbook.getWorkbook(orderFile);\n\t\t\tSheet sheetToRead=existingWorkbook.getSheet(0);\n\t\t\tint ROW_MAX = sheetToRead.getRows();\n\t\t\t\n\t\t\tfor(int row=ROW_TO_START; row< ROW_MAX;row++) {\n\n\t\t\t\t/*cellProductOrderNumber = sheetToRead.getCell(13, 1);\t\t\t\n\t\t\t\tif(cellProductOrderNumber!=null)productOrderNumber = cellProductOrderNumber.getContents();\n\n\t\t\t\tcellProductOrderNumber = sheetToRead.getCell(13, 2);\t\t\t\n\t\t\t\tif(cellProductOrderNumber!=null)productOrderNumber = cellProductOrderNumber.getContents();*/\n\t\t\t\t\n\t\t\t\tUserFileDataRecoveryDTO ufDataDTO=new UserFileDataRecoveryDTO();\n\t\t\t\tufDataDTO.setUserId(ufrDTO.getUserId());\n\t\t\t\t//--------------- 1: poNumber.\n\t\t\t\tif(COL_PRODUCT_ORDER_NUMBER>=0)cellProductOrderNumber = sheetToRead.getCell(COL_PRODUCT_ORDER_NUMBER, row);\t\t\t\n\t\t\t\tif(cellProductOrderNumber!=null)productOrderNumber = cellProductOrderNumber.getContents();\n\t\t\t\tufDataDTO.setProductOrderNumber(productOrderNumber);\n\t\t\t\t\n\t\t\t\t//--------------- 2: clientOrderNumber.\n\t\t\t\tif(CLIENT_ORDER_NUMBER>=0)cellClientOrderNumber = sheetToRead.getCell(CLIENT_ORDER_NUMBER, row);\t\t\t\n\t\t\t\tif(cellClientOrderNumber!=null)clientOrderNumber = cellClientOrderNumber.getContents();\n\t\t\t\tufDataDTO.setClientOrderNumber(clientOrderNumber);\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t//--------------- 3: cstProductNumber.\n\t\t\t\tif(CST_PRODUCT_NUMBER>=0)cellCstProductNumber = sheetToRead.getCell(CST_PRODUCT_NUMBER, row);\t\t\t\n\t\t\t\tif(cellCstProductNumber!=null)cstProductNumber = cellCstProductNumber.getContents();\n\t\t\t\tufDataDTO.setCstProductNumber(cstProductNumber);\n\t\t\t\t\n\t\t\t\t//shippingCompany\n\n\t\t\t\t//--------------- 2: companyHeader\n\t\t\t\tif(COL_COMPANY_HEADER>=0)cellCompanyHeader = sheetToRead.getCell(COL_COMPANY_HEADER, row);\t\t\t\n\t\t\t\tif(cellCompanyHeader!=null)companyHeader = cellCompanyHeader.getContents();\n\t\t\t\tufDataDTO.setCompanyHeader(companyHeader);\n\t\t\t\t\n\t\t\t\t//--------------- 3: productOrderDate.\n\t\t\t\tproductOrderDate=null;\n\t\t\t\tif(COL_PRODUCT_ORDER_DATE>=0)cellProductOrderDate = sheetToRead.getCell(COL_PRODUCT_ORDER_DATE, row);\t\t\t\n\t\t\t\tif(cellProductOrderDate!=null){\n\t\t\t\t\tString strDate=cellProductOrderDate.getContents();\n\t\t\t\t\t//strDate=strDate.replaceAll("" "", """");\n\t\t\t\t\tSimpleDateFormat sdf = new SimpleDateFormat(ufrDTO.getFormatDate());//(""yyyy-MM-dd HH:mm:ss"");\t\n\t\t        \ttry {\n\t\t        \t\tDate date = sdf.parse(strDate);\n\t\t        \t\tproductOrderDate=date;\n\t\t       \t\t}\n\t\t       \t\tcatch (Exception pe) {\n\t\t       \t\t\tproductOrderDate=null;\n\t\t        \t}\n\t\t\t\t}\n\n\t\t\t \tufDataDTO.setProductOrderDate(productOrderDate);\n\t\t\t\t\n\t\t\t\t//--------------- 4: Quantity.\n\t\t\t\tif(COL_QUANTITY>=0)cellQuantity = sheetToRead.getCell(COL_QUANTITY, row);\t\t\t\n\t\t\t\tif(cellQuantity!=null){\n\t\t\t\t\tString strQuantity = cellQuantity.getContents();\n\t\t\t\t\tstrQuantity=strQuantity.replaceAll("" "", """");\n\t\t\t\t\tif(strQuantity!=null && !strQuantity.equals("""")){\n\t\t\t\t\t\tint index=strQuantity.indexOf("","");\n\t\t\t\t\t\tif(index>=0){\n\t\t\t\t\t\t\tString strQuantity1=strQuantity.substring(0, index);\n\t\t\t\t\t\t\tString strQuantity2= strQuantity.substring(index+1, strQuantity.length());\n\t\t\t\t\t\t\tstrQuantity=strQuantity1+"".""+strQuantity2;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tquantity=null;\n                  \ttry {\n                  \t\tquantity = Double.parseDouble(strQuantity);\n                  \t}\n                  \tcatch (Exception pe) {\n                  \t\tquantity=null;\n                  \t}\n\t\t\t\t}\n\t\t\t\tufDataDTO.setQuantity(quantity);\n\t\t\t\t\n\t\t\t\t//--------------- 5: lsProductID.\n\t\t\t\tif(COL_LS_PRODUCT_ID>=0)cellLsProductID = sheetToRead.getCell(COL_LS_PRODUCT_ID, row);\t\t\t\n\t\t\t\tif(cellLsProductID!=null)lsProductID = cellLsProductID.getContents();\n\t\t\t\tufDataDTO.setLsProductID(lsProductID);\n\n\t\t\t\t//--------------- 6: productDescription.\n\t\t\t\tif(COL_PRODUCT_DESCRIPTION>=0)cellProductDescription = sheetToRead.getCell(COL_PRODUCT_DESCRIPTION, row);\t\t\t\n\t\t\t\tif(cellProductDescription!=null)productDescription = cellProductDescription.getContents();\n\t\t\t\tproductDescription=productDescription.replaceAll("","", "" "");\n\t\t\t\tufDataDTO.setProductDescription(productDescription);\n\t\t\t\t\n\t\t\t\t//--------------- 7: unitPrice.\n\t\t\t\tif(COL_UNIT_PRICE>=0)cellUnitPrice = sheetToRead.getCell(COL_UNIT_PRICE, row);\t\t\t\n\t\t\t\tif(cellUnitPrice!=null){\n\t\t\t\t\tString strUnitPrice = cellUnitPrice.getContents();\n\t\t\t\t\tstrUnitPrice= strUnitPrice.replaceAll(""\\\\$"", """");\n\t\t\t\t\tstrUnitPrice= strUnitPrice.replaceAll("" "", """");\n\t\t\t\t\tstrUnitPrice= strUnitPrice.replaceAll(""\\"""", """");\n\t\t\t\t\tif(strUnitPrice!=null && !strUnitPrice.equals("""")){\n\t\t\t\t\t\tint index=strUnitPrice.indexOf("","");\n\t\t\t\t\t\tif(index>=0){\n\t\t\t\t\t\t\tString strUnitPrice1=strUnitPrice.substring(0, index);\n\t\t\t\t\t\t\tString strUnitPrice2= strUnitPrice.substring(index+1, strUnitPrice.length());\n\t\t\t\t\t\t\tstrUnitPrice=strUnitPrice1+"".""+strUnitPrice2;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tunitPrice=null;\n                  \ttry {\n                  \t\tunitPrice = Double.parseDouble(strUnitPrice);\n                  \t}\n                  \tcatch (Exception pe) {\n                  \t\tunitPrice=null;\n                  \t}\n\t\t\t\t}\n\t\t\t\tufDataDTO.setUnitPrice(unitPrice);\n\t\t\t\t\n\t\t\t\t//--------------- 8: clientNumber.\n\t\t\t\tif(COL_CLIENT_NUMBER>=0)cellClientNumber = sheetToRead.getCell(COL_CLIENT_NUMBER, row);\t\t\t\n\t\t\t\tif(cellClientNumber!=null)clientNumber = cellClientNumber.getContents();\n\t\t\t\tufDataDTO.setClientNumber(clientNumber);\n\t\t\t\t\n\t\t\t\t//--------------- 9: FirstName.\n\t\t\t\tif(COL_FIRST_NAME>=0)cellClientFirstName = sheetToRead.getCell(COL_FIRST_NAME, row);\t\t\t\n\t\t\t\tif(cellClientFirstName!=null)clientFirstName = cellClientFirstName.getContents();\n\t\t\t\tufDataDTO.setClientFirstName(clientFirstName);\n\t\t\t\t\n\t\t\t\t//--------------- 10: LastName.\n\t\t\t\tif(COL_LAST_NAME>=0)cellClientLastName = sheetToRead.getCell(COL_LAST_NAME, row);\t\t\t\n\t\t\t\tif(cellClientLastName!=null)clientLastName = cellClientLastName.getContents();\n\t\t\t\tufDataDTO.setClientLastName(clientLastName);\n\t\t\t\t\n\t\t\t\t//=========== special cases for clients ""AsiaMiles"" 29  ""VibeSMG"" 45================\n\t\t\t\t\tOrdersDTO orderDTO=new OrdersDTO();\n\t\t\t\t\tString[] elems;\n\t\t\t\t\tint option;\n\t\t\t\t\tint userId=Integer.parseInt(ufrDTO.getUserId().toString());\n\t\t\t\t\tString lsProductIdAsiaM=ufDataDTO.getProductDescription();\n\t\t\t\t\tString[] elemsLsProductId;\n\t\t\t\t\tswitch (userId) {\n\t\t\t\t\tcase 29: \n\t\t\t\t\t\t// split last name to client ""AsiaMiles"" to last and first name\n\t\t\t\t\t\tif(clientLastName!=null && !clientLastName.equals("""")){\n\t\t\t\t\t\t\torderDTO=new OrdersDTO();\n\t\t\t\t\t\t\torderDTO.setId(ufDataDTO.getUserId());\n\t\t\t\t\t\t\torderDTO.setClientLastName(clientLastName);\n\t\t\t\t\t\t\telems  = clientLastName.split(""\\\\s"");\n\t\t\t\t\t\t\toption=elems.length;\t\n\t\t\t\t\t\t\torderDTO=orderDTOSplitFirstLastName(orderDTO, option);\n\t\t\t\t\t\t\tclientFirstName=orderDTO.getClientFirstName();\n\t\t\t\t\t\t\tclientLastName=orderDTO.getClientLastName();\n\t\t\t\t\t\t\tufDataDTO.setClientFirstName(clientFirstName);\n\t\t\t\t\t\t\tufDataDTO.setClientLastName(clientLastName);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//recovery AsiaMiles's lsProductId \n\t\t\t\t\t\tString lsProductId="""";\n\t\t\t\t\t\tif(lsProductIdAsiaM!=null && !lsProductIdAsiaM.equals("""")){\n\t\t\t\t\t\t\t//lsProductIdAsiaM=lsProductIdAsiaM.replaceAll(""\\\\*"", ""_"");\n\t\t\t\t\t\t\telemsLsProductId=lsProductIdAsiaM.split(""\\\\*"");\n\t\t\t\t\t\t\tif(elemsLsProductId.length>1){\n\t\t\t\t\t\t\t\tlsProductId=elemsLsProductId[0];\n\t\t\t\t\t\t\t}/*else{\n\t\t\t\t\t\t\t\telemsLsProductId=lsProductIdAsiaM.split(""_"");\n\t\t\t\t\t\t\t\tif(elemsLsProductId.length!=0){\n\t\t\t\t\t\t\t\t\tlsProductId=elemsLsProductId[0];\n\t\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\t\telemsLsProductId=lsProductIdAsiaM.split(""-"");\n\t\t\t\t\t\t\t\t\tif(elemsLsProductId.length!=0)lsProductId=elemsLsProductId[0];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}*/\n\t\t\t\t\t\t}\n\t\t\t\t\t\tlsProductId=lsProductId.replaceAll("" "", """");\n\t\t\t\t\t\tufDataDTO.setLsProductID(lsProductId);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 45: // split last name of client ""VibeSMG"" to last and first name\n\t\t\t\t\t\tif(clientLastName!=null && !clientLastName.equals("""")){\n\t\t\t\t\t\t\torderDTO=new OrdersDTO();\n\t\t\t\t\t\t\torderDTO.setId(ufDataDTO.getUserId());\n\t\t\t\t\t\t\tclientLastName=""MR ""+clientLastName;\n\t\t\t\t\t\t\torderDTO.setClientLastName(clientLastName);\n\t\t\t\t\t\t\telems  = clientLastName.split(""\\\\s"");\n\t\t\t\t\t\t\toption=elems.length;\n\t\t\t\t\t\t\torderDTO=orderDTOSplitFirstLastName(orderDTO, option);\n\t\t\t\t\t\t\tclientFirstName=orderDTO.getClientFirstName();\n\t\t\t\t\t\t\tclientLastName=orderDTO.getClientLastName();\n\t\t\t\t\t\t\tufDataDTO.setClientFirstName(clientFirstName);\n\t\t\t\t\t\t\tufDataDTO.setClientLastName(clientLastName);\t\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t//====================================================================================\n\t\t\t\t//--------------- 11: cellAddressStreet.\n\t\t\t\tif(COL_ADDRESSS_TREET>=0)cellClientStreet = sheetToRead.getCell(COL_ADDRESSS_TREET, row);\t\t\t\n\t\t\t\tif(cellClientStreet!=null)clientStreet = cellClientStreet.getContents();\n\t\t\t\tclientStreet=clientStreet.replaceAll("","", "" "");\n\t\t\t\tufDataDTO.setClientStreet(clientStreet);\n\t\t\t\t\n\t\t\t\t//--------------- 12: addressStreetOther.\n\t\t\t\tif(COL_ADDRESSS_TREET_OTHER>=0)cellClientOtherStreet = sheetToRead.getCell(COL_ADDRESSS_TREET_OTHER, row);\t\t\t\n\t\t\t\tif(cellClientOtherStreet!=null)clientOtherStreet = cellClientOtherStreet.getContents();\n\t\t\t\tclientOtherStreet=clientOtherStreet.replaceAll("","", "" "");\n\t\t\t\tufDataDTO.setClientOtherStreet(clientOtherStreet);\n\t\t\t\t\n\t\t\t\t//--------------- 13: addressCity.\n\t\t\t\tif(COL_ADDRESS_CITY>=0)cellClientCity = sheetToRead.getCell(COL_ADDRESS_CITY, row);\t\t\t\n\t\t\t\tif(cellClientCity!=null)clientCity = cellClientCity.getContents();\n\t\t\t\tufDataDTO.setClientCity(clientCity);\n\t\t\t\t\n\t\t\t\t//--------------- 14: addressPostalCode.\n\t\t\t\tif(COL_ADDRESS_POSTAL_CODE>=0)cellClientPostalCode = sheetToRead.getCell(COL_ADDRESS_POSTAL_CODE, row);\t\t\t\n\t\t\t\tif(cellClientPostalCode!=null)clientPostalCode = cellClientPostalCode.getContents();\n\t\t\t\tclientPostalCode=clientPostalCode.replaceAll("" "", """");\n\t\t\t\tufDataDTO.setClientPostalCode(clientPostalCode);\n\t\t\t\t\n\t\t\t\t//--------------- 15: addressState.\n\t\t\t\tif(COL_ADDRESS_STATE>=0)cellClientProvince = sheetToRead.getCell(COL_ADDRESS_STATE, row);\t\t\t\n\t\t\t\tif(cellClientProvince!=null)clientProvince = cellClientProvince.getContents();\n\t\t\t\t\n\t\t\t\tString clientProvinceToCompar=clientProvince.toLowerCase();\n\t\t\t\tclientProvinceToCompar=clientProvinceToCompar.replaceAll("" "", """");\n\t\t\t\tclientProvinceToCompar=clientProvinceToCompar.replaceAll(""canada"", """");\n\t\t\t\tclientProvinceToCompar=clientProvinceToCompar.replaceAll("","", """");\n\t\t\t\tclientProvinceToCompar=clientProvinceToCompar.replaceAll(""\\\\."", """");\n\t\t\t\tfor(ProvinceDTO prov:listProvine){\n\t\t\t\t\tString provName=prov.getName();\n\t\t\t\t\tprovName=provName.replaceAll("" "", """");\n\t\t\t\t\tprovName= provName.toLowerCase();\n\t\t\t\t\tif(clientProvinceToCompar.equals(provName) || clientProvinceToCompar.equals(prov.getCode()) ){\n\t\t\t\t\t\tclientProvince=\tprov.getCode();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\tclientProvince=clientProvince.replaceAll(""\\\\."", """");\n\t\t\t\tif(clientProvinceToCompar.equals(""""))clientProvince="""";\n\t\t\t\tufDataDTO.setClientProvince(clientProvince);\n\n\t\t\t\t//--------------- 16: clientPhone.\n\t\t\t\tif(COL_CLIENT_PHONE>=0)cellClientPhone = sheetToRead.getCell(COL_CLIENT_PHONE, row);\t\t\t\n\t\t\t\tif(cellClientPhone!=null)clientPhone = cellClientPhone.getContents();\n\t\n\t\t\t\t//--------------- 17: clientPhoneZone.\n\t\t\t\tif(COL_CLIENT_PHONE_ZONE>=0)cellClientPhoneZone = sheetToRead.getCell(COL_CLIENT_PHONE_ZONE, row);\t\t\t\n\t\t\t\tif(cellClientPhoneZone!=null)clientPhoneZone = cellClientPhoneZone.getContents();\t\t\t\n\t\t\t\tif(clientPhoneZone!=null && clientPhoneZone!="""")clientPhone=clientPhoneZone+"" ""+clientPhone;\n\t\t\t\tufDataDTO.setClientPhone(clientPhone);\n\t\t\t\t\t\t\n\t\t\t\t//--------------- 18: clientEmail.\n\t\t\t\tif(COL_CLIENT_EMAIL>=0)cellClientEmail = sheetToRead.getCell(COL_CLIENT_EMAIL, row);\t\t\t\n\t\t\t\tif(cellClientEmail!=null)clientEmail = cellClientEmail.getContents();\n\t\t\t\tufDataDTO.setClientEmail(clientEmail);\n\t\t\t\t\n                //--------------- 19:requiredDate -------------------------\n                String strRequiredDate="""";\n                if(COL_REQUIRE_DATE>=0)cellRequiredDate = sheetToRead.getCell(COL_REQUIRE_DATE, row);\t\t\t\n\t\t\t\tif(cellRequiredDate!=null){\n\t\t\t\t\tstrRequiredDate = cellRequiredDate.getContents();\n\t\t\t\t\tstrRequiredDate=strRequiredDate.replaceAll("" "", """");\n\t\t\t\t\tSimpleDateFormat sdf = new SimpleDateFormat(ufrDTO.getFormatDate());\n\t\t        \ttry {\n\t\t        \t\tDate date = sdf.parse(strRequiredDate);\n\t\t        \t\trequiredDate=date;\n\t\t       \t\t}\n\t\t       \t\tcatch (Exception pe) {\n\t\t       \t\t\trequiredDate=null;\n\t\t        \t}\n\t\t\t\t}\n\t\t\t\tufDataDTO.setRequiredDate(requiredDate);\n\t\t                \n               //--------------- 20:clients_other_names ----------------\n               clientOtherNames="""";\n               if(COL_CLIENT_OTHER_NAMES>=0)cellClientOtherNames = sheetToRead.getCell(COL_CLIENT_OTHER_NAMES, row);\t\t\t\n\t\t\t\tif(cellClientOtherNames!=null)clientOtherNames = cellClientOtherNames.getContents();\n\t\t\t\tufDataDTO.setClientOtherNames(clientOtherNames);\n\t\t\t\t\n\t\t\t\t //--------------- 21:lsOrderId ------------------------\n\t\t\t\tString code=userLogin.substring(0, 2).toUpperCase();\n\t\t\t\tString lsOrderId=ufDataDTO.getProductOrderNumber();\n            \n                int inc=0;//increment\n                String lsOrderIdParent=lsOrderId;\n                lsOrderIdParent=lsOrderIdParent.replaceFirst(""-"", """");\n                lsOrderIdParent=lsOrderIdParent.replaceFirst(""_"", """");\n                lsOrderIdParent=lsOrderIdParent.replaceFirst(""R"", """");\n                lsOrderIdParent=lsOrderIdParent.replaceAll("" "", """");\n                if(lsOrderIdParent.length()>14){\n                \tint index=lsOrderIdParent.length()-14;\n                \tlsOrderIdParent=lsOrderIdParent.substring(index, lsOrderIdParent.length());\n                }\n    \n                //lsOrderIdParent=code+""O""+ufDataDTO.getUserId()+lsOrderIdParent;\n                String lsOrderIdToGenerate=code+""O""+ufDataDTO.getUserId()+lsOrderIdParent;;\n                while(isLsOrderIdUsed(lsOrderIdToGenerate) || lsOrdersIdHash.containsKey(lsOrderIdToGenerate)){\n\t               \tinc++; \n                    lsOrderIdToGenerate=code+""O""+ufDataDTO.getUserId()+lsOrderIdParent+""R""+inc;\n                }\n                lsOrdersIdHash.put(lsOrderIdToGenerate, lsOrderIdToGenerate);\n                ufDataDTO.setLsOrderId(lsOrderIdToGenerate);\n\n                //--------------- 22:shipping company -------------------\n                shippingCompany="""";\n                if(SHIPPING_COMPANY>=0)cellShippingCompany = sheetToRead.getCell(SHIPPING_COMPANY, row);\t\t\t\n \t\t\t\tif(cellShippingCompany!=null)shippingCompany = cellShippingCompany.getContents();\n \t\t\t\tufDataDTO.setShippingCompany(shippingCompany);\n\n                //--------------- 23:Notes -------------------\n                notes="""";\n                if(NOTES>=0)cellNotes = sheetToRead.getCell(NOTES, row);\t\t\t\n \t\t\t\tif(cellNotes!=null)notes = cellNotes.getContents();\n \t\t\t\tufDataDTO.setNotes(notes);\n \t\t\t\t\n \t\t\t\tufDataDTO.setCreationDate(new Date());\n\t\t\t\t\n\t\t\t\t//--------------- 24: ClientProductNumber.\n\t\t\t\tif(COL_CLIENT_PRODUCT_NUMBER>=0)cellClientProductNumber = sheetToRead.getCell(COL_CLIENT_PRODUCT_NUMBER, row);\t\t\t\n\t\t\t\tif(cellClientProductNumber!=null)clientProductNumber = cellClientProductNumber.getContents();\n\t\t\t\tufDataDTO.setClientProductNumber(clientProductNumber);\n\n\t\t\t\t//--------------- 25: cellClientOtherId.\n\t\t\t\tif(COL_CLIENT_OTHER_ID>=0)cellClientOtherId = sheetToRead.getCell(COL_CLIENT_OTHER_ID, row);\t\t\t\n\t\t\t\tif(cellClientOtherId!=null)clientOtherId = cellClientOtherId.getContents();\n\t\t\t\tufDataDTO.setClientOtherId(clientOtherId);\n\t\t\t\tif(ufDataDTO.getProductOrderNumber()!=null && !ufDataDTO.getProductOrderNumber().equals(""""))listOrderDTO.add(ufDataDTO);\n\t\t\t}\n\t\t//} catch (Exception x) {\n\t\t//\tx.printStackTrace();\n\t\t//}\n\t\t}\n\treturn listOrderDTO;\n\t\t\n\t}\n\n\t\n\t/**----------------------------------------------------------\n\t \tcheck if the LsOrderId is already in use\n\t  -----------------------------------------------------------*/\t\n\t@SuppressWarnings(""unused"")\n\t@Override\n\tpublic boolean isLsOrderIdUsed(final String lsOrderId){\n\t\tboolean result=false;\t\n\t\ttry{\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tresult = (Boolean) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\n\t\t\t\t\treturn daoManager.getOrdersDao().isLsOrderIdUsed(lsOrderId);\n\t\t\t\t}\n\t\t\t});\n\t\t}catch (DaoException de) {\n\t\t\ttry {\n\t\t\t\tthrow new ServiceException(de);\n\t\t\t} catch (ServiceException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\t\n\t/**----------------------------------------------------------\n\t \t*GET HASHtABLE WITH HIERARCHICAL (ORDER<->ROWS)\n\t \t OF ORDERS FROM LIST OF USER FILE RECOVERY*\n\t  -----------------------------------------------------------*/\t\n\t@SuppressWarnings(""unused"")\n\t@Override\n\tpublic Hashtable<String, OrdersDTO> getHashOrdersFromUserDataRecovery(Long userId,ArrayList<UserFileDataRecoveryDTO> list)\n\t\t\t\t\t\t\t\t\t\tthrows ServiceException {\n\t\tHashtable<String, OrdersDTO> result=new Hashtable<String, OrdersDTO>();\n\t\t\n\t\ttry {\n\t\t\tproductService = serviceLocator.getProductService(); \n\t\t\tuserService= serviceLocator.getUserService();\n\t\t} catch (ServiceLocatorException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\t\n\t\tfor(UserFileDataRecoveryDTO orDTO: list){\n\t\t\tOrdersDTO ordDTOCheck=result.get(orDTO.getLsOrderId());\n\t\t\tString lsProductID=orDTO.getLsProductID();\n\t\t\tString providedLsProductId=orDTO.getLsProductID();\n\t\t\t//String clientProductNumber=lsProductID;\n\t\t\t//ProductDTO pDTO=hashProductDTO.get(lsProductID);\n\t\t\tlsProductID=lsProductID.replaceAll("" "", """");\n\t\t\t//ProductDTO pDTO=productService.getProductByLsProductId(lsProductID);\n\t\t\tUserProductPriceDTO pDTO=productService.getUsrPPriceByLsproductId(userId, lsProductID);\n\t\t\tif(pDTO==null){\n\t\t\t\tint index=lsProductID.indexOf(""-"");\n\t\t\t\tif(index==-1)index=lsProductID.indexOf("" "");\n\t\t\t\tif(index<=2)lsProductID=lsProductID.substring(index+1, lsProductID.length());\n\t\t\t\t//pDTO=productService.getProductByLsProductId(lsProductID);\n\t\t\t\tpDTO=productService.getUsrPPriceByLsproductId(userId, lsProductID);\n\t\t\t}\n\t\t\tif(pDTO==null){\n\t\t\t\tint index=lsProductID.indexOf(""_"");\n\t\t\t\tif(index==-1)index=lsProductID.indexOf("" "");\n\t\t\t\tif(index<=2)lsProductID=lsProductID.substring(index+1, lsProductID.length());\n\t\t\t\t//pDTO=productService.getProductByLsProductId(lsProductID);\n\t\t\t\tpDTO=productService.getUsrPPriceByLsproductId(userId, lsProductID);\n\t\t\t}\n\t\t\tUserDTO uDTO=userService.getUserInformation(userId);\n\t\t\tString userLogin=""anonymous"";\n\t\t\tif(uDTO!=null)userLogin=uDTO.getLogin();\n\t\t\tif(ordDTOCheck==null){\n\t\t\t\tOrdersDTO ordDTOToAdd=new OrdersDTO();\n\t\t\t\tordDTOToAdd=DTOFactory.getOrderDTOFromUserDataRecovery(userId,orDTO);\n\t\t\t\tordDTOToAdd.setUserLogin(userLogin);\n\t\t\t\t//ordDTOToAdd.setClientProductNumber(clientProductNumber);\n\t\t\t\tOrdersRows ordRow=ordDTOToAdd.getRowsList().get(0);\n\t\t\t\tif(ordRow!=null){\n\t\t\t\t\tordRow.setLsProductID(lsProductID);\n\t\t\t\t\tif(pDTO!=null){\n\t\t\t\t\t\t//ordRow.setProductId(pDTO.getId());\n\t\t\t\t\t\tordRow.setProductId(pDTO.getProductId());\n\t\t\t\t\t\t//if client is ""AsiaMiles"" then unitPrice=cost\n\t\t\t\t\t\tString strUserId=userId.toString();\n\t\t\t\t\t\tint intUserId=Integer.parseInt(strUserId);\n\t\t\t\t\t\tswitch (intUserId) {\n\t\t\t\t\t\tcase 29:\n\t\t\t\t\t\t\tif(pDTO.getPrice()!=null && !pDTO.getPrice().equals("""")){\n\t\t\t\t\t\t\t\tString strProductPrice=pDTO.getPrice();\n\t\t     \t\t\t\t\tint index=strProductPrice.indexOf("","");\n\t\t     \t\t\t\t\tif(index>=0){\n\t\t     \t\t\t\t\t\tString strProductPrice1=strProductPrice.substring(0, index);\n\t\t     \t\t\t\t\t\tString strProductPrice2= strProductPrice.substring(index+1, strProductPrice.length());\n\t\t     \t\t\t\t\t\tstrProductPrice=strProductPrice1+"".""+strProductPrice2;\n\t\t     \t\t\t\t\t}\n\t\t     \t\t\t\t\tDouble productPrice=null;\n\t\t                      \ttry {\n\t\t                      \t\tproductPrice = Double.parseDouble(strProductPrice);\n\t\t                      \t}\n\t\t                      \tcatch (Exception pe) {\n\t\t                      \t\tproductPrice=null;\n\t\t                      \t}\n\t\t                      \tordRow.setUnitPrice(productPrice);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tordRow.setUnitPrice(orDTO.getUnitPrice());\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//ordRow.setUnitPrice(orDTO.getUnitPrice());\n\t\t\t\t\t\tordRow.setRequiredDate(orDTO.getRequiredDate());\n\t\t\t\t\t\tordRow.setShippingCompany(orDTO.getShippingCompany());\n\t\t\t\t\t\t//ordRow.setClientProductNumber(clientProductNumber);\n\t\t\t\t\t\tordRow.setClientProductNumber(orDTO.getClientProductNumber());\n\t\t\t\t\t\tordRow.setStock(pDTO.getStock());\n\t\t\t\t\t}else{\n\t\t\t\t\t\tordRow.setProductId(null);\n\t\t\t\t\t\tordRow.setUnitPrice(null);\n\t\t\t\t\t\tordRow.setRequiredDate(null);\n\t\t\t\t\t\tordRow.setShippingCompany(null);\n\t\t\t\t\t\t//ordRow.setClientProductNumber(clientProductNumber);\n\t\t\t\t\t\tordRow.setClientProductNumber(orDTO.getClientProductNumber());\n\t\t\t\t\t\tordRow.setStock(null);\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t\tresult.put(orDTO.getLsOrderId(), ordDTOToAdd);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**----------------------------------------------------------\n\t \t*GET HASHtABLE FROM LIST ORDERS DTO*\n\t  -----------------------------------------------------------*/\t\n\t@Override\n\tpublic Hashtable<String, OrdersDTO> getHashOrdersDTOFromListOrdersDTO(List<OrdersDTO> list)\n\t\t\t\t\t\t\t\t\t\tthrows ServiceException {\n\t\tHashtable<String, OrdersDTO> result=new Hashtable<String, OrdersDTO>();\n\t\n\t\tfor(OrdersDTO orDTO: list){\n\t\t\t\tresult.put(orDTO.getLsOrderId(), orDTO);\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**----------------------------------------------------------\n\t \t*SAVING ORDERS WITH THERE ROWS IN DATABASE*\n\t  -----------------------------------------------------------*/\t\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<OrdersDTO> insertListOrders(List<OrdersDTO> listOrdersDTO)throws Exception {\n\t\tList<OrdersDTO> listOrdersDTOResult=null;\n\t\tList<Orders> result=null;\n\t\tfinal List<Orders>listOrders=DTOFactory.getListOrdersFromListOrdersDTO(listOrdersDTO);\n\t\ttry{\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tresult = (List<Orders>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\n\t\t\t\t\treturn daoManager.getOrdersDao().insertListOrders(listOrders);\n\t\t\t\t}\n\t\t\t});\n\t\t}catch (DaoException de) {\n\t\t\ttry {\n\t\t\t\tthrow new Exception(de);\n\t\t\t} catch (Exception e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\tlistOrdersDTOResult=DTOFactory.getListOrderDTOFromListOrder(result);\n\t\treturn listOrdersDTOResult;\n\t}\n\n\n\t/**----------------------------------------------------------\n\t \t*INSERT INVOICED ORDER IN DATABASES*\n\t  -----------------------------------------------------------*/\t\n\t\n\t@Override\n\tpublic boolean insertInvoicedOrder(OrdersDTO orderDTO){\n\t\t\tboolean result=false;\n\t\t\tfinal Orders order=DTOFactory.getOrderFromOrderDTO(orderDTO);\n\t\t\ttry{\n\t\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\t\tresult = (Boolean) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\n\t\t\t\t\t\treturn daoManager.getOrdersDao().insertInvoicedOrder(order);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}catch (DaoException de) {\n\t\t\t\ttry {\n\t\t\t\t\tthrow new ServiceException(de);\n\t\t\t\t} catch (ServiceException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\n\t/**----------------------------------------------------------\n\t \t*INSERT ORDERS IF ARE EXISTING IN DATABASE*\n\t  -----------------------------------------------------------*/\t\n\t@Override\n\tpublic boolean insertListOrdersIfNotExist(List<OrdersDTO> listOrdersDTO){\n\t\tboolean result=false;\n\t\tfinal List<Orders>listOrders=DTOFactory.getListOrdersFromListOrdersDTO(listOrdersDTO);\n\t\ttry{\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tresult = (Boolean) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\n\t\t\t\t\treturn daoManager.getOrdersDao().insertListOrdersIfNotExist(listOrders);\n\t\t\t\t}\n\t\t\t});\n\t\t}catch (DaoException de) {\n\t\t\ttry {\n\t\t\t\tthrow new ServiceException(de);\n\t\t\t} catch (ServiceException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**----------------------------------------------------------\n\t \t*INSERT ORDER WHITH ROW*\n\t  -----------------------------------------------------------*/\t\n\t@Override\n\tpublic boolean insertOrderWithRows(OrdersDTO orderDTO) {\n\t\tboolean result=false;\n\t\tfinal Orders order=DTOFactory.getOrderFromOrderDTO(orderDTO);\n\t\ttry{\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tresult = (Boolean) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\n\t\t\t\t\treturn daoManager.getOrdersDao().insertOrderWithRows(order);\n\t\t\t\t}\n\t\t\t});\n\t\t}catch (DaoException de) {\n\t\t\ttry {\n\t\t\t\tthrow new ServiceException(de);\n\t\t\t} catch (ServiceException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn result;\n\t}\n\n\t/**----------------------------------------------------------\n\t \t*MAKE ORDER IN PROGRESS*\n\t  -----------------------------------------------------------*/\t\n\t@Override\n\tpublic boolean makeOrderInProgress(OrdersDTO orderDTO){\n\t\tboolean result=false;\n\t\tfinal Orders order=new Orders();\n\t\torder.setLsOrderId(orderDTO.getLsOrderId());\n\t\ttry{\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tresult = (Boolean) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\n\t\t\t\t\treturn daoManager.getOrdersDao().makeOrderInProgress(order);\n\t\t\t\t}\n\t\t\t});\n\t\t}catch (DaoException de) {\n\t\t\ttry {\n\t\t\t\tthrow new ServiceException(de);\n\t\t\t} catch (ServiceException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn result;\n\t}\n\n\t/**----------------------------------------------------------\n\t \t*GET ORDER DTO BY LS_ORDER_ID*\n\t  -----------------------------------------------------------*/\t\n\t@Override\n\tpublic OrdersDTO getOrderDTOByLsOrderId(final String lsOrderId)\n\t\t\tthrows ServiceException { \n\n\t\tOrders order=null;\t\n\t\tOrdersDTO result=null;\n\t\ttry{\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\torder = (Orders) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\n\t\t\t\t\treturn daoManager.getOrdersDao().getOrderByLsOrderId(lsOrderId);\n\t\t\t\t}\n\t\t\t});\n\t\t}catch (DaoException de) {\n\t\t\ttry {\n\t\t\t\tthrow new ServiceException(de);\n\t\t\t} catch (ServiceException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\tif(order!=null)result=DTOFactory.getOrderDTOFromOrder(order);\n\t\treturn result;\n\n\t}\n\n\t/**----------------------------------------------------------\n\t \t*IF FOUND ANY ORDER DUPLICATE RETURN TRUE*\n\t  -----------------------------------------------------------*/\t\n\t@Override\n\tpublic boolean isThereDuplicate(List<OrdersDTO> listOrdersDTO){\n\t\tboolean result=false;\n\t\tif(listOrdersDTO!=null){\n\t\t\tfor(OrdersDTO orderDTO:listOrdersDTO){\n\t\t\t\tif(orderDTO.getDuplicate()!=null && orderDTO.getDuplicate()==true){\n\t\t\t\t\tresult=true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**----------------------------------------------------------\n\t \t*GET ORDER DTO BY ProductOrderNumber*\n\t  -----------------------------------------------------------*/\t\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<OrdersDTO> getListOrdersByPONumber(final List<OrdersDTO> listOrdersDTO){ \n\t\tfinal List<Orders>listOrders=DTOFactory.getListOrdersFromListOrdersDTO(listOrdersDTO);\n\t\tList<Orders>resultList=null;\n\t\ttry{\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tresultList= (List<Orders>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\n\t\t\t\t\treturn daoManager.getOrdersDao().getListOrdersByPONumber(listOrders);\n\t\t\t\t}\n\t\t\t});\n\t\t}catch (DaoException de) {\n\t\t\ttry {\n\t\t\t\tthrow new ServiceException(de);\n\t\t\t} catch (ServiceException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\tList<ProvinceDTO> listProvinces;\n\t\tHashtable<String, ProvinceDTO> hashProvinces=new Hashtable<String, ProvinceDTO>(); \n\t\t\n\t\ttry {\n\t\t\tproductService = serviceLocator.getProductService(); \n\t\t\tuserService= serviceLocator.getUserService();\n\t\t\tlistProvinces = productService.getAllProvinces();\n\t\t\tfor(ProvinceDTO provinceDTO:listProvinces){\n\t\t\t\thashProvinces.put(provinceDTO.getCode(), provinceDTO);\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn DTOFactory.getListOrderDTOFromListOrderSorted(resultList,hashProvinces);\n\n\t}\n\n\t/**----------------------------------------------------------\n\t \t*CHECK IF ANY ORDERS IS ALREADY EXISTE IN DATABASE*\n\t  -----------------------------------------------------------*/\n\t@Override\n\tpublic boolean isExistAnyLsOrderIdInDB(List<OrdersDTO>listOrdersDTO){\n\t\tboolean result=false;\n\t\tList<OrdersDTO>resultListOrdersDTO=getListOrdersByPONumber(listOrdersDTO);\n\t\tif(resultListOrdersDTO!=null && resultListOrdersDTO.size()>0)result=true;\n\t\treturn result;\n\t}\n\n\t/**----------------------------------------------------------\n\t \t*CALCULATE NUMBER OF ORDERS WHICH HAVE NOT PLANNED\n\t \t TO DALETE*\n\t  -----------------------------------------------------------*/\n\t@Override\n\tpublic Integer nbOrderRowsNotDeleted(List<OrdersRows>listOrdersRows){\n\t\tint result=0;\n\t\tif(listOrdersRows!=null){\n\t\t\tfor(OrdersRows orderR:listOrdersRows){\n\t\t\t\tif(orderR.getToDelete()==0)result++;\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**----------------------------------------------------------\n\t \t*CALCULATING THE NUMBER OF ORDERS IN LIST WHICH HAVE \n\t \t NOT REGISTERED IN DATABASE*\n\t  -----------------------------------------------------------*/\n\t@Override\n\tpublic Long nbOrdersNotSavedInDB(List<OrdersDTO>listOrders){\n\t\tlong result=0L;\n\t\tif(listOrders!=null){\n\t\t\tfor(OrdersDTO orderDTO:listOrders){\n\t\t\t\ttry {\n\t\t\t\t\tString productOrderNumber=orderDTO.getProductOrderNumber();\n\t\t\t\t\tLong userId=orderDTO.getUserId();\n\t\t\t\t\tLong count= getCountOrderByPONumber(productOrderNumber, userId);\n\t\t\t\t\tif(count==0){\n\t\t\t\t\tresult++;\n\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**----------------------------------------------------------\n \t\t\t\t*GET CountOrderByPONumber*\n  \t   -----------------------------------------------------------*/\t\n\t@Override\n\tpublic Long getCountOrderByPONumber(final String productOrderNumber, final Long userId){ \n\t\tLong count=0L;\n\t\ttry{\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tcount = (Long) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\n\t\t\t\t\treturn daoManager.getOrdersDao().getCountOrderByPONumber(productOrderNumber, userId);\n\t\t\t\t}\n\t\t\t});\n\t\t}catch (DaoException de) {\n\t\t\ttry {\n\t\t\t\tthrow new ServiceException(de);\n\t\t\t} catch (ServiceException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t\n\t}\n\n\t/**----------------------------------------------------------\n\t \t*GENERATE LS_ORDER_ID FOR ORDER DUPLICATED*\n\t  -----------------------------------------------------------*/\n\t@Override\n\tpublic String generateLsOrderId(String lsOrder,Hashtable<String, OrdersDTO>hashOrders){\n\t\tString result=lsOrder;\n\t\tString resultSub=lsOrder;\n\t\tint index=result.indexOf(""_"");\n\t\tif(index>=1)resultSub=result.substring(0,index);\n\t\tint NB=1;\n\t\tString ext=""_"";\n\t\tresult=resultSub+ext+NB;\n\t\twhile(hashOrders.containsKey(result)){\n\t\t\tNB++;\n\t\t\tresult=resultSub+ext+NB;\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**----------------------------------------------------------\n\t \t*GENERATE LS_ORDER_ID FOR MANUAL ORDERS*\n\t  -----------------------------------------------------------*/\n\n    @Override\n\tpublic String generateManLsOrderId(final String lsOrderFirstPart) throws ServiceException {  \n    \tHashtable<String, String>lsOrdersIdHash=new Hashtable<String, String>();\n    \tList<Orders>listOrders=getAllOrders();\n    \tif(listOrders!=null){\n    \t\tfor(Orders ord:listOrders){\n    \t\t\tlsOrdersIdHash.put(ord.getLsOrderId(), ord.getLsOrderId());\n    \t\t}\n    \t}\n    \tint inc=0;//increment\n        String lsOrderIdToGenerate=lsOrderFirstPart;;\n        while(lsOrdersIdHash.containsKey(lsOrderIdToGenerate)){\n       \t inc++; \n       \t lsOrderIdToGenerate=lsOrderFirstPart+""R""+inc;\n        }\n\t\treturn lsOrderIdToGenerate;\n\t}\n\n\t/**----------------------------------------------------------\n\t \t*GET LIST ORDERS BY DATE, CLIENT AND LIKE LSORDER_ID*\n\t  -----------------------------------------------------------*/\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<OrdersDTO> getOrdersByDateClientLikeLsOrderId(final Date creationDate, final String userLogin, final String lsOrderId,String status){\n\t\tList<Orders> result=null;\n\t\tList<Orders> resultCleaned=new ArrayList<Orders>();\n\t\ttry{\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tresult = (List<Orders>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\n\t\t\t\t\treturn daoManager.getOrdersDao().getOrdersByDateClientLikeLsOrderId(creationDate, userLogin,lsOrderId);\n\t\t\t\t}\n\t\t\t});\n\t\t}catch (DaoException de) {\n\t\t\ttry {\n\t\t\t\tthrow new ServiceException(de);\n\t\t\t} catch (ServiceException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\tif(result!=null){\n\t\t\tfor(Orders ord:result){\n\t\t\t\tArrayList<OrdersRows>listR=getRowsByLsOrderIdLikeStatus(ord.getLsOrderId(),status,0);\n\t\t\t\tord.setRowsList(listR);\n\t\t\t\tif(listR!=null && listR.size()>0)resultCleaned.add(ord);\n\t\t\t}\n\t\t}\n\t\treturn DTOFactory.getListOrderDTOFromListOrder(resultCleaned);\n\t}\n\n\t/**----------------------------------------------------------\n\t \t*SEARCH ORDERS BY OPTIONS*\n\t  -----------------------------------------------------------*/\t\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<OrdersDTO> searchOrdersWithOptions(final Date creationDateStart,final Date creationDateEnd, final String userLogin, final String lsOrderId,String status){\n\t\tList<Orders> result=null;\n\t\tList<Orders> resultCleaned=new ArrayList<Orders>();\n\t\ttry{\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tresult = (List<Orders>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\n\t\t\t\t\treturn daoManager.getOrdersDao().searchOrdersWithOptions(creationDateStart,creationDateEnd, userLogin,lsOrderId);\n\t\t\t\t}\n\t\t\t});\n\t\t}catch (DaoException de) {\n\t\t\ttry {\n\t\t\t\tthrow new ServiceException(de);\n\t\t\t} catch (ServiceException e) { \n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\tif(result!=null){\n\t\t\tfor(Orders ord:result){\n\t\t\t\tArrayList<OrdersRows>listR=getRowsByLsOrderIdLikeStatus(ord.getLsOrderId(),status,0);\n\t\t\t\tord.setRowsList(listR);\n\t\t\t\tif(listR!=null && listR.size()>0)resultCleaned.add(ord);\n\t\t\t}\n\t\t}\n\t\treturn DTOFactory.getListOrderDTOFromListOrder(resultCleaned);\n\t}\n\n\t/**----------------------------------------------------------\n\t \t*SEARCH ORDERS BY OPTIONS AND SORTING*\n\t  -----------------------------------------------------------*/\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<OrdersDTO> searchOrdersWithOptionsAndSorting(final Date creationDateStart,final Date creationDateEnd,final Integer factorDateBetween,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfinal String userLogin, final String lsOrderId,final String status,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfinal List<Integer>listIndexColumn,final Integer PAGE_ITEMS_COUNT,final Integer indexSet){\n\t\tList<Orders> result=null;\n\t\ttry{\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tresult = (List<Orders>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\n\t\t\t\t\treturn daoManager.getOrdersDao().searchOrdersWithOptionsAndSorting(creationDateStart, creationDateEnd,factorDateBetween,userLogin, lsOrderId, status, listIndexColumn,PAGE_ITEMS_COUNT,indexSet);\n\t\t\t\t}\n\t\t\t});\n\t\t}catch (DaoException de) {\n\t\t\ttry {\n\t\t\t\tthrow new ServiceException(de);\n\t\t\t} catch (ServiceException e) { \n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\tList<ProvinceDTO> listProvinces;\n\t\tHashtable<String, ProvinceDTO> hashProvinces=new Hashtable<String, ProvinceDTO>(); \n\t\ttry {\n\t\t\tproductService = serviceLocator.getProductService(); \n\t\t\tuserService= serviceLocator.getUserService();\n\t\t\tlistProvinces = productService.getAllProvinces();\n\t\t\tfor(ProvinceDTO provinceDTO:listProvinces){\n\t\t\t\thashProvinces.put(provinceDTO.getCode(), provinceDTO);\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\t\n\t\treturn DTOFactory.getListOrderDTOFromListOrderSorted(result,hashProvinces);\n\t}\n\t\n\n\t/**----------------------------------------------------------\n\t \t*SEARCH INVOICED ORDERS BY OPTIONS AND SORTING*\n\t  -----------------------------------------------------------*/\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<OrdersDTO> searchInvoicedWithSorting(final Date creationDateStart,final Date creationDateEnd,final Integer factorDateBetween,final String userLogin, final String lsOrderId,final String status,final List<Integer>listIndexColumn,final int PAGE_ITEMS_COUNT,final int indexSet){\n\t\tList<Orders> result=null;\n\t\ttry{\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tresult = (List<Orders>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\n\t\t\t\t\treturn daoManager.getOrdersDao().searchInvoicedWithSorting(creationDateStart, creationDateEnd,factorDateBetween,userLogin, lsOrderId, status, listIndexColumn,PAGE_ITEMS_COUNT,indexSet);\n\t\t\t\t}\n\t\t\t});\n\t\t}catch (DaoException de) {\n\t\t\ttry {\n\t\t\t\tthrow new ServiceException(de);\n\t\t\t} catch (ServiceException e) { \n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\tList<ProvinceDTO> listProvinces;\n\t\tHashtable<String, ProvinceDTO> hashProvinces=new Hashtable<String, ProvinceDTO>(); \n\t\ttry {\n\t\t\tproductService = serviceLocator.getProductService(); \n\t\t\tuserService= serviceLocator.getUserService();\n\t\t\tlistProvinces = productService.getAllProvinces();\n\t\t\tfor(ProvinceDTO provinceDTO:listProvinces){\n\t\t\t\thashProvinces.put(provinceDTO.getCode(), provinceDTO);\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\t\n\t\treturn DTOFactory.getListOrderDTOFromListOrderSorted(result,hashProvinces);\n\t}\n\t\n\n\t/**----------------------------------------------------------\n\t \t*GET LIST ROWS BY LSORDER_ID LIKE STATUS*\n\t  -----------------------------------------------------------*/\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic ArrayList<OrdersRows> getRowsByLsOrderIdLikeStatus(final String lsOrderId, final String status,final Integer sort){\n\t\tArrayList<OrdersRows> result=null;\n\t\ttry{\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tresult = (ArrayList<OrdersRows>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\n\t\t\t\t\treturn daoManager.getOrdersDao().getRowsByLsOrderIdLikeStatus(lsOrderId, status,sort);\n\t\t\t\t}\n\t\t\t});\n\t\t}catch (DaoException de) {\n\t\t\ttry {\n\t\t\t\tthrow new ServiceException(de);\n\t\t\t} catch (ServiceException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**----------------------------------------------------------\n\t *UPDATE ORDERS ROWS BY LIKE LSORDER_ID, DATE, STATUS, CLIENT*\n\t  -----------------------------------------------------------*/\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic ArrayList<OrdersRows> getRowsByLsOrderIdLikeStatusSorted(final String lsOrderId, final String status,final Integer sort){\n\t\tArrayList<OrdersRows> result=null;\n\t\ttry{\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tresult = (ArrayList<OrdersRows>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\n\t\t\t\t\treturn daoManager.getOrdersDao().getRowsByLsOrderIdLikeStatusSorted(lsOrderId, status,sort);\n\t\t\t\t}\n\t\t\t});\n\t\t}catch (DaoException de) {\n\t\t\ttry {\n\t\t\t\tthrow new ServiceException(de);\n\t\t\t} catch (ServiceException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\t\n\t/**----------------------------------------------------------\n\t \t*UPDATE ORDER BY LSORDER_ID*\n\t  -----------------------------------------------------------*/\n\t@Override\n\tpublic boolean updateOrderByLsOrderId(OrdersDTO orderDTO){\n\t\tboolean result=false;\n\t\tfinal Orders order=DTOFactory.getOrderFromOrderDTO(orderDTO);\n\t\ttry{\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tresult = (Boolean) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\n\t\t\t\t\treturn daoManager.getOrdersDao().updateOrderByLsOrderId(order);\n\t\t\t\t}\n\t\t\t});\n\t\t}catch (DaoException de) {\n\t\t\ttry {\n\t\t\t\tthrow new ServiceException(de);\n\t\t\t} catch (ServiceException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\t\n\t/**----------------------------------------------------------\n\t \t*UPDATE ROW ORDER SHIPPING ELEMENTS(NOTES,SHIPPING_COMPANY, TRACKING_NUMBER) BY LSORDER_ID*\n\t  -----------------------------------------------------------*/\n\t@Override\n\tpublic boolean updateShippingOrderElements(OrdersDTO orderDTO){\n\t\tboolean result=false;\n\t\tfinal Orders order=DTOFactory.getOrderFromOrderDTO(orderDTO);\n\t\t\n\t\ttry{\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tresult = (Boolean) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\n\t\t\t\t\treturn daoManager.getOrdersDao().updateShippingOrderElements(order);\n\t\t\t\t}\n\t\t\t});\n\t\t}catch (DaoException de) {\n\t\t\ttry {\n\t\t\t\tthrow new ServiceException(de);\n\t\t\t} catch (ServiceException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\t\n\t\n\n\t\n\t/**----------------------------------------------------------\n\t \t*UPDATE ROW ORDER SHIPPING ELEMENTS(NOTES,SHIPPING_COMPANY, TRACKING_NUMBER) BY LSORDER_ID*\n\t  -----------------------------------------------------------*/\n\t@Override\n\tpublic boolean updateShippingInvoicedOrder(OrdersDTO orderDTO){\n\t\tboolean result=false;\n\t\tfinal Orders order=DTOFactory.getOrderFromOrderDTO(orderDTO);\n\t\t\n\t\ttry{\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tresult = (Boolean) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\n\t\t\t\t\treturn daoManager.getOrdersDao().updateShippingInvoicedOrder(order);\n\t\t\t\t}\n\t\t\t});\n\t\t}catch (DaoException de) {\n\t\t\ttry {\n\t\t\t\tthrow new ServiceException(de);\n\t\t\t} catch (ServiceException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\t\n\t\n\t@Override\n\tpublic boolean updateQuantityOrderByLsOrderId(OrdersDTO orderDTO){\n\t\tboolean result=false;\n\t\tfinal Orders order=DTOFactory.getOrderFromOrderDTO(orderDTO);\n\t\ttry{\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tresult = (Boolean) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\n\t\t\t\t\treturn daoManager.getOrdersDao().updateQuantityOrderByLsOrderId(order);\n\t\t\t\t}\n\t\t\t});\n\t\t}catch (DaoException de) {\n\t\t\ttry {\n\t\t\t\tthrow new ServiceException(de);\n\t\t\t} catch (ServiceException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\t\n\t\n\t@Override\n\tpublic boolean updateStatusByLsOrderId(final String lsOrderId,final String status){\n\t\tboolean result=false;\n\t\ttry{\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tresult = (Boolean) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\n\t\t\t\t\treturn daoManager.getOrdersDao().updateStatusByLsOrderId(lsOrderId,status);\n\t\t\t\t}\n\t\t\t});\n\t\t}catch (DaoException de) {\n\t\t\ttry {\n\t\t\t\tthrow new ServiceException(de);\n\t\t\t} catch (ServiceException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\n\t@Override\n\tpublic boolean deleteOrderByLsOrderId(OrdersDTO orderDTO){\n\t\tfinal Orders order =DTOFactory.getOrderFromOrderDTO(orderDTO);\n\t\tboolean result=false;\n\t\ttry{\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tresult = (Boolean) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\n\t\t\t\t\treturn daoManager.getOrdersDao().deleteOrderByLsOrderId(order);\n\t\t\t\t}\n\t\t\t});\n\t\t}catch (DaoException de) {\n\t\t\ttry {\n\t\t\t\tthrow new ServiceException(de);\n\t\t\t} catch (ServiceException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\t/**----------------------------------------------------------\n\t \t*GET ORDER ROW BY ID ROW*\n\t  -----------------------------------------------------------*/\n\t@Override\n\tpublic OrdersRows getRowsByRowId(final Long rowId){\n\t\tOrdersRows result=null;\n\t\ttry{\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tresult = (OrdersRows) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\n\t\t\t\t\treturn daoManager.getOrdersDao().getRowsByRowId(rowId);\n\t\t\t\t}\n\t\t\t});\n\t\t}catch (DaoException de) {\n\t\t\ttry { \n\t\t\t\tthrow new ServiceException(de);\n\t\t\t} catch (ServiceException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\treturn result;\t\n\t}\n\t\n\t\n\n\t/**----------------------------------------------------------\n\t \t*GET ROW ORDER  BY lsOrderId*\n\t  -----------------------------------------------------------*/\n\t@Override\n\tpublic OrdersRows getRowByLsOrderId(final String lsOrderId){\n\t\tOrdersRows result=null;\n\t\ttry{\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tresult = (OrdersRows) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\n\t\t\t\t\treturn daoManager.getOrdersDao().getRowByLsOrderId(lsOrderId);\n\t\t\t\t}\n\t\t\t});\n\t\t}catch (DaoException de) {\n\t\t\ttry { \n\t\t\t\tthrow new ServiceException(de);\n\t\t\t} catch (ServiceException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\treturn result;\t\n\t}\n\t\n\t/**----------------------------------------------------------\n\t \t*CHANGE STATUS OF ROW ORDER TO SHIPPED IN DATABASE*\n\t  -----------------------------------------------------------*/\n\t@Override\n\tpublic boolean makeRowOrderInShippedById(final OrdersRows orderRow){\n\t\tboolean result=false;\n\t\ttry{\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tresult = (Boolean) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\n\t\t\t\t\treturn daoManager.getOrdersDao().makeRowOrderInShippedById(orderRow);\n\t\t\t\t}\n\t\t\t});\n\t\t}catch (DaoException de) {\n\t\t\ttry { \n\t\t\t\tthrow new ServiceException(de);\n\t\t\t} catch (ServiceException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\treturn result;\t\n\t}\n\t\n\t/**----------------------------------------------------------\n\t \t*CHANGE STATUS OF ROW ORDER TO OPEN*\n\t  -----------------------------------------------------------*/\n\t@Override\n\tpublic boolean makeRowOrderInOpenById(final OrdersRows orderRow){\n\t\tboolean result=false;\n\t\ttry{\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tresult = (Boolean) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\n\t\t\t\t\treturn daoManager.getOrdersDao().makeRowOrderInOpenById(orderRow);\n\t\t\t\t}\n\t\t\t});\n\t\t}catch (DaoException de) {\n\t\t\ttry { \n\t\t\t\tthrow new ServiceException(de);\n\t\t\t} catch (ServiceException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\treturn result;\t\n\t}\n\t\n\t/**----------------------------------------------------------\n\t \t*UPDATE STOCK IN TABLE STOCK BY LSPRODUCT*\n\t  -----------------------------------------------------------*/\n\t@Override\n\tpublic boolean updateStockByLsProductId(final ProductDTO productDTO){\n\t\tboolean result=false;\n\t\tfinal Product product=new Product();\n\t\tproduct.setLoyaltySourceProductId(productDTO.getLoyaltyProductId());\n\t\tproduct.setStock(productDTO.getStock());\n\t\ttry{\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tresult = (Boolean) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\n\t\t\t\t\treturn daoManager.getOrdersDao().updateStockByLsProductId(product);\n\t\t\t\t}\n\t\t\t});\n\t\t}catch (DaoException de) {\n\t\t\ttry { \n\t\t\t\tthrow new ServiceException(de);\n\t\t\t} catch (ServiceException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\treturn result;\t\n\t}\n\t\n\t/**----------------------------------------------------------\n\t \t*CHECK IF PRODUCT ALREADY EXIST IN TABLE STOCK*\n\t  -----------------------------------------------------------*/\n\t@Override\n\tpublic boolean isExistProductInStock(ProductDTO productDTO){\n\t\tboolean result=false;\n\t\tfinal Product product=new Product();\n\t\tproduct.setId(productDTO.getId());\n\t\ttry{\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tresult = (Boolean) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\n\t\t\t\t\treturn daoManager.getOrdersDao().isExistProductInStock(product);\n\t\t\t\t}\n\t\t\t});\n\t\t\t}catch (DaoException de) {\n\t\t\ttry { \n\t\t\t\tthrow new ServiceException(de);\n\t\t\t} catch (ServiceException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\treturn result;\t\n\t}\n\t\n\t/**----------------------------------------------------------\n\t \t*INSERT PRODUCT IN TABLE STOCK WHITH QANTITY STOCK*\n\t  -----------------------------------------------------------*/\n\t@Override\n\tpublic boolean insertProductInStock(ProductDTO productDTO){\n\t\tboolean result=false;\n\t\tfinal Product product=new Product();\n\t\tproduct.setId(productDTO.getId());\n\t\tproduct.setStock(productDTO.getStock());\n\t\ttry{\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tresult = (Boolean) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t@Override\n\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\n\t\t\t\treturn daoManager.getOrdersDao().insertProductInStock(product);\n\t\t\t\t}\n\t\t\t});\n\t\t\t}catch (DaoException de) {\n\t\t\ttry { \n\t\t\t\tthrow new ServiceException(de);\n\t\t\t} catch (ServiceException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\treturn result;\t\n\t}\n\t\n\t/**----------------------------------------------------------\n\t \t*CREATE XLS FILE FROM THE LIST ORDERS*\n\t  -----------------------------------------------------------*/\n\t@Override\n\tpublic void generateAdminXLS(List<OrdersDTO> listOrdersDTO,String ordersAdminTemplateFolder,boolean isReport){\n\t\tfinal String sheetName = ""Sheet1"";\n\t\tfinal int ROW_TO_BEGIN=1;\n\t\t//COLUMNS NUMBER\n\t\tfinal int COL_LS_ORDER_ID=1,\n\t\tCOL_PO_NUMBER=2,\n\t\tCOL_CLIENT_NUMBER=3,\n\t\tCOL_CLIENT_ORDER_ID=4,\n\t\tCOL_CLIENT_OTHER_ID=5,\n\t\tCOL_USER_LOGIN=6,\n\t\tCOL_LS_PRODUCT_ID=7,\n\t\tCOL_CLIENT_PRODUCT_NUMBER=8,\n\t\tCOL_P_DESCRIPTION=9,\n\t\tCOL_QUANTITY=10,\n\t\tCOL_UNIT_PRICE=11,\n\t\tCOL_LS_PRICE=12,\n\t\tCOL_TRACKING_NUMBER=13,\n\t\tCOL_STATUS=14,\n\t\tCO_STOCK=15,\n\t\tCOL_CLIENT_FIRST_NAME=16,\n\t\tCOL_CLIENT_LAST_NAME=17,\n\t\tCOL_CLIENT_OTHER_NAMES=18,\n\t\tCOL_CLIENT_STREET=19,\n\t\tCOL_CLIENT_OTHER_STREET=20,\n\t\tCOL_CLIENT_CITY=21,\n\t\tCOL_CLIENT_PROVINCE=22,\n\t\tCOL_CLIENT_POSTAL_CODE=23,\n\t\tCOL_CLIENT_PHONE=24,\n\t\tCOL_CLIENT_EMAIL=25;\n\t\t//COLUMNS Data\n\t\tString LS_ORDER_ID=null;\n\t\tString PO_NUMBER="""";\n\t\tString CLIENT_NUMBER="""";\n\t\tString CLIENT_ORDER_ID="""";\n\t\tString CLIENT_OTHER_ID="""";\n\t\tString LS_PRODUCT_ID="""";\n\t\tString CLIENT_PRODUCT_NUMBER="""";\n\t\tDouble QUANTITY=0D;\n\t\tString P_DESCRIPTION="""";\n\t\tDouble UNIT_PRICE=0D;\n\t\tDouble LS_PRICE=0D;\n\t\tString TRACKING_NUMBER="""";\n\t\tString STATUS="""";\n\t\tDouble STOCK=0D;\n\t\tString USER_LOGIN="""";\n\t\tString CLIENT_FIRST_NAME="""";\n\t\tString CLIENT_LAST_NAME="""";\n\t\tString CLIENT_OTHER_NAMES="""";\n\t\tString CLIENT_STREET="""";\n\t\tString CLIENT_OTHER_ADRESS="""";\n\t\tString CLIENT_CITY="""";\n\t\tString CLIENT_PROVINCE="""";\n\t\tString CLIENT_POSTAL_CODE="""";\n\t\tString CLIENT_PHONE="""";\n\t\tString CLIENT_EMAIL="""";\n\t\tint row = 0;\n\t\ttry {\n\t\tWorkbook existingWorkbook = Workbook.getWorkbook(new File(ordersAdminTemplateFolder+""ordersAdminTemplate.xls""));\n\t\tWritableWorkbook workbookCopy = Workbook.createWorkbook(new File(ordersAdminTemplateFolder+""ordersAdminExport.xls""), existingWorkbook);\n\t\tWritableSheet sheetToEdit = workbookCopy.getSheet(sheetName);\n\n\t    int heightInPoints = 27*27;\n\t    \n\n\t\t// Create cell font and format\n\t   /* WritableFont cellFont = new WritableFont(WritableFont.TIMES, 12);\n\t    cellFont.setColour(Colour.BLACK);\n\t    WritableCellFormat cellFormat = new WritableCellFormat(cellFont);\n\t    cellFormat.setBackground(Colour.ORANGE);\n\t    cellFormat.setVerticalAlignment(VerticalAlignment.CENTRE);\n\t    cellFormat.setBorder(Border.ALL, BorderLineStyle.THIN);*/\n\n\t    // Create cell font and format\n\t    WritableFont cellFont = new WritableFont(WritableFont.TIMES, 12);\n\t    cellFont.setColour(Colour.BLACK);\n\t    \n\t    WritableCellFormat cellFormatAlert = new WritableCellFormat(cellFont);\n\t    //cellFormatOrange.setBackground(Colour.ORANGE);\n\t    cellFormatAlert.setBackground(Colour.ORANGE);\n\t    cellFormatAlert.setVerticalAlignment(VerticalAlignment.CENTRE);\n\t    cellFormatAlert.setAlignment(Alignment.CENTRE);\n\t    cellFormatAlert.setWrap(true);\n\t    cellFormatAlert.setBorder(Border.ALL, BorderLineStyle.THIN);\n\t    \n\t    WritableCellFormat cellFormatNormal = new WritableCellFormat(cellFont);\n\t    //cellFormatOrange.setBackground(Colour.ORANGE);\n\t    cellFormatNormal.setBackground(Colour.LIGHT_TURQUOISE);\n\t    cellFormatNormal.setVerticalAlignment(VerticalAlignment.CENTRE);\n\t    cellFormatNormal.setAlignment(Alignment.CENTRE);\n\t    cellFormatNormal.setWrap(true);\n\t    cellFormatNormal.setBorder(Border.ALL, BorderLineStyle.THIN);\n\t    \n\t    //WritableFont cellFont = new WritableFont(WritableFont.TIMES, 12);\n\t    cellFont.setColour(Colour.BLACK);\n\t    WritableCellFormat cellFormatWhite = new WritableCellFormat(cellFont);\n\t    cellFormatWhite.setBackground(Colour.WHITE);\n\t    cellFormatWhite.setVerticalAlignment(VerticalAlignment.CENTRE);\n\t    cellFormatWhite.setAlignment(Alignment.CENTRE);\n\t    cellFormatWhite.setWrap(true);\n\t    cellFormatWhite.setBorder(Border.ALL, BorderLineStyle.THIN);\n\t    WritableCellFormat cellFormat=null;\n\t    \n\t\tWritableCell cellROW_ID=null;\n\t\tWritableCell cellCLIENT_FIRST_NAME=null;\n\t\tWritableCell cellCLIENT_LAST_NAME=null;\n\t\tWritableCell cellCLIENT_OTHER_NAMES=null;\n\t\tWritableCell cellCLIENT_STREET=null;\n\t\tWritableCell cellCLIENT_OTHER_ADRESS=null;\n\t\tWritableCell cellCLIENT_CITY=null;\n\t\tWritableCell cellCLIENT_PROVINCE=null;\n\t\tWritableCell cellCLIENT_POSTAL_CODE=null;\n\t\tWritableCell cellCLIENT_PHONE=null;\n\t\tWritableCell cellCLIENT_EMAIL=null;\n\t\tWritableCell cellLS_PRODUCT_ID=null;\n\t\tWritableCell cellQUANTITY=null;\n\t\tWritableCell cellUNIT_PRICE=null;\n\t\tWritableCell cellLS_PRICE=null;\n\t\tWritableCell cellSTATUS=null;\n\t\tWritableCell cellSTOCK=null;\n\t\tWritableCell cellUSER_LOGIN=null;\n\t\tWritableCell cellP_DESCRIPTION=null;\n\t\tWritableCell cellPO_NUMBER=null;\n\t\tWritableCell cellCLIENT_NUMBER=null;\n\t\tWritableCell cellCLIENT_PRODUCT_NUMBER=null;\n\t\tWritableCell cellTRACKING_NUMBER=null;\n\t\tWritableCell cellCLIENT_ORDER_ID=null;\n\t\tWritableCell cellCLIENT_OTHER_ID=null;\n\t\t//LABELS\n\t\tLabel labelROW_ID=null,\n\t\tlabelCLIENT_FIRST_NAME=null,\n\t\tlabelCLIENT_LAST_NAME=null,\n\t\tlabelCLIENT_OTHER_NAMES=null,\n\t\tlabelCLIENT_STREET=null,\n\t\tlabelCLIENT_OTHER_ADRESS=null,\n\t\tlabelCLIENT_CITY=null,\n\t\tlabelCLIENT_PROVINCE=null,\n\t\tlabelCLIENT_POSTAL_CODE=null,\n\t\tlabelCLIENT_PHONE=null,\n\t\tlabelCLIENT_EMAIL=null,\n\t\tlabelLS_PRODUCT_ID=null,\n\t\tlabelQUANTITY=null,\n\t\tlabelUNIT_PRICE=null,\n\t\tlabelLS_PRICE=null,\n\t\tlabelSTATUS=null,\n\t\tlabelSTOCK=null,\n\t\tlabelUSER_LOGIN=null,\n\t\tlabelP_DESCRIPTION=null,\n\t\tlabelPO_NUMBER=null,\n\t\tlabelCLIENT_NUMBER=null,\n\t\tlabelCLIENT_PRODUCT_NUMBER=null,\n\t\tlabelTRACKING_NUMBER=null,\n\t\tlabelCLIENT_ORDER_ID=null,\n\t\tlabelCLIENT_OTHER_ID=null;\n\t\n\t\t//START FROM ROW_TO_BEGIN\n\t\trow = ROW_TO_BEGIN;\n\t\tint orderIndex=0;\n\t\tint pair=0;\n\t\tfor (OrdersDTO orderDTO : listOrdersDTO) {\n\t\t\t\n\t\t\torderIndex++;\n\t\t\tpair=orderIndex%2;\n\t\t\tswitch (pair) {\n\t\t\tcase 0:\n\t\t\t\tcellFormat=cellFormatWhite;\n\t\t\t\tbreak;\n\t\t\tcase 1:\n\t\t\t\tcellFormat=cellFormatNormal;\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tLS_ORDER_ID="""";\n\t\t\tPO_NUMBER="""";\n\t\t\tCLIENT_NUMBER="""";\n\t\t\tLS_PRODUCT_ID="""";\n\t\t\tCLIENT_PRODUCT_NUMBER="""";\n\t\t\tQUANTITY=0D;\n\t\t\tP_DESCRIPTION="""";\n\t\t\tUNIT_PRICE=0D;\n\t\t\tLS_PRICE=0D;\n\t\t\tTRACKING_NUMBER="""";\n\t\t\tSTATUS="""";\n\t\t\tSTOCK=null;\n\t\t\tUSER_LOGIN="""";\n\t\t\tCLIENT_FIRST_NAME="""";\n\t\t\tCLIENT_LAST_NAME="""";\n\t\t\tCLIENT_OTHER_NAMES="""";\n\t\t\tCLIENT_STREET="""";\n\t\t\tCLIENT_OTHER_ADRESS="""";\n\t\t\tCLIENT_CITY="""";\n\t\t\tCLIENT_PROVINCE="""";\n\t\t\tCLIENT_POSTAL_CODE="""";\n\t\t\tCLIENT_PHONE="""";\n\t\t\tCLIENT_EMAIL="""";\n\n\t\t\t// 1: LS_ORDER_ID (must be lest than 35 letters)\n\t\t\tif (orderDTO.getLsOrderId() != null)LS_ORDER_ID = orderDTO.getLsOrderId();\n\t\t\tlabelROW_ID = new Label(COL_LS_ORDER_ID-1, row, LS_ORDER_ID,cellFormat);\n\t\t\tcellROW_ID = (WritableCell) labelROW_ID;\n\t\t\tsheetToEdit.addCell(cellROW_ID);\n\t\t\t\n\t\t\t// 2: COL_PO_NUMBER\n\t\t\tif (orderDTO.getProductOrderNumber() != null)PO_NUMBER = orderDTO.getProductOrderNumber();\n\t\t\tlabelPO_NUMBER = new Label(COL_PO_NUMBER-1, row, PO_NUMBER,cellFormat);\n\t\t\tcellPO_NUMBER = (WritableCell)labelPO_NUMBER;\n\t\t\tsheetToEdit.addCell(cellPO_NUMBER);\n\t\t\t\n\t\t\t// 3: COL_CLIENT_NUMBER\n\t\t\tif (orderDTO.getClientNumber() != null)CLIENT_NUMBER = orderDTO.getClientNumber();\n\t\t\tlabelCLIENT_NUMBER = new Label(COL_CLIENT_NUMBER-1, row, CLIENT_NUMBER,cellFormat);\n\t\t\tcellCLIENT_NUMBER = (WritableCell)labelCLIENT_NUMBER;\n\t\t\tsheetToEdit.addCell(cellCLIENT_NUMBER);\n\n\t\t\t// 4: CLIENT_ORDER_ID\n\t\t\tif (orderDTO.getClientOrderNumber() == null)orderDTO.setClientOrderNumber("""");\n\t\t\tCLIENT_ORDER_ID = orderDTO.getClientOrderNumber();\n\t\t\t\tlabelCLIENT_ORDER_ID = new Label(COL_CLIENT_ORDER_ID-1, row, CLIENT_ORDER_ID,cellFormat);\n\t\t\t\tcellCLIENT_ORDER_ID = (WritableCell) labelCLIENT_ORDER_ID;\n\t\t\t\tsheetToEdit.addCell(cellCLIENT_ORDER_ID);\n\n\t\t\t// 5: CLIENT_OTHER_ID\n\t\t\tif (orderDTO.getClientOtherId()!= null)\tCLIENT_OTHER_ID = orderDTO.getClientOtherId();\n\t\t\tlabelCLIENT_OTHER_ID = new Label(COL_CLIENT_OTHER_ID-1, row, CLIENT_OTHER_ID,cellFormat);\n\t\t\tcellCLIENT_OTHER_ID = (WritableCell) labelCLIENT_OTHER_ID;\n\t\t\tsheetToEdit.addCell(cellCLIENT_OTHER_ID);\n\n\t\t\t// 6: PARTNER NAME (must be lest than 30 letters)\n\t\t\tif (orderDTO.getUserLogin() != null)USER_LOGIN = orderDTO.getUserLogin();\n\t\t\tif( USER_LOGIN.length()>30 || USER_LOGIN.equals("""") ){\n\t\t\t\tlabelUSER_LOGIN = new Label(COL_USER_LOGIN-1, row, USER_LOGIN,cellFormatAlert);\n\t\t\t}else{\n\t\t\t\tlabelUSER_LOGIN = new Label(COL_USER_LOGIN-1, row, USER_LOGIN,cellFormat);\n\t\t\t}\n\t\t\tcellUSER_LOGIN = (WritableCell) labelUSER_LOGIN;\n\t\t\tsheetToEdit.addCell(cellUSER_LOGIN);\n\n\t\t\t// 7: LS_PRODUCT_ID (must be lest than 30 letters)\n\t\t\tif (orderDTO.getLsProductID() != null)LS_PRODUCT_ID = orderDTO.getLsProductID();\n\t\t\tlabelLS_PRODUCT_ID = new Label(COL_LS_PRODUCT_ID-1, row, LS_PRODUCT_ID,cellFormat);\n\t\t\tcellLS_PRODUCT_ID = (WritableCell) labelLS_PRODUCT_ID;\n\t\t\tsheetToEdit.addCell(cellLS_PRODUCT_ID);\n\t\t\t\n\t\t\t// 8: COL_CLIENT_PRODUCT_NUMBER\n\t\t\tif (orderDTO.getClientProductNumber()!= null)CLIENT_PRODUCT_NUMBER = orderDTO.getClientProductNumber();\n\t\t\tlabelCLIENT_PRODUCT_NUMBER = new Label(COL_CLIENT_PRODUCT_NUMBER-1, row, CLIENT_PRODUCT_NUMBER,cellFormat);\n\t\t\tcellCLIENT_PRODUCT_NUMBER = (WritableCell)labelCLIENT_PRODUCT_NUMBER;\n\t\t\tsheetToEdit.addCell(cellCLIENT_PRODUCT_NUMBER);\n\t\t\t\n\t\t\t// 9: DESCRIPTION\n\t\t\tif (orderDTO.getProductDescription() != null)P_DESCRIPTION = orderDTO.getProductDescription();\n\t\t\tlabelP_DESCRIPTION = new Label(COL_P_DESCRIPTION-1, row, P_DESCRIPTION,cellFormat);\n\t\t\tcellP_DESCRIPTION = (WritableCell) labelP_DESCRIPTION;\n\t\t\tsheetToEdit.addCell(cellP_DESCRIPTION);\n\t\t\t\n\t\t\t// 10: QANTITY\n\t\t\tif (orderDTO.getQuantity() != null)QUANTITY = orderDTO.getQuantity();\n\t\t\tString strQUANTITY=QUANTITY.toString();\n\t\t\tlabelQUANTITY = new Label(COL_QUANTITY-1, row, strQUANTITY,cellFormat);\n\t\t\tcellQUANTITY = (WritableCell) labelQUANTITY;\n\t\t\tsheetToEdit.addCell(cellQUANTITY);\n\t\t\t\n\t\t\t// 11: UNIT_PRICE\n\t\t\tif (orderDTO.getUnitPrice() != null)UNIT_PRICE = orderDTO.getUnitPrice();\n\t\t\tString strUNIT_PRICE=UNIT_PRICE.toString();\n\t\t\tlabelUNIT_PRICE = new Label(COL_UNIT_PRICE-1, row, strUNIT_PRICE,cellFormat);\n\t\t\tcellUNIT_PRICE = (WritableCell) labelUNIT_PRICE;\n\t\t\tsheetToEdit.addCell(cellUNIT_PRICE);\n\t\t\t\n\t\t\t// 12: LS_PRICE\n\t\t\tif (orderDTO.getLsPrice() != null)LS_PRICE = orderDTO.getLsPrice();\n\t\t\tString strLS_PRICE=LS_PRICE.toString();\n\t\t\tlabelLS_PRICE = new Label(COL_LS_PRICE-1, row, strLS_PRICE,cellFormat);\n\t\t\tcellLS_PRICE = (WritableCell) labelLS_PRICE;\n\t\t\tsheetToEdit.addCell(cellLS_PRICE);\n\t\t\t\n\t\t\t// 13:COL_TRACKING_NUMBER\n\t\t\tif (orderDTO.getTrackingNumber()!= null)TRACKING_NUMBER = orderDTO.getTrackingNumber();\n\t\t\tlabelTRACKING_NUMBER = new Label(COL_TRACKING_NUMBER-1, row, TRACKING_NUMBER,cellFormat);\n\t\t\tcellTRACKING_NUMBER = (WritableCell)labelTRACKING_NUMBER;\n\t\t\tsheetToEdit.addCell(cellTRACKING_NUMBER);\n\t\t\t\n\t\t\t// 14: STATUS\n\t\t\tif (orderDTO.getStatus() != null)STATUS = orderDTO.getStatus();\n\t\t\tlabelSTATUS = new Label(COL_STATUS-1, row, STATUS,cellFormat);\n\t\t\tcellSTATUS = (WritableCell) labelSTATUS;\n\t\t\tsheetToEdit.addCell(cellSTATUS);\n\t\t\t\n\t\t\t// 15: STOCK \n\t\t\tif (orderDTO.getStock() != null)STOCK = orderDTO.getStock();\n\t\t\tString strSTOCK=STOCK.toString();\n\t\t\tlabelSTOCK = new Label(CO_STOCK-1, row, strSTOCK,cellFormat);\n\t\t\tcellSTOCK = (WritableCell) labelSTOCK;\n\t\t\tsheetToEdit.addCell(cellSTOCK);\n\t\t\t\n\t\t\t// 16: CLIENT_FIRST_NAME (must be lest than 30 letters)\n\t\t\tif (orderDTO.getClientFirstName() != null)CLIENT_FIRST_NAME = orderDTO.getClientFirstName();\n\t\t\tif(CLIENT_FIRST_NAME ==null || CLIENT_FIRST_NAME.length()>30 || CLIENT_FIRST_NAME.equals("""")){\n\t\t\t\tlabelCLIENT_FIRST_NAME = new Label(COL_CLIENT_FIRST_NAME-1, row, CLIENT_FIRST_NAME,cellFormatAlert);\n\t\t\t}else{\n\t\t\t\tlabelCLIENT_FIRST_NAME = new Label(COL_CLIENT_FIRST_NAME-1, row, CLIENT_FIRST_NAME,cellFormat);\n\t\t\t}\n\t\t\tcellCLIENT_FIRST_NAME = (WritableCell) labelCLIENT_FIRST_NAME;\n\t\t\tsheetToEdit.addCell(cellCLIENT_FIRST_NAME);\n\n\t\t\t// 17: CLIENT_LAST_NAME (must be lest than 40 letters)\n\t\t\tif (orderDTO.getClientLastName() != null)CLIENT_LAST_NAME = orderDTO.getClientLastName();\n\t\t\tif(CLIENT_LAST_NAME==null || CLIENT_LAST_NAME.length()>40 || CLIENT_LAST_NAME.equals("""")){\n\t\t\t\tlabelCLIENT_LAST_NAME = new Label(COL_CLIENT_LAST_NAME-1, row, CLIENT_LAST_NAME,cellFormatAlert);\n\t\t\t}else{\n\t\t\t\tlabelCLIENT_LAST_NAME = new Label(COL_CLIENT_LAST_NAME-1, row, CLIENT_LAST_NAME,cellFormat);\n\t\t\t}\n\t\t\tcellCLIENT_LAST_NAME = (WritableCell) labelCLIENT_LAST_NAME;\n\t\t\tsheetToEdit.addCell(cellCLIENT_LAST_NAME);\n\t\t\t\n\t\t\t// 18: CLIENT_OTHER_NAMES (must be lest than 15 letters)\n\t\t\tif (orderDTO.getClientOtherNames() != null)CLIENT_OTHER_NAMES = orderDTO.getClientOtherNames();\n\t\t\tlabelCLIENT_OTHER_NAMES = new Label(COL_CLIENT_OTHER_NAMES-1, row, CLIENT_OTHER_NAMES,cellFormat);\n\t\t\tcellCLIENT_OTHER_NAMES = (WritableCell) labelCLIENT_OTHER_NAMES;\n\t\t\tsheetToEdit.addCell(cellCLIENT_OTHER_NAMES);\n\t\t\t\n\t\t\t// 19: CLIENT_STREET (must be lest than 44 letters)\n\t\t\tif (orderDTO.getClientStreet() != null)CLIENT_STREET = orderDTO.getClientStreet();\n\t\t\tif(CLIENT_STREET==null || CLIENT_STREET.length()>44 || CLIENT_STREET.equals("""")){\n\t\t\t\tlabelCLIENT_STREET = new Label(COL_CLIENT_STREET-1, row, CLIENT_STREET,cellFormatAlert);\n\t\t\t}else{\n\t\t\t\tlabelCLIENT_STREET = new Label(COL_CLIENT_STREET-1, row, CLIENT_STREET,cellFormat);\n\t\t\t}\n\t\t\tcellCLIENT_STREET = (WritableCell) labelCLIENT_STREET;\n\t\t\tsheetToEdit.addCell(cellCLIENT_STREET);\n\t\t\t\n\t\t\t// 20: CLIENT_OTHER_STREET (must be lest than 44 letters)\n\t\t\tif (orderDTO.getClientOtherStreet()!= null)CLIENT_OTHER_ADRESS = orderDTO.getClientOtherStreet();\n\t\t\tif(CLIENT_OTHER_ADRESS.length()>44){\n\t\t\t\tlabelCLIENT_OTHER_ADRESS = new Label(COL_CLIENT_OTHER_STREET-1, row, CLIENT_OTHER_ADRESS,cellFormatAlert);\n\t\t\t}else{\n\t\t\t\tlabelCLIENT_OTHER_ADRESS = new Label(COL_CLIENT_OTHER_STREET-1, row, CLIENT_OTHER_ADRESS,cellFormat);\n\t\t\t}\n\t\t\tcellCLIENT_OTHER_ADRESS = (WritableCell) labelCLIENT_OTHER_ADRESS;\n\t\t\tsheetToEdit.addCell(cellCLIENT_OTHER_ADRESS);\n\n\t\t\t// 21: CLIENT_CITY (must be lest than 25 letters)\n\t\t\tif (orderDTO.getClientCity()!= null && orderDTO.getClientCity().length()<=25)CLIENT_CITY = orderDTO.getClientCity();\n\t\t\tif(CLIENT_CITY.length()>25 || CLIENT_CITY.equals("""") ){\n\t\t\t\tlabelCLIENT_CITY = new Label(COL_CLIENT_CITY-1, row, CLIENT_CITY,cellFormatAlert);\n\t\t\t}else{\n\t\t\t\tlabelCLIENT_CITY = new Label(COL_CLIENT_CITY-1, row, CLIENT_CITY,cellFormat);\n\t\t\t}\n\t\t\tcellCLIENT_CITY = (WritableCell) labelCLIENT_CITY;\n\t\t\tsheetToEdit.addCell(cellCLIENT_CITY);\n\t\t\t\n\t\t\t// 22: CLIENT_PROVINCE (must be lest than 2 letters)\n\t\t\tif (orderDTO.getClientProvince()!= null)CLIENT_PROVINCE = orderDTO.getClientProvince();\n\t\t\tif(CLIENT_PROVINCE.length()>2 || CLIENT_PROVINCE.equals("""") || (orderDTO.getProvinceNotFound()!=null && orderDTO.getProvinceNotFound()==1L)){\n\t\t\t\tlabelCLIENT_PROVINCE = new Label(COL_CLIENT_PROVINCE-1, row, CLIENT_PROVINCE,cellFormatAlert);\n\t\t\t}else{\n\t\t\t\tlabelCLIENT_PROVINCE = new Label(COL_CLIENT_PROVINCE-1, row, CLIENT_PROVINCE,cellFormat);\n\t\t\t}\n\t\t\tcellCLIENT_PROVINCE = (WritableCell) labelCLIENT_PROVINCE;\n\t\t\tsheetToEdit.addCell(cellCLIENT_PROVINCE);\n\t\t\t\t\n\t\t\t// 23: CLIENT_POSTAL_CODE (must be lest than 14 letters)\n\t\t\tif (orderDTO.getClientPostalCode()!= null && orderDTO.getClientPostalCode().length()<=14)CLIENT_POSTAL_CODE = orderDTO.getClientPostalCode();\n\t\t\tif(CLIENT_POSTAL_CODE.length()>14 || CLIENT_POSTAL_CODE.equals("""")){\n\t\t\t\tlabelCLIENT_POSTAL_CODE = new Label(COL_CLIENT_POSTAL_CODE-1, row, CLIENT_POSTAL_CODE,cellFormatAlert);\n\t\t\t}else{\n\t\t\t\tlabelCLIENT_POSTAL_CODE = new Label(COL_CLIENT_POSTAL_CODE-1, row,CLIENT_POSTAL_CODE,cellFormat);\n\t\t\t}\n\t\t\tcellCLIENT_POSTAL_CODE = (WritableCell) labelCLIENT_POSTAL_CODE;\n\t\t\tsheetToEdit.addCell(cellCLIENT_POSTAL_CODE);\n\n\t\t\t// 24: CLIENT_PHONE (must be lest than 25 letters)\n\t\t\tif (orderDTO.getClientPhone()!= null)CLIENT_PHONE = orderDTO.getClientPhone();\n\t\t\tif(CLIENT_PHONE.length()>25){\n\t\t\t\tlabelCLIENT_PHONE = new Label(COL_CLIENT_PHONE-1, row, CLIENT_PHONE,cellFormatAlert);\n\t\t\t}else{\n\t\t\t\tlabelCLIENT_PHONE = new Label(COL_CLIENT_PHONE-1, row, CLIENT_PHONE,cellFormat);\n\t\t\t}\n\t\t\tcellCLIENT_PHONE = (WritableCell) labelCLIENT_PHONE;\n\t\t\tsheetToEdit.addCell(cellCLIENT_PHONE);\n\t\t\t\t\n\t\t\t// 25: CLIENT_EMAIL (must be lest than 60 letters)\n\t\t\tif (orderDTO.getClientEmail()!= null)CLIENT_EMAIL = orderDTO.getClientEmail();\n\t\t\tif(CLIENT_EMAIL.length()>60){\n\t\t\t\tlabelCLIENT_EMAIL = new Label(COL_CLIENT_EMAIL-1, row, CLIENT_EMAIL,cellFormatAlert);\n\t\t\t}else{\n\t\t\t\tlabelCLIENT_EMAIL = new Label(COL_CLIENT_EMAIL-1, row, CLIENT_EMAIL,cellFormat);\n\t\t\t}\n\t\t\tcellCLIENT_EMAIL = (WritableCell) labelCLIENT_EMAIL;\n\t\t\tsheetToEdit.addCell(cellCLIENT_EMAIL);\n\t\t\t\n\t\t\t//change height row 32px\n\t\t\tsheetToEdit.setRowView(row,heightInPoints);\n\t\t\t++row;\n\t\t}\n\t\tworkbookCopy.write();\n\t\tworkbookCopy.close();\n\t\texistingWorkbook.close();\n\t\t\n\t\t} catch (Exception x) {\n\t\tx.printStackTrace();\n\t\t}\n\t}\n\t\n\n\t/**----------------------------------------------------------\n\t \t*THESE METHODS USED IN CHANGING XLS CELL FORMAT*\n\t  -----------------------------------------------------------*/\n\n\t/*public static WritableCell getWCell(int $colNum, int $rowNum, WritableSheet $writableSheet){\n\t\t return $writableSheet.getWritableCell($colNum, $rowNum);\n\t}\n\t\n\t\n\tpublic static boolean isCell(WritableCell $writableCell){\n\t\treturn ($writableCell.getType() == CellType.LABEL) ? true : false;\n\t}\n\t\n\t\n\tpublic static WritableCell getValidWritableCell(int $colNum, int $rowNum, WritableSheet $writableSheet) throws RowsExceededException, WriteException{\n\t\tWritableCell cell = getWCell($colNum, $rowNum, $writableSheet);\n\t\t\n\t\tif (!isCell(cell)){\n\t\t\t// Cell doesn't exist (well, it's empty), we need to 'add' the cell and re-reference.\n\t\t\t$writableSheet.addCell(new Label($colNum, $rowNum, """")); \n\t\t\tcell = getWCell($colNum, $rowNum, $writableSheet);\n\t\t}\n\t\t\n\t\treturn cell;\n\t}*/\n\n\t/**----------------------------------------------------------\n\t \t*CREATE XLS FILE FROM THE LIST ORDERS*\n\t  -----------------------------------------------------------*/\n\t@Override\n\tpublic void generateInvoicedXLS(List<OrdersDTO> listOrdersDTO,String ordersAdminTemplateFolder,boolean insert){\n\t\tfinal String sheetName = ""Sheet1"";\n\t\tfinal int ROW_TO_BEGIN=1;\n\t\t//COLUMNS NUMBER\n\t\tfinal int COL_PATNER_NAME=2;\n\t\tfinal int COL_INVOICE_NUMBER=3;\n\t\tfinal int COL_QUANTITY=4;\n\t\tfinal int COL_PO_NUMBER=5;\n\t\tfinal int COL_CLIENT_ORDER_NUMBER=6;\n\t\tfinal int COL_CLIENT_OTHER_ID=7;\n\t\tfinal int COL_LS_PRODUCT_ID=8;\n\t\tfinal int COL_CLIENT_PRODUCT_NUMBER=9;\n\t\tfinal int COL_CLIENT_NUMBER=10;\n\t\tfinal int COL_UNIT_PRICE=11;\n\t\tfinal int COL_TRACKING_NUMBER=12;\n\t\tfinal int COL_SHIPPING_PRICE=13;\n\t\tfinal int COL_SHIPED_DATE=14;\n\t\tfinal int COL_SHIPED_PROVINCE=15;\n\n\t\tfinal int COL_FIRST_NAME=16;\n\t\tfinal int COL_LAST_NAME\t=17;\n\t\tfinal int COL_OTHER_NAMES=18;\n\t\tfinal int COL_STREET=19;\n\t\tfinal int COL_OTHER_ADDRESS=20;\t\n\t\tfinal int COL_CITY_CLIENT =21;\n\t\tfinal int COL_PROVINCE=22;\n\t\tfinal int COL_POSTAL_CODE=23;\n\n\t\t//COLUMNS Data\n\t\t\n\t\tString PATNER_NAME="""";\n\t\tString INVOICE_NUMBER="""";\n\t\tDouble QUANTITY=0D;\n\t\tString PO_NUMBER="""";\n\t\tString CLIENT_ORDER_NUMBER="""";\n\t\tString CLIENT_OTHER_ID="""";\n\t\tString LS_PRODUCT_ID="""";\n\t\tString CLIENT_PRODUCT_NUMBER="""";\n\t\tString CLIENT_NUMBER="""";\n\t\tDouble UNIT_PRICE=0D;\n\t\tString TRACKING_NUMBER="""";\n\t\tDouble SHIPPING_PRICE=0D;\n\t\tDateTime SHIPED_DATE=null;\n\t\tString SHIPED_PROVINCE="""";\n\n\t\tString FIRST_NAME="""";\n\t\tString LAST_NAME="""";\n\t\tString OTHER_NAMES="""";\n\t\tString STREET="""";\n\t\tString OTHER_ADDRESS="""";\t\n\t\tString CITY_CLIENT="""";\n\t\tString PROVINCE="""";\n\t\tString POSTAL_CODE="""";\n\n\t\tint row = ROW_TO_BEGIN;\n\t\ttry {\n\t\tWorkbook existingWorkbook = Workbook.getWorkbook(new File(ordersAdminTemplateFolder+""invoicesTemplate.xls""));\n\t\tWritableWorkbook workbookCopy = Workbook.createWorkbook(new File(ordersAdminTemplateFolder+""invoicedOrders.xls""), existingWorkbook);\n\t\tWritableSheet sheetToEdit = workbookCopy.getSheet(sheetName);\n\n\t    // Create cell font and format\n\t    WritableFont cellFont = new WritableFont(WritableFont.TIMES, 12);\n\t    cellFont.setColour(Colour.BLACK);\n\t    WritableCellFormat cellFormatOrange = new WritableCellFormat(cellFont);\n\t    cellFormatOrange.setBackground(Colour.ORANGE);\n\t    cellFormatOrange.setVerticalAlignment(VerticalAlignment.CENTRE);\n\t    cellFormatOrange.setAlignment(Alignment.CENTRE);\n\t    cellFormatOrange.setWrap(true);\n\t    cellFormatOrange.setBorder(Border.ALL, BorderLineStyle.THIN);\n\n\t    //WritableFont cellFont = new WritableFont(WritableFont.TIMES, 12);\n\t    cellFont.setColour(Colour.BLACK);\n\t    WritableCellFormat cellFormatWhite = new WritableCellFormat(cellFont);\n\t    cellFormatWhite.setBackground(Colour.WHITE);\n\t    cellFormatWhite.setVerticalAlignment(VerticalAlignment.CENTRE);\n\t    cellFormatWhite.setAlignment(Alignment.CENTRE);\n\t    cellFormatWhite.setWrap(true);\n\t    cellFormatWhite.setBorder(Border.ALL, BorderLineStyle.THIN);\n\t    \n\t    WritableCellFormat cellFormat=null;\n\n\t    //format date:orange color\n\t    DateFormat orangeCustomDateFormat = new DateFormat (""dd/MM/yyyy"");\n\t    WritableCellFormat orangeDateFormat = new WritableCellFormat (orangeCustomDateFormat);\n\t    orangeDateFormat.setBackground(Colour.ORANGE);\n\t    orangeDateFormat.setVerticalAlignment(VerticalAlignment.CENTRE);\n\t    orangeDateFormat.setAlignment(Alignment.CENTRE);\n\t    orangeDateFormat.setBorder(Border.ALL, BorderLineStyle.THIN);\n\t    \n\t    //format date:White color\n\t    DateFormat whiteCustomDateFormat = new DateFormat (""dd/MM/yyyy"");\n\t    WritableCellFormat whiteDateFormat = new WritableCellFormat (whiteCustomDateFormat);\n\t    whiteDateFormat.setBackground(Colour.WHITE);\n\t    whiteDateFormat.setVerticalAlignment(VerticalAlignment.CENTRE);\n\t    whiteDateFormat.setAlignment(Alignment.CENTRE);\n\t    whiteDateFormat.setBorder(Border.ALL, BorderLineStyle.THIN);\n\t    \n\t    WritableCellFormat cellDateFormat=null;\n\t    \n\t    //format Number: Orange color\n\t    WritableCellFormat orangeNumberFormat=new WritableCellFormat(new  jxl.write.NumberFormat(""0.00""));\n\t    orangeNumberFormat.setBackground(Colour.ORANGE);\n\t    orangeNumberFormat.setVerticalAlignment(VerticalAlignment.CENTRE);\n\t    orangeNumberFormat.setAlignment(Alignment.CENTRE);\n\t    orangeNumberFormat.setBorder(Border.ALL, BorderLineStyle.THIN);\n\t    \n\t    //format Number: White color\n\t    WritableCellFormat whiteNumberFormat=new WritableCellFormat(new  jxl.write.NumberFormat(""0.00""));\n\t    whiteNumberFormat.setBackground(Colour.WHITE);\n\t    whiteNumberFormat.setVerticalAlignment(VerticalAlignment.CENTRE);\n\t    whiteNumberFormat.setAlignment(Alignment.CENTRE);\n\t    whiteNumberFormat.setBorder(Border.ALL, BorderLineStyle.THIN);\n\t    \n\t    WritableCellFormat cellNumberFormat=null;\n\t    \n\t    WritableCellFormat cellShppedDateFormatWhite = new WritableCellFormat(cellFont);\n\t    cellShppedDateFormatWhite.setBackground(Colour.WHITE);\n\t    WritableCellFormat cellShppedDateFormatOrange = new WritableCellFormat(cellFont);\n\t    cellShppedDateFormatOrange.setBackground(Colour.ORANGE);\n\t    \n\t\tWritableCell cellPATNER_NAME=null;\n\t\tWritableCell cellINVOICE_NUMBER=null;\n\t\tWritableCell cellQUANTITY=null;\n\t\tWritableCell cellPO_NUMBER=null;\n\t\tWritableCell cellCLIENT_ORDER_NUMBER=null;\n\t\tWritableCell cellCLIENT_OTHER_ID=null;\n\t\tWritableCell cellLS_PRODUCT_ID=null;\n\t\tWritableCell cellCLIENT_PRODUCT_NUMBER=null;\n\t\tWritableCell cellCLIENT_NUMBER=null;\n\t\tWritableCell cellUNIT_PRICE=null;\n\t\tWritableCell cellTRACKING_NUMBER=null;\n\t\tWritableCell cellSHIPPING_PRICE=null;\n\t\tWritableCell cellSHIPED_PROVINCE=null;\n\t\t\n\t\tWritableCell cellFIRST_NAME=null;\n\t\tWritableCell cellLAST_NAME=null;\n\t\tWritableCell cellOTHER_NAMES=null;\n\t\tWritableCell cellSTREET=null;\n\t\tWritableCell cellOTHER_ADDRESS=null;\t\n\t\tWritableCell cellCITY_CLIENT=null;\n\t\tWritableCell cellPROVINCE=null;\n\t\tWritableCell cellPOSTAL_CODE=null;\n\n\t\t//LABELS\n\t\tLabel labelPATNER_NAME=null;\n\t\tLabel labelINVOICE_NUMBER=null;\n\t\tLabel labelQUANTITY=null;\n\t\tLabel labelPO_NUMBER=null;\n\t\tLabel labelCLIENT_ORDER_NUMBER=null;\n\t\tLabel labelCLIENT_OTHER_ID=null;\n\t\tLabel labelLS_PRODUCT_ID=null;\n\t\tLabel labelCLIENT_PRODUCT_NUMBER=null;\n\t\tLabel labelCLIENT_NUMBER=null;\n\t\tLabel labelUNIT_PRICE=null;\n\t\tLabel labelTRACKING_NUMBER=null;\n\t\tLabel labelSHIPPING_PRICE=null;\n\t\tLabel labelSHIPED_PROVINCE=null;\n\t\t\n\t\tLabel labelFIRST_NAME=null;\n\t\tLabel labelLAST_NAME=null;\n\t\tLabel labelOTHER_NAMES=null;\n\t\tLabel labelSTREET=null;\n\t\tLabel labelOTHER_ADDRESS=null;\t\n\t\tLabel labelCITY_CLIENT=null;\n\t\tLabel labelPROVINCE=null;\n\t\tLabel labelPOSTAL_CODE=null;\n\n\t\tjxl.write.Number number=null;\n\t\t\n\t\t//START FROM ROW_TO_BEGIN\n\t\trow = ROW_TO_BEGIN;\n\t\tint orderIndex=0;\n\t\tint pair=0;\n\t\tString partnerLogin="""";\n\t\tboolean userLoginChecked=false;\n\t\tUser user=null;\n\t\tif(listOrdersDTO!=null && listOrdersDTO.size()>0){\n\t\t\tOrdersDTO orderDTO=listOrdersDTO.get(0);\n\t\t\tpartnerLogin=orderDTO.getUserLogin();\n\t\t\tif(partnerLogin==null)partnerLogin="""";\n\t\t\tuser=userService.getUserByLogin(partnerLogin);\n\t\t}\n\t\tfor (OrdersDTO orderDTO : listOrdersDTO) {\n\t\t\tif(orderDTO.getPrint()!=null && orderDTO.getPrint() && \n\t\t\t\t\t(orderDTO.getStatus().equals(""shipped"")||orderDTO.getStatus().equals(""invoiced""))){\n\t\t\t\tif(!userLoginChecked){\n\t\t\t\t\tpartnerLogin=orderDTO.getUserLogin();\n\t\t\t\t\tif(partnerLogin==null)partnerLogin="""";\n\t\t\t\t\tuser=userService.getUserByLogin(partnerLogin);\n\t\t\t\t\tif(user!=null)userLoginChecked=true;\n\t\t\t\t}\n\t\t\t\tif(userLoginChecked && orderDTO.getUserLogin().equals(partnerLogin)){\n\t\t\t\t\torderIndex++;\n\t\t\t\t\tpair=orderIndex%2;\n\t\t\t\t\tswitch (pair) {\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\tcellFormat=cellFormatWhite;\n\t\t\t\t\t\tcellDateFormat=whiteDateFormat;\n\t\t\t\t\t\tcellNumberFormat=whiteNumberFormat;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\tcellFormat=cellFormatOrange;\n\t\t\t\t\t\tcellDateFormat=orangeDateFormat;\n\t\t\t\t\t\tcellNumberFormat=orangeNumberFormat;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t    sheetToEdit.setRowView(row, 23*23);\n\t\t\t\t    \n\t\t\t\t    \n\t\t\t\t\t//COLUMNS Data\n\t\t\t\t\t\n\t\t\t\t\tPATNER_NAME="""";\n\t\t\t\t\tINVOICE_NUMBER="""";\n\t\t\t\t\tQUANTITY=0D;\n\t\t\t\t\tPO_NUMBER="""";\n\t\t\t\t\tCLIENT_ORDER_NUMBER="""";\n\t\t\t\t\tCLIENT_OTHER_ID="""";\n\t\t\t\t\tLS_PRODUCT_ID="""";\n\t\t\t\t\tCLIENT_PRODUCT_NUMBER="""";\n\t\t\t\t\tCLIENT_NUMBER="""";\n\t\t\t\t\tUNIT_PRICE=0D;\n\t\t\t\t\tTRACKING_NUMBER="""";\n\t\t\t\t\tSHIPPING_PRICE=0D;\n\t\t\t\t\tSHIPED_DATE=null;\n\t\t\t\t\tSHIPED_PROVINCE="""";\n\n\t\t\t\t\tFIRST_NAME="""";\n\t\t\t\t\tLAST_NAME="""";\n\t\t\t\t\tOTHER_NAMES="""";\n\t\t\t\t\tSTREET="""";\n\t\t\t\t\tOTHER_ADDRESS="""";\t\n\t\t\t\t\tCITY_CLIENT="""";\n\t\t\t\t\tPROVINCE="""";\n\t\t\t\t\tPOSTAL_CODE="""";\n\n\t\t\t\t\t//================== Data Order ==================\n\t\t\t\t\t//------------------ COL_2: PATNER_NAME ----------\n\t\t\t\t\tif (orderDTO.getUserLogin()!= null)\tPATNER_NAME = orderDTO.getUserLogin();\n\t\t\t\t\tlabelPATNER_NAME = new Label(COL_PATNER_NAME-1, row, PATNER_NAME,cellFormat);\n\t\t\t\t\tcellPATNER_NAME = (WritableCell) labelPATNER_NAME;\n\t\t\t\t\tsheetToEdit.addCell(cellPATNER_NAME);\n\t\t\t\t\t\n\t\t\t\t\t//------------------ COL_3: INVOICE_NUMBER --------\n\t\t\t\t\t  //Nothing in the this column\n\t\t\t\t\t\tlabelINVOICE_NUMBER = new Label(COL_INVOICE_NUMBER-1, row, """",cellFormat);\n\t\t\t\t\t\tcellINVOICE_NUMBER = (WritableCell) labelINVOICE_NUMBER;\n\t\t\t\t\t\tsheetToEdit.addCell(cellINVOICE_NUMBER);\n\n\t\t\t\t\t//------------------ COL_4: QUANTITY ---------------\n\t\t\t\t\tif (orderDTO.getQuantity() != null)QUANTITY = orderDTO.getQuantity();\n\t\t\t\t\tlabelQUANTITY = new Label(COL_QUANTITY-1, row, QUANTITY.toString(),cellFormat);\n\t\t\t\t\tcellQUANTITY = (WritableCell) labelQUANTITY;\n\t\t\t\t\tsheetToEdit.addCell(cellQUANTITY);\n\t\t\t\t\t\n\t\t\t\t\t//------------------ COL_5: PO_NUMBER ---------------\n\t\t\t\t\tif (orderDTO.getProductOrderNumber() != null)PO_NUMBER = orderDTO.getProductOrderNumber();\n\t\t\t\t\tlabelPO_NUMBER = new Label(COL_PO_NUMBER-1, row, PO_NUMBER,cellFormat);\n\t\t\t\t\tcellPO_NUMBER = (WritableCell) labelPO_NUMBER;\n\t\t\t\t\tsheetToEdit.addCell(cellPO_NUMBER);\n\t\t\t\t\t\n\t\t\t\t\t//------------------ COL_6: CLIENT_ORDER_NUMBER -----\n\t\t\t\t\tif (orderDTO.getClientOrderNumber() == null)orderDTO.setClientOrderNumber("""");\n\t\t\t\t\t\tCLIENT_ORDER_NUMBER = orderDTO.getClientOrderNumber();\n\t\t\t\t\t\tlabelCLIENT_ORDER_NUMBER = new Label(COL_CLIENT_ORDER_NUMBER-1, row, CLIENT_ORDER_NUMBER,cellFormat);\n\t\t\t\t\t\tcellCLIENT_ORDER_NUMBER = (WritableCell) labelCLIENT_ORDER_NUMBER;\n\t\t\t\t\t\tsheetToEdit.addCell(cellCLIENT_ORDER_NUMBER);\n\n\t\t\t\t\t//------------------ COL_7: LS_PRODUCT_ID ------------\n\t\t\t\t\tif (orderDTO.getLsProductID() != null)LS_PRODUCT_ID = orderDTO.getLsProductID();\n\t\t\t\t\tlabelLS_PRODUCT_ID = new Label(COL_LS_PRODUCT_ID-1, row, LS_PRODUCT_ID,cellFormat);\n\t\t\t\t\tcellLS_PRODUCT_ID = (WritableCell) labelLS_PRODUCT_ID;\n\t\t\t\t\tsheetToEdit.addCell(cellLS_PRODUCT_ID);\n\t\t\t\t\t\n\t\t\t\t\t//------------------ COL_8: CLIENT_OTHER_ID -----------\n\t\t\t\t\tif (orderDTO.getClientOtherId()!= null)\tCLIENT_OTHER_ID = orderDTO.getClientOtherId();\n\t\t\t\t\tlabelCLIENT_OTHER_ID = new Label(COL_CLIENT_OTHER_ID-1, row, CLIENT_OTHER_ID,cellFormat);\n\t\t\t\t\tcellCLIENT_OTHER_ID = (WritableCell) labelCLIENT_OTHER_ID;\n\t\t\t\t\tsheetToEdit.addCell(cellCLIENT_OTHER_ID);\n\t\t\t\t\t\n\t\t\t\t\t//------------------ COL_9: CLIENT_PRODUCT_NUMBER ------\n\t\t\t\t\tif (orderDTO.getClientProductNumber()!= null)CLIENT_PRODUCT_NUMBER = orderDTO.getClientProductNumber();\n\t\t\t\t\tlabelCLIENT_PRODUCT_NUMBER = new Label(COL_CLIENT_PRODUCT_NUMBER-1, row, CLIENT_PRODUCT_NUMBER,cellFormat);\n\t\t\t\t\tcellCLIENT_PRODUCT_NUMBER = (WritableCell) labelCLIENT_PRODUCT_NUMBER;\n\t\t\t\t\tsheetToEdit.addCell(cellCLIENT_PRODUCT_NUMBER);\n\t\t\t\t\t\n\t\t\t\t\t//------------------ COL_10: CLIENT_NUMBER --------------\n\t\t\t\t\tif (orderDTO.getClientNumber() != null)CLIENT_NUMBER = orderDTO.getClientNumber();\n\t\t\t\t\tlabelCLIENT_NUMBER = new Label(COL_CLIENT_NUMBER-1, row, CLIENT_NUMBER,cellFormat);\n\t\t\t\t\tcellCLIENT_NUMBER = (WritableCell) labelCLIENT_NUMBER;\n\t\t\t\t\tsheetToEdit.addCell(cellCLIENT_NUMBER);\n\t\t\t\t\t\n\t\t\t\t\t//------------------ COL_11: COL_UNIT_PRICE --------------\n\t\t\t\t\t\tString strUNIT_PRICE="""";\n\t\t\t\t\t\tif (orderDTO.getUnitPrice() != null) {\n\t\t\t\t\t\t\tUNIT_PRICE = orderDTO.getUnitPrice();\n\t\t\t\t\t\t\tstrUNIT_PRICE =orderDTO.getUnitPrice().toString();\n\t\t\t\t\t\t\tstrUNIT_PRICE=strUNIT_PRICE.replaceAll("" "", """");\n\t\t\t\t\t\t\tif(strUNIT_PRICE!=null && !strUNIT_PRICE.equals("""")){\n\t\t\t\t\t\t\t\tint index=strUNIT_PRICE.indexOf("","");\n\t\t\t\t\t\t\t\tif(index<0)index=strUNIT_PRICE.indexOf(""."");\n\t\t\t\t\t\t\t\tif(index>=0){\n\t\t\t\t\t\t\t\t\tString strUNIT_PRICE1=strUNIT_PRICE.substring(0, index);\n\t\t\t\t\t\t\t\t\tString strUNIT_PRICE2= strUNIT_PRICE.substring(index+1, strUNIT_PRICE.length());\n\t\t\t\t\t\t\t\t\tstrUNIT_PRICE=strUNIT_PRICE1+"".""+strUNIT_PRICE2;\n\t\t\t\t\t\t\t\t\tif(strUNIT_PRICE2!=null){\n\t\t\t\t\t\t\t\t\t\tif(strUNIT_PRICE2.length()<=1)strUNIT_PRICE=strUNIT_PRICE+""0"";\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tlabelUNIT_PRICE = new Label(COL_UNIT_PRICE-1, row, strUNIT_PRICE,cellFormat);\n\t\t\t\t\t\tcellUNIT_PRICE = (WritableCell) labelUNIT_PRICE;\n\t\t\t\t\t\tsheetToEdit.addCell(cellUNIT_PRICE);\n\n\t\t\t\t\t//------------------ COL_12: TRACKING_NUMBER ------------\n\t\t\t\t\t\tlabelTRACKING_NUMBER = new Label(COL_TRACKING_NUMBER-1, row, """",cellFormat);\n\t\t\t\t\t\tcellTRACKING_NUMBER = (WritableCell) labelTRACKING_NUMBER;\n\t\t\t\t\t\tsheetToEdit.addCell(cellTRACKING_NUMBER);\n\n\t\t\t\t\t//------------------ COL_13: cellSHIPPING_PRICE ---------\n\t\t\t\t\t\tlabelSHIPPING_PRICE = new Label(COL_SHIPPING_PRICE-1, row, """",cellFormat);\n\t\t\t\t\t\tcellSHIPPING_PRICE = (WritableCell) labelSHIPPING_PRICE;\n\t\t\t\t\t\tsheetToEdit.addCell(cellSHIPPING_PRICE);\n\t\t\t\t\t\n\t\t\t\t\t//------------------ COL_14: SHIPED_DATE ----------------\n\n\t\t\t\t\t//------------------ COL_15: SHIPED_PROVINCE ------------\n\t\t\t\t\t\tif (orderDTO.getClientProvince()!= null) {\n\t\t\t\t\t\t\tString code=orderDTO.getClientProvince();\n\t\t\t\t\t\t\tProvinceDTO provinceDTO=productService.getProvinceByCode(code);\n\t\t\t\t\t\t\tSHIPED_PROVINCE = provinceDTO.getTaxe();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tlabelSHIPED_PROVINCE = new Label(COL_SHIPED_PROVINCE-1, row, SHIPED_PROVINCE,cellFormat);\n\t\t\t\t\t\tcellSHIPED_PROVINCE = (WritableCell) labelSHIPED_PROVINCE;\n\t\t\t\t\t\tsheetToEdit.addCell(cellSHIPED_PROVINCE);\n\n\t\t\t\t\t\t//------------------ COL_16: COL_FIRST_NAME -----------------\n\t\t\t\t\t\tif (orderDTO.getClientFirstName() != null)FIRST_NAME = orderDTO.getClientFirstName();\n\t\t\t\t\t\tlabelFIRST_NAME = new Label(COL_FIRST_NAME-1, row, FIRST_NAME,cellFormat);\n\t\t\t\t\t\tcellFIRST_NAME = (WritableCell) labelFIRST_NAME;\n\t\t\t\t\t\tsheetToEdit.addCell(cellFIRST_NAME);\n\n\t\t\t\t\t\t//------------------ COL_17: COL_LAST_NAME ------------------\n\t\t\t\t\t\tif (orderDTO.getClientLastName() != null)LAST_NAME = orderDTO.getClientLastName();\n\t\t\t\t\t\tlabelLAST_NAME = new Label(COL_LAST_NAME-1, row, LAST_NAME,cellFormat);\n\t\t\t\t\t\tcellLAST_NAME = (WritableCell) labelLAST_NAME;\n\t\t\t\t\t\tsheetToEdit.addCell(cellLAST_NAME);\n\n\t\t\t\t\t\t//------------------ COL_18: COL_OTHER_NAMES -----------------\n\t\t\t\t\t\tif (orderDTO.getClientOtherNames() != null)OTHER_NAMES = orderDTO.getClientOtherNames();\n\t\t\t\t\t\tlabelOTHER_NAMES = new Label(COL_OTHER_NAMES-1, row, OTHER_NAMES,cellFormat);\n\t\t\t\t\t\tcellOTHER_NAMES = (WritableCell) labelOTHER_NAMES;\n\t\t\t\t\t\tsheetToEdit.addCell(cellOTHER_NAMES);\n\n\t\t\t\t\t\t//------------------ COL_19: COL_STREET ----------------------\n\t\t\t\t\t\tif (orderDTO.getClientStreet()!= null)STREET = orderDTO.getClientStreet();\n\t\t\t\t\t\tlabelSTREET = new Label(COL_STREET-1, row, STREET,cellFormat);\n\t\t\t\t\t\tcellSTREET = (WritableCell) labelSTREET;\n\t\t\t\t\t\tsheetToEdit.addCell(cellSTREET);\n\t\t\t\t\t\t\n\t\t\t\t\t\t//------------------ COL_20: COL_OTHER_ADDRESS ---------------\n\t\t\t\t\t\tif (orderDTO.getClientOtherStreet()!= null)OTHER_ADDRESS = orderDTO.getClientOtherStreet();\n\t\t\t\t\t\tlabelOTHER_ADDRESS = new Label(COL_OTHER_ADDRESS-1, row, OTHER_ADDRESS,cellFormat);\n\t\t\t\t\t\tcellOTHER_ADDRESS = (WritableCell) labelOTHER_ADDRESS;\n\t\t\t\t\t\tsheetToEdit.addCell(cellOTHER_ADDRESS);\n\t\t\t\t\t\t\n\t\t\t\t\t\t//------------------ COL_21: COL_CITY_CLIENT -----------------\n\t\t\t\t\t\tif (orderDTO.getClientCity()!= null)CITY_CLIENT = orderDTO.getClientCity();\n\t\t\t\t\t\tlabelCITY_CLIENT = new Label(COL_CITY_CLIENT-1, row, CITY_CLIENT,cellFormat);\n\t\t\t\t\t\tcellCITY_CLIENT = (WritableCell) labelCITY_CLIENT;\n\t\t\t\t\t\tsheetToEdit.addCell(cellCITY_CLIENT);\n\t\t\t\t\t\t\n\t\t\t\t\t\t//------------------ COL_22: COL_PROVINCE --------------------\n\t\t\t\t\t\tif (orderDTO.getClientProvince()!= null)PROVINCE = orderDTO.getClientProvince();\n\t\t\t\t\t\tlabelPROVINCE = new Label(COL_PROVINCE-1, row, PROVINCE,cellFormat);\n\t\t\t\t\t\tcellPROVINCE = (WritableCell) labelPROVINCE;\n\t\t\t\t\t\tsheetToEdit.addCell(cellPROVINCE);\n\t\t\t\t\t\t\n\t\t\t\t\t\t//------------------ COL_23: COL_POSTAL_CODE -----------------\n\t\t\t\t\t\tif (orderDTO.getClientPostalCode()!= null)POSTAL_CODE = orderDTO.getClientPostalCode();\n\t\t\t\t\t\tlabelPOSTAL_CODE = new Label(COL_POSTAL_CODE-1, row, POSTAL_CODE,cellFormat);\n\t\t\t\t\t\tcellPOSTAL_CODE = (WritableCell) labelPOSTAL_CODE;\n\t\t\t\t\t\tsheetToEdit.addCell(cellPOSTAL_CODE);\n\n\t\t\t\t\t\trow++;\n\t\t\t\t\t\tsheetToEdit.setRowView(row, 23*23);\n\t\t\t\t\t\t\n\t\t\t\t\t//================== Data SHIPPING ======================\n\t\t\t\t\t//------------------ COL_2: PATNER_NAME -----------------\n\t\t\t\t\t\tif (orderDTO.getUserLogin()!= null) {\n\t\t\t\t\t\t\tPATNER_NAME = orderDTO.getUserLogin();\n\t\t\t\t\t\t\tlabelPATNER_NAME = new Label(COL_PATNER_NAME-1, row, PATNER_NAME,cellFormat);\n\t\t\t\t\t\t\tcellPATNER_NAME = (WritableCell) labelPATNER_NAME;\n\t\t\t\t\t\t\tsheetToEdit.addCell(cellPATNER_NAME);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t//------------------ COL_3: INVOICE_NUMBER --------------\n\t\t\t\t\t\tlabelINVOICE_NUMBER = new Label(COL_INVOICE_NUMBER-1, row, """",cellFormat);\n\t\t\t\t\t\tcellINVOICE_NUMBER = (WritableCell) labelINVOICE_NUMBER;\n\t\t\t\t\t\tsheetToEdit.addCell(cellINVOICE_NUMBER);\n\t\t\t\t\t\t\t\n\t\t\t\t\t//------------------ COL_4: QUANTITY --------------------\n\t\t\t\t\t\tlabelQUANTITY = new Label(COL_QUANTITY-1, row, """",cellFormat);\n\t\t\t\t\t\tcellQUANTITY = (WritableCell) labelQUANTITY;\n\t\t\t\t\t\tsheetToEdit.addCell(cellQUANTITY);\n\n\t\t\t\t\t//------------------ COL_5: PO_NUMBER --------------------\n\t\t\t\t\t\tlabelPO_NUMBER = new Label(COL_PO_NUMBER-1, row, """",cellFormat);\n\t\t\t\t\t\tcellPO_NUMBER = (WritableCell) labelPO_NUMBER;\n\t\t\t\t\t\tsheetToEdit.addCell(cellPO_NUMBER);\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t//------------------ COL_6: CLIENT_ORDER_NUMBER -----------\n\t\t\t\t\t\tlabelCLIENT_ORDER_NUMBER = new Label(COL_CLIENT_ORDER_NUMBER-1, row, """",cellFormat);\n\t\t\t\t\t\tcellCLIENT_ORDER_NUMBER = (WritableCell) labelCLIENT_ORDER_NUMBER;\n\t\t\t\t\t\tsheetToEdit.addCell(cellCLIENT_ORDER_NUMBER);\n\n\t\t\t\t\t//------------------ COL_7: LS_PRODUCT_ID ------------------\n\t\t\t\t\t\tlabelLS_PRODUCT_ID = new Label(COL_LS_PRODUCT_ID-1, row, ""SHIPPING"",cellFormat);\n\t\t\t\t\t\tcellLS_PRODUCT_ID = (WritableCell) labelLS_PRODUCT_ID;\n\t\t\t\t\t\tsheetToEdit.addCell(cellLS_PRODUCT_ID);\n\n\t\t\t\t\t//------------------ COL_8: CLIENT_OTHER_ID -----------------\n\t\t\t\t\t\tlabelCLIENT_OTHER_ID = new Label(COL_CLIENT_OTHER_ID-1, row, """",cellFormat);\n\t\t\t\t\t\tcellCLIENT_OTHER_ID = (WritableCell) labelCLIENT_OTHER_ID;\n\t\t\t\t\t\tsheetToEdit.addCell(cellCLIENT_OTHER_ID);\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t//------------------ COL_9: CLIENT_PRODUCT_NUMBER -------------\n\t\t\t\t\t\tlabelCLIENT_PRODUCT_NUMBER = new Label(COL_CLIENT_PRODUCT_NUMBER-1, row, """",cellFormat);\n\t\t\t\t\t\tcellCLIENT_PRODUCT_NUMBER = (WritableCell) labelCLIENT_PRODUCT_NUMBER;\n\t\t\t\t\t\tsheetToEdit.addCell(cellCLIENT_PRODUCT_NUMBER);\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t//------------------ COL_10: CLIENT_NUMBER ---------------------\n\t\t\t\t\t\tlabelCLIENT_NUMBER = new Label(COL_CLIENT_NUMBER-1, row, """",cellFormat);\n\t\t\t\t\t\tcellCLIENT_NUMBER = (WritableCell) labelCLIENT_NUMBER;\n\t\t\t\t\t\tsheetToEdit.addCell(cellCLIENT_NUMBER);\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t// COL_11: COL_UNIT_PRICE\n\t\t\t\t\t\tlabelUNIT_PRICE = new Label(COL_UNIT_PRICE-1, row, """",cellFormat);\n\t\t\t\t\t\tcellUNIT_PRICE = (WritableCell) labelUNIT_PRICE;\n\t\t\t\t\t\tsheetToEdit.addCell(cellUNIT_PRICE);\n\n\t\t\t\t\t//------------------ COL_12: TRACKING_NUMBER --------------------\n\t\t\t\t\tif (orderDTO.getTrackingNumber()!= null) {\n\t\t\t\t\t\tTRACKING_NUMBER = orderDTO.getTrackingNumber();\n\t\t\t\t\t\tlabelTRACKING_NUMBER = new Label(COL_TRACKING_NUMBER-1, row, TRACKING_NUMBER,cellFormat);\n\t\t\t\t\t\tcellTRACKING_NUMBER = (WritableCell) labelTRACKING_NUMBER;\n\t\t\t\t\t\tsheetToEdit.addCell(cellTRACKING_NUMBER);\n\t\t\t\t\t}\n\n\t\t\t\t\t//------------------ COL_13: cellSHIPPING_PRICE ------------------\n\t\t\t\t\tif (orderDTO.getShippingPrice() != null) {\n\t\t\t\t\t\tSHIPPING_PRICE = orderDTO.getShippingPrice();\n\t\t\t\t\t\tDouble multiplier=Double.parseDouble(user.getMultiplier());\n\t\t\t\t\t\tSHIPPING_PRICE=SHIPPING_PRICE*(1+multiplier/100);\n\t\t\t\t\t\t\n\t\t\t\t\t\t//if user has a special shipping\n\t\t\t\t\t\tOrdersSpecialShippingDTO ordSpecialShipDTO=new OrdersSpecialShippingDTO();\n\t\t\t\t\t\tordSpecialShipDTO.setProductId(orderDTO.getProductId());\n\t\t\t\t\t\tordSpecialShipDTO.setUserId(orderDTO.getUserId());\n\t\t\t\t\t\tOrdersSpecialShippingDTO OrdSpecialShip=getOrderSpecialShipping(ordSpecialShipDTO);\n\t\t\t\t\t\tif(OrdSpecialShip!=null)SHIPPING_PRICE=orderDTO.getShippingPrice();\n\n\t\t\t\t\t\tSHIPPING_PRICE = (double) Math.round(SHIPPING_PRICE * 100) / 100;\n\t\t\t\t\t\tString strSHIPPING_PRICE=SHIPPING_PRICE+"""";\n\t\t\t\t\t\tlabelSHIPPING_PRICE = new Label(COL_SHIPPING_PRICE-1, row, strSHIPPING_PRICE,cellFormat);\n\t\t\t\t\t\tcellSHIPPING_PRICE = (WritableCell) labelSHIPPING_PRICE;\n\t\t\t\t\t\tsheetToEdit.addCell(cellSHIPPING_PRICE);\n\t\t\t\t\t}\n\t\n\t\t\t\t\t//------------------ COL_14: SHIPED_DATE --------------------------\n\t\t\t\t\tif(orderDTO.getShippedDate()!=null){\n\t\t\t            SHIPED_DATE = new DateTime(COL_SHIPED_DATE-1, row, orderDTO.getShippedDate(),cellDateFormat);\n\t\t\t            sheetToEdit.addCell(SHIPED_DATE);\n\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t//------------------ COL_15: SHIPED_PROVINCE ----------------------\n\t\t\t\t\tif (orderDTO.getClientProvince()!= null) {\n\t\t\t\t\t\tString code=orderDTO.getClientProvince();\n\t\t\t\t\t\tProvinceDTO provinceDTO=productService.getProvinceByCode(code);\n\t\t\t\t\t\tSHIPED_PROVINCE = provinceDTO.getTaxe();\n\t\t\t\t\t\tlabelSHIPED_PROVINCE = new Label(COL_SHIPED_PROVINCE-1, row, SHIPED_PROVINCE,cellFormat);\n\t\t\t\t\t\tcellSHIPED_PROVINCE = (WritableCell) labelSHIPED_PROVINCE;\n\t\t\t\t\t\tsheetToEdit.addCell(cellSHIPED_PROVINCE);\n\t\t\t\t\t}\n\n\t\t\t\t\t//------------------ COL_16: COL_FIRST_NAME -----------------\n\t\t\t\t\tlabelFIRST_NAME = new Label(COL_FIRST_NAME-1, row, """",cellFormat);\n\t\t\t\t\tcellFIRST_NAME = (WritableCell) labelFIRST_NAME;\n\t\t\t\t\tsheetToEdit.addCell(cellFIRST_NAME);\n\n\t\t\t\t\t//------------------ COL_17: COL_LAST_NAME ------------------\n\t\t\t\t\tlabelLAST_NAME = new Label(COL_LAST_NAME-1, row, """",cellFormat);\n\t\t\t\t\tcellLAST_NAME = (WritableCell) labelLAST_NAME;\n\t\t\t\t\tsheetToEdit.addCell(cellLAST_NAME);\n\n\t\t\t\t\t//------------------ COL_18: COL_OTHER_NAMES -----------------\n\t\t\t\t\tlabelOTHER_NAMES = new Label(COL_OTHER_NAMES-1, row, """",cellFormat);\n\t\t\t\t\tcellOTHER_NAMES = (WritableCell) labelOTHER_NAMES;\n\t\t\t\t\tsheetToEdit.addCell(cellOTHER_NAMES);\n\n\t\t\t\t\t//------------------ COL_19: COL_STREET ----------------------\n\t\t\t\t\tlabelSTREET = new Label(COL_STREET-1, row, """",cellFormat);\n\t\t\t\t\tcellSTREET = (WritableCell) labelSTREET;\n\t\t\t\t\tsheetToEdit.addCell(cellSTREET);\n\t\t\t\t\t\n\t\t\t\t\t//------------------ COL_20: COL_OTHER_ADDRESS ---------------\n\t\t\t\t\tlabelOTHER_ADDRESS = new Label(COL_OTHER_ADDRESS-1, row, """",cellFormat);\n\t\t\t\t\tcellOTHER_ADDRESS = (WritableCell) labelOTHER_ADDRESS;\n\t\t\t\t\tsheetToEdit.addCell(cellOTHER_ADDRESS);\n\t\t\t\t\t\n\t\t\t\t\t//------------------ COL_21: COL_CITY_CLIENT -----------------\n\t\t\t\t\tlabelCITY_CLIENT = new Label(COL_CITY_CLIENT-1, row, """",cellFormat);\n\t\t\t\t\tcellCITY_CLIENT = (WritableCell) labelCITY_CLIENT;\n\t\t\t\t\tsheetToEdit.addCell(cellCITY_CLIENT);\n\t\t\t\t\t\n\t\t\t\t\t//------------------ COL_22: COL_PROVINCE --------------------\n\t\t\t\t\tlabelPROVINCE = new Label(COL_PROVINCE-1, row, """",cellFormat);\n\t\t\t\t\tcellPROVINCE = (WritableCell) labelPROVINCE;\n\t\t\t\t\tsheetToEdit.addCell(cellPROVINCE);\n\t\t\t\t\t\n\t\t\t\t\t//------------------ COL_23: COL_POSTAL_CODE -----------------\n\t\t\t\t\tlabelPOSTAL_CODE = new Label(COL_POSTAL_CODE-1, row, """",cellFormat);\n\t\t\t\t\tcellPOSTAL_CODE = (WritableCell) labelPOSTAL_CODE;\n\t\t\t\t\tsheetToEdit.addCell(cellPOSTAL_CODE);\n\n\t\t\t\t\tupdateStatusByLsOrderId(orderDTO.getLsOrderId(), ""invoiced"");\n\t\t\t\t\torderDTO.setStatus(""invoiced"");\n\t\t\t\t\tif(insert)insertInvoicedOrder(orderDTO);\n\t\t\t\t\t++row;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tworkbookCopy.write();\n\t\tworkbookCopy.close();\n\t\texistingWorkbook.close();\n\t\t} catch (Exception x) {\n\t\tx.printStackTrace();\n\t\t}\n\t}\n\n\t\n\t/**----------------------------------------------------------\n\t \t*CREATE CSV FOR EST TOOL*\n\t  -----------------------------------------------------------*/\n\t@Override\n\tpublic void generateAdminEstTool(List<OrdersDTO >listOrdersDTO, String filePathData,boolean selection){\n\t\t//COLUMNS Data\n\t\tString RECORD_TYPE=""2""; \t\t// 1:Recode Type\n\t\tString LS_ORDER_ID="""";\t\t\t// 2:Imported Order ID\n\t\tString CLIENT_LOGIN="""";\t\t\t// 3:Client ID\n\t\tString TITLE_NAME="""";\t\t\t// 4:Title Name\n\t\tString CLIENT_FIRST_NAME="""";\t// 5:First Name\n\t\tString CLIENT_LAST_NAME="""";\t\t// 6:Last Name\n\t\tString DEPT="""";\t\t\t\t\t// 7:Title/Dept\n\t\tString COMPANY_HEADER="""";\t\t// 8:Company Name\n\t\tString CLIENT_STREET_INF="""";\t\t// 9:Add'1 Address Information\n\t\tString CLIENT_STREET1="""";\t// 10:Address Line 1\n\t\tString CLIENT_STREET2="""";\t\t// 11:Address Line 2\n\t\tString CLIENT_CITY="""";\t\t\t// 12:City\n\n\t\tString CLIENT_PROVINCE="""";\t\t// 13:Province or State\n\t\tString CLIENT_POSTAL_CODE="""";\t// 14:Postal Code or Zip Code\n\t\tString COUNTRY_CODE=""CA"";\t\t// 15:Country Code\n\t\t\n\t\tString CLIENT_PHONE="""";\t\t\t// 16:Client Voice Phone\n\t\tString CLIENT_FAX="""";\t\t\t// 17:Client FAX Number\n\t\t\n\t\tString CLIENT_EMAIL="""";\t\t\t// 18:Client Email Address\n\t\tString WEIGHT=""0"";\t\t\t\t// 19:Weight\n\t\t\n\t\tString data;\n\t\t\n\t\ttry{\n\n\t\t\tString fileName=filePathData+""EST_TOOL.csv"";\n\t\t\tFile file = new File(fileName);\n\t\t\tif(file.exists())file.delete();\n\t\t\tfile = new File(fileName);\n\t\t\tPrintWriter pw= new PrintWriter(new FileWriter(fileName,true),true);\n\t\t\t//if admin select just some order to get their cvs Canada post\n\t\t\tif(selection){\n\t\t\t\tList<OrdersDTO>listOrdersDTOSelected=new ArrayList<OrdersDTO>();\n\t\t\t\tfor(OrdersDTO ord:listOrdersDTO){\n\t\t\t\t\tif((ord.getPrint()!=null && ord.getPrint()==true)\n\t\t\t\t\t  &&(ord.getStatus()!=null && ord.getStatus().equals(""progress"")))listOrdersDTOSelected.add(ord);\n\t\t\t\t}\n\t\t\t\tlistOrdersDTO=new ArrayList<OrdersDTO>();\n\t\t\t\tlistOrdersDTO=listOrdersDTOSelected;\n\t\t\t}\n\t\t\t\n\t\t\t//Creation of csv for Canada Post\n\t\t\tfor (OrdersDTO orderDTO : listOrdersDTO) {\n\t\t\t\t\n\t\t\t\t\tLS_ORDER_ID="""";\n\t\t\t\t\tCLIENT_LOGIN="""";\n\t\t\t\t\tTITLE_NAME="""";\n\t\t\t\t\tCLIENT_FIRST_NAME="""";\n\t\t\t\t\tCLIENT_LAST_NAME="""";\n\t\t\t\t\tDEPT="""";\n\t\t\t\t\tCOMPANY_HEADER="""";\n\t\t\t\t\tCLIENT_STREET_INF="""";\n\t\t\t\t\tCLIENT_STREET1="""";\n\t\t\t\t\tCLIENT_STREET2="""";\n\t\t\t\t\tCLIENT_CITY="""";\n\t\t\t\t\tCLIENT_PROVINCE="""";\n\t\t\t\t\tCLIENT_POSTAL_CODE="""";\n\t\t\t\t\tCOUNTRY_CODE=""CA"";\n\t\t\t\t\tCLIENT_PHONE="""";\n\t\t\t\t\tCLIENT_FAX="""";\n\t\t\t\t\tCLIENT_EMAIL="""";\n\n\t\t\t\t\tdata="""";\n\t\t\t\t\t// 1: RECORD TYPE (must be always 2)\n\t\t\t\t\tdata+=RECORD_TYPE+"","";\n\n\t\t\t\t\t// 2: LS_ORDER_ID (must be lest than 35 letters)\n\t\t\t\t\tLS_ORDER_ID = orderDTO.getLsOrderId();\n\t\t\t\t\tif(LS_ORDER_ID.length()>30){\n\t\t\t\t\t\tLS_ORDER_ID=""?????"";\n\t\t\t\t\t}\n\t\t\t\t\tdata+=""\\""""+LS_ORDER_ID+""\\"","";\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t// 3: CLIENT_LOGIN="""" (must be lest than 30 letters)\n\t\t\t\t\tif(orderDTO.getUserLogin()!=null)CLIENT_LOGIN = orderDTO.getUserLogin();\n\t\t\t\t\tif(CLIENT_LOGIN.length()>30){\n\t\t\t\t\t\tLS_ORDER_ID=""?????"";\n\t\t\t\t\t}\n\t\t\t\t\tdata+=""\\""""+CLIENT_LOGIN+""\\"","";\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t// 4: TITLE_NAME (must be lest than 14 letters)\n\t\t\t\t\tdata+=""\\""""+TITLE_NAME+""\\"","";\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t// 5: CLIENT_FIRST_NAME (must be lest than 30 letters)\n\t\t\t\t\tif(orderDTO.getClientFirstName()!=null)CLIENT_FIRST_NAME=orderDTO.getClientFirstName();\n\t\t\t\t\tif(CLIENT_FIRST_NAME.length()>30){\n\t\t\t\t\t\tCLIENT_FIRST_NAME=""?????"";\n\t\t\t\t\t}\n\t\t\t\t\tdata+=""\\""""+CLIENT_FIRST_NAME+""\\"","";\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t// 6: CLIENT_LAST_NAME (must be lest than 40 letters)\n\t\t\t\t\tif(orderDTO.getClientLastName()!=null)CLIENT_LAST_NAME=orderDTO.getClientLastName();\n\t\t\t\t\tif(CLIENT_LAST_NAME.length()>40){\n\t\t\t\t\t\tCLIENT_LAST_NAME=""?????"";\n\t\t\t\t\t}\n\t\t\t\t\tdata+=""\\""""+CLIENT_LAST_NAME+""\\"","";\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t// 7: TITLE_NAME (must be lest than 44 letters)\n\t\t\t\t\tdata+=""\\""""+DEPT+""\\"","";\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t// 8: COMPANY_HEADER\n\t\t\t\t\tif(orderDTO.getCompanyHeader()!=null)COMPANY_HEADER=orderDTO.getCompanyHeader();\n\t\t\t\t\tif(COMPANY_HEADER.length()>40){\n\t\t\t\t\t\tCOMPANY_HEADER=""?????"";\n\t\t\t\t\t}\n\t\t\t\t\tdata+=""\\""""+COMPANY_HEADER+""\\"","";\n\t\t\t\t\t\n\n\t\t\t\t\t// 9: CLIENT_STREET_INF (must be lest than 44 letters)\n\t\t\t\t\tOrdersRows orderR=orderDTO.getRowsList().get(0);\n\t\t\t\t\tif(orderR.getLsProductID()!=null)CLIENT_STREET_INF=orderR.getLsProductID();\n\t\t\t\t\tCLIENT_STREET_INF="""";\n\t\t\t\t\tif(CLIENT_STREET_INF!=null && CLIENT_STREET_INF.length()>44){\n\t\t\t\t\t\tCLIENT_STREET_INF=""?????"";\n\t\t\t\t\t}\n\t\t\t\t\tdata+=""\\""""+CLIENT_STREET_INF+""\\"","";\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t// 10: CLIENT_STREET1 (must be lest than 44 letters)\n\t\t\t\t\tif(orderDTO.getClientStreet()!=null)CLIENT_STREET1=orderDTO.getClientStreet();\n\t\t\t\t\tif(CLIENT_STREET1.length()>44){\n\t\t\t\t\t\tCLIENT_STREET1=""?????"";\n\t\t\t\t\t}\n\t\t\t\t\tCLIENT_STREET1=CLIENT_STREET1.replaceAll("","", "" "");\n\t\t\t\t\t\n\t\t\t\t\tdata+=""\\""""+CLIENT_STREET1+""\\"","";\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t// 11: CLIENT_STREET3 (must be lest than 44 letters)\n\t\t\t\t\tif(orderDTO.getClientOtherStreet()!=null)CLIENT_STREET2=orderDTO.getClientOtherStreet();\n\t\t\t\t\tif(CLIENT_STREET2.length()>44){\n\t\t\t\t\t\tCLIENT_STREET2=""?????"";\n\t\t\t\t\t}\n\t\t\t\t\tCLIENT_STREET2=CLIENT_STREET2.replaceAll("","", "" "");\n\t\t\t\t\tdata+=""\\""""+CLIENT_STREET2+""\\"","";\n\t\t\t\t\t\n\t\t\t\t\t// 12: CLIENT_CITY (must be lest than 25 letters)\n\t\t\t\t\tif(orderDTO.getClientCity()!=null)CLIENT_CITY=orderDTO.getClientCity();\n\t\t\t\t\tif(CLIENT_CITY.length()>25){\n\t\t\t\t\t\tCLIENT_CITY=""?????"";\n\t\t\t\t\t}\n\t\t\t\t\tdata+=""\\""""+CLIENT_CITY+""\\"","";\n\n\t\t\t\t\t// 13: CLIENT_PROVINCE (must be lest than 2 letters)\n\t\t\t\t\tif(orderDTO.getClientProvince()!=null)CLIENT_PROVINCE=orderDTO.getClientProvince();\n\t\t\t\t\tif(CLIENT_PROVINCE.length()>2){\n\t\t\t\t\t\tCLIENT_PROVINCE=""?????"";\n\t\t\t\t\t}\n\t\t\t\t\tdata+=""\\""""+CLIENT_PROVINCE+""\\"","";\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t// 14: CLIENT_POSTAL_CODE (must be lest than 14 letters)\n\t\t\t\t\tif(orderDTO.getClientPostalCode()!=null)CLIENT_POSTAL_CODE=orderDTO.getClientPostalCode();\n\t\t\t\t\tif(CLIENT_POSTAL_CODE.length()>14){\n\t\t\t\t\t\tCLIENT_POSTAL_CODE=""?????"";\n\t\t\t\t\t}\n\t\t\t\t\tdata+=""\\""""+CLIENT_POSTAL_CODE+""\\"","";\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t// 15: COUNTRY_CODE(must be lest than 3 letters)\n\t\t\t\t\tdata+=""\\""""+COUNTRY_CODE+""\\"","";\n\n\t\t\t\t\t\n\t\t\t\t\t// 16: CLIENT_PHONE (must be lest than 25 letters)\n\t\t\t\t\tif(orderDTO.getClientPhone()!=null)CLIENT_PHONE = orderDTO.getClientPhone();\n\t\t\t\t\tif(CLIENT_PHONE.length()>25){\n\t\t\t\t\t\tCLIENT_PHONE=""?????"";\n\t\t\t\t\t}\n\t\t\t\t\tdata+=""\\""""+CLIENT_PHONE+""\\"","";\n\t\t\t\t\t\n\t\t\t\t\t// 17: CLIENT_FAX (must be lest than 25 letters)\n\t\t\t\t\tdata+=""\\""""+CLIENT_FAX+""\\"","";\n\t\t\t\t\t\n\n\t\t\t\t\t// 18: CLIENT_EMAIL (must be lest than 60 letters)\n\t\t\t\t\tif(orderDTO.getClientEmail()!=null)CLIENT_EMAIL = orderDTO.getClientEmail();\n\t\t\t\t\tif(CLIENT_EMAIL.length()>60){\n\t\t\t\t\t\tCLIENT_EMAIL=""?????"";\n\t\t\t\t\t}\n\t\t\t\t\tdata+=""\\""""+CLIENT_EMAIL+""\\"","";\n\t\t\t\t\t\n\n\t\t\t\t\t// 3: WEIGHT (must be lest than 9 letters)\n\t\t\t\t\tdata+=WEIGHT;\n\n\t\t\t\t\tpw.println(data);\n\t\t\t\t//}\n\t\t\t}\n\t\t\tpw.close();\n\t\t}catch(Exception e){\n\t\t\te.printStackTrace();\n\t\t}\n\n\t\n\t}\n\t\n\t/**----------------------------------------------------------\n\t \t*UPDATE TABLE ORDERS ROWS IN DATABASES FROM XLS FILE*\n\t \t*WE SAVE TRACKING NUMBER,SHUPPING DATE AND SHIPPING PRICE*\n\t  -----------------------------------------------------------*/\n\t@Override\n\tpublic void updateOrdersRowsFromAdminXLS(String userAdminLogin,String destFileAdminXLS)throws Exception{\n\t\tString errorReport="""";\n\t\t//variable indicating the numbers of columns in the XLS file\n\t\tint ROW_TO_START = 0;\n\t\t//F:6 G:7 H:8\n\t\tfinal int COL_F = 6;\n\t\tfinal int COL_G = 7;\n\t\tfinal int COL_H = 8;\n\t\tfinal int COL_I = 9;\n\t\tfinal int COL_LS_ORDER_ID=31;\n\t\tfinal int COL_TRACKING_NUMBER=17;\n\t\tfinal int COL_SHIPPING_PRICE=10;\n\t\tString  strSHIPPING_PRICE="""";\n\t\t//Values of cells\n\t\tString  LS_ORDER_ID="""";\n\t\tDate SHIPPED_DATE=null;\n\t\tString TRACKING_NUMBER = null;\n\t\tDouble SHIPPING_PRICE = null;\n\t\tDouble VAL_F = null;\n\t\tDouble VAL_G = null;\n\t\tDouble VAL_H = null;\n\t\tDouble VAL_I = null;\n\t\t//Cells\n\t\tCell cellLS_ORDER_ID= null;\n\t\tCell cellTRACKING_NUMBER= null;\n\t\tCell cellSHIPPING_PRICE= null;\n\t\t\n\t\tCell cellF = null;\n\t\tCell cellG = null;\n\t\tCell cellH = null;\n\t\tCell cellI = null;\n\t\t\n\t//try {\n\t\tWorkbook existingWorkbook = Workbook.getWorkbook(new File(destFileAdminXLS+""ordersAdminImport.xls""));\n\t\tSheet sheetToRead=existingWorkbook.getSheet(0);\n\t\tint ROW_MAX = sheetToRead.getRows();\n\t\tfor(int row=ROW_TO_START; row< ROW_MAX;row++) {\n\n\t\t\t//--------------- 31: LS_ORDER_ID\n\t\t\tcellLS_ORDER_ID = sheetToRead.getCell(COL_LS_ORDER_ID-1, row);\t\t\t\n\t\t\tif(cellLS_ORDER_ID!=null){\n\t\t\t\tLS_ORDER_ID = cellLS_ORDER_ID.getContents();\n\t\t\t\tLS_ORDER_ID=LS_ORDER_ID.replaceAll("" "", """");\n\t\t\t}\n\t\t\tif(LS_ORDER_ID==null || LS_ORDER_ID.equals("""")){\n\t\t\t\terrorReport+="" ""+(row+1)+"" ,LS_ORDER_ID:""+LS_ORDER_ID+"" ,|---->dosen't exist \\n"";\n\t\t\t}\n\n\t\t\t//--------------- SHIPPED_DATE\n\t\t\tSHIPPED_DATE=new Date();\n\n\t\t\t//--------------- 17: TRACKING_NUMBER\n\t\t\tcellTRACKING_NUMBER = sheetToRead.getCell(COL_TRACKING_NUMBER-1, row);\t\t\t\n\t\t\tif(cellTRACKING_NUMBER!=null){\n\t\t\t\tTRACKING_NUMBER = cellTRACKING_NUMBER.getContents();\n\t\t\t\tTRACKING_NUMBER=TRACKING_NUMBER.replaceAll("" "", """");\n\t\t\t}\n\t\t\tif(TRACKING_NUMBER==null || TRACKING_NUMBER.equals("""")){\n\t\t\t\terrorReport+="" ""+(row+1)+"" ,TRACKING_NUMBER:""+TRACKING_NUMBER+"" ,|---->dosen't exist \\n"";\n\t\t\t}\n\t\t\t\n\t\t\t//--------------- 10:SHIPPING_PRICE\n\t\t\t\n\t\t\t// COL 6:value of column H VAL_F\n\t\t\tcellF = sheetToRead.getCell(COL_F-1, row);\t\t\t\n\t\t\tif(cellF!=null){\n\t\t\t\tString strVAL_F = cellF.getContents();\n\t\t\t\tVAL_F=getDoubleFromString(strVAL_F,3);\n\t\t\t}\n\t\t\t// COL 7:value of column H VAL_G\n\t\t\tcellG = sheetToRead.getCell(COL_G-1, row);\t\t\t\n\t\t\tif(cellG!=null){\n\t\t\t\tString strVAL_G = cellG.getContents();\n\t\t\t\tVAL_G=getDoubleFromString(strVAL_G,3);\n\t\t\t}\n\t\t\t// COL 8:value of column H VAL_H\n\t\t\tcellH = sheetToRead.getCell(COL_H-1, row);\t\t\t\n\t\t\tif(cellH!=null){\n\t\t\t\tString strVAL_H = cellH.getContents();\n\t\t\t\tVAL_H=getDoubleFromString(strVAL_H,3);\n\t\t\t}\n\t\t\t// COL 9:value of column I VAL_I\n\t\t\tcellI = sheetToRead.getCell(COL_I-1, row);\t\t\t\n\t\t\tif(cellI!=null){\n\t\t\t\tString strVAL_I = cellI.getContents();\n\t\t\t\tVAL_I=getDoubleFromString(strVAL_I,3);\n\t\t\t}\n\t\t\tif(VAL_F!=null && VAL_G!=null && VAL_H!=null && VAL_I!=null){\n\t\t\t\tSHIPPING_PRICE=VAL_F+VAL_G+VAL_H+VAL_I;\n\t\t\t\tSHIPPING_PRICE = (double) Math.round(SHIPPING_PRICE * 100) / 100;\n\t\t\t}else errorReport+="" ""+(row+1)+"" ,SHIPPING_PRICE:""+strSHIPPING_PRICE+"" ,|---->is null \\n"";\n\t\t\t\n\t\t\t//--------------- Update Row if shipped\n\t\t\tif(LS_ORDER_ID!=null){\n\t\t\t\tOrdersRows orderRow=getRowByLsOrderId(LS_ORDER_ID);\n\t\t\t\tif(orderRow!=null){\n\t\t\t\t\tOrdersDTO orderDTO=getOrderDTOByLsOrderId(orderRow.getLsOrderId());\n\t\t\t\t\tOrdersSpecialShippingDTO ordSpecialShipDTO=new OrdersSpecialShippingDTO();\n\t\t\t\t\tordSpecialShipDTO.setProductId(orderRow.getProductId());\n\t\t\t\t\tordSpecialShipDTO.setUserId(orderDTO.getUserId());\n\t\t\t\t\tOrdersSpecialShippingDTO OrdSpecialShip=getOrderSpecialShipping(ordSpecialShipDTO);\n\t\t\t\t\tif(OrdSpecialShip!=null){\n\t\t\t\t\t\tSHIPPING_PRICE=OrdSpecialShip.getShippingPrice();\n\t\t\t\t\t\tSHIPPING_PRICE = (double) Math.round(SHIPPING_PRICE * 100) / 100;\n\t\t\t\t\t}\n\t\t\t\t\tif(TRACKING_NUMBER!=null && !TRACKING_NUMBER.equals("""")&& SHIPPING_PRICE!=null){\n\t\t\t\t\t\torderRow.setShippedDate(SHIPPED_DATE);\n\t\t\t\t\t\torderRow.setShippingPrice(SHIPPING_PRICE);\n\t\t\t\t\t\torderRow.setTrackingNumber(TRACKING_NUMBER);\n\t\t\t\t\t\torderRow.setShippingCompany(""Canada Post"");\n\t\t\t\t\t\tmakeRowOrderInShippedById(orderRow);\n\t\t\t\t\t}else{\n\t\t\t\t\t\tmakeRowOrderInOpenById(orderRow);\n\t\t\t\t\t}\n\t\t\t\t}else errorReport+="" ""+(row+1)+"" ,LS_ORDER_ID:""+LS_ORDER_ID+"" ,|---->dosen't exist \\n"";\n\t\t\t}\n\t\t}\n\tcreateLogsFile(userAdminLogin,destFileAdminXLS, errorReport,2);\n\tFile ordersAdminImport=new File(destFileAdminXLS+""ordersAdminImport.xls"");\n\tordersAdminImport.delete();\n\t\n  }\n\t\n\tpublic Double getDoubleFromString(String str,int nbDecimal){\n\t\tDouble result=null;\n\t\tstr=str.replaceAll("" "", """");\n\t\tif(str!=null && !str.equals("""")){\n\t\t\tint index=str.indexOf("","");\n\t\t\tif(index<0)index=str.indexOf(""."");\n\t\t\tif(index>=0){\n\t\t\t\tString str1=str.substring(0, index);\n\t\t\t\tString str2= str.substring(index+1, str.length());\n\t\t\t\tif(str2.length()>nbDecimal)str2=str2.substring(0, nbDecimal);\n\t\t\t\tstr=str1+"".""+str2;\n\t\t\t}\n\t\t}\n\t\ttry {\n\t\t\tresult = Double.parseDouble(str);\n      \t}\n      \tcatch (Exception pe) {\n      \t\tresult=null;\n      \t}\n\t\treturn result;\n\t}\n\t\n\t@Override\n\tpublic String getStringFromDouble(Double value,int nbDecimal){\n\t\tString result=null;\n\t\tif(value!=null){\n\t\t\tString str=value+"""";\n\t\t\tString str1="""";\n\t\t\tString str2="""";\n\t\t\tstr=str.replaceAll("" "", """");\n\t\t\tif(str!=null && !str.equals("""")){\n\t\t\t\tint index=str.indexOf("","");\n\t\t\t\tif(index<0)index=str.indexOf(""."");\n\t\t\t\tif(index>=0){\n\t\t\t\t\tstr1=str.substring(0, index);\n\t\t\t\t\tstr2= str.substring(index+1, str.length());\n\t\t\t\t\tint decimal=str2.length();\n\t\t\t\t\tswitch (decimal) {\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\tstr2=""0000"";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\tstr2=str2+""000"";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\tstr2=str2+""00"";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\tstr2=str2+""0"";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}else{\n\t\t\t\t\tstr2=""0000"";\n\t\t\t\t}\n\t\t\t}\n\t\t\tstr2=str2.substring(0, nbDecimal);\t\t\t\t\t\n\t\t\tstr=str1+"".""+str2;\n\t\t\tresult=str;\n\t\t}\n\t\treturn result;\n\t}\n\t\n\t\n\t\n\t/**----------------------------------------------------------\n\t \t*UPDATE TABLE STOCK IN DATABASES FROM XLS FILE*\n\t  -----------------------------------------------------------*/\n\t@Override\n\tpublic void updateStockFromStockXLS(String userAdminLogin,String destFileStockXLS)throws Exception{\n\t\tString errorReport="""";\n\t\t//variable indicating the numbers of columns in the XLS file\n\t\tint ROW_TO_START = 1;\n\t\tfinal int COL_LS_PRODUCT_ID=1;\n\t\tfinal int COL_STOCK=2;\n\n\t\tString  strSTOCK="""";\n\t\t\n\t\t//Values of cells\n\t\tString  LS_PRODUCT_ID="""";\n\t\tDouble STOCK = null;\n\t\n\t\t//Cells\n\t\tCell cellLS_PRODUCT_ID= null;\n\t\tCell cellSTOCK= null;\n\t\t\n\t\tproductService=serviceLocator.getProductService();\n\t\tWorkbook existingWorkbook = Workbook.getWorkbook(new File(destFileStockXLS+""stock.xls""));\n\t\tSheet sheetToRead=existingWorkbook.getSheet(0);\n\t\tint ROW_MAX = sheetToRead.getRows();\n\t\tfor(int row=ROW_TO_START; row< ROW_MAX;row++) {\n\n\t\t\t//--------------- 1: LS_PRODUCT_ID\n\t\t\tcellLS_PRODUCT_ID = sheetToRead.getCell(COL_LS_PRODUCT_ID-1, row);\t\t\t\n\t\t\tif(cellLS_PRODUCT_ID!=null)LS_PRODUCT_ID = cellLS_PRODUCT_ID.getContents();\n\t\t\tif(LS_PRODUCT_ID==null || LS_PRODUCT_ID.equals("""")){\n\t\t\t\terrorReport+="" ""+(row+1)+"" ,LS_PRODUCT_ID:""+LS_PRODUCT_ID+"" ,|---->dosen't exist \\n"";\n\t\t\t}else{\n\t\t\t\tint index=LS_PRODUCT_ID.indexOf(""/"");\n\t\t\t\tif(index>0)LS_PRODUCT_ID=LS_PRODUCT_ID.substring(0, index);\n\t\t\t\t\n\t\t\t}\n\n\t\t\t//--------------- 2:STOCK\n\t\t\tcellSTOCK = sheetToRead.getCell(COL_STOCK-1, row);\t\t\t\n\t\t\tif(cellSTOCK!=null){\n\t\t\t\tstrSTOCK = cellSTOCK.getContents();\n\t\t\t\tstrSTOCK=strSTOCK.replaceAll("" "", """");\n\t\t\t\tif(strSTOCK!=null && !strSTOCK.equals("""")){\n\t\t\t\t\tint index=strSTOCK.indexOf("","");\n\t\t\t\t\tif(index>=0){\n\t\t\t\t\t\tString strSTOCK1=strSTOCK.substring(0, index);\n\t\t\t\t\t\tString strSTOCK2= strSTOCK.substring(index+1, strSTOCK.length());\n\t\t\t\t\t\tstrSTOCK=strSTOCK1+"".""+strSTOCK2;\n\t\t\t\t\t}\n\t\t\t\t}else errorReport+="" ""+(row+1)+"" ,STOCK:""+strSTOCK+"" ,|---->is null \\n"";\n\t\t\t\tSTOCK=null;\n              \ttry {\n              \t\tSTOCK = Double.parseDouble(strSTOCK);\n              \t}\n              \tcatch (Exception pe) {\n              \t\tSTOCK=null;\n              \t}\n\t\t\t}\n\t\t\t\n\t\t\t//--------------- Update Row if shipped\n\t\t\tif(LS_PRODUCT_ID!=null){\n\t\t\t\tProductDTO pDTO=productService.getProductByLsProductId(LS_PRODUCT_ID);\n\t\t\t\tif(pDTO!=null){\n\t\t\t\t\tpDTO.setStock(STOCK);\n\t\t\t\t\tif(isExistProductInStock(pDTO)){\n\t\t\t\t\t\tupdateStockByLsProductId(pDTO);\n\t\t\t\t\t}else{\n\t\t\t\t\t\tinsertProductInStock(pDTO);\n\t\t\t\t\t}\n\t\t\t\t}else  errorReport+="" ""+(row+1)+"",LS_PRODUCT_ID:""+LS_PRODUCT_ID+"" ,|--->DOSEN'T EXIST!\\n"";\n\t\t\t}else errorReport+="" ""+(row+1)+"",,|---> LS_PRODUCT_ID IS NULL\\n"";\n\t\t}\n\t\tcreateLogsFile(userAdminLogin,destFileStockXLS, errorReport,1);\n\t}\n\n\t\n\t/**----------------------------------------------------------\n\t \t*UPDATE TABLE STOCK IN DATABASES FROM XLS FILE*\n\t  -----------------------------------------------------------*/\n\t@Override\n\tpublic void updateSpecialShippingFromXLS(StringBuffer rapport,String userAdminLogin,Long userId,String destFileXLS)throws Exception{\n\t\tString errorReport="""";\n\t\tString errorReportHtml=""<table border='0'>"";\n\t\t//variable indicating the numbers of columns in the XLS file\n\t\t\n\t\t//user_id,ls_product_id,shipping_price,product_id\n\t\tOrdersSpecialShippingDTO specialShippingDTO=null;\n\t\t\n\t\tint ROW_TO_START = 1;\n\t\tfinal int COL_LS_PRODUCT_ID=1;\n\t\tfinal int COL_SHIPPING_PRICE=2;\n\n\t\tString  strSHIPPING_PRICE="""";\n\t\t\n\t\t//Values of cells\n\t\tString  LS_PRODUCT_ID="""";\n\t\tDouble SHIPPING_PRICE = null;\n\t\n\t\t//Cells\n\t\tCell cellLS_PRODUCT_ID= null;\n\t\tCell cellSHIPPING_PRICE= null;\n\t\t\n\t\tproductService=serviceLocator.getProductService();\n\t\tWorkbook existingWorkbook = Workbook.getWorkbook(new File(destFileXLS+""specialShipping.xls""));\n\t\tSheet sheetToRead=existingWorkbook.getSheet(0);\n\t\tint ROW_MAX = sheetToRead.getRows();\n\t\tfor(int row=ROW_TO_START; row< ROW_MAX;row++) {\n\n\t\t\t//--------------- 1: LS_PRODUCT_ID\n\t\t\tcellLS_PRODUCT_ID = sheetToRead.getCell(COL_LS_PRODUCT_ID-1, row);\t\t\t\n\t\t\tif(cellLS_PRODUCT_ID!=null)LS_PRODUCT_ID = cellLS_PRODUCT_ID.getContents();\n\t\t\tLS_PRODUCT_ID=LS_PRODUCT_ID.replaceAll("" "", """");\n\t\t\tif(LS_PRODUCT_ID!=null && !LS_PRODUCT_ID.equals("""")){\n\t\t\t\tint index=LS_PRODUCT_ID.indexOf(""_"");\n\t\t\t\tif(index==2 && LS_PRODUCT_ID.length()>=3)LS_PRODUCT_ID=LS_PRODUCT_ID.substring(index+1, LS_PRODUCT_ID.length());\n\t\t\t}\n\n\t\t\t//--------------- 2:COL_SHIPPING_PRICE\n\t\t\tcellSHIPPING_PRICE = sheetToRead.getCell(COL_SHIPPING_PRICE-1, row);\t\t\t\n\t\t\tif(cellSHIPPING_PRICE!=null){\n\t\t\t\tstrSHIPPING_PRICE = cellSHIPPING_PRICE.getContents();\n\t\t\t\tstrSHIPPING_PRICE=strSHIPPING_PRICE.replaceAll("" "", """");\n\t\t\t\tstrSHIPPING_PRICE=strSHIPPING_PRICE.replaceAll(""$"", """");\n\t\t\t\tif(strSHIPPING_PRICE!=null && !strSHIPPING_PRICE.equals("""")){\n\t\t\t\t\tSHIPPING_PRICE=getDoubleFromString(strSHIPPING_PRICE, 3);\n\t\t\t\t}else if(LS_PRODUCT_ID!=null && !LS_PRODUCT_ID.equals("""")){\n\t\t\t\t\terrorReport+="" ""+(row+1)+"",SHIPPING_PRICE:""+strSHIPPING_PRICE+"" ,|---->is null \\n"";\n\t\t\t\t\terrorReportHtml+=""<tr height='20px'><td>Line:""+(row+1)+""</td><td style='padding-left:15px;'>SHIPPING_PRICE:<font style='color:red;'>""+strSHIPPING_PRICE+""</font></td><td style='padding-left:15px;'>dosen't exist</td></tr>"";\n\t\t\t\t}\n\t\t\t\tstrSHIPPING_PRICE=null;\n\t\t\t}\n\t\t\t\n\t\t\t//--------------- Update Row if shipped\n\t\t\tif(LS_PRODUCT_ID!=null){\n\t\t\t\tProductDTO pDTO=productService.getProductByLsProductId(LS_PRODUCT_ID);\n\t\t\t\tif(pDTO!=null){\n\t\t\t\t\tspecialShippingDTO=new OrdersSpecialShippingDTO();\n\t\t\t\t\tspecialShippingDTO.setLsProductId(pDTO.getLoyaltyProductId());\n\t\t\t\t\tspecialShippingDTO.setProductId(pDTO.getId());\n\t\t\t\t\tspecialShippingDTO.setUserId(userId);\n\t\t\t\t\tspecialShippingDTO.setShippingPrice(SHIPPING_PRICE);\n\t\t\t\t\tOrdersSpecialShippingDTO specShippCheck=getOrderSpecialShipping(specialShippingDTO);\n\t\t\t\t\tif(specShippCheck==null){\n\t\t\t\t\t\tinsertOrderSpecialShipping(specialShippingDTO);\n\t\t\t\t\t}else{\n\t\t\t\t\t\tupdateOrderSpecialShipping(specialShippingDTO);\n\t\t\t\t\t}\n\t\t\t\t}else if(LS_PRODUCT_ID!=null && !LS_PRODUCT_ID.equals("""")){\n\t\t\t\t\terrorReport+="" ""+(row+1)+"",LS_PRODUCT_ID:""+LS_PRODUCT_ID+"" ,|--->DOSEN'T EXIST!\\n"";\n\t\t\t\t\terrorReportHtml+=""<tr height='20px'><td>Line:""+(row+1)+""</td><td style='padding-left:15px;'>LS_PRODUCT_ID:<font style='color:red;'>""+LS_PRODUCT_ID+""</font></td><td style='padding-left:15px;'>dosen't exist</td></tr>"";\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\terrorReportHtml+=""</table>"";\n\t\trapport.append(errorReportHtml);\n\t    createLogsFile(userAdminLogin,destFileXLS, errorReport,3);\n\t}\n\n\t/**----------------------------------------------------------\n\t \t*CREATION FILE LOGS OF UPDATING STOCK*\n\t  -----------------------------------------------------------*/\n\t@Override\n\tpublic void createLogsFile(String userAdminLogin,String folderDest, String errorReport,int option){ \n\n\t\ttry{\n\t\t\tSimpleDateFormat frm=new SimpleDateFormat(""yyyy-MM-dd"");\n\t\t\tString logFileName = null;\n\t\t\tString logFileNameHystic=null;\n\t\t\tDate date=new Date();\n\t\t\tCalendar myCalendar = Calendar.getInstance();\n\t\t\tmyCalendar.setTime(date);\n\t\t\tmyCalendar.add(Calendar.DATE, -6);\n\t\t\t//File folderLog = new File(folderDest+""logs""); \n\t\t\t//check path of wtpwebapps in server\n\t\t\tString wtpwebapps=folderDest;\n\t\t\tfor(int i=0;i<=4;i++){\n\t\t\t\tFile folderLogParent= new File(wtpwebapps);\n\t\t\t\twtpwebapps=folderLogParent.getParent();\n\t\t\t}\n\t\t\t\n\t\t\tFile folderLog = new File(wtpwebapps+""/logs"");\n\t\t\tfolderLog.mkdirs();\n\t\t\tFile folderOrderLog = new File(wtpwebapps+""/logs/orders"");\n\t\t\tfolderOrderLog.mkdirs();\n\t\t\t\n\t\t\tswitch (option) {\n\t\t\tcase 1://STOCK\n\t\t\t\tlogFileName=wtpwebapps+""/logs/orders/stock_""+frm.format(date)+"".txt"";\n\t\t\t\tlogFileNameHystic=wtpwebapps+""/logs/orders/stock_"";\n\t\t\t\tbreak;\n\t\t\tcase 2://UPDATE ORDERS\n\t\t\t\tlogFileName=wtpwebapps+""/logs/orders/orders_""+frm.format(date)+"".txt"";\n\t\t\t\tlogFileNameHystic=wtpwebapps+""/logs/orders/orders_"";\n\t\t\t\tbreak;\n\t\t\tcase 3://UPDATE/INSERT SPECIAL SHIPPING\n\t\t\t\tlogFileName=wtpwebapps+""/logs/orders/specialShipping_""+frm.format(date)+"".txt"";\n\t\t\t\tlogFileNameHystic=wtpwebapps+""/logs/orders/specialShipping_"";\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\tfor(int i=1; i<=6;i++){\n\t\t\t\tmyCalendar.add(Calendar.DATE, -1);\n\t\t\t\tDate d=myCalendar.getTime();\n\t\t\t\tString logFileNameHysticItem=logFileNameHystic+frm.format(d);\t\t\n\t\t\t\tFile fileLog=new File(logFileNameHysticItem+"".txt"");\n\t\t\t\tfileLog.delete();\t\t\n\t\t\t}\n\t\t\tPrintWriter pw= new PrintWriter(new FileWriter(logFileName,true),true);\n\t\t\tDate today=new Date();\n\t\t\tSimpleDateFormat frmTime=new SimpleDateFormat(""dd/MM/yyyy HH:mm:ss"");\n\t\t\tString strToday=frmTime.format(today);\n\t\t\tString rapport=""===============================================\\n"";\n\t\t\trapport=rapport+strToday+ "" By:""+userAdminLogin+""\\n""+""===============================================\\n"";\t\n\t\t\tpw.println(rapport+errorReport);\n\t\t\tpw.close();\n\t\t}catch(Exception e){\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\t/**----------------------------------------------------------\n\t \t*PARCING CSV*\n\t  -----------------------------------------------------------*/\n\t@Override\n\t public void csvParsing(String csvFolder,String userLogin)throws Exception{\n\t\t \n    \tBufferedReader pr=null;\n\t\tString result="""";\n\t\tString ligne="""";\n\t\tUser user=null;\n\t\tInteger id=0;\n\t\tArrayList<String[]> arraylist=new ArrayList<String[]>();\n\n\t\tuserService= serviceLocator.getUserService();\n\t\tuser=userService.getUserByLogin(userLogin);\n\t\tid=Integer.parseInt(user.getId().toString());\n\t\tpr=new BufferedReader(new FileReader(csvFolder+userLogin+"".csv"")); \n\t\twhile((ligne=pr.readLine())!=null){\n\t\t\tligne=ligne.replaceAll(""\\"""", """");\n\t\t\tString[] data=ligne.split("","");\n\t\t\tarraylist.add(data);\n\t\t\tresult+=ligne;\n\t\t} //End loop while\n\t\tpr.close();\n\t\tfinal String sheetName = ""Sheet1"";\n\t\tint row = 0;\n\t\tWorkbook existingWorkbook = Workbook.getWorkbook(new File(csvFolder+""transCsvTemplate.xls""));\n\t\tWritableWorkbook workbookCopy = Workbook.createWorkbook(new File(csvFolder+userLogin+"".xls""), existingWorkbook);\n\t\tWritableSheet sheetToEdit = workbookCopy.getSheet(sheetName);\n\t\t//LABELS\n\t\tLabel label=null;\n\t\trow=0;\n\t\tint col=0;\n\t\t// Create cell font and format\n\t\tWritableFont cellFontHeader = new WritableFont(WritableFont.TIMES, 12);\n\t\tcellFontHeader.setColour(Colour.BLACK);\n\t\tcellFontHeader.setBoldStyle(WritableFont.BOLD);\n\t\tWritableFont cellFontData = new WritableFont(WritableFont.TIMES);\n\t\tWritableCellFormat cellFormatHeader = new WritableCellFormat(cellFontHeader);\n\t\tWritableCellFormat cellFormatData = new WritableCellFormat(cellFontData);\n\t\tcellFormatHeader.setVerticalAlignment(VerticalAlignment.CENTRE);\n\t\tcellFormatHeader.setBorder(Border.ALL, BorderLineStyle.HAIR);\n\t\tcellFormatData.setVerticalAlignment(VerticalAlignment.CENTRE);\n\t\tWritableCell cell;\n\t\tfor (String[] d : arraylist) {\n\t\t\tcol=0;\n\t\t\tfor(int i=0;i< d.length;i++){\n\t\t\t\tif(row==0){\n\t\t\t\t\tlabel = new Label(col, row, d[col],cellFormatHeader);\n\t\t\t\t}else{\n\t\t\t\t\t\t\t\n\t\t\t\t\tString lsOrderId=d[col];\n\t\t\t\t\tif(col==16){\n\t\t\t\t\t\tswitch (id) {\n\t\t\t\t\t\t\tcase 39:\n\t\t\t\t\t\t\t\tlsOrderId=lsOrderId.replace(""LYS-CA-AC-"", """");\n\t\t\t\t\t\t\t\tlsOrderId=user.getCode()+lsOrderId;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\t\n\t\t\t\t\t}\t\t\n\t\t\t\t\tlabel = new Label(col, row, lsOrderId,cellFormatData);\n\t\t\t\t}\n\t\t\t\tcell = (WritableCell) label;\n\t\t\t\tsheetToEdit.addCell(cell);\n\t\t\t\tcol++;\n\t\t\t}\n\t\t\t\t\trow++;\n\t\t}\t\n\t\tworkbookCopy.write();\n\t\tworkbookCopy.close();\n\t\texistingWorkbook.close();\n    }\n\n\t/**----------------------------------------------------------\n\t \t*Insert special cost into table Order_special_shipping*\n\t  -----------------------------------------------------------*/\n\t@Override\n\t\n\tpublic\tboolean insertOrderSpecialShipping(OrdersSpecialShippingDTO orderSpecialDTO){\n\t\tboolean result=false;\n\t\tfinal OrdersSpecialShipping orderSpecial=DTOFactory.getOrderSpecialFromOrderSpecialDTO(orderSpecialDTO);\n\t\ttry{\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tresult = (Boolean) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t@Override\n\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\n\t\t\t\treturn daoManager.getOrdersDao().insertOrderSpecialShipping(orderSpecial);\n\t\t\t\t}\n\t\t\t});\n\t\t\t}catch (DaoException de) {\n\t\t\ttry { \n\t\t\t\tthrow new ServiceException(de);\n\t\t\t} catch (ServiceException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\treturn result;\t\n\t}\n\t\n\n\t/**----------------------------------------------------------\n\t \t*Update special cost into table Order_special_shipping*\n\t  -----------------------------------------------------------*/\n\t@Override\n\t\n\tpublic\tboolean updateOrderSpecialShipping(OrdersSpecialShippingDTO orderSpecialDTO){\n\t\tboolean result=false;\n\t\tfinal OrdersSpecialShipping orderSpecial=DTOFactory.getOrderSpecialFromOrderSpecialDTO(orderSpecialDTO);\n\t\ttry{\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tresult = (Boolean) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t@Override\n\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\n\t\t\t\treturn daoManager.getOrdersDao().updateOrderSpecialShipping(orderSpecial);\n\t\t\t\t}\n\t\t\t});\n\t\t\t}catch (DaoException de) {\n\t\t\ttry { \n\t\t\t\tthrow new ServiceException(de);\n\t\t\t} catch (ServiceException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\treturn result;\t\n\t}\n\n\t/**----------------------------------------------------------\n\t \t*get special Shipping cost by user and product_id*\n\t  -----------------------------------------------------------*/\n\t@Override\n\t\n\tpublic\tOrdersSpecialShippingDTO getOrderSpecialShipping(OrdersSpecialShippingDTO orderSpecialDTO){\n\t\tOrdersSpecialShipping result=null;\n\t\tfinal OrdersSpecialShipping orderSpecial=DTOFactory.getOrderSpecialFromOrderSpecialDTO(orderSpecialDTO);\n\t\ttry{\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tresult = (OrdersSpecialShipping) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t@Override\n\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\n\t\t\t\treturn daoManager.getOrdersDao().getOrderSpecialShipping(orderSpecial);\n\t\t\t\t}\n\t\t\t});\n\t\t\t}catch (DaoException de) {\n\t\t\ttry { \n\t\t\t\tthrow new ServiceException(de);\n\t\t\t} catch (ServiceException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\treturn DTOFactory.getOrderSpecialDTOFromOrderSpecial(result);\n\t}\n\n\t\n\t/***\n\t * \n\t * @param orderDTO\n\t * @param option\n\t * @return\n\t */\n\n\tpublic OrdersDTO orderDTOSplitFirstLastName(OrdersDTO orderDTO,int option){\n\t\tString whole = orderDTO.getClientLastName();\n\t\tString[] elems = null;\n\t\tif (whole != null) {\n\t\t\telems = whole.split(""\\\\s"");\n\t\t\tswitch (option) {\n\t\t\tcase 0:\n\t\t\t\torderDTO.setClientFirstName("""");\n\t\t\t\torderDTO.setClientLastName("""");\n\t\t\t\tbreak;\n\t\t\tcase 1:\n\t\t\t\torderDTO.setClientFirstName("""");\n\t\t\t\torderDTO.setClientLastName("""");\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\torderDTO.setClientFirstName("""");\n\t\t\t\torderDTO.setClientLastName(elems[1]);\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\torderDTO.setClientFirstName(elems[2]);\n\t\t\t\torderDTO.setClientLastName(elems[1]);\n\t\t\t\tbreak;\n\t\t\tcase 4:\n\t\t\t\torderDTO.setClientFirstName(elems[3]);\n\t\t\t\torderDTO.setClientLastName(elems[1]+"" ""+elems[2]);\n\t\t\t\tbreak;\n\t\t\tcase 5:\n\t\t\t\torderDTO.setClientFirstName(elems[4]);\n\t\t\t\torderDTO.setClientLastName(elems[1] + "" "" + elems[2]+"" ""+ elems[3]);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t}\n\t\treturn orderDTO;\n\t}\n\t\n\n\t//========================================= Client's Part ============================================\n\n\t@SuppressWarnings(""unchecked"")\n\t/**----------------------------------------------------------\n\t \t\t\t\t*get All Clients By User*\n\t  -----------------------------------------------------------*/\n\t@Override\n\tpublic List<OrdersDTO>getAllClientsByUser(final Long userId){\n\t\tList<Orders> result=null;\n\t\ttry{\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tresult = (List<Orders>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\n\t\t\t\t\treturn daoManager.getOrdersDao().getAllClientsByUser(userId);\n\t\t\t\t}\n\t\t\t});\n\t\t}catch (DaoException de) {\n\t\t\ttry { \n\t\t\t\tthrow new ServiceException(de);\n\t\t\t} catch (ServiceException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\treturn DTOFactory.getListOrderDTOFromListOrder(result) ;\t\n\t}\n\t/**----------------------------------------------------------\n \t\t\t\t\t*Add New Destination*\n  \t -----------------------------------------------------------*/\n\t@Override\n\tpublic boolean insertNewDestination(OrdersDTO orderDTO){\n\t\tfinal Orders order=DTOFactory.getOrderFromOrderDTO(orderDTO);\n\t\tboolean result=false;\n\t\ttry{\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tresult = (Boolean) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\n\t\t\t\t\treturn daoManager.getOrdersDao().insertNewDestination(order);\n\t\t\t\t}\n\t\t\t});\n\t\t}catch (DaoException de) {\n\t\t\ttry {\n\t\t\t\tthrow new ServiceException(de);\n\t\t\t} catch (ServiceException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\t\n\t@Override\n\tpublic boolean insertUserFileRecovery(UserFileRecoveryDTO userFileRecoveryDTO) throws ServiceException {\n\t\tfinal UserFileRecovery userFileRecovery = DTOFactory.BuildUserFileRecovery(userFileRecoveryDTO) ;\n\t\tboolean result=false;\n\t\ttry{\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tresult = (Boolean) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\n\t\t\t\t\treturn daoManager.getUserFileRecoveryDao().insertUserFileRecovery(userFileRecovery);\n\t\t\t\t}\n\t\t\t});\n\t\t}catch (DaoException de) {\n\t\t\ttry {\n\t\t\t\tthrow new ServiceException(de);\n\t\t\t} catch (ServiceException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\t\n\t// A method that read all the columns of the first row for userFileRecovery\n\t@Override\n\tpublic  List<ItemMapDTO> getItemsUserFileMapping(File fileToMap, int fileType) throws Exception{\n\t\tList<ItemMapDTO> listOfitem = new ArrayList<ItemMapDTO>();\n\t\tItemMapDTO imDTO;\n\t\tswitch (fileType) {\n\t\tcase 1://for xml file.\n\t\t\t\tString fileName = fileToMap.getAbsolutePath();\n\t\t\t\tString[] xmlTagNames = getAllTagNames(fileName);\n\t\t\t\tif(xmlTagNames != null && xmlTagNames.length>0){\n\t\t\t\tSet<String> mySet = new HashSet<String>(Arrays.asList(xmlTagNames));\n\t\t\t\t  for(String str : mySet){\n\t\t\t\t\t\timDTO = new ItemMapDTO();\n\t\t\t\t\t\timDTO.setKey(str);\n\t\t\t\t\t\timDTO.setValue(str);\n\t\t\t\t\t\tlistOfitem.add(imDTO);\t\n\t\t\t        }\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\tcase 2: case 3: // For reading the columns of the xls , csv file\n\t\t\t\t\n\t\t\t\tWorkbook workbook = Workbook.getWorkbook(fileToMap);\n\t\t\t\tSheet sheetToRead = workbook.getSheet(0);\n\t\t\t\tint COL_MAX = sheetToRead.getColumns();\n\t\t\t\n\t\t\t\tfor(int col=0; col < COL_MAX;col++) {\n\t\t\t\t\tString itemLabel=sheetToRead.getCell(col, 0).getContents();\n\t\t\t\t\tif(itemLabel!=null && !itemLabel.equals("""")){\n\t\t\t\t\t\timDTO = new ItemMapDTO();\n\t\t\t\t\t\timDTO.setKey(Integer.toString(col+1));\n\t\t\t\t\t\timDTO.setValue(itemLabel);\n\t\t\t\t\t\tlistOfitem.add(imDTO);\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\tbreak;\n\n\t\t}\n\t\treturn listOfitem;\n\t}\n\t\n\t// A method that read an xml and returns a String array with the all the Tag names.\n\tpublic String[] getAllTagNames(String fileName) throws Exception {\n\t\t// TODO Auto-generated method stub\n\t\tString[] xmlTagNames = null;\n\t\tDocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n\t\tDocumentBuilder db = dbf.newDocumentBuilder();\n\t\tFile file = new File(fileName);\n\t\tif(file.exists()){\n\t\t\t  Document doc = db.parse(file);\n\t\t\t  Element docEle = doc.getDocumentElement();\n\t\t\t  NodeList nodeList=doc.getElementsByTagName(""*"");\n\t\t\t  xmlTagNames =  new String[nodeList.getLength()];\n\t\t\t  for (int i=0; i<nodeList.getLength(); i++){\n\t\t\t         Element element = (Element)nodeList.item(i);\n\t\t\t         xmlTagNames[i]=(element.getNodeName());\n\t\t\t    }\n\t\t}\n\t\treturn xmlTagNames;\t\n\t}\n \n\t@Override\n\tpublic boolean isFileDownloaded(UserFilesDownloadedDTO ufdDTO) throws ServiceException {\n\t\tfinal UserFilesDownloaded ufd = DTOFactory.BuildUserFilesDownloaded(ufdDTO) ;\n\t\tboolean result=false;\n\t\ttry{\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tresult = (Boolean) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\n\t\t\t\t\treturn daoManager.getOrdersDao().isFileDownloaded(ufd);\n\t\t\t\t}\n\t\t\t});\n\t\t}catch (DaoException de) {\n\t\t\ttry {\n\t\t\t\tthrow new ServiceException(de);\n\t\t\t} catch (ServiceException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\t\n\t@Override\n\tpublic boolean insertUserFilesDownloaded(UserFilesDownloadedDTO ufdDTO) throws ServiceException {\n\t\tfinal UserFilesDownloaded ufd = DTOFactory.BuildUserFilesDownloaded(ufdDTO) ;\n\t\tboolean result=false;\n\t\ttry{\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tresult = (Boolean) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\n\t\t\t\t\treturn daoManager.getOrdersDao().insertUserFilesDownloaded(ufd);\n\t\t\t\t}\n\t\t\t});\n\t\t}catch (DaoException de) {\n\t\t\ttry {\n\t\t\t\tthrow new ServiceException(de);\n\t\t\t} catch (ServiceException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\t\n\t\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<UserFilesDownloadedDTO> getListFileDownloadedDTO(final String userLogin, final Integer userLoginOption,final Integer treatedOption) throws ServiceException{\n\t\t List<UserFilesDownloaded> result=null;\n\t\t\ttry{\n\t\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\t\tresult = (List<UserFilesDownloaded>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\n\t\t\t\t\t\treturn daoManager.getOrdersDao().getListFileDownloaded(userLogin,userLoginOption,treatedOption);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}catch (DaoException de) { \n\t\t\t\ttry { \n\t\t\t\t\tthrow new ServiceException(de);\n\t\t\t\t} catch (ServiceException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn DTOFactory.getListFileDownloadedDTOFromModel(result) ;\t\n\t}\n\t\n\t@Override\n\tpublic boolean isFileForUser(final String fileToImport, final String userLogin) throws ServiceException{\n\t\tBoolean result=false;\n\t\ttry{\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tresult = (Boolean) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\n\t\t\t\t\treturn daoManager.getOrdersDao().isFileForUser(fileToImport, userLogin);\n\t\t\t\t}\n\t\t\t});\n\t\t}catch (DaoException de) {\n\t\t\ttry {\n\t\t\t\tthrow new ServiceException(de);\n\t\t\t} catch (ServiceException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\t\n\t\n\t@Override\n\tpublic boolean updateFilesDownloadedStatus(final String fileToImport, final String userLogin, final boolean treated)throws Exception{\n\t\tBoolean result=false;\n\t\ttry{\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tresult = (Boolean) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\n\t\t\t\t\treturn daoManager.getOrdersDao().updateFilesDownloadedStatus(fileToImport,userLogin,treated);\n\t\t\t\t}\n\t\t\t});\n\t\t}catch (DaoException de) {\n\t\t\ttry {\n\t\t\t\tthrow new Exception(de);\n\t\t\t} catch (Exception e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t\t\n\t}\n\t\n\t\n\t\n\t\n\n}\n\n----------------------------------- SOURCE END -------------------------------------",1401831149545
error,log,,,"Problems occurred when invoking code from plug-in: ""org.eclipse.jdt.ui"".",1401831149546
error,log,,,"Error in JDT Core during reconcile",1401831149547
activated,view,org.eclipse.ui.ide,3.6.2.M20101201-0800,"org.eclipse.ui.views.ResourceNavigator",1401831153131
activated,editor,org.eclipse.jdt.ui,3.6.2.r362_v20110203,"org.eclipse.jdt.ui.CompilationUnitEditor",1401831168933
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1401831226621
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1401831234763
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.paste",1401831237328
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1401831250512
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1401831257133
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.paste",1401831259412
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.file.save",1401831274001
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1401831287837
