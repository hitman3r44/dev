what,kind,bundleId,bundleVersion,description,time
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1397772020123
executed,command,org.eclipse.ui.ide,3.6.2.M20101201-0800,"org.eclipse.ui.project.cleanAction",1397772020132
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1397772020413
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1397772020643
error,log,,,"Exception occurred during problem detection:\r\n----------------------------------- SOURCE BEGIN -------------------------------------\r\npackage com.loyauty.service.user;\r\n\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.security.Key;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport javax.crypto.Cipher;\r\nimport javax.crypto.spec.SecretKeySpec;\r\n\r\nimport org.apache.commons.codec.binary.Base64;\r\n\r\nimport lombok.Getter;\r\nimport lombok.Setter;\r\n\r\nimport org.apache.log4j.Logger;\r\n\r\n\r\nimport com.loyauty.dao.core.DaoCommand;\r\nimport com.loyauty.dao.core.DaoManager;\r\nimport com.loyauty.dao.core.DaoManagerFactory;\r\nimport com.loyauty.enums.Language;\r\nimport com.loyauty.enums.Type;\r\nimport com.loyauty.enums.UserType;\r\nimport com.loyauty.exception.DaoException;\r\nimport com.loyauty.exception.InvalidUserException;\r\nimport com.loyauty.exception.ServiceException;\r\nimport com.loyauty.model.ClientCategory;\r\nimport com.loyauty.model.Image;\r\nimport com.loyauty.model.Select;\r\nimport com.loyauty.model.User;\r\nimport com.loyauty.model.UserConnection;\r\nimport com.loyauty.service.ServiceImpl;\r\nimport com.loyauty.service.core.DTOFactory;\r\nimport com.loyauty.service.core.dto.BasicUserDTO;\r\nimport com.loyauty.service.core.dto.ClientCategoryDTO;\r\nimport com.loyauty.service.core.dto.ImageDTO;\r\nimport com.loyauty.service.core.dto.UserConnectionDTO;\r\nimport com.loyauty.service.core.dto.UserDTO;\r\nimport com.loyauty.service.core.dto.UserSessionDTO;\r\nimport com.loyauty.service.image.ImageService;\r\nimport com.loyauty.service.image.ImageServiceImpl;\r\nimport com.loyauty.util.CommonUtils;\r\nimport com.loyauty.util.communication.Receipt;\r\n\r\n\r\n\r\n/**\r\n * Provides all users related logic in the system.\r\n * \r\n *\r\n */\r\npublic class UserServiceImpl extends ServiceImpl implements UserService {\r\n \r\n\tprivate static final Logger log = Logger.getLogger(UserServiceImpl.class);\r\n\tprivate static final String ALGO = ""AES"";\r\n    private static final byte[] keyValue = new byte[] { 'K', 'l', 'F', 'a',\r\n            'C', 'c', 'E', 's', 'S', 'o', 'F', 'm', 'e', 'd', 'i', 'A' };\r\n\t@Setter @Getter\r\n\tprotected DaoManager daoManager;\r\n\t\r\n\t private SecretKeySpec skeySpec;\r\n\t private Cipher cipher;\r\n\t\r\n\t\r\n\tpublic UserServiceImpl() {\r\n\t\tsetDaoManager(DaoManagerFactory.getDaoManager());\r\n\t}\r\n\t\r\n\t@Override\r\n\tpublic UserSessionDTO authenticate(final String login, final String password) throws ServiceException, InvalidUserException{\r\n\t\treturn authenticate(login, password, false);\r\n\t}\r\n\t\r\n\t@Override\r\n\tpublic UserDTO authenticateByURL(final String login) throws ServiceException, InvalidUserException {\r\n\t\tUser user = null;\t\t\r\n\t\ttry {\r\n\t\t\tuser = (User) daoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\t\r\n\t\t\t\t\treturn daoManager.getUserDao().getUser(login);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t} catch (DaoException de) {\r\n\t\t\tthrow new ServiceException(de);\r\n\t\t}\t\t\r\n\t\tUserDTO userDTO = DTOFactory.getUserDTOWithUserID(user);\r\n\t\treturn userDTO;\r\n\t}\r\n\t\r\n\r\n\t@Override\r\n\tpublic UserSessionDTO authenticate(final String login, final String password,\r\n\t\t\tfinal boolean encryptedPassword) throws ServiceException, InvalidUserException{\r\n\r\n\t\tif(!CommonUtils.isValidString(login) || !CommonUtils.isValidString(password)){\r\n\t\t\tthrow new IllegalArgumentException(""Can't authenticate null or empty user and/or password.\\n login-password="" +\r\n\t\t\t\t\tlogin + ""-"" + password);\r\n\t\t}\r\n\t\t\r\n\t\tUser user;\r\n\t\t\r\n\t\ttry{\r\n\t\t\tuser = (User) daoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\t\r\n\t\t\t\t\treturn daoManager.getUserDao().getUser(login);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}catch (DaoException de) {\r\n\t\t\tthrow new ServiceException(de);\r\n\t\t}\r\n\t\t\r\n\t\tUserSessionDTO userSessionDTO;\r\n\t\t\r\n\t\tif(user != null){\t\t\t\t\t\r\n\t\t\t\t// Get the password\t\t\t\r\n\t\t\t\tString passwordToBeChecked = (encryptedPassword)?password:password; // TODO encryption issues\t\t\t\t\r\n\t\t\t\tif(passwordToBeChecked.equals(user.getPassword())){\r\n\t\t\t\t\tif(! user.isActive() ) {\r\n\t\t\t\t\t\tthrow new InvalidUserException(""Your account is disabled."");\r\n\t\t\t\t\t}\r\n\t\t\t\t\tuserSessionDTO = DTOFactory.getUserSessionDTO(user);\r\n\t\t\t\t}else{\r\n\t\t\t\t\tthrow new InvalidUserException(""bad login / password. Try again."");\r\n\t\t\t\t}\t\t\t\t\t\t\t\r\n\t\t}else{\r\n\t\t\tthrow new InvalidUserException(""bad login / password. Try again."");\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\treturn userSessionDTO;\r\n\t}\t\r\n\r\n\t@Override\r\n\tpublic UserSessionDTO authenticateAdmin(final String login, final String password,\r\n\t\t\tfinal boolean encryptedPassword) throws ServiceException, InvalidUserException{\r\n\r\n\t\tUserSessionDTO result=null;\r\n\t\tUser user;\r\n\t\ttry {\r\n\t\t\tuser = (User) daoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\t\r\n\t\t\t\t\treturn daoManager.getUserDao().getAdmin(login, password);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t} catch (DaoException de) {\r\n\t\t\tthrow new ServiceException(de);\r\n\t\t}\r\n\t\t\r\n\t\tif(user != null) {\t\r\n\t\t\tif(user.isActive() ) {\r\n\t\t\t\tresult = DTOFactory.getUserSessionDTO(user);\r\n\t\t\t}\t\t\t\t\t\r\n\t\t}\r\n\t\treturn result;\r\n\t}\t\r\n\t\t\r\n\t@Override\r\n\tpublic UserSessionDTO createAccount(final String login, final String password,\r\n\t\t\tfinal String email,long country, int primaryLang) throws ServiceException, InvalidUserException{\r\n\r\n\t\tif(!CommonUtils.isValidString(login) || !CommonUtils.isValidString(password) ||\r\n\t\t\t\t!CommonUtils.isValidString(email)){\r\n\t\t\tthrow new IllegalArgumentException(""Can't create a new account with invalid login-password-email="" +\r\n\t\t\t\t\tlogin + ""-"" + password + ""-"" + email);\r\n\t\t}\r\n\t\treturn authenticate(login, password);\r\n\t}\t\r\n\t\r\n\r\n\t@Override\r\n\tpublic boolean emailExists(final String email) throws ServiceException {\r\n\t\tboolean result = false;\r\n\t\ttry {\r\n\t\t\tresult = (Boolean) daoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\r\n\t\t\t\t\treturn daoManager.getUserDao().emailExists(email);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t} catch (DaoException e) {\r\n\t\t\tthrow (new ServiceException(e));\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n\t@Override\r\n\tpublic boolean usernameExists(final String username) throws ServiceException {\r\n\t\tboolean result;\r\n\t\ttry {\r\n\t\t\tresult = (Boolean) daoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\r\n\t\t\t\t\treturn daoManager.getUserDao().usernameExists(username);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t} catch (DaoException e) {\r\n\t\t\tthrow (new ServiceException(e));\r\n\t\t}\r\n\t\treturn result;\r\n\t}\t\r\n\t\r\n\t\r\n\t@Override\r\n\tpublic boolean sendUserPassword(final String email) {\r\n\t\tfinal String requestFor = ""You request for Losting Email"";\r\n\t\ttry {\r\n\t\t\tfinal User user= (User)daoManager.executeAndHandle(new DaoCommand() {\t\t\t\t\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\t\t\r\n\t\t\t\t\treturn daoManager.getUserDao().getUserByEmail(email);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\tString login = user.getLogin();\t\t\t\r\n\t\t\tString passwd = user.getPassword();\t\t\t\r\n\t\t\tString body = ""Login: "" + login + ""\\nPass word: "" + passwd; \r\n\t\t\t\r\n\t\t\tReceipt.passwordRequest(user);\r\n\t\t\t\r\n\t\t\tif(log.isDebugEnabled()){\r\n\t\t\t\tlog.debug(user.getPassword());\r\n\t\t\t}\r\n\t\t} catch (DaoException e) {\r\n\t\t\t// TODO Auto-generated catch block\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t@Override\r\n\tpublic boolean updateLogin(long userId,  String login)\r\n\t\t\tthrows ServiceException {\r\n\t\tboolean reponse = false;\r\n\t\tfinal User user = new User();\r\n\t\tuser.setId(userId);\r\n\t\tuser.setLogin(login);\t\t\r\n\t\ttry{\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\treponse = (Boolean) daoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\r\n\t\t\t\t\t//here the database access\r\n\t\t\t\t\tdaoManager.getUserDao().updateLogin(user);\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t}) ;\r\n\t\t}catch (DaoException de) {\r\n\t\t\tthrow (new ServiceException(de));\r\n\t\t}\r\n\t\treturn reponse;\t\t\r\n\t}\r\n\t\r\n\t@Override\r\n\tpublic boolean updatePassword(long userId,  String newPassord)\r\n\t\t\tthrows ServiceException {\r\n\t\tboolean reponse = false;\r\n\t\tfinal User user = new User();\r\n\t\tuser.setId(userId);\r\n\t\tuser.setPassword(newPassord);\t\t\r\n\t\ttry{\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\treponse = (Boolean) daoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\r\n\t\t\t\t\t//here the database access\r\n\t\t\t\t\tdaoManager.getUserDao().updatePassword(user);\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t}) ;\r\n\t\t}catch (DaoException de) {\r\n\t\t\tthrow (new ServiceException(de));\r\n\t\t}\r\n\t\treturn reponse;\t\t\r\n\t}\r\n\t\r\n\r\n\t@Override\r\n\tpublic UserSessionDTO adminAuthenticate(String login, String password)\r\n\t\t\tthrows ServiceException, InvalidUserException {\r\n\t\tUserSessionDTO userSessionDTO = authenticate(login, password, false);\r\n\r\n\t\treturn userSessionDTO;\r\n\t}\t\r\n\r\n\r\n\t@Override\r\n\tpublic UserSessionDTO authenticateAdmin(String login, String password)\r\n\t\t\tthrows ServiceException, InvalidUserException {\r\n\t\tUserSessionDTO userSessionDTO = authenticateAdmin(login, password, false);\r\n\r\n\t\treturn userSessionDTO;\r\n\t}\r\n\t\r\n\r\n\t@SuppressWarnings(""unchecked"")\r\n\t@Override\r\n\tpublic List<UserSessionDTO> getAllUserAccounts(BasicUserDTO basicUserDTO)\r\n\t\t\tthrows ServiceException {\r\n\t\t\t\t\r\n\t\tfinal User user = new User();\r\n\t\tuser.setActive(basicUserDTO.isActive());\r\n\t\tuser.setTypeId(basicUserDTO.getTypeId());\t\r\n\t\tList<User> userList = null;\r\n\t\ttry{\t\t\t\r\n\t\t\tuserList = (List<User>) daoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\r\n\t\t\t\t\t//here the database access\r\n\t\t\t\t\treturn daoManager.getUserDao().getAllUserAccounts(user);\r\n\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t}) ;\r\n\t\t}catch (DaoException de) {\r\n\t\t\tthrow (new ServiceException(de));\r\n\t\t}\r\n\t\t\r\n\t\treturn DTOFactory.getAllUsersAccountsDTO(userList);\r\n\t}\r\n\r\n\t@SuppressWarnings(""unchecked"")\r\n\t@Override\r\n\tpublic List<UserSessionDTO> getAllUsers(BasicUserDTO basicUserDTO)\r\n\t\t\tthrows ServiceException {\r\n\t\tfinal User user = new User();\r\n\t\tuser.setTypeId(basicUserDTO.getTypeId());\t\r\n\t\tList<User> userList = null;\r\n\t\ttry {\t\t\t\r\n\t\t\tuserList = (List<User>) daoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\r\n\t\t\t\t\t//here the database access\r\n\t\t\t\t\treturn daoManager.getUserDao().getAllUsers(user);\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t}) ;\r\n\t\t}catch (DaoException de) {\r\n\t\t\tthrow (new ServiceException(de));\r\n\t\t}\r\n\t\treturn DTOFactory.getAllUsersAccountsDTO(userList);\r\n\t}\t\r\n\t\r\n\t@Override\r\n\tpublic ImageDTO transferProfileImage(final long userId, String imageName, File fileImage, String applicationPath,long uploaderId, String login)\r\n\t\t\tthrows ServiceException {\r\n\t\tlong temp = 0; \r\n\t\tImageService ish = new ImageServiceImpl();\r\n\t\tfinal Image image = new Image();\r\n\t\timage.setUploaderId(uploaderId);\r\n\t\ttry {\r\n\t\t\t// Validate if the name is already present in the DB\r\n\t\t\tString normalizedName= CommonUtils.getNormalizedProfile(imageName, login, userId);\r\n\t\t\t//Validate if the image extension is JPEG or PNG\r\n\t\t\tint i = ish.isJPEGPNGImage1(fileImage);\r\n\t\t\tif (i==1) {\r\n\t\t\t\timage.addImageJps(fileImage,normalizedName,imageName);\r\n\t\t\t}else{\r\n\t\t\t\tthrow new ServiceException(""Game Logo Image Format not supported "" + fileImage.getName() );\r\n\t\t\t}\r\n\t\t\timage.setName(normalizedName);\r\n\t\t\timage.setRealNameImg(imageName);\r\n\t\t\t//Variables Initialization \r\n\t\t\timage.setType(Type.PRODUCT);\r\n\t\t\timage.setId(temp);\r\n\t\t\t// Transfer the logo to the server logo directory\r\n\t\t\t/*if (!ish.transferProfileImage(fileImage, imageName, login, uploaderId, applicationPath)){\r\n\t\t\t\tthrow new ServiceException(""Could not transfer the image"" + \r\n\t\t\t\t\t\t""\\nimageName:"" + fileImage.getName() \r\n\t\t\t\t\t\t+ ""\\nNormalized image Logo:"" + normalizedName);\r\n\t\t\t}*/\r\n\t\t} catch (IOException e) {\r\n\t\t\tthrow new ServiceException(e);\r\n\t\t}\r\n\t\treturn DTOFactory.getImageDTO(image); \r\n\t}\r\n\t\r\n\t@Override\r\n\tpublic long createUser(UserDTO userDTO) throws ServiceException, InvalidUserException{\r\n\r\n\t\tlong userId = 0;\r\n\t\tfinal User user = new User();\r\n\t\tuser.setLogin(userDTO.getLogin());\r\n\t\tuser.setMultiplier(userDTO.getMultiplier());\r\n\t\tuser.setPassword(userDTO.getPassword());\r\n\t\tuser.setCode(userDTO.getCode());\r\n\t\tuser.setTypeId(userDTO.getTypeId());\r\n\t\tuser.setEmail(userDTO.getEmail());\r\n\t\tuser.setActive(userDTO.isActive());\r\n\t\tuser.setRealName(userDTO.getRealName());\r\n\t\t// user.setAge(userDTO.getAge());\r\n\t\tuser.setAddress(userDTO.getAddress());\r\n\t\tuser.setPostalCode(userDTO.getPostalCode());\r\n\t\tuser.setPhone(userDTO.getPhone());\r\n\t\tuser.setClientCategoryId(userDTO.getClientCategoryId());\r\n\t\tuser.setManagerId(userDTO.getManagerId());\r\n\t\tif(userDTO.getImageDTO() != null)\r\n\t\t\tuser.setImageId(userDTO.getImageDTO().getId());\r\n\t\tuser.setPrimaryLanguage((Language)CommonUtils.enumFromValue(Language.values(), userDTO.getPrimaryLanguage()));\r\n\t\tuser.setSecondaryLanguage((Language)CommonUtils.enumFromValue(Language.values(), userDTO.getSecondaryLanguage()));\r\n\t\ttry{\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\tuserId = (Long) daoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\t\r\n\t\t\t\t\tdaoManager.getUserDao().insertUserAccount(user);\r\n\t\t\t\t\tdaoManager.getUserDao().insertUserProfil(user);\r\n\t\t\t\t\t//Just in user case, I insert all the products to the user\r\n\t\t\t\t\tif(user.getTypeId() == UserType.USER.getValue()) {\r\n\t\t\t\t\t\tdaoManager.getUserDao().insertProductToUsers(user);\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn user.getId();\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}catch (DaoException de) {\r\n\t\t\tthrow new ServiceException(de);\r\n\t\t}\t\t\r\n\t\treturn userId;\r\n\t}\t\r\n\t\t\r\n\t@Override\r\n\tpublic UserDTO getUserInformation(final Long userId) throws ServiceException {\r\n\t\tUser userResult = new User();\r\n\t\ttry {\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\tuserResult = (User) daoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) \r\n\t\t\t\t\t\tthrows DaoException {\r\n\t\t\t\t\tUser usr = daoManager.getUserDao().getUser(userId);\r\n\t\t\t\t\treturn usr;\r\n\t\t\t\t}\r\n\t\t\t});\t\t\t\r\n\t\t} catch (DaoException de) {\r\n\t\t\tthrow (new ServiceException(de));\r\n\t\t}\r\n\t\treturn (DTOFactory.getUserDTO(userResult));\t\r\n\t}\r\n\t\r\n\t@Override\r\n\tpublic UserDTO getAnyUserFromId(final Long userId) throws ServiceException {\r\n\t\tUser userResult = new User();\r\n\t\ttry {\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\tuserResult = (User) daoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) \r\n\t\t\t\t\t\tthrows DaoException {\r\n\t\t\t\t\tUser usr = daoManager.getUserDao().getAnyUserFromId(userId);\r\n\t\t\t\t\treturn usr;\r\n\t\t\t\t}\r\n\t\t\t});\t\t\t\r\n\t\t} catch (DaoException de) {\r\n\t\t\tthrow (new ServiceException(de));\r\n\t\t}\r\n\t\treturn (DTOFactory.getUserDTO(userResult));\t\r\n\t}\r\n\t\r\n\t@Override\r\n\tpublic void updateUser(final UserDTO userDTO) throws ServiceException {\t\r\n\t\ttry \r\n\t\t{\r\n\t\t    daoManager.setCommitTransaction(true);\r\n\t\t    daoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\r\n\t\t\t\tthrows DaoException {\t\t\t\t\t\r\n\t\t\t\t\tUser user = buildUser(userDTO);\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\tdaoManager.getUserDao().updateUserById(user);\t\t\t\t\t\r\n\t\t\t\t\treturn user;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t} catch (DaoException e) {\r\n\t\t\tthrow (new ServiceException(e));\r\n\t\t}\r\n\t}\r\n\t\r\n\tprivate Language getLanguage(int value) {\r\n\t\tLanguage lang = null;\r\n\t\tif (value == 1) lang = Language.ENGLISH;\r\n\t\tif (value == 2) lang = Language.FRENCH;\r\n\t\treturn lang;\r\n\t}\r\n\t\r\n\tprivate User buildUser(final UserDTO userDTO) {\r\n\t\tUser user = new User();\r\n\t\tint lang = 0;\r\n\t\tLanguage primary=null, secondary=null;\t\t\r\n\t\tuser.setId(userDTO.getId());\r\n\t\tuser.setLogin(userDTO.getLogin());\r\n\t\tuser.setCode(userDTO.getCode());\r\n\t\tuser.setTypeId(userDTO.getTypeId());\r\n\t\tuser.setPassword(userDTO.getPassword());\r\n\t\tuser.setEmail(userDTO.getEmail());\r\n\t\tuser.setActive(userDTO.isActive());\r\n\t\tuser.setRealName(userDTO.getRealName());\r\n\t\tuser.setManagerId(userDTO.getManagerId());\r\n\t\t// user.setAge(userDTO.getAge());\r\n\t\tuser.setAddress(userDTO.getAddress());\r\n\t\tuser.setPostalCode(userDTO.getPostalCode());\r\n\t\tuser.setPhone(userDTO.getPhone());\r\n\t\tuser.setNote(userDTO.getNote());\r\n\t\tlang = userDTO.getPrimaryLanguage();\r\n\t\tprimary = getLanguage(lang);\t\t\t\t\t\r\n\t\tuser.setPrimaryLanguage(primary);\r\n\t\t\r\n\t\tlang = userDTO.getSecondaryLanguage();\r\n\t\tsecondary = getLanguage(lang);\r\n\t\tuser.setSecondaryLanguage(secondary);\r\n\t\tuser.setMultiplier(userDTO.getMultiplier());\r\n\t\tuser.setClientCategoryId(userDTO.getClientCategoryId());\r\n\t\tuser.setUpdateDate(userDTO.getUpdateDate());\r\n\t\treturn user;\r\n\t}\r\n\r\n\tprivate User buildNoteAdminUser(final UserDTO userDTO) {\r\n\t\tUser user = new User();\t\t\r\n\t\tuser.setId(userDTO.getId());\r\n\t\tuser.setNote(userDTO.getNote());\r\n\t\treturn user;\r\n\t}\r\n\t\r\n\t@Override\r\n\tpublic void updateClientCategoryID(final Long clientCategoryId, final Long userId) throws ServiceException {\t\t\r\n\t\ttry{\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\tdaoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\r\n\t\t\t\t\tSelect select = new Select();\r\n\t\t\t\t\tselect.setClientCategoryId(clientCategoryId);\r\n\t\t\t\t\tselect.setUserId(userId);\r\n\t\t\t\t\tdaoManager.getUserDao().updateClientCategoryID(select);\r\n\t\t\t\t\treturn null;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}  catch (DaoException de) {\r\n\t\t\tthrow (new ServiceException(de));\r\n\t\t}\r\n\t}\r\n\t\r\n\t@Override\r\n\tpublic User getUserByLogin(final String login) {\r\n\t\t// TODO Auto-generated method stub\r\n\t\t\r\n\t\tUser result=null;\t\t\r\n\t\ttry{\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\tresult = (User) daoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\r\n\t\t\t\t\treturn daoManager.getUserDao().getUserByLogin(login);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}catch (DaoException de) {\r\n\t\t\ttry {\r\n\t\t\t\tthrow new ServiceException(de);\r\n\t\t\t} catch (ServiceException e) {\r\n\t\t\t\t// TODO Auto-generated catch block\r\n\t\t\t\te.printStackTrace();\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\t\r\n\t@Override\r\n\tpublic User getCountUserShippingTotal(final User user) {\r\n\t\t\r\n\t\tUser result=null;\t\t\r\n\t\ttry{\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\tresult = (User) daoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\r\n\t\t\t\t\treturn daoManager.getUserDao(). getCountUserShippingTotal(user);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}catch (DaoException de) {\r\n\t\t\ttry {\r\n\t\t\t\tthrow new ServiceException(de);\r\n\t\t\t} catch (ServiceException e) {\r\n\t\t\t\t// TODO Auto-generated catch block\r\n\t\t\t\te.printStackTrace();\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\t\r\n\t@Override\r\n\tpublic User getCountUserProductPrice(final User user) {\r\n\t\t// TODO Auto-generated method stub\r\n\t\t\r\n\t\tUser result=null;\t\t\r\n\t\ttry{\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\tresult = (User) daoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\r\n\t\t\t\t\treturn daoManager.getUserDao(). getCountUserProductPrice(user);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}catch (DaoException de) {\r\n\t\t\ttry {\r\n\t\t\t\tthrow new ServiceException(de);\r\n\t\t\t} catch (ServiceException e) {\r\n\t\t\t\t// TODO Auto-generated catch block\r\n\t\t\t\te.printStackTrace();\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\t\r\n\t@SuppressWarnings(""unchecked"")\r\n\t@Override\r\n\tpublic List<ClientCategoryDTO> getAllClientCategory() throws ServiceException {\r\n\t\t// TODO Auto-generated method stub\r\n\t\tList<ClientCategory> userList = null;\r\n\t\ttry {\t\t\t\r\n\t\t\tuserList = (List<ClientCategory>) daoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\r\n\t\t\t\t\t//here the database access\r\n\t\t\t\t\treturn daoManager.getUserDao().getAllClientCategory();\r\n\t\t\t\t}\r\n\t\t\t}) ;\r\n\t\t} catch (DaoException de) {\r\n\t\t\tthrow (new ServiceException(de));\r\n\t\t}\t\r\n\t\treturn DTOFactory.getAllClientCategoryDTO(userList);\r\n\t}\r\n\t\r\n\t@Override\r\n\tpublic ClientCategoryDTO getClientCategoryById(final Long clientCategoryId) {\r\n\t\tClientCategory result=null;\t\t\r\n\t\ttry{\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\tresult = (ClientCategory) daoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\r\n\t\t\t\t\treturn daoManager.getUserDao().getClientCategoryById(clientCategoryId);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}catch (DaoException de) {\r\n\t\t\ttry {\r\n\t\t\t\tthrow new ServiceException(de);\r\n\t\t\t} catch (ServiceException e) {\r\n\t\t\t\t// TODO Auto-generated catch block\r\n\t\t\t\te.printStackTrace();\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn DTOFactory.getCategoryDTO(result);\r\n\t}\r\n\t\t\r\n\t@Override\r\n\tpublic ClientCategoryDTO getClientCategoryByName(final String clientCategoryName) {\r\n\t\tClientCategory result=null;\t\t\r\n\t\ttry{\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\tresult = (ClientCategory) daoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\r\n\t\t\t\t\treturn daoManager.getUserDao().getClientCategoryByName(clientCategoryName);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}catch (DaoException de) {\r\n\t\t\ttry {\r\n\t\t\t\tthrow new ServiceException(de);\r\n\t\t\t} catch (ServiceException e) {\r\n\t\t\t\t// TODO Auto-generated catch block\r\n\t\t\t\te.printStackTrace();\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn DTOFactory.getCategoryDTO(result);\r\n\t}\r\n\t\r\n\t@Override\r\n\tpublic boolean updateUserAdmin(final UserDTO userDTO) {\r\n\t\t\r\n\t\tboolean result=false;\t\t\r\n\t\ttry{\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\tresult = (Boolean) daoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\r\n\t\t\t\t\tUser user = buildUser(userDTO);\r\n\t\t\t\t\treturn daoManager.getUserDao().updateUserAdmin(user);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}catch (DaoException de) {\r\n\t\t\ttry {\r\n\t\t\t\tthrow new ServiceException(de);\r\n\t\t\t} catch (ServiceException e) {\r\n\t\t\t\t// TODO Auto-generated catch block\r\n\t\t\t\te.printStackTrace();\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn result;\t\t\r\n\t}\r\n\r\n\t@Override\r\n\tpublic boolean updateNoteAdmin(final UserDTO userDTO) {\r\n\t\tboolean result=false;\t\t\r\n\t\ttry{\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\tresult = (Boolean) daoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\r\n\t\t\t\t\tUser user = buildNoteAdminUser(userDTO);\r\n\t\t\t\t\treturn daoManager.getUserDao().updateNoteAdmin(user);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}catch (DaoException de) {\r\n\t\t\ttry {\r\n\t\t\t\tthrow new ServiceException(de);\r\n\t\t\t} catch (ServiceException e) {\r\n\t\t\t\t// TODO Auto-generated catch block\r\n\t\t\t\te.printStackTrace();\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn result;\t\r\n\t}\r\n\r\n\t@Override\r\n\tpublic UserDTO getUserOrTemplateById(final Long userId) {\r\n\t\tUser result=null;\t\t\r\n\t\ttry{\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\tresult = (User) daoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\r\n\t\t\t\t\treturn daoManager.getUserDao().getUserOrTemplateById(userId);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}catch (DaoException de) {\r\n\t\t\ttry {\r\n\t\t\t\tthrow new ServiceException(de);\r\n\t\t\t} catch (ServiceException e) {\r\n\t\t\t\t// TODO Auto-generated catch block\r\n\t\t\t\te.printStackTrace();\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn (DTOFactory.getUserDTO(result));\r\n\t}\r\n\t\r\n\t@Override\r\n\tpublic Long insertTemplate(final UserDTO userDTO) throws ServiceException {\r\n\t\tLong userID = 0L;\r\n\t\ttry {\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\tuserID = (Long) daoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\r\n\t\t\t\t\tUser user = new User();\r\n\t\t\t\t\tuser.setLogin(userDTO.getClientCategoryName());\r\n\t\t\t\t\tuser.setCode("""");\r\n\t\t\t\t\tuser.setTypeId(2);\r\n\t\t\t\t\tuser.setPassword("""");\r\n\t\t\t\t\tuser.setEmail(userDTO.getClientCategoryName());\r\n\t\t\t\t\tuser.setLastLoginDate(null);\r\n\t\t\t\t\tuser.setActive(false);\r\n\t\t\t\t\tuser.setTemplate(true);\r\n\t\t\t\t\tuser.setUpdateDate(null);\r\n\t\t\t\t\tuser.setRealName(userDTO.getClientCategoryName());\r\n\t\t\t\t\tuser.setAddress(null);\r\n\t\t\t\t\tuser.setPostalCode(null);\r\n\t\t\t\t\tuser.setPhone(null);\r\n\t\t\t\t\tuser.setImageId(null);\r\n\t\t\t\t\tuser.setPrimaryLanguage(null);\r\n\t\t\t\t\tuser.setSecondaryLanguage(null);\r\n\t\t\t\t\tuser.setMultiplier(null);\r\n\t\t\t\t\tuser.setClientCategoryName(userDTO.getClientCategoryName());\r\n\t\t\t\t\tuser.setClientCategoryId(userDTO.getClientCategoryId());\r\n\t\t\t\t\tuser.setManagerId(userDTO.getManagerId());\r\n\t\t\t\t\tuser.setNote("""");\r\n\t\t\t\t\tdaoManager.getUserDao().insertTemplateOnUserAccount(user);\r\n\t\t\t\t\tdaoManager.getUserDao().insertTemplateOnUserProfile(user);\r\n\t\t\t\t\treturn user.getId();\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t} catch (DaoException de) {\r\n\t\t\tthrow (new ServiceException(de));\r\n\t\t}\r\n\t\treturn userID;\r\n\t}\r\n\t\r\n\t@Override\r\n\tpublic void deleteTemplate(final Long userId) throws ServiceException {\r\n\t\ttry {\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\tdaoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\r\n\t\t\t\t\tSelect select = new Select();\r\n\t\t\t\t\tselect.setUserId(userId);\r\n\t\t\t\t\tdaoManager.getUserDao().deleteUserProfile(select);\r\n\t\t\t\t\tdaoManager.getProductDao().deleteShippingTotalByUserId(select);\r\n\t\t\t\t\tdaoManager.getProductDao().deleteUserProductPriceByUserId(select);\r\n\t\t\t\t\tdaoManager.getProductDao().deleteAlterUserProductXMLByUserId(select);\r\n\t\t\t\t\tdaoManager.getProductDao().deleteUserProvincePopulationByUserId(select);\r\n\t\t\t\t\tdaoManager.getUserDao().deleteUserAccount(select);\r\n\t\t\t\t\treturn null;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t} catch (DaoException de) {\r\n\t\t\tthrow (new ServiceException(de));\r\n\t\t}\r\n\t}\r\n\t\r\n\t@Override\r\n\tpublic UserDTO getAdmin(final String login, final String password)throws ServiceException {\r\n\t\tUser userResult = new User();\r\n\t\ttry {\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\tuserResult = (User) daoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) \r\n\t\t\t\t\t\tthrows DaoException {\r\n\t\t\t\t\tUser usr = daoManager.getUserDao().getAdmin(login, password);\r\n\t\t\t\t\treturn usr;\r\n\t\t\t\t}\r\n\t\t\t});\t\t\t\r\n\t\t} catch (DaoException de) {\r\n\t\t\tthrow (new ServiceException(de));\r\n\t\t}\r\n\t\treturn (DTOFactory.getUserDTO(userResult));\t\r\n\t}\r\n\r\n\t\r\n\t@Override\r\n\tpublic UserDTO getSuperAdmin(final String login, final String password)throws ServiceException {\r\n\t\tUser userResult = new User();\r\n\t\ttry {\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\tuserResult = (User) daoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) \r\n\t\t\t\t\t\tthrows DaoException {\r\n\t\t\t\t\tUser usr = daoManager.getUserDao().getSuperAdmin(login, password);\r\n\t\t\t\t\treturn usr;\r\n\t\t\t\t}\r\n\t\t\t});\t\t\t\r\n\t\t} catch (DaoException de) {\r\n\t\t\tthrow (new ServiceException(de));\r\n\t\t}\r\n\t\treturn (DTOFactory.getUserDTO(userResult));\t\r\n\t}\r\n\r\n\t\r\n\t@Override\r\n\tpublic boolean insertUserConnection(UserConnectionDTO userConnectionDTO) throws ServiceException {\r\n\t\tfinal UserConnection userConnection = DTOFactory.getUserConnectionFromUserConnectionDTO(userConnectionDTO) ;\r\n\t\tboolean result=false;\r\n\t\ttry{\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\tresult = (Boolean)daoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\r\n\t\t\t\t\treturn daoManager.getUserDao().insertUserConnection(userConnection);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}catch (DaoException de) {\r\n\t\t\ttry {\r\n\t\t\t\tthrow new ServiceException(de);\r\n\t\t\t} catch (ServiceException e) {\r\n\t\t\t\te.printStackTrace();\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\t\r\n\t\r\n\t@Override\r\n\tpublic UserConnectionDTO getUserConnectionByUserId(final Long userId)\tthrows ServiceException { \r\n\t\tUserConnection UserConnectionResult = new UserConnection();\r\n\t\ttry {\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\tUserConnectionResult = (UserConnection) daoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic Object execute(DaoManager daoManager)  \r\n\t\t\t\t\t\tthrows DaoException {\r\n\t\t\t\t\tUserConnection usr = daoManager.getUserDao().getUserConnectionByUserId(userId);\r\n\t\t\t\t\treturn usr;\r\n\t\t\t\t}\r\n\t\t\t});\t\t\t\r\n\t\t} catch (DaoException de) {\r\n\t\t\tthrow (new ServiceException(de));\r\n\t\t}\r\n\t\treturn (DTOFactory.getUserConnectionDTOFromUserConnection(UserConnectionResult));\r\n\t}\r\n\r\n\t@SuppressWarnings(""unchecked"")\r\n\t@Override\r\n\tpublic List<UserConnectionDTO> getAllUsersConnections()throws ServiceException { \r\n\t\tList<UserConnection> userConnList = new ArrayList<UserConnection>();\r\n\t\ttry {\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\tuserConnList = (List<UserConnection>) daoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic Object execute(DaoManager daoManager)  \r\n\t\t\t\t\t\tthrows DaoException {\r\n\t\t\t\t\tList<UserConnection> result = daoManager.getUserDao().getAllUsersConnections();\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t});\t\t\t\r\n\t\t} catch (DaoException de) {\r\n\t\t\tthrow (new ServiceException(de)); \r\n\t\t}\r\n\t\treturn (DTOFactory.getUserConnListDTOFromUserConnList(userConnList));\r\n\t}\r\n\r\n\t// Method to encrypt the String\r\n/*\r\n\t@SuppressWarnings(""unchecked"")\r\n\t@Override\r\n\tpublic String encrypt (String toEncode) throws Exception{\r\n\t\ttry{\r\n\t\t\tbyte[] bytesOfMessage = ""KLFMEDIA2005"".getBytes(""UTF-8"");\r\n\t\t\tMessageDigest md = MessageDigest.getInstance(""MD5"");\r\n\t\t\tbyte[] thedigest = md.digest(bytesOfMessage);\r\n\t\t\tskeySpec = new SecretKeySpec(thedigest, ""AES"");\r\n\t\t\t    \r\n\t\t\tskeySpec = new SecretKeySpec(new byte[16], ""AES"");\r\n\t\t\tcipher = Cipher.getInstance(""AES/ECB/PKCS5Padding"");\r\n\t\t}catch(Exception e){\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t    //returns byte array encrypted with key\r\n\t\tbyte[] input = toEncode.getBytes(""UTF-8"");\r\n\t    cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\r\n\t    byte[] ciphertext =  cipher.doFinal(input);\r\n\t    return  new String(Base64.encode(ciphertext));\r\n\t}\t\r\n\t// Method to decrypt the encoded String.\r\n\r\n\t@SuppressWarnings(""unchecked"")\r\n\t@Override\r\n\tpublic String decrypt (String toDecrypt) throws Exception{\r\n\t\ttry{\r\n\t\t\tbyte[] bytesOfMessage = ""KLFMEDIA2005"".getBytes(""UTF-8"");\r\n\t\t\tMessageDigest md = MessageDigest.getInstance(""MD5"");\r\n\t\t\tbyte[] thedigest = md.digest(bytesOfMessage);\r\n\t\t\tskeySpec = new SecretKeySpec(thedigest, ""AES"");\r\n\t\t\t    \r\n\t\t\tskeySpec = new SecretKeySpec(new byte[16], ""AES"");\r\n\t\t\tcipher = Cipher.getInstance(""AES/ECB/PKCS5Padding"");\r\n\t\t}catch(Exception e){\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t\tbyte[] decrypted = Base64.decode(toDecrypt.getBytes());\r\n\t    cipher.init(Cipher.DECRYPT_MODE, skeySpec);\r\n\t    byte[] ciphertext = cipher.doFinal(decrypted);\r\n\t    return\tnew String (ciphertext, ""UTF-8"");\r\n\t}\t\r\n*/\r\n    public  String encrypt(String data) throws Exception {\r\n        Key key = generateKey();\r\n        Cipher c = Cipher.getInstance(ALGO);\r\n        c.init(Cipher.ENCRYPT_MODE, key);\r\n        byte[] encValue = c.doFinal(data.getBytes());\r\n        byte[] encryptedByteValue = new Base64().encode(encValue);\r\n        String encryptedValue = new String(encryptedByteValue);\r\n        return encryptedValue;\r\n    }\r\n\r\n    public  String decrypt(String encryptedData) throws Exception {\r\n        Key key = generateKey();\r\n        Cipher c = Cipher.getInstance(ALGO);\r\n        c.init(Cipher.DECRYPT_MODE, key);\r\n        byte[] decodedValue = new Base64().decode(encryptedData.getBytes());\r\n        byte[] decryptedVal = c.doFinal(decodedValue);\r\n        return new String(decryptedVal);\r\n    }\r\n\r\n    private  Key generateKey() throws Exception {\r\n        Key key = new SecretKeySpec(keyValue, ALGO);\r\n        return key;\r\n    }\r\n\t\r\n}\r\n\r\n----------------------------------- SOURCE END -------------------------------------",1397772023229
error,log,,,"Problems occurred when invoking code from plug-in: ""org.eclipse.jdt.ui"".",1397772023231
error,log,,,"Error in JDT Core during reconcile",1397772023232
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1397772025055
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1397772051728
activated,view,org.eclipse.wst.server.ui,1.1.207.v20110119,"org.eclipse.wst.server.ui.ServersView",1397772051764
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1397772054697
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1397772055619
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1397772055938
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1397772062913
executed,command,org.eclipse.wst.server.ui,1.1.207.v20110119,"org.eclipse.wst.server.run",1397772068451
opened,view,org.eclipse.ui.console,3.5.0.v20100526,"org.eclipse.ui.console.ConsoleView",1397772069266
activated,view,org.eclipse.ui.console,3.5.0.v20100526,"org.eclipse.ui.console.ConsoleView",1397772069447
activated,view,org.eclipse.wst.server.ui,1.1.207.v20110119,"org.eclipse.wst.server.ui.ServersView",1397772111363
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1397772113932
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1397772194733
activated,editor,org.eclipse.jdt.ui,3.6.2.r362_v20110203,"org.eclipse.jdt.ui.CompilationUnitEditor",1397772194775
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1397772211845
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1397772211901
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1397772214043
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1397772234755
