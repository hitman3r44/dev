what,kind,bundleId,bundleVersion,description,time
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1380644861769
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1380644864577
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.delete",1380644866808
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1380644868882
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1380644869023
activated,editor,org.eclipse.jdt.ui,3.6.2.r362_v20110203,"org.eclipse.jdt.ui.CompilationUnitEditor",1380644871956
activated,editor,org.eclipse.jdt.ui,3.6.2.r362_v20110203,"org.eclipse.jdt.ui.CompilationUnitEditor",1380644876963
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.file.saveAll",1380644914606
error,log,,,"Exception occurred during problem detection:\n----------------------------------- SOURCE BEGIN -------------------------------------\npackage com.loyauty.service.orders;\n\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.text.SimpleDateFormat;\nimport java.util.ArrayList;\nimport java.util.Calendar;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.Date;\n//import java.util.GregorianCalendar;\nimport java.util.HashMap;\nimport java.util.Hashtable;\nimport java.util.Iterator;\nimport java.util.LinkedHashMap;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\n\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\n\nimport jxl.Cell;\nimport jxl.Sheet;\nimport jxl.Workbook;\nimport jxl.format.Border;\nimport jxl.format.BorderLineStyle;\nimport jxl.format.Colour;\nimport jxl.format.VerticalAlignment;\nimport jxl.write.Label;\nimport jxl.write.WritableCell;\nimport jxl.write.WritableCellFormat;\nimport jxl.write.WritableFont;\nimport jxl.write.WritableSheet;\nimport jxl.write.WritableWorkbook;\n\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Element;\nimport org.w3c.dom.Node;\nimport org.w3c.dom.NodeList;\nimport org.xml.sax.SAXException;\nimport org.xml.sax.SAXParseException;\n\nimport lombok.Getter;\nimport lombok.Setter;\nimport com.loyauty.dao.core.DaoCommand;\nimport com.loyauty.dao.core.DaoManager;\nimport com.loyauty.dao.core.DaoManagerFactory;\nimport com.loyauty.exception.DaoException;\nimport com.loyauty.exception.ServiceException;\nimport com.loyauty.exception.ServiceLocatorException;\nimport com.loyauty.model.Orders;\nimport com.loyauty.model.OrdersRows;\nimport com.loyauty.model.Product;\nimport com.loyauty.model.Province;\nimport com.loyauty.model.User;\nimport com.loyauty.model.UserFileRecovery;\nimport com.loyauty.service.ServiceImpl;\nimport com.loyauty.service.ServiceLocator;\nimport com.loyauty.service.core.DTOFactory;\nimport com.loyauty.service.core.dto.OrdersDTO;\nimport com.loyauty.service.core.dto.ProductDTO;\nimport com.loyauty.service.core.dto.ProvinceDTO;\nimport com.loyauty.service.core.dto.UserDTO;\nimport com.loyauty.service.core.dto.UserFileDataRecoveryDTO;\nimport com.loyauty.service.core.dto.UserFileRecoveryDTO;\nimport com.loyauty.service.product.ProductService;\nimport com.loyauty.service.user.UserService;\n\n\npublic class OrdersServiceImpl extends ServiceImpl implements OrdersService {\n\n\t@Setter @Getter\n\tprotected DaoManager daoManager;\n\t\n\tprivate static ServiceLocator serviceLocator;\n\tprivate static ProductService productService;\n\tprivate static UserService userService;\n\t\n\tpublic OrdersServiceImpl() {\n\t\tsetDaoManager(DaoManagerFactory.getDaoManager());\n\t\tserviceLocator = ServiceLocator.getInstance();\n\t\t\n\t}\n\n\t/**----------------------------------------------------------\n\t  *THIS METHOD ALLOW US TO TRANSLATE ORDER DTO TO ORDER*\n\t  -----------------------------------------------------------*/\t\n\tpublic static Orders buildOrder(OrdersDTO orderDTO){\n\t\tOrders order=new Orders();\n\t\torder.setClientCity(orderDTO.getClientCity());\n\t\torder.setClientEmail(orderDTO.getClientEmail());\n\t\torder.setClientFirstName(orderDTO.getClientFirstName());\n\t\torder.setClientLastName(orderDTO.getClientLastName());\n\t\torder.setClientNumber(orderDTO.getClientNumber());\n\t\torder.setClientOrderNumber(orderDTO.getClientOrderNumber());\n\t\torder.setClientOtherNames(orderDTO.getClientOtherNames());\n\t\torder.setClientOtherStreet(orderDTO.getClientOtherStreet());\n\t\torder.setClientPhone(orderDTO.getClientPhone());\n\t\torder.setClientPostalCode(orderDTO.getClientPostalCode());\n\t\torder.setClientProvince(orderDTO.getClientProvince());\n\t\torder.setClientStreet(orderDTO.getClientStreet());\n\t\torder.setCreationDate(orderDTO.getCreationDate());\n\t\torder.setId(orderDTO.getId());\n\t\torder.setLsOrderId(orderDTO.getLsOrderId());\n\t\torder.setProductOrderNumber(orderDTO.getProductOrderNumber());\n\t\torder.setRowsList(orderDTO.getRowsList());\n\t\torder.setUserId(orderDTO.getUserId());\n\t\treturn order;\n\t}\n\n\t/**----------------------------------------------------------\n\t  *GET USER_FILE_RECOVERY BY USER_LOGIN*\n\t  -----------------------------------------------------------*/\t\n\t@Override\n\tpublic UserFileRecoveryDTO getUserFileRecoveryByUser(final String login)\n\t\t\tthrows ServiceException {\n\n\t\tUserFileRecovery result=null;\t\t\n\t\ttry{\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tresult = (UserFileRecovery) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\n\t\t\t\t\treturn daoManager.getOrdersDao().getUserFileRecoveryByUser(login);\n\t\t\t\t}\n\t\t\t});\n\t\t}catch (DaoException de) {\n\t\t\ttry {\n\t\t\t\tthrow new ServiceException(de);\n\t\t\t} catch (ServiceException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\treturn (DTOFactory.getUserFileRecoveryDTO(result));\n\t}\n\n\t\n\t\n\n\t/**----------------------------------------------------------\n\t *UPDATE ORDERS ROWS BY LIKE LSORDER_ID, DATE, STATUS, CLIENT*\n\t  -----------------------------------------------------------*/\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<Orders> getAllOrders(){\n\t\tList<Orders> result=null;\n\t\ttry{\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tresult = (List<Orders>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\n\t\t\t\t\treturn daoManager.getOrdersDao().getAllOrders();\n\t\t\t\t}\n\t\t\t});\n\t\t}catch (DaoException de) {\n\t\t\ttry {\n\t\t\t\tthrow new ServiceException(de);\n\t\t\t} catch (ServiceException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\t\n\t\n\t/**----------------------------------------------------------\n\t  *THIS FUNCTION ALLOWS US TO TRANSFORM AN XML FILE TO A LIST \n\t   OF ORDERS*\n\t  -----------------------------------------------------------*/\t\n\t@SuppressWarnings({ ""rawtypes"", ""unchecked"" })\n\t@Override\n\tpublic Collection  toArrayListFromXML(File orderFile,String userLogin) {\n\t\tCollection listOrdersDTO = new ArrayList();\n\t\tUserFileRecoveryDTO ufrDTO;\n\t\tString formatDate="""";\n\t\tHashtable<String, String>lsOrdersIdHash=new Hashtable<String, String>();\n\t\tList<Orders>listOrders=getAllOrders();\n\t\tif(listOrders!=null){\n\t\t\tfor(Orders ord:listOrders){\n\t\t\t\tlsOrdersIdHash.put(ord.getLsOrderId(), ord.getLsOrderId());\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(orderFile==null)return listOrdersDTO;\n\t    try {\n\t    \tUserFileDataRecoveryDTO ufDataDTO=new UserFileDataRecoveryDTO();\n            DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();\n            DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder();\n            Document doc = docBuilder.parse (orderFile);\n            ufrDTO=getUserFileRecoveryByUser(userLogin);\n            // normalize text representation\n            doc.getDocumentElement ().normalize ();\n            \n            if(ufrDTO!=null && ufrDTO.getTagRoot()!=null  && ufrDTO.getFileTypeId()==1){\n            \tNodeList listOfOrders = doc.getElementsByTagName(ufrDTO.getTagRoot());\n            \t\n                for(int s=0; s<listOfOrders.getLength() ; s++){\n                \tufDataDTO=new UserFileDataRecoveryDTO();\n                \tufDataDTO.setUserId(ufrDTO.getUserId());\n                    Node firstOrderNode = listOfOrders.item(s);\n                     \n                     if(firstOrderNode.getNodeType() == Node.ELEMENT_NODE){\n                         Element firstOrderElement = (Element)firstOrderNode;\n                         //--------------- 1:companyHeader -----------\n                         String companyHeader="""";\n                         if(ufrDTO.getCompanyHeader()!=null){\n\t                         NodeList companyHeaderList = firstOrderElement.getElementsByTagName(ufrDTO.getCompanyHeader());\n\t                         if(companyHeaderList!=null && companyHeaderList.getLength()>0){\n\t\t                         Element companyHeaderElement = (Element)companyHeaderList.item(0);\n\t\t                         if(companyHeaderElement!=null){\n\t\t                        \t NodeList companyHeaderFNList = companyHeaderElement.getChildNodes();\n\t\t                        \t if(companyHeaderFNList!=null && companyHeaderFNList.getLength()>0){\n\t\t                        \t\t companyHeader =((Node)companyHeaderFNList.item(0)).getNodeValue().trim(); \n\t\t                        \t }\n\t\t                         }  \n\t                         }\n                         }\n                         ufDataDTO.setCompanyHeader(companyHeader);\n                         \n                         //--------------- 2:productOrderNumber ----------------\n                         String productOrderNumber="""";\n\t                     if(ufrDTO.getProductOrderNumber()!=null){\n\t                         NodeList productOrderNumberList = firstOrderElement.getElementsByTagName(ufrDTO.getProductOrderNumber());\n\t                         if(productOrderNumberList!=null && productOrderNumberList.getLength()>0){\n\t                        \t Element productOrderNumberElement = (Element)productOrderNumberList.item(0);\n\t\t                         if(productOrderNumberElement!=null){\n\t\t                        \t NodeList productOrderNumberFNList = productOrderNumberElement.getChildNodes(); \n\t\t                        \t if(productOrderNumberFNList!=null && productOrderNumberFNList.getLength()>0){\n\t\t                        \t\t productOrderNumber =((Node)productOrderNumberFNList.item(0)).getNodeValue().trim();\n\t\t                        \t }\n\t\t                         }\n\t                         }\n                         }\n                         ufDataDTO.setProductOrderNumber(productOrderNumber);                \n                         //--------------- 3:productOrderDate -----------------\n                         String productOrderDate="""";\n                         if(ufrDTO.getProductOrderDate()!=null){\n\t                         NodeList productOrderDateList = firstOrderElement.getElementsByTagName(ufrDTO.getProductOrderDate());\n\t                         if(productOrderDateList!=null && productOrderDateList.getLength()>0){\n\t\t                         Element productOrderDateElement = (Element)productOrderDateList.item(0);\n\t\t                         if(productOrderDateElement!=null){\n\t\t                        \t NodeList productOrderDateFNList = productOrderDateElement.getChildNodes();\n\t\t\t                         if(productOrderDateFNList!=null && productOrderDateFNList.getLength()>0){\n\t\t\t                        \t productOrderDate =((Node)productOrderDateFNList.item(0)).getNodeValue().trim();\n\t\t\t                        \t productOrderDate=productOrderDate.replaceAll(""^ +| +$|( )+"", ""$1"");\n\t\t\t                         }\n\t\t                         }\n\t                         }\n                         }\n                        formatDate=ufrDTO.getFormatDate();\n                        if(formatDate==null)formatDate="""";\n             \t\t\tSimpleDateFormat sdf = new SimpleDateFormat(formatDate);\n             \t\t\tDate dateOrder=null;\n            \t\t\ttry {\n            \t\t\t\tDate date = sdf.parse(productOrderDate);\n            \t\t\t\tdateOrder=date;\n            \t\t\t}\n            \t\t\tcatch (Exception pe) {\n            \t\t\t\tdateOrder=null;\n            \t\t\t}\n                        ufDataDTO.setProductOrderDate(dateOrder);\n\n                         //--------------- 4:quantity -------------------------\n                         String strQuantity="""";\n                         if(ufrDTO.getQuantity()!=null){\n\t                         NodeList quantityList = firstOrderElement.getElementsByTagName(ufrDTO.getQuantity());\n\t                         if(quantityList!=null && quantityList.getLength()>0){\n\t\t                         Element quantityElement = (Element)quantityList.item(0);\n\t\t                         if(quantityElement!=null){\n\t\t\t                         NodeList quantityFNList = quantityElement.getChildNodes();\n\t\t\t                         if(quantityFNList!=null && quantityFNList.getLength()>0){\n\t\t\t                        \t strQuantity =((Node)quantityFNList.item(0)).getNodeValue().trim();\n\t\t\t                        \t strQuantity=strQuantity.replaceAll("" "", """");\n\t\t\t                         }\n\t\t                         }\n\t                         }\n                         }\n                         \n     \t\t\t\t\tif(strQuantity!=null && !strQuantity.equals("""")){\n     \t\t\t\t\t\tint index=strQuantity.indexOf("","");\n     \t\t\t\t\t\tif(index>=0){\n     \t\t\t\t\t\t\tString strUnitPrice1=strQuantity.substring(0, index);\n     \t\t\t\t\t\t\tString strUnitPrice2= strQuantity.substring(index+1, strQuantity.length());\n     \t\t\t\t\t\t\tstrQuantity=strUnitPrice1+"".""+strUnitPrice2;\n     \t\t\t\t\t\t}\n     \t\t\t\t\t}\n     \t\t\t\t\tDouble quantity=null;\n                      \ttry {\n                      \t\tquantity = Double.parseDouble(strQuantity);\n                      \t}\n                      \tcatch (Exception pe) {\n                      \t\tquantity=null;\n                      \t}\n                        ufDataDTO.setQuantity(quantity);\n      \n                         //--------------- 5:lsProductID ----------------------\n                         String lsProductID="""";\n                         if(ufrDTO.getLsProductID()!=null){\n\t                         NodeList lsProductIDList = firstOrderElement.getElementsByTagName(ufrDTO.getLsProductID());\n\t                         if(lsProductIDList!=null && lsProductIDList.getLength()>0){\n\t                        \t Element lsProductIDElement = (Element)lsProductIDList.item(0);\n\t                        \t if(lsProductIDElement!=null){\n\t                        \t\t NodeList lsProductIDFNList = lsProductIDElement.getChildNodes();\n\t                        \t\t if(lsProductIDFNList!=null && lsProductIDFNList.getLength()>0){\n\t                        \t\t\t lsProductID =((Node)lsProductIDFNList.item(0)).getNodeValue().trim(); \n\t                        \t\t }\n\t                        \t }\n\t                         }\n                         }\n                         \n                         ufDataDTO.setLsProductID(lsProductID);\n\n                         //--------------- 6:productDescription ------------------\n                         String productDescription="""";\n                         if(ufrDTO.getProductDescription()!=null){\n\t                         NodeList productDescriptionList = firstOrderElement.getElementsByTagName(ufrDTO.getProductDescription());\n\t                         if(productDescriptionList!=null && productDescriptionList.getLength()>0){\n\t\t                         Element productDescriptionElement = (Element)productDescriptionList.item(0);\n\t\t                         if(productDescriptionElement!=null){\n\t\t                        \t NodeList productDescriptionFNList = productDescriptionElement.getChildNodes();\n\t\t\t                         if(productDescriptionFNList!=null && productDescriptionFNList.getLength()>0){\n\t\t\t                        \t productDescription =((Node)productDescriptionFNList.item(0)).getNodeValue().trim(); \n\t\t\t                         }\n\t\t                         }\n\t                         }\n                         }\n                         ufDataDTO.setProductDescription(productDescription);\n\n                         //--------------- 7:unitPrice ---------------------------\n                         String strUnitPrice="""";\n                         if(ufrDTO.getUnitPrice()!=null){\n\t                         NodeList unitPriceList = firstOrderElement.getElementsByTagName(ufrDTO.getUnitPrice());\n\t                         if(unitPriceList!=null && unitPriceList.getLength()>0){\n\t\t                         Element unitPriceElement = (Element)unitPriceList.item(0);\n\t\t                         if(unitPriceElement!=null){\n\t\t\t                         NodeList unitPriceFNList = unitPriceElement.getChildNodes();\n\t\t\t                         if(unitPriceFNList!=null && unitPriceFNList.getLength()>0){\n\t\t\t                        \t strUnitPrice =((Node)unitPriceFNList.item(0)).getNodeValue().trim();  \n\t\t\t                        \t strUnitPrice= strUnitPrice.replaceAll(""\\\\$"", """");\n\t\t\t         \t\t\t\t\t strUnitPrice= strUnitPrice.replaceAll("" "", """");\n\t\t\t                         }\n\t\t                         }\n\t                         }\n                         }\n                        \n    \t\t\t\t\tif(strUnitPrice!=null && !strUnitPrice.equals("""")){\n    \t\t\t\t\t\tint index=strUnitPrice.indexOf("","");\n    \t\t\t\t\t\tif(index>=0){\n    \t\t\t\t\t\t\tString strUnitPrice1=strUnitPrice.substring(0, index);\n    \t\t\t\t\t\t\tString strUnitPrice2= strUnitPrice.substring(index+1, strUnitPrice.length());\n    \t\t\t\t\t\t\tstrUnitPrice=strUnitPrice1+"".""+strUnitPrice2;\n    \t\t\t\t\t\t}\n    \t\t\t\t\t}\n                      \tDouble ProductUnitPrice=null;\n                      \ttry {\n                      \t\tProductUnitPrice = Double.parseDouble(strUnitPrice);\n                      \t}\n                      \tcatch (Exception pe) {\n                      \t\tProductUnitPrice=null;\n                      \t}\n                         ufDataDTO.setUnitPrice(ProductUnitPrice);\n\n                         //--------------- 8:clientNumber -------------------------\n                         String clientNumber="""";\n                         if(ufrDTO.getClientNumber()!=null){\n\t                         NodeList clientNumberList = firstOrderElement.getElementsByTagName(ufrDTO.getClientNumber());\n\t                         if(clientNumberList!=null && clientNumberList.getLength()>0){\n\t\t                         Element clientNumberElement = (Element)clientNumberList.item(0);\n\t\t                         if(clientNumberElement!=null){\n\t\t                        \t NodeList clientNumberFNList = clientNumberElement.getChildNodes();\n\t\t\t                         if(clientNumberFNList!=null && clientNumberFNList.getLength()>0){\n\t\t\t                        \t clientNumber =((Node)clientNumberFNList.item(0)).getNodeValue().trim(); \n\t\t\t                         }\n\t\t                         }\n\t                         }\n                         }\n                         ufDataDTO.setClientNumber(clientNumber);\n\n                         //--------------- 9:firstName ---------------------------\n                         String firstName="""";\n                         if(ufrDTO.getClientFirstName()!=null){\n\t                         NodeList firstNameList = firstOrderElement.getElementsByTagName(ufrDTO.getClientFirstName());\n\t                         if(firstNameList!=null && firstNameList.getLength()>0){\n\t\t                         Element firstNameElement = (Element)firstNameList.item(0);\n\t\t                         if(firstNameElement!=null){\n\t\t\t                         NodeList firstNameFNList = firstNameElement.getChildNodes();\n\t\t\t                         if(firstNameFNList!=null && firstNameFNList.getLength()>0){\n\t\t\t                        \t firstName =((Node)firstNameFNList.item(0)).getNodeValue().trim();\n\t\t\t                         }\n\t\t                         }\n\t                         }\n                         }\n                         ufDataDTO.setClientFirstName(firstName);\n\n                         //--------------- 10:lastName ---------------------------\n                         String lastName="""";\n                         if(ufrDTO.getClientLastName()!=null){\n\t                         NodeList lastNameList = firstOrderElement.getElementsByTagName(ufrDTO.getClientLastName());\n\t                         if(lastNameList!=null && lastNameList.getLength()>0){\n\t\t                         Element lastNameElement = (Element)lastNameList.item(0);\n\t\t                         if(lastNameElement!=null){\n\t\t\t                         NodeList lastNameFNList = lastNameElement.getChildNodes();\n\t\t\t                         if(lastNameFNList!=null && lastNameFNList.getLength()>0){\n\t\t\t                        \t lastName =((Node)lastNameFNList.item(0)).getNodeValue().trim();\n\t\t\t                         }\n\t\t                         }\n\t                         }\n                         }\n                         ufDataDTO.setClientLastName(lastName);\n\n                         //--------------- 11:addressStreet ----------------------\n                         String addressStreet="""";\n                         if(ufrDTO.getClientStreet()!=null){\n\t                         NodeList addressStreetList = firstOrderElement.getElementsByTagName(ufrDTO.getClientStreet());\n\t                         if(addressStreetList!=null && addressStreetList.getLength()>0){\n\t\t                         Element addressStreetElement = (Element)addressStreetList.item(0);\n\t\t                         if(addressStreetElement!=null){\n\t\t                        \t NodeList addressStreetFNList = addressStreetElement.getChildNodes();\n\t\t\t                         if(addressStreetFNList!=null && addressStreetFNList.getLength()>0){\n\t\t\t                        \t addressStreet =((Node)addressStreetFNList.item(0)).getNodeValue().trim();\n\t\t\t                         }\n\t\t                         }\n\t                         }\n                         }\n                         ufDataDTO.setClientStreet(addressStreet);\n\n                         //--------------- 12:addressStreetOther ----------------\n                         String addressStreetOther="""";\n                         if(ufrDTO.getClientOtherStreet()!=null){\n\t                         NodeList addressStreetOtherList = firstOrderElement.getElementsByTagName(ufrDTO.getClientOtherStreet());\n\t                         if(addressStreetOtherList!=null && addressStreetOtherList.getLength()>0){\n\t\t                         Element addressStreetOtherElement = (Element)addressStreetOtherList.item(0);\n\t\t                         if(addressStreetOtherElement!=null){\n\t\t\t                         NodeList addressStreetOtherFNList = addressStreetOtherElement.getChildNodes();\n\t\t\t                         if(addressStreetOtherFNList!=null && addressStreetOtherFNList.getLength()>0){\n\t\t\t                        \t addressStreetOther =((Node)addressStreetOtherFNList.item(0)).getNodeValue().trim();\n\t\t\t                         }\n\t\t                         }\n\t                         }\n                         }\n                         ufDataDTO.setClientOtherStreet(addressStreetOther);\n\n                         //--------------- 13:addressCity ------------------------\n                         String addressCity="""";\n                         if(ufrDTO.getClientCity()!=null){\n\t                         NodeList addressCityList = firstOrderElement.getElementsByTagName(ufrDTO.getClientCity());\n\t                         if(addressCityList!=null && addressCityList.getLength()>0){\n\t\t                         Element addressCityElement = (Element)addressCityList.item(0);\n\t\t                         if(addressCityElement!=null){\n\t\t                        \t NodeList addressCityLNList = addressCityElement.getChildNodes();\n\t\t\t                         if(addressCityLNList!=null && addressCityLNList.getLength()>0){\n\t\t\t                        \t addressCity =((Node)addressCityLNList.item(0)).getNodeValue().trim();\n\t\t\t                         }\n\t\t                         }\n\t                         }\n                         }\n                         ufDataDTO.setClientCity(addressCity);\n\n                         //--------------- 14:addressPostalCode ---------------------\n                         String addressPostalCode="" "";\n                         if(ufrDTO.getClientPostalCode()!=null){\n\t                         NodeList addressPostalCodeList = firstOrderElement.getElementsByTagName(ufrDTO.getClientPostalCode());\n\t                         if(addressPostalCodeList!=null && addressPostalCodeList.getLength()>0){\n\t\t                         Element addressPostalCodeElement = (Element)addressPostalCodeList.item(0);\n\t\t                         if(addressPostalCodeElement!=null){\n\t\t                        \t NodeList addressPostalCodeLNList = addressPostalCodeElement.getChildNodes();\n\t\t                        \t if(addressPostalCodeLNList!=null && addressPostalCodeLNList.getLength()>0){\n\t\t                        \t\t addressPostalCode =((Node)addressPostalCodeLNList.item(0)).getNodeValue().trim();  \n\t\t                        \t }\n\t\t                         }\n\t                         }\n                         }\n                         addressPostalCode=addressPostalCode.replaceAll("" "", """");\n                         ufDataDTO.setClientPostalCode(addressPostalCode);\n\n                         //--------------- 15:addressState -------------------------\n                         String addressState="""";\n                         if(ufrDTO.getClientProvince()!=null){\n\t                         NodeList addressStateList = firstOrderElement.getElementsByTagName(ufrDTO.getClientProvince());\n\t                         if(addressStateList!=null && addressStateList.getLength()>0){\n\t\t                         Element addressStateElement = (Element)addressStateList.item(0);\n\t\t                         if(addressStateElement!=null){\n\t\t                        \t NodeList addressStateLNList = addressStateElement.getChildNodes();\n\t\t                        \t if(addressStateLNList!=null && addressStateLNList.getLength()>0){\n\t\t                        \t\t addressState =((Node)addressStateLNList.item(0)).getNodeValue().trim(); \n\t\t                        \t }\n\t\t                         }\n\t                         }\n                         }\n                         ufDataDTO.setClientProvince(addressState);\n\n                         //--------------- 16:clientPhone --------------------------\n                         String clientPhone="""";\n                         if(ufrDTO.getClientPhone()!=null){\n\t                         NodeList clientPhoneList = firstOrderElement.getElementsByTagName(ufrDTO.getClientPhone());\n\t                         if(clientPhoneList!=null && clientPhoneList.getLength()>0){\n\t\t                         Element clientPhoneElement = (Element)clientPhoneList.item(0);\n\t\t                         if(clientPhoneElement!=null){\n\t\t                        \t NodeList clientPhoneLNList = clientPhoneElement.getChildNodes();\n\t\t                        \t if(clientPhoneLNList!=null && clientPhoneLNList.getLength()>0){\n\t\t                        \t\t clientPhone =((Node)clientPhoneLNList.item(0)).getNodeValue().trim(); \n\t\t                        \t }\n\t\t                         }\n\t                         }\n                         }\n\n                         //--------------- 17:client_phone_zone -------------------------\n                         String clientPhoneZone="""";\n                         if(ufrDTO.getClientPhoneZone()!=null){\n\t                         NodeList clientPhoneZoneList = firstOrderElement.getElementsByTagName(ufrDTO.getClientPhoneZone());\n\t                         if(clientPhoneZoneList!=null && clientPhoneZoneList.getLength()>0){\n\t \t                         Element clientPhoneZoneElement = (Element)clientPhoneZoneList.item(0);\n\t \t                         if(clientPhoneZoneElement!=null){\n\t \t                        \t NodeList clientPhoneZoneLNList = clientPhoneZoneElement.getChildNodes();\n\t \t                        \t if(clientPhoneZoneLNList!=null && clientPhoneZoneLNList.getLength()>0){\n\t \t                        \t\tclientPhoneZone =((Node)clientPhoneZoneLNList.item(0)).getNodeValue().trim(); \n\t \t                        \t }\n\t \t                         }\n\t                         }\n                         }\n                         if(clientPhoneZone!=null && !clientPhoneZone.equals(""""))clientPhone=clientPhoneZone+"" ""+clientPhone;\n                         ufDataDTO.setClientPhone(clientPhone);\n\n                         //--------------- 18:clientEmail -------------------------\n                         String clientEmail="""";\n                         if(ufrDTO.getClientEmail()!=null){\n\t                         NodeList clientEmailList = firstOrderElement.getElementsByTagName(ufrDTO.getClientEmail());\n\t                         if(clientEmailList!=null && clientEmailList.getLength()>0){\n\t\t                         Element clientEmailElement = (Element)clientEmailList.item(0);\n\t\t                         if(clientEmailElement!=null){\n\t\t                        \t NodeList clientEmailLNList = clientEmailElement.getChildNodes();\n\t\t                        \t if(clientEmailLNList!=null && clientEmailLNList.getLength()>0){\n\t\t                        \t\t clientEmail =((Node)clientEmailLNList.item(0)).getNodeValue().trim(); \n\t\t                        \t }\n\t\t                         }\n\t                         }\n                         }\n                         ufDataDTO.setClientEmail(clientEmail);\n\n                         //--------------- 19:requiredDate -------------------------\n                         String requiredDate="""";\n                         if(ufrDTO.getRequiredDate()!=null){\n\t                         NodeList requiredDateList = firstOrderElement.getElementsByTagName(ufrDTO.getRequiredDate());\n\t                         if(requiredDateList!=null && requiredDateList.getLength()>0){\n\t\t                         Element requiredDateElement = (Element)requiredDateList.item(0);\n\t\t                         if(requiredDateElement!=null){\n\t\t                        \t NodeList requiredDateLNList = requiredDateElement.getChildNodes();\n\t\t                        \t if(requiredDateLNList!=null && requiredDateLNList.getLength()>0){\n\t\t                        \t\t requiredDate =((Node)requiredDateLNList.item(0)).getNodeValue().trim(); \n\t\t                        \t\t requiredDate=requiredDate.replaceAll("" "", """");\n\t\t                        \t }\n\t\t                         }\n\t                         }\n                         }\n                        formatDate=ufrDTO.getFormatDate();\n                        if(formatDate==null)formatDate="""";\n                        sdf = new SimpleDateFormat(formatDate);\n              \t\t\tDate requiredDateOrder=null;\n             \t\t\ttry {\n             \t\t\t\tDate date = sdf.parse(requiredDate);\n             \t\t\t\trequiredDateOrder=date;\n             \t\t\t}\n             \t\t\tcatch (Exception pe) {\n             \t\t\t\trequiredDateOrder=null;\n             \t\t\t}                     \n                        ufDataDTO.setRequiredDate(requiredDateOrder);\n                         \n                        //--------------- 20:clients_other_names -------------------------\n                        String clientsOtherNames="""";\n                        if(ufrDTO.getClientOtherNames()!=null){\n\t                        NodeList clientsOtherNamesList = firstOrderElement.getElementsByTagName(ufrDTO.getClientOtherNames());\n\t                        if(clientsOtherNamesList!=null && clientsOtherNamesList.getLength()>0){\n\t\t                         Element clientsOtherNamesElement = (Element)clientsOtherNamesList.item(0);\n\t\t                         if(clientsOtherNamesElement!=null){\n\t\t                        \t NodeList clientsOtherNamesLNList = clientsOtherNamesElement.getChildNodes();\n\t\t                        \t if(clientsOtherNamesLNList!=null && clientsOtherNamesLNList.getLength()>0){\n\t\t                        \t\t clientsOtherNames =((Node)clientsOtherNamesLNList.item(0)).getNodeValue().trim(); \n\t\t                        \t }\n\t\t                         }\n\t                        }\n                        }\n                        ufDataDTO.setClientOtherNames(clientsOtherNames);\n                        //--------------- 21:lsOrderId -------------------------\n        \t\t\t\tString code=userLogin.substring(0, 2).toUpperCase();\n        \t\t\t\tString lsOrderId=ufDataDTO.getProductOrderNumber();\n        \t\t\t\tint inc=0;//increment\n        \t\t\t\tString lsOrderIdToGenerate=lsOrderId;\n        \t            if(lsOrderIdToGenerate.length()>14){\n        \t               \tint index=lsOrderIdToGenerate.length()-14;\n        \t                lsOrderIdToGenerate=lsOrderIdToGenerate.substring(index, lsOrderIdToGenerate.length());\n        \t            }\n        \t            lsOrderIdToGenerate=lsOrderIdToGenerate.replaceAll(""R"", """");\n        \t            lsOrderIdToGenerate=code+ufDataDTO.getUserId()+""O""+lsOrderIdToGenerate;\n                        while(lsOrdersIdHash.containsKey(lsOrderIdToGenerate)){\n                       \t inc++; \n                       \tlsOrderIdToGenerate=lsOrderId+""R""+inc;\n                        }\n                        lsOrdersIdHash.put(lsOrderIdToGenerate, lsOrderIdToGenerate);\n                        ufDataDTO.setLsOrderId(lsOrderIdToGenerate);\n                        \n                        //--------------- 22:clients_other_names -------------------------\n                        String shippingCompany="""";\n                        if(ufrDTO.getShippingCompany()!=null){\n\t                        NodeList shippingCompanyList = firstOrderElement.getElementsByTagName(ufrDTO.getShippingCompany());\n\t                        if(shippingCompanyList!=null && shippingCompanyList.getLength()>0){\n\t\t                         Element shippingCompanyElement = (Element)shippingCompanyList.item(0);\n\t\t                         if(shippingCompanyElement!=null){\n\t\t                        \t NodeList shippingCompanyLNList = shippingCompanyElement.getChildNodes();\n\t\t                        \t if(shippingCompanyLNList!=null && shippingCompanyLNList.getLength()>0){\n\t\t                        \t\t shippingCompany =((Node)shippingCompanyLNList.item(0)).getNodeValue().trim(); \n\t\t                        \t }\n\t\t                         }\n\t                        }\n                        }\n                        ufDataDTO.setShippingCompany(shippingCompany);\n                        \n                        //--------------- 23:Notes -------------------------\n                        String notes="""";\n                        if(ufrDTO.getNotes()!=null){\n\t                        NodeList notesList = firstOrderElement.getElementsByTagName(ufrDTO.getNotes());\n\t                        if(notesList!=null && notesList.getLength()>0){\n\t\t                         Element notesElement = (Element)notesList.item(0);\n\t\t                         if(notesElement!=null){\n\t\t                        \t NodeList notesLNList = notesElement.getChildNodes();\n\t\t                        \t if(notesLNList!=null && notesLNList.getLength()>0){\n\t\t                        \t\t notes =((Node)notesLNList.item(0)).getNodeValue().trim(); \n\t\t                        \t }\n\t\t                         }\n\t                        }\n                        }\n                        ufDataDTO.setNotes(notes);\n                        \n                        ufDataDTO.setCreationDate(new Date());\n                        \n                        listOrdersDTO.add(ufDataDTO);\n                     }//end of if clause\n                }//end of for loop with s var\n           }//end if with condition ufrDTO!=null \n        }catch (SAXParseException err) {\n        System.out.println (""** Parsing error"" + "", line "" \n             + err.getLineNumber () + "", uri "" + err.getSystemId ());\n        System.out.println("" "" + err.getMessage ());\n\n        }catch (SAXException e) {\n        Exception x = e.getException ();\n        ((x == null) ? e : x).printStackTrace ();\n\n        }catch (Throwable t) {\n        t.printStackTrace ();\n        }\n\t\treturn listOrdersDTO;\n\t}\n\n\t/**----------------------------------------------------------\n\t  *THIS FUNCTION ALLOWS US TO TRANSFORM AN XLS FILE TO A LIST \n\t   OF ORDERS*\n\t  -----------------------------------------------------------*/\t\n\t@SuppressWarnings(""rawtypes"")\n\t@Override\n\tpublic Collection toArrayListFromXLS(File orderFile,String userLogin) throws Exception {\n\n\t\tUserFileRecoveryDTO ufrDTO=null;\n\t\t\n\t\tHashtable<String, String>lsOrdersIdHash=new Hashtable<String, String>();\n\t\tList<Orders>listOrders=getAllOrders();\n\t\tif(listOrders!=null){\n\t\t\tfor(Orders ord:listOrders){\n\t\t\t\tlsOrdersIdHash.put(ord.getLsOrderId(), ord.getLsOrderId());\n\t\t\t}\n\t\t}\n\t\t\n\t\ttry {\n\t\t\tufrDTO=getUserFileRecoveryByUser(userLogin);\n\t\t} catch (ServiceException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\t\n\t\ttry {\n\t\t\tproductService = serviceLocator.getProductService();\n\t\t} catch (ServiceLocatorException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t} \n\t\t\n\t\tCollection listOrderDTO = new ArrayList();\n\t\t\n\t\tif(orderFile!=null && ufrDTO!=null && (ufrDTO.getFileTypeId()==2 || ufrDTO.getFileTypeId()==3 )){\n\t\t\t//variable indicating the numbers of columns in the XLS file\n\t\t\tint ROW_TO_START = 1;\n\t\t\tint COL_COMPANY_HEADER=Integer.parseInt(ufrDTO.getCompanyHeader())-1 ;\n\t\t\tint COL_PRODUCT_ORDER_NUMBER=Integer.parseInt(ufrDTO.getProductOrderNumber())-1;//poNumber\n\t\t\tint COL_PRODUCT_ORDER_DATE=Integer.parseInt(ufrDTO.getProductOrderDate())-1; //poDate\n\t\t\tint COL_QUANTITY=Integer.parseInt(ufrDTO.getQuantity())-1;//quantity\n\t\t\tint COL_LS_PRODUCT_ID=Integer.parseInt(ufrDTO.getLsProductID())-1;//productId\n\t\t\tint COL_PRODUCT_DESCRIPTION=Integer.parseInt(ufrDTO.getProductDescription())-1;//description\t\n\t\t\tint COL_UNIT_PRICE=Integer.parseInt(ufrDTO.getUnitPrice())-1; //price\n\t\t\tint COL_CLIENT_NUMBER=Integer.parseInt(ufrDTO.getClientNumber())-1;//clientNumber\n\t\t\tint COL_FIRST_NAME=Integer.parseInt(ufrDTO.getClientFirstName())-1;//clientFirstName\n\t\t\tint COL_LAST_NAME=Integer.parseInt(ufrDTO.getClientLastName())-1; //clientLastName\n\t\t\tint COL_ADDRESSS_TREET=Integer.parseInt(ufrDTO.getClientStreet())-1; //clientAdress\n\t\t\tint COL_ADDRESSS_TREET_OTHER=Integer.parseInt(ufrDTO.getClientOtherStreet())-1;//clientAdressOther\n\t\t\tint COL_ADDRESS_CITY=Integer.parseInt(ufrDTO.getClientCity())-1;//clientCity\n\t\t\tint COL_ADDRESS_POSTAL_CODE=Integer.parseInt(ufrDTO.getClientPostalCode())-1;//clientPostalCode\n\t\t\tint COL_ADDRESS_STATE=Integer.parseInt(ufrDTO.getClientProvince())-1;//clientProvince\t\n\t\t\tint COL_CLIENT_PHONE=Integer.parseInt(ufrDTO.getClientPhone())-1;//clientPhone\n\t\t\tint COL_CLIENT_EMAIL=Integer.parseInt(ufrDTO.getClientEmail())-1;//clientEmail\n\t\t\t\n\t\t\tint COL_REQUIRE_DATE=Integer.parseInt(ufrDTO.getRequiredDate())-1;//requiredDate\n\t\t\tint COL_CLIENT_OTHER_NAMES=Integer.parseInt(ufrDTO.getClientOtherNames())-1;//clientsOtherNames\n\t\t\tint COL_CLIENT_PHONE_ZONE=Integer.parseInt(ufrDTO.getClientPhoneZone())-1;//clientPhoneZone\n\t\t\tint CLIENT_ORDER_NUMBER=Integer.parseInt(ufrDTO.getClientOrderNumber())-1;\n\t\t\tint CST_PRODUCT_NUMBER=Integer.parseInt(ufrDTO.getCstProductNumber())-1;\n\t\t\tint SHIPPING_COMPANY=Integer.parseInt(ufrDTO.getShippingCompany())-1;;\n\t\t\tint NOTES=Integer.parseInt(ufrDTO.getNotes())-1;\n\n\t\t\t//Values of cells\n\t\t\tString companyHeader="""";\n\t\t\tString productOrderNumber="""";//poNumber\n\t\t\tString clientOrderNumber="""";\n\t\t\tString cstProductNumber="""";\n\t\t\tString shippingCompany="""";\n\t\t\tString notes;\n\t\t\tDate productOrderDate; //poDate\n\t\t\tDouble quantity=0D;//quantity\n\t\t\tString lsProductID="""";//productId\n\t\t\tString productDescription="""";//description\t\n\t\t\tDouble unitPrice=0D; //price\n\t\t\tString clientNumber="""";//clientNumber\n\t\t\tString clientFirstName="""";//clientFirstName\n\t\t\tString clientLastName=""""; //clientLastName\n\t\t\tString clientStreet=""""; //clientAdress\n\t\t\tString clientOtherStreet="""";//clientAdressOther\n\t\t\tString clientCity="""";//clientCity\n\t\t\tString clientPostalCode="" "";//clientPostalCode\n\t\t\tString clientProvince="""";//clientProvince\t\n\t\t\tString clientPhone="""";//clientPhone\n\t\t\tString clientEmail="""";//clientEmail\t\n\t\t\tDate   requiredDate=null;\n\t\t\tString clientOtherNames="""";\n\t\t\tString clientPhoneZone = """";\n\n\t\t\t//Cells\n\t\t\tCell cellCompanyHeader= null;;\n\t\t\tCell cellProductOrderNumber= null;//poNumber\n\t\t\tCell cellProductOrderDate= null;//poDate\n\t\t\tCell cellQuantity= null;//quantity\n\t\t\tCell cellLsProductID= null;;//productId\n\t\t\tCell cellProductDescription= null;//description\t\n\t\t\tCell cellUnitPrice= null;//price\n\t\t\tCell cellClientNumber= null;//clientNumber\n\t\t\tCell cellClientFirstName= null;//clientFirstName\n\t\t\tCell cellClientLastName= null; //clientLastName\n\t\t\tCell cellClientStreet= null;//clientAdress\n\t\t\tCell cellClientOtherStreet= null;//clientAdressOther\n\t\t\tCell cellClientCity= null;//clientCity\n\t\t\tCell cellClientPostalCode= null;//clientPostalCode\n\t\t\tCell cellClientProvince= null;//clientProvince\t\n\t\t\tCell cellClientPhone= null;//clientPhone\n\t\t\tCell cellClientEmail= null;//clientEmail\t\n\t\t\tCell cellRequiredDate=null;\t\t//requiredDate\n\t\t\tCell cellClientOtherNames=null; //clientsOtherNames\n\t\t\tCell cellClientPhoneZone = null;\t//clientPhoneZone\n\t\t\tCell cellClientOrderNumber=null;\n\t\t\tCell cellCstProductNumber=null;\n\t\t\tCell cellShippingCompany=null;\n\t\t\tCell cellNotes=null;\n\n\t\t//try {\n\t\t\tList<ProvinceDTO> listProvine= productService.getAllProvinces();\n\t\t\tWorkbook existingWorkbook = Workbook.getWorkbook(orderFile);\n\t\t\tSheet sheetToRead=existingWorkbook.getSheet(0);\n\t\t\tint ROW_MAX = sheetToRead.getRows();\n\t\t\t\n\t\t\tfor(int row=ROW_TO_START; row< ROW_MAX;row++) {\n\t\t\t\tUserFileDataRecoveryDTO ufDataDTO=new UserFileDataRecoveryDTO();\n\t\t\t\tufDataDTO.setUserId(ufrDTO.getUserId());\n\t\t\t\t//--------------- 1: poNumber.\n\t\t\t\tif(COL_PRODUCT_ORDER_NUMBER>=0)cellProductOrderNumber = sheetToRead.getCell(COL_PRODUCT_ORDER_NUMBER, row);\t\t\t\n\t\t\t\tif(cellProductOrderNumber!=null)productOrderNumber = cellProductOrderNumber.getContents();\n\t\t\t\tSystem.out.println(""productOrderNumber: |"" + productOrderNumber + ""|"");\n\t\t\t\tufDataDTO.setProductOrderNumber(productOrderNumber);\n\t\t\t\t\n\t\t\t\t//--------------- 2: clientOrderNumber.\n\t\t\t\tif(CLIENT_ORDER_NUMBER>=0)cellClientOrderNumber = sheetToRead.getCell(CLIENT_ORDER_NUMBER, row);\t\t\t\n\t\t\t\tif(cellClientOrderNumber!=null)clientOrderNumber = cellProductOrderNumber.getContents();\n\t\t\t\tSystem.out.println(""productOrderNumber: |"" + clientOrderNumber + ""|"");\n\t\t\t\tufDataDTO.setClientOrderNumber(clientOrderNumber);\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t//--------------- 3: cstProductNumber.\n\t\t\t\tif(CST_PRODUCT_NUMBER>=0)cellCstProductNumber = sheetToRead.getCell(CST_PRODUCT_NUMBER, row);\t\t\t\n\t\t\t\tif(cellCstProductNumber!=null)cstProductNumber = cellCstProductNumber.getContents();\n\t\t\t\tSystem.out.println(""cstProductNumber: |"" + cstProductNumber + ""|"");\n\t\t\t\tufDataDTO.setCstProductNumber(cstProductNumber);\n\t\t\t\t\n\t\t\t\t//shippingCompany\n\n\t\t\t\t//--------------- 2: companyHeader\n\t\t\t\tif(COL_COMPANY_HEADER>=0)cellCompanyHeader = sheetToRead.getCell(COL_COMPANY_HEADER, row);\t\t\t\n\t\t\t\tif(cellCompanyHeader!=null)companyHeader = cellCompanyHeader.getContents();\n\t\t\t\tufDataDTO.setCompanyHeader(companyHeader);\n\t\t\t\t\n\t\t\t\t//--------------- 3: productOrderDate.\n\t\t\t\tproductOrderDate=null;\n\t\t\t\tif(COL_PRODUCT_ORDER_DATE>=0)cellProductOrderDate = sheetToRead.getCell(COL_PRODUCT_ORDER_DATE, row);\t\t\t\n\t\t\t\tif(cellProductOrderDate!=null){\n\t\t\t\t\tString strDate=cellProductOrderDate.getContents();\n\t\t\t\t\tstrDate=strDate.replaceAll("" "", """");\n\t\t\t\t\tSimpleDateFormat sdf = new SimpleDateFormat(ufrDTO.getFormatDate());//(""yyyy-MM-dd HH:mm:ss"");\t\n\t\t        \ttry {\n\t\t        \t\tDate date = sdf.parse(strDate);\n\t\t        \t\tproductOrderDate=date;\n\t\t       \t\t}\n\t\t       \t\tcatch (Exception pe) {\n\t\t       \t\t\tproductOrderDate=null;\n\t\t        \t}\n\t\t\t\t}\n\n\t\t\t \tufDataDTO.setProductOrderDate(productOrderDate);\n\t\t\t\t\n\t\t\t\t//--------------- 4: Quantity.\n\t\t\t\tif(COL_QUANTITY>=0)cellQuantity = sheetToRead.getCell(COL_QUANTITY, row);\t\t\t\n\t\t\t\tif(cellQuantity!=null){\n\t\t\t\t\tString strQuantity = cellQuantity.getContents();\n\t\t\t\t\tstrQuantity=strQuantity.replaceAll("" "", """");\n\t\t\t\t\tif(strQuantity!=null && !strQuantity.equals("""")){\n\t\t\t\t\t\tint index=strQuantity.indexOf("","");\n\t\t\t\t\t\tif(index>=0){\n\t\t\t\t\t\t\tString strQuantity1=strQuantity.substring(0, index);\n\t\t\t\t\t\t\tString strQuantity2= strQuantity.substring(index+1, strQuantity.length());\n\t\t\t\t\t\t\tstrQuantity=strQuantity1+"".""+strQuantity2;\n\t\t\t\t\t\t\tSystem.out.println(strQuantity);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tquantity=null;\n                  \ttry {\n                  \t\tquantity = Double.parseDouble(strQuantity);\n                  \t}\n                  \tcatch (Exception pe) {\n                  \t\tquantity=null;\n                  \t}\n\t\t\t\t}\n\t\t\t\tSystem.out.println(""quantity: |"" + quantity + ""|"");\t\n\t\t\t\tufDataDTO.setQuantity(quantity);\n\t\t\t\t\n\t\t\t\t//--------------- 5: lsProductID.\n\t\t\t\tif(COL_LS_PRODUCT_ID>=0)cellLsProductID = sheetToRead.getCell(COL_LS_PRODUCT_ID, row);\t\t\t\n\t\t\t\tif(cellLsProductID!=null)lsProductID = cellLsProductID.getContents();\n\t\t\t\tSystem.out.println(""lsProductID: |"" + lsProductID + ""|"");\n\t\t\t\tufDataDTO.setLsProductID(lsProductID);\n\t\t\t\t\n\t\t\t\t//--------------- 6: productDescription.\n\t\t\t\tif(COL_PRODUCT_DESCRIPTION>=0)cellProductDescription = sheetToRead.getCell(COL_PRODUCT_DESCRIPTION, row);\t\t\t\n\t\t\t\tif(cellProductDescription!=null)productDescription = cellProductDescription.getContents();\n\t\t\t\tSystem.out.println(""productDescription: |"" + productDescription + ""|"");\n\t\t\t\tufDataDTO.setProductDescription(productDescription);\n\t\t\t\t\n\t\t\t\t//--------------- 7: unitPrice.\n\t\t\t\tif(COL_UNIT_PRICE>=0)cellUnitPrice = sheetToRead.getCell(COL_UNIT_PRICE, row);\t\t\t\n\t\t\t\tif(cellUnitPrice!=null){\n\t\t\t\t\tString strUnitPrice = cellUnitPrice.getContents();\n\t\t\t\t\tstrUnitPrice= strUnitPrice.replaceAll(""\\\\$"", """");\n\t\t\t\t\tstrUnitPrice= strUnitPrice.replaceAll("" "", """");\n\t\t\t\t\tif(strUnitPrice!=null && !strUnitPrice.equals("""")){\n\t\t\t\t\t\tint index=strUnitPrice.indexOf("","");\n\t\t\t\t\t\tif(index>=0){\n\t\t\t\t\t\t\tString strUnitPrice1=strUnitPrice.substring(0, index);\n\t\t\t\t\t\t\tString strUnitPrice2= strUnitPrice.substring(index+1, strUnitPrice.length());\n\t\t\t\t\t\t\tstrUnitPrice=strUnitPrice1+"".""+strUnitPrice2;\n\t\t\t\t\t\t\tSystem.out.println(strUnitPrice);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tunitPrice=null;\n                  \ttry {\n                  \t\tunitPrice = Double.parseDouble(strUnitPrice);\n                  \t}\n                  \tcatch (Exception pe) {\n                  \t\tunitPrice=null;\n                  \t}\n\t\t\t\t}\n\t\t\t\tSystem.out.println("" unitPrice: |"" + unitPrice + ""|"");\n\t\t\t\tufDataDTO.setUnitPrice(unitPrice);\n\t\t\t\t\n\t\t\t\t//--------------- 8: clientNumber.\n\t\t\t\tif(COL_CLIENT_NUMBER>=0)cellClientNumber = sheetToRead.getCell(COL_CLIENT_NUMBER, row);\t\t\t\n\t\t\t\tif(cellClientNumber!=null)clientNumber = cellClientNumber.getContents();\n\t\t\t\tufDataDTO.setClientNumber(clientNumber);\n\n\t\t\t\t//--------------- 9: FirstName.\n\t\t\t\tif(COL_FIRST_NAME>=0)cellClientFirstName = sheetToRead.getCell(COL_FIRST_NAME, row);\t\t\t\n\t\t\t\tif(cellClientFirstName!=null)clientFirstName = cellClientFirstName.getContents();\n\t\t\t\tufDataDTO.setClientFirstName(clientFirstName);\n\t\t\t\t\n\t\t\t\t//--------------- 10: LastName.\n\t\t\t\tif(COL_LAST_NAME>=0)cellClientLastName = sheetToRead.getCell(COL_LAST_NAME, row);\t\t\t\n\t\t\t\tif(cellClientLastName!=null)clientLastName = cellClientLastName.getContents();\n\t\t\t\tufDataDTO.setClientLastName(clientLastName);\n\t\t\t\t\n\t\t\t\t//=========== special cases for clients ""AsiaMiles"" 29  ""VibeSMG"" 45================\n\t\t\t\t\tOrdersDTO orderDTO=new OrdersDTO();\n\t\t\t\t\tString[] elems;\n\t\t\t\t\tint option;\n\t\t\t\t\tint userId=Integer.parseInt(ufrDTO.getUserId().toString());\n\t\t\t\t\tString lsProductIdAsiaM=ufDataDTO.getProductDescription();\n\t\t\t\t\tString[] elemsLsProductId;\n\t\t\t\t\tswitch (userId) {\n\t\t\t\t\tcase 29: \n\t\t\t\t\t\t// split last name to client ""AsiaMiles"" to last and first name\n\t\t\t\t\t\tif(clientLastName!=null && !clientLastName.equals("""")){\n\t\t\t\t\t\t\torderDTO=new OrdersDTO();\n\t\t\t\t\t\t\torderDTO.setId(ufDataDTO.getUserId());\n\t\t\t\t\t\t\torderDTO.setClientLastName(clientLastName);\n\t\t\t\t\t\t\telems  = clientLastName.split(""\\\\s"");\n\t\t\t\t\t\t\toption=elems.length;\t\n\t\t\t\t\t\t\torderDTO=orderDTOSplitFirstLastName(orderDTO, option);\n\t\t\t\t\t\t\tclientFirstName=orderDTO.getClientFirstName();\n\t\t\t\t\t\t\tclientLastName=orderDTO.getClientLastName();\n\t\t\t\t\t\t\tufDataDTO.setClientFirstName(clientFirstName);\n\t\t\t\t\t\t\tufDataDTO.setClientLastName(clientLastName);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//recovery AsiaMiles's lsProductId \n\t\t\t\t\t\tString lsProductId="""";\n\t\t\t\t\t\tif(lsProductIdAsiaM!=null && !lsProductIdAsiaM.equals("""")){\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\telemsLsProductId=lsProductIdAsiaM.split(""_"");\n\t\t\t\t\t\t\tif(elemsLsProductId.length>1){\n\t\t\t\t\t\t\t\tlsProductId=elemsLsProductId[0];\n\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\telemsLsProductId=lsProductIdAsiaM.split(""-"");\n\t\t\t\t\t\t\t\tif(elemsLsProductId.length!=0)lsProductId=elemsLsProductId[0];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tlsProductId=lsProductId.replaceAll("" "", """");\n\t\t\t\t\t\tufDataDTO.setLsProductID(lsProductId);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 45: // split last name of client ""VibeSMG"" to last and first name\n\t\t\t\t\t\tif(clientLastName!=null && !clientLastName.equals("""")){\n\t\t\t\t\t\t\torderDTO=new OrdersDTO();\n\t\t\t\t\t\t\torderDTO.setId(ufDataDTO.getUserId());\n\t\t\t\t\t\t\tclientLastName=""MR ""+clientLastName;\n\t\t\t\t\t\t\torderDTO.setClientLastName(clientLastName);\n\t\t\t\t\t\t\telems  = clientLastName.split(""\\\\s"");\n\t\t\t\t\t\t\toption=elems.length;\n\t\t\t\t\t\t\torderDTO=orderDTOSplitFirstLastName(orderDTO, option);\n\t\t\t\t\t\t\tclientFirstName=orderDTO.getClientFirstName();\n\t\t\t\t\t\t\tclientLastName=orderDTO.getClientLastName();\n\t\t\t\t\t\t\tufDataDTO.setClientFirstName(clientFirstName);\n\t\t\t\t\t\t\tufDataDTO.setClientLastName(clientLastName);\t\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t//====================================================================================\n\t\t\t\t//--------------- 11: cellAddressStreet.\n\t\t\t\tif(COL_ADDRESSS_TREET>=0)cellClientStreet = sheetToRead.getCell(COL_ADDRESSS_TREET, row);\t\t\t\n\t\t\t\tif(cellClientStreet!=null)clientStreet = cellClientStreet.getContents();\n\t\t\t\tufDataDTO.setClientStreet(clientStreet);\n\t\t\t\t\n\t\t\t\t//--------------- 12: addressStreetOther.\n\t\t\t\tif(COL_ADDRESSS_TREET_OTHER>=0)cellClientOtherStreet = sheetToRead.getCell(COL_ADDRESSS_TREET_OTHER, row);\t\t\t\n\t\t\t\tif(cellClientOtherStreet!=null)clientOtherStreet = cellClientOtherStreet.getContents();\n\t\t\t\tufDataDTO.setClientOtherStreet(clientOtherStreet);\n\t\t\t\t\n\t\t\t\t//--------------- 13: addressCity.\n\t\t\t\tif(COL_ADDRESS_CITY>=0)cellClientCity = sheetToRead.getCell(COL_ADDRESS_CITY, row);\t\t\t\n\t\t\t\tif(cellClientCity!=null)clientCity = cellClientCity.getContents();\n\t\t\t\tufDataDTO.setClientCity(clientCity);\n\t\t\t\t\n\t\t\t\t//--------------- 14: addressPostalCode.\n\t\t\t\tif(COL_ADDRESS_POSTAL_CODE>=0)cellClientPostalCode = sheetToRead.getCell(COL_ADDRESS_POSTAL_CODE, row);\t\t\t\n\t\t\t\tif(cellClientPostalCode!=null)clientPostalCode = cellClientPostalCode.getContents();\n\t\t\t\tclientPostalCode=clientPostalCode.replaceAll("" "", """");\n\t\t\t\tufDataDTO.setClientPostalCode(clientPostalCode);\n\t\t\t\t\n\t\t\t\t//--------------- 15: addressState.\n\t\t\t\tif(COL_ADDRESS_STATE>=0)cellClientProvince = sheetToRead.getCell(COL_ADDRESS_STATE, row);\t\t\t\n\t\t\t\tif(cellClientProvince!=null)clientProvince = cellClientProvince.getContents();\n\t\t\t\t\n\t\t\t\tString clientProvinceToCompar=clientProvince.toLowerCase();\n\t\t\t\tclientProvinceToCompar=clientProvinceToCompar.replaceAll("" "", """");\n\t\t\t\tclientProvinceToCompar=clientProvinceToCompar.replaceAll(""canada"", """");\n\t\t\t\tclientProvinceToCompar=clientProvinceToCompar.replaceAll("","", """");\n\t\t\t\tclientProvinceToCompar=clientProvinceToCompar.replaceAll(""."", """");\n\t\t\t\tfor(ProvinceDTO prov:listProvine){\n\t\t\t\t\tString provName=prov.getName();\n\t\t\t\t\tprovName=provName.replaceAll("" "", """");\n\t\t\t\t\tprovName= provName.toLowerCase();\n\t\t\t\t\tif(clientProvinceToCompar.equals(provName) || clientProvinceToCompar.equals(prov.getCode()) ){\n\t\t\t\t\t\tclientProvince=\tprov.getCode();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\tclientProvince=clientProvince.replaceAll(""."", """");\n\t\t\t\tif(clientProvinceToCompar.equals(""""))clientProvince="""";\n\t\t\t\tufDataDTO.setClientProvince(clientProvince);\n\n\t\t\t\t//--------------- 16: clientPhone.\n\t\t\t\tif(COL_CLIENT_PHONE>=0)cellClientPhone = sheetToRead.getCell(COL_CLIENT_PHONE, row);\t\t\t\n\t\t\t\tif(cellClientPhone!=null)clientPhone = cellClientPhone.getContents();\n\t\n\t\t\t\t//--------------- 17: clientPhoneZone.\n\t\t\t\tif(COL_CLIENT_PHONE_ZONE>=0)cellClientPhoneZone = sheetToRead.getCell(COL_CLIENT_PHONE_ZONE, row);\t\t\t\n\t\t\t\tif(cellClientPhoneZone!=null)clientPhoneZone = cellClientPhoneZone.getContents();\t\t\t\n\t\t\t\tif(clientPhoneZone!=null && clientPhoneZone!="""")clientPhone=clientPhoneZone+"" ""+clientPhone;\n\t\t\t\tufDataDTO.setClientPhone(clientPhone);\n\t\t\t\t\t\t\n\t\t\t\t//--------------- 18: clientEmail.\n\t\t\t\tif(COL_CLIENT_EMAIL>=0)cellClientEmail = sheetToRead.getCell(COL_CLIENT_EMAIL, row);\t\t\t\n\t\t\t\tif(cellClientEmail!=null)clientEmail = cellClientEmail.getContents();\n\t\t\t\tufDataDTO.setClientEmail(clientEmail);\n\t\t\t\t\n                //--------------- 19:requiredDate -------------------------\n                String strRequiredDate="""";\n                if(COL_REQUIRE_DATE>=0)cellRequiredDate = sheetToRead.getCell(COL_REQUIRE_DATE, row);\t\t\t\n\t\t\t\tif(cellRequiredDate!=null){\n\t\t\t\t\tstrRequiredDate = cellRequiredDate.getContents();\n\t\t\t\t\tstrRequiredDate=strRequiredDate.replaceAll("" "", """");\n\t\t\t\t\tSimpleDateFormat sdf = new SimpleDateFormat(ufrDTO.getFormatDate());\n\t\t        \ttry {\n\t\t        \t\tDate date = sdf.parse(strRequiredDate);\n\t\t        \t\trequiredDate=date;\n\t\t       \t\t}\n\t\t       \t\tcatch (Exception pe) {\n\t\t       \t\t\trequiredDate=null;\n\t\t        \t}\n\t\t\t\t}\n\t\t\t\tufDataDTO.setRequiredDate(requiredDate);\n\t\t                \n               //--------------- 20:clients_other_names ----------------\n               clientOtherNames="""";\n               if(COL_CLIENT_OTHER_NAMES>=0)cellClientOtherNames = sheetToRead.getCell(COL_CLIENT_OTHER_NAMES, row);\t\t\t\n\t\t\t\tif(cellClientOtherNames!=null)clientOtherNames = cellClientOtherNames.getContents();\n\t\t\t\tufDataDTO.setClientOtherNames(clientOtherNames);\n\t\t\t\t\n\t\t\t\t //--------------- 21:lsOrderId ------------------------\n\t\t\t\tString code=userLogin.substring(0, 2).toUpperCase();\n\t\t\t\tString lsOrderId=ufDataDTO.getProductOrderNumber();\n            \n                int inc=0;//increment\n                String lsOrderIdParent=lsOrderId;\n                if(lsOrderIdParent.length()>14){\n                \tint index=lsOrderIdParent.length()-14;\n                \tlsOrderIdParent=lsOrderIdParent.substring(index, lsOrderIdParent.length());\n                }\n                lsOrderIdParent=lsOrderIdParent.replaceAll(""R"", """");\n                lsOrderIdParent=code+ufDataDTO.getUserId()+""O""+lsOrderIdParent;\n                String lsOrderIdToGenerate=lsOrderIdParent;\n                while(lsOrdersIdHash.containsKey(lsOrderIdToGenerate)){\n               \tinc++; \n               \tlsOrderIdToGenerate=lsOrderIdParent+""R""+inc;\n                }\n                lsOrdersIdHash.put(lsOrderIdToGenerate, lsOrderIdToGenerate);\n                ufDataDTO.setLsOrderId(lsOrderIdToGenerate);\n\n                //--------------- 22:shipping company -------------------\n                shippingCompany="""";\n                if(SHIPPING_COMPANY>=0)cellShippingCompany = sheetToRead.getCell(SHIPPING_COMPANY, row);\t\t\t\n \t\t\t\tif(cellShippingCompany!=null)shippingCompany = cellShippingCompany.getContents();\n \t\t\t\tufDataDTO.setShippingCompany(shippingCompany);\n\n                //--------------- 23:Notes -------------------\n                notes="""";\n                if(NOTES>=0)cellNotes = sheetToRead.getCell(NOTES, row);\t\t\t\n \t\t\t\tif(cellNotes!=null)notes = cellNotes.getContents();\n \t\t\t\tufDataDTO.setNotes(notes);\n \t\t\t\t\n \t\t\t\tufDataDTO.setCreationDate(new Date());\n \t\t\t\t\n\t\t\t\tlistOrderDTO.add(ufDataDTO);\n\t\t\t}\n\t\t//} catch (Exception x) {\n\t\t//\tx.printStackTrace();\n\t\t//}\n\t\t}\n\treturn listOrderDTO;\n\t\t\n\t}\n\n\t/**----------------------------------------------------------\n\t \t*GET HASHtABLE WITH HIERARCHICAL (ORDER<->ROWS)\n\t \t OF ORDERS FROM LIST OF USER FILE RECOVERY*\n\t  -----------------------------------------------------------*/\t\n\t@Override\n\tpublic Hashtable<String, OrdersDTO> getHashOrdersFromUserDataRecovery(Long userId,ArrayList<UserFileDataRecoveryDTO> list)\n\t\t\t\t\t\t\t\t\t\tthrows ServiceException {\n\t\tHashtable<String, OrdersDTO> result=new Hashtable<String, OrdersDTO>();\n\t\t\n\t\ttry {\n\t\t\tproductService = serviceLocator.getProductService(); \n\t\t\tuserService= serviceLocator.getUserService();\n\t\t} catch (ServiceLocatorException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\t\n\t\tfor(UserFileDataRecoveryDTO orDTO: list){\n\t\t\tOrdersDTO ordDTOCheck=result.get(orDTO.getLsOrderId());\n\t\t\tString lsProductID=orDTO.getLsProductID();\n\t\t\tint index=lsProductID.indexOf(""_"");\n\t\t\tif(index==-1)index=lsProductID.indexOf("" "");\n\t\t\tlsProductID=lsProductID.substring(index+1, lsProductID.length());\n\t\t\tlsProductID=lsProductID.replaceAll("" "", """");\n\t\t\t//ProductDTO pDTO=hashProductDTO.get(lsProductID);\n\t\t\tProductDTO pDTO=productService.getProductByLsProductId(lsProductID);\n\t\t\tUserDTO uDTO=userService.getUserInformation(userId);\n\t\t\tString userLogin=""anonymous"";\n\t\t\tif(uDTO!=null)userLogin=uDTO.getLogin();\n\t\t\tif(ordDTOCheck==null && pDTO!=null){\n\t\t\t\tOrdersDTO ordDTOToAdd=new OrdersDTO();\n\t\t\t\tordDTOToAdd=DTOFactory.getOrderDTOFromUserDataRecovery(userId,orDTO);\n\t\t\t\tordDTOToAdd.setUserLogin(userLogin);\n\t\t\t\tOrdersRows ordRow=ordDTOToAdd.getRowsList().get(0);\n\t\t\t\tif(ordRow!=null && pDTO!=null){\n\t\t\t\t\tordRow.setLsProductID(lsProductID);\n\t\t\t\t\t//if(pDTO.getNameEng()!=null)ordRow.setProductDescription(pDTO.getNameEng().getName());\n\t\t\t\t\tordRow.setProductId(pDTO.getId());\n\t\t\t\t\tordRow.setUnitPrice(orDTO.getUnitPrice());\n\t\t\t\t\tordRow.setRequiredDate(orDTO.getRequiredDate());\n\t\t\t\t\tordRow.setShippingCompany(orDTO.getShippingCompany());\n\t\t\t\t\tordRow.setStock(pDTO.getStock());\n\t\t\t\t}\n\t\t\t\tresult.put(orDTO.getLsOrderId(), ordDTOToAdd);\n\t\t\t}else if(pDTO!=null){\n\t\t\t\tOrdersRows ordRow=DTOFactory.getOrdersRowFromUserDataRecovery(orDTO);\n\t\t\t\tordRow.setLsProductID(lsProductID);\n\t\t\t\tif(pDTO.getNameEng()!=null)ordRow.setProductDescription(pDTO.getNameEng().getName());\n\t\t\t\tordRow.setProductId(pDTO.getId());\n\t\t\t\tordRow.setUnitPrice(orDTO.getUnitPrice());\n\t\t\t\tordRow.setRequiredDate(orDTO.getRequiredDate());\n\t\t\t\tordRow.setShippingCompany(orDTO.getShippingCompany());\n\t\t\t\tordDTOCheck.getRowsList().add(ordRow);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**----------------------------------------------------------\n\t \t*GET HASHtABLE FROM LIST ORDERS DTO*\n\t  -----------------------------------------------------------*/\t\n\t@Override\n\tpublic Hashtable<String, OrdersDTO> getHashOrdersDTOFromListOrdersDTO(List<OrdersDTO> list)\n\t\t\t\t\t\t\t\t\t\tthrows ServiceException {\n\t\tHashtable<String, OrdersDTO> result=new Hashtable<String, OrdersDTO>();\n\t\n\t\tfor(OrdersDTO orDTO: list){\n\t\t\t\tresult.put(orDTO.getLsOrderId(), orDTO);\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**----------------------------------------------------------\n\t \t*SAVING ORDERS WITH THERE ROWS IN DATABASE*\n\t  -----------------------------------------------------------*/\t\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<OrdersDTO> insertListOrders(List<OrdersDTO> listOrdersDTO){\n\t\tList<OrdersDTO> listOrdersDTOResult=null;\n\t\tList<Orders> result=null;\n\t\tfinal List<Orders>listOrders=DTOFactory.getListOrdersFromListOrdersDTO(listOrdersDTO);\n\t\ttry{\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tresult = (List<Orders>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\n\t\t\t\t\treturn daoManager.getOrdersDao().insertListOrders(listOrders);\n\t\t\t\t}\n\t\t\t});\n\t\t}catch (DaoException de) {\n\t\t\ttry {\n\t\t\t\tthrow new ServiceException(de);\n\t\t\t} catch (ServiceException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\tlistOrdersDTOResult=DTOFactory.getListOrderDTOFromListOrder(result);\n\t\treturn listOrdersDTOResult;\n\t}\n\n\t/**----------------------------------------------------------\n\t \t*INSERT ORDERS IF ARE EXISTING IN DATABASE*\n\t  -----------------------------------------------------------*/\t\n\t@Override\n\tpublic boolean insertListOrdersIfNotExist(List<OrdersDTO> listOrdersDTO){\n\t\tboolean result=false;\n\t\tfinal List<Orders>listOrders=DTOFactory.getListOrdersFromListOrdersDTO(listOrdersDTO);\n\t\ttry{\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tresult = (Boolean) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\n\t\t\t\t\treturn daoManager.getOrdersDao().insertListOrdersIfNotExist(listOrders);\n\t\t\t\t}\n\t\t\t});\n\t\t}catch (DaoException de) {\n\t\t\ttry {\n\t\t\t\tthrow new ServiceException(de);\n\t\t\t} catch (ServiceException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**----------------------------------------------------------\n\t \t*INSERT ORDER WHITH ROW*\n\t  -----------------------------------------------------------*/\t\n\t@Override\n\tpublic boolean insertOrderWithRows(OrdersDTO orderDTO) {\n\t\tboolean result=false;\n\t\tfinal Orders order=DTOFactory.getOrderFromOrderDTO(orderDTO);\n\t\ttry{\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tresult = (Boolean) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\n\t\t\t\t\treturn daoManager.getOrdersDao().insertOrderWithRows(order);\n\t\t\t\t}\n\t\t\t});\n\t\t}catch (DaoException de) {\n\t\t\ttry {\n\t\t\t\tthrow new ServiceException(de);\n\t\t\t} catch (ServiceException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn result;\n\t}\n\n\t/**----------------------------------------------------------\n\t \t*MAKE ORDER IN PROGRESS*\n\t  -----------------------------------------------------------*/\t\n\t@Override\n\tpublic boolean makeOrderInProgress(OrdersDTO orderDTO){\n\t\tboolean result=false;\n\t\tfinal Orders order=new Orders();\n\t\torder.setLsOrderId(orderDTO.getLsOrderId());\n\t\ttry{\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tresult = (Boolean) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\n\t\t\t\t\treturn daoManager.getOrdersDao().makeOrderInProgress(order);\n\t\t\t\t}\n\t\t\t});\n\t\t}catch (DaoException de) {\n\t\t\ttry {\n\t\t\t\tthrow new ServiceException(de);\n\t\t\t} catch (ServiceException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn result;\n\t}\n\n\t/**----------------------------------------------------------\n\t \t*GET ORDER DTO BY LS_ORDER_ID*\n\t  -----------------------------------------------------------*/\t\n\t@Override\n\tpublic OrdersDTO getOrderDTOByLsOrderId(final String lsOrderId)\n\t\t\tthrows ServiceException { \n\n\t\tOrders order=null;\t\n\t\tOrdersDTO result=null;\n\t\ttry{\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\torder = (Orders) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\n\t\t\t\t\treturn daoManager.getOrdersDao().getOrderByLsOrderId(lsOrderId);\n\t\t\t\t}\n\t\t\t});\n\t\t}catch (DaoException de) {\n\t\t\ttry {\n\t\t\t\tthrow new ServiceException(de);\n\t\t\t} catch (ServiceException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\tif(order!=null)result=DTOFactory.getOrderDTOFromOrder(order);\n\t\treturn result;\n\n\t}\n\n\t/**----------------------------------------------------------\n\t \t*IF FOUND ANY ORDER DUPLICATE RETURN TRUE*\n\t  -----------------------------------------------------------*/\t\n\t@Override\n\tpublic boolean isThereDuplicate(List<OrdersDTO> listOrdersDTO){\n\t\tboolean result=false;\n\t\tif(listOrdersDTO!=null){\n\t\t\tfor(OrdersDTO orderDTO:listOrdersDTO){\n\t\t\t\tif(orderDTO.getDuplicate()!=null && orderDTO.getDuplicate()==true){\n\t\t\t\t\tresult=true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**----------------------------------------------------------\n\t \t*GET ORDER DTO BY ProductOrderNumber*\n\t  -----------------------------------------------------------*/\t\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<OrdersDTO> getListOrdersByPONumber(final List<OrdersDTO> listOrdersDTO){ \n\t\tfinal List<Orders>listOrders=DTOFactory.getListOrdersFromListOrdersDTO(listOrdersDTO);\n\t\tList<Orders>resultList=null;\n\t\ttry{\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tresultList= (List<Orders>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\n\t\t\t\t\treturn daoManager.getOrdersDao().getListOrdersByPONumber(listOrders);\n\t\t\t\t}\n\t\t\t});\n\t\t}catch (DaoException de) {\n\t\t\ttry {\n\t\t\t\tthrow new ServiceException(de);\n\t\t\t} catch (ServiceException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\treturn DTOFactory.getListOrderDTOFromListOrderSorted(resultList);\n\n\t}\n\n\t/**----------------------------------------------------------\n\t \t*CHECK IF ANY ORDERS IS ALREADY EXISTE IN DATABASE*\n\t  -----------------------------------------------------------*/\n\t@Override\n\tpublic boolean isExistAnyLsOrderIdInDB(List<OrdersDTO>listOrdersDTO){\n\t\tboolean result=false;\n\t\tList<OrdersDTO>resultListOrdersDTO=getListOrdersByPONumber(listOrdersDTO);\n\t\tif(resultListOrdersDTO!=null && resultListOrdersDTO.size()>0)result=true;\n\t\treturn result;\n\t}\n\n\t/**----------------------------------------------------------\n\t \t*CALCULATE NUMBER OF ORDERS WHICH HAVE NOT PLANNED\n\t \t TO DALETE*\n\t  -----------------------------------------------------------*/\n\t@Override\n\tpublic Integer nbOrderRowsNotDeleted(List<OrdersRows>listOrdersRows){\n\t\tint result=0;\n\t\tif(listOrdersRows!=null){\n\t\t\tfor(OrdersRows orderR:listOrdersRows){\n\t\t\t\tif(orderR.getToDelete()==0)result++;\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**----------------------------------------------------------\n\t \t*CALCULATING THE NUMBER OF ORDERS IN LIST WHICH HAVE \n\t \t NOT REGISTERED IN DATABASE*\n\t  -----------------------------------------------------------*/\n\t@Override\n\tpublic Long nbOrdersNotSavedInDB(List<OrdersDTO>listOrders){\n\t\tlong result=0L;\n\t\tif(listOrders!=null){\n\t\t\tfor(OrdersDTO orderDTO:listOrders){\n\t\t\t\ttry {\n\t\t\t\t\tString productOrderNumber=orderDTO.getProductOrderNumber();\n\t\t\t\t\tLong userId=orderDTO.getUserId();\n\t\t\t\t\tLong count= getCountOrderByPONumber(productOrderNumber, userId);\n\t\t\t\t\tif(count==0){\n\t\t\t\t\tresult++;\n\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**----------------------------------------------------------\n \t\t\t\t*GET CountOrderByPONumber*\n  \t   -----------------------------------------------------------*/\t\n\t@Override\n\tpublic Long getCountOrderByPONumber(final String productOrderNumber, final Long userId){ \n\t\tLong count=0L;\n\t\ttry{\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tcount = (Long) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\n\t\t\t\t\treturn daoManager.getOrdersDao().getCountOrderByPONumber(productOrderNumber, userId);\n\t\t\t\t}\n\t\t\t});\n\t\t}catch (DaoException de) {\n\t\t\ttry {\n\t\t\t\tthrow new ServiceException(de);\n\t\t\t} catch (ServiceException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t\n\t}\n\n\t/**----------------------------------------------------------\n\t \t*GENERATE LS_ORDER_ID FOR ORDER DUPLICATED*\n\t  -----------------------------------------------------------*/\n\t@Override\n\tpublic String generateLsOrderId(String lsOrder,Hashtable<String, OrdersDTO>hashOrders){\n\t\tString result=lsOrder;\n\t\tString resultSub=lsOrder;\n\t\tint index=result.indexOf(""_"");\n\t\tif(index>=1)resultSub=result.substring(0,index);\n\t\tint NB=1;\n\t\tString ext=""_"";\n\t\tresult=resultSub+ext+NB;\n\t\twhile(hashOrders.containsKey(result)){\n\t\t\tNB++;\n\t\t\tresult=resultSub+ext+NB;\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**----------------------------------------------------------\n\t \t*GENERATE LS_ORDER_ID FOR MANUAL ORDERS*\n\t  -----------------------------------------------------------*/\n\n    @Override\n\tpublic String generateManLsOrderId(final String lsOrderFirstPart) throws ServiceException {  \n    \tHashtable<String, String>lsOrdersIdHash=new Hashtable<String, String>();\n    \tList<Orders>listOrders=getAllOrders();\n    \tif(listOrders!=null){\n    \t\tfor(Orders ord:listOrders){\n    \t\t\tlsOrdersIdHash.put(ord.getLsOrderId(), ord.getLsOrderId());\n    \t\t}\n    \t}\n    \tint inc=0;//increment\n        \n        int index=lsOrderFirstPart.indexOf(""N"");\n        String lsOrderIdToGenerate=lsOrderFirstPart;;\n        if(index>0)lsOrderIdToGenerate=lsOrderFirstPart.substring(0, index);\n        while(lsOrdersIdHash.containsKey(lsOrderIdToGenerate)){\n       \t inc++; \n       \tlsOrderIdToGenerate=lsOrderFirstPart+""N""+inc;\n        }\n\t\treturn lsOrderIdToGenerate;\n\t}\n\t\n\t/*\n\t@Override\n\tpublic String generateManLsOrderId(final String lsOrderFirstPart) throws ServiceException {  \n\t\tOrders order=null;\t\n\t\tString result="""";\n\t\ttry{\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\torder = (Orders) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\n\t\t\t\t\treturn daoManager.getOrdersDao().getManMaxLsOrderId(lsOrderFirstPart);\n\t\t\t\t}\n\t\t\t});\n\t\t\t}catch (DaoException de) {\n\t\t\t\ttry {\n\t\t\t\t\tthrow new ServiceException(de);\n\t\t\t\t} catch (ServiceException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t}\n\t\tif(order!=null){\n\t\t\tresult=order.getLsOrderId();\n\t\t\tint i=result.indexOf(""|"");\n\t\t\tint j=result.indexOf(""["");\n\t\t\tif(i>0){\n\t\t\t\tif(j<0)j=result.length();\n\t\t\t\tString strNB=result.substring(i+1,j);\n\t\t\t\tint NB= Integer.parseInt(strNB);\n\t\t\t\tNB++;\n\t\t\t\tresult=result.substring(0,i)+""|""+NB;\n\t\t\t}else{\n\t\t\t\tresult=result+""|1"";\n\t\t\t}\n\t\t}else result=lsOrderFirstPart+""|1"";\n\t\treturn result;\n\t}\n\t */\n\t/**----------------------------------------------------------\n\t \t*GET LIST ORDERS BY DATE, CLIENT AND LIKE LSORDER_ID*\n\t  -----------------------------------------------------------*/\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<OrdersDTO> getOrdersByDateClientLikeLsOrderId(final Date creationDate, final String userLogin, final String lsOrderId,String status){\n\t\tList<Orders> result=null;\n\t\tList<Orders> resultCleaned=new ArrayList<Orders>();\n\t\ttry{\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tresult = (List<Orders>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\n\t\t\t\t\treturn daoManager.getOrdersDao().getOrdersByDateClientLikeLsOrderId(creationDate, userLogin,lsOrderId);\n\t\t\t\t}\n\t\t\t});\n\t\t}catch (DaoException de) {\n\t\t\ttry {\n\t\t\t\tthrow new ServiceException(de);\n\t\t\t} catch (ServiceException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\tif(result!=null){\n\t\t\tfor(Orders ord:result){\n\t\t\t\tArrayList<OrdersRows>listR=getRowsByLsOrderIdLikeStatus(ord.getLsOrderId(),status,0);\n\t\t\t\tord.setRowsList(listR);\n\t\t\t\tif(listR!=null && listR.size()>0)resultCleaned.add(ord);\n\t\t\t}\n\t\t}\n\t\treturn DTOFactory.getListOrderDTOFromListOrder(resultCleaned);\n\t}\n\n\t/**----------------------------------------------------------\n\t \t*SEARCH ORDERS BY OPTIONS*\n\t  -----------------------------------------------------------*/\t\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<OrdersDTO> searchOrdersWithOptions(final Date creationDateStart,final Date creationDateEnd, final String userLogin, final String lsOrderId,String status){\n\t\tList<Orders> result=null;\n\t\tList<Orders> resultCleaned=new ArrayList<Orders>();\n\t\ttry{\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tresult = (List<Orders>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\n\t\t\t\t\treturn daoManager.getOrdersDao().searchOrdersWithOptions(creationDateStart,creationDateEnd, userLogin,lsOrderId);\n\t\t\t\t}\n\t\t\t});\n\t\t}catch (DaoException de) {\n\t\t\ttry {\n\t\t\t\tthrow new ServiceException(de);\n\t\t\t} catch (ServiceException e) {\n\t\t\t\t// TODO Auto-generated catch block  \n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\tif(result!=null){\n\t\t\tfor(Orders ord:result){\n\t\t\t\tArrayList<OrdersRows>listR=getRowsByLsOrderIdLikeStatus(ord.getLsOrderId(),status,0);\n\t\t\t\tord.setRowsList(listR);\n\t\t\t\tif(listR!=null && listR.size()>0)resultCleaned.add(ord);\n\t\t\t}\n\t\t}\n\t\treturn DTOFactory.getListOrderDTOFromListOrder(resultCleaned);\n\t}\n\n\t/**----------------------------------------------------------\n\t \t*SEARCH ORDERS BY OPTIONS AND SORTING*\n\t  -----------------------------------------------------------*/\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<OrdersDTO> searchOrdersWithOptionsAndSorting(final Date creationDateStart,final Date creationDateEnd, final String userLogin, final String lsOrderId,final String status,final List<Integer>listIndexColumn){\n\t\tList<Orders> result=null;\n\t\ttry{\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tresult = (List<Orders>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\n\t\t\t\t\treturn daoManager.getOrdersDao().searchOrdersWithOptionsAndSorting(creationDateStart, creationDateEnd, userLogin, lsOrderId, status, listIndexColumn);\n\t\t\t\t}\n\t\t\t});\n\t\t}catch (DaoException de) {\n\t\t\ttry {\n\t\t\t\tthrow new ServiceException(de);\n\t\t\t} catch (ServiceException e) {\n\t\t\t\t// TODO Auto-generated catch block  \n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\treturn DTOFactory.getListOrderDTOFromListOrderSorted(result);\n\t}\n\t\n\t/**----------------------------------------------------------\n\t \t*GET LIST ROWS BY LSORDER_ID LIKE STATUS*\n\t  -----------------------------------------------------------*/\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic ArrayList<OrdersRows> getRowsByLsOrderIdLikeStatus(final String lsOrderId, final String status,final Integer sort){\n\t\tArrayList<OrdersRows> result=null;\n\t\ttry{\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tresult = (ArrayList<OrdersRows>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\n\t\t\t\t\treturn daoManager.getOrdersDao().getRowsByLsOrderIdLikeStatus(lsOrderId, status,sort);\n\t\t\t\t}\n\t\t\t});\n\t\t}catch (DaoException de) {\n\t\t\ttry {\n\t\t\t\tthrow new ServiceException(de);\n\t\t\t} catch (ServiceException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**----------------------------------------------------------\n\t *UPDATE ORDERS ROWS BY LIKE LSORDER_ID, DATE, STATUS, CLIENT*\n\t  -----------------------------------------------------------*/\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic ArrayList<OrdersRows> getRowsByLsOrderIdLikeStatusSorted(final String lsOrderId, final String status,final Integer sort){\n\t\tArrayList<OrdersRows> result=null;\n\t\ttry{\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tresult = (ArrayList<OrdersRows>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\n\t\t\t\t\treturn daoManager.getOrdersDao().getRowsByLsOrderIdLikeStatusSorted(lsOrderId, status,sort);\n\t\t\t\t}\n\t\t\t});\n\t\t}catch (DaoException de) {\n\t\t\ttry {\n\t\t\t\tthrow new ServiceException(de);\n\t\t\t} catch (ServiceException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\t\n\t/**----------------------------------------------------------\n\t \t*UPDATE ORDER BY LSORDER_ID*\n\t  -----------------------------------------------------------*/\n\t@Override\n\tpublic boolean updateOrderByLsOrderId(OrdersDTO orderDTO){\n\t\tboolean result=false;\n\t\tfinal Orders order=DTOFactory.getOrderFromOrderDTO(orderDTO);\n\t\ttry{\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tresult = (Boolean) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\n\t\t\t\t\treturn daoManager.getOrdersDao().updateOrderByLsOrderId(order);\n\t\t\t\t}\n\t\t\t});\n\t\t}catch (DaoException de) {\n\t\t\ttry {\n\t\t\t\tthrow new ServiceException(de);\n\t\t\t} catch (ServiceException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\t\n\t/**----------------------------------------------------------\n\t \t*UPDATE ROW ORDER SHIPPING ELEMENTS(NOTES,SHIPPING_COMPANY, TRACKING_NUMBER) BY LSORDER_ID*\n\t  -----------------------------------------------------------*/\n\t@Override\n\tpublic boolean updateShippingOrderElements(OrdersDTO orderDTO){\n\t\tboolean result=false;\n\t\tfinal Orders order=DTOFactory.getOrderFromOrderDTO(orderDTO);\n\t\t\n\t\ttry{\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tresult = (Boolean) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\n\t\t\t\t\treturn daoManager.getOrdersDao().updateShippingOrderElements(order);\n\t\t\t\t}\n\t\t\t});\n\t\t}catch (DaoException de) {\n\t\t\ttry {\n\t\t\t\tthrow new ServiceException(de);\n\t\t\t} catch (ServiceException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\t\n\t\n\t@Override\n\tpublic boolean updateQuantityOrderByLsOrderId(OrdersDTO orderDTO){\n\t\tboolean result=false;\n\t\tfinal Orders order=DTOFactory.getOrderFromOrderDTO(orderDTO);\n\t\ttry{\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tresult = (Boolean) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\n\t\t\t\t\treturn daoManager.getOrdersDao().updateQuantityOrderByLsOrderId(order);\n\t\t\t\t}\n\t\t\t});\n\t\t}catch (DaoException de) {\n\t\t\ttry {\n\t\t\t\tthrow new ServiceException(de);\n\t\t\t} catch (ServiceException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\t\n\n\t/**----------------------------------------------------------\n\t \t*GET ORDER ROW BY ID ROW*\n\t  -----------------------------------------------------------*/\n\t@Override\n\tpublic OrdersRows getRowsByRowId(final Long rowId){\n\t\tOrdersRows result=null;\n\t\ttry{\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tresult = (OrdersRows) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\n\t\t\t\t\treturn daoManager.getOrdersDao().getRowsByRowId(rowId);\n\t\t\t\t}\n\t\t\t});\n\t\t}catch (DaoException de) {\n\t\t\ttry { \n\t\t\t\tthrow new ServiceException(de);\n\t\t\t} catch (ServiceException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\treturn result;\t\n\t}\n\t\n\t\n\n\t/**----------------------------------------------------------\n\t \t*GET ROW ORDER  BY lsOrderId*\n\t  -----------------------------------------------------------*/\n\t@Override\n\tpublic OrdersRows getRowByLsOrderId(final String lsOrderId){\n\t\tOrdersRows result=null;\n\t\ttry{\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tresult = (OrdersRows) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\n\t\t\t\t\treturn daoManager.getOrdersDao().getRowByLsOrderId(lsOrderId);\n\t\t\t\t}\n\t\t\t});\n\t\t}catch (DaoException de) {\n\t\t\ttry { \n\t\t\t\tthrow new ServiceException(de);\n\t\t\t} catch (ServiceException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\treturn result;\t\n\t}\n\t\n\t/**----------------------------------------------------------\n\t \t*CHANGE STATUS OF ROW ORDER TO SHIPPED IN DATABASE*\n\t  -----------------------------------------------------------*/\n\t@Override\n\tpublic boolean makeRowOrderInShippedById(final OrdersRows orderRow){\n\t\tboolean result=false;\n\t\ttry{\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tresult = (Boolean) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\n\t\t\t\t\treturn daoManager.getOrdersDao().makeRowOrderInShippedById(orderRow);\n\t\t\t\t}\n\t\t\t});\n\t\t}catch (DaoException de) {\n\t\t\ttry { \n\t\t\t\tthrow new ServiceException(de);\n\t\t\t} catch (ServiceException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\treturn result;\t\n\t}\n\t\n\t/**----------------------------------------------------------\n\t \t*CHANGE STATUS OF ROW ORDER TO OPEN*\n\t  -----------------------------------------------------------*/\n\t@Override\n\tpublic boolean makeRowOrderInOpenById(final OrdersRows orderRow){\n\t\tboolean result=false;\n\t\ttry{\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tresult = (Boolean) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\n\t\t\t\t\treturn daoManager.getOrdersDao().makeRowOrderInOpenById(orderRow);\n\t\t\t\t}\n\t\t\t});\n\t\t}catch (DaoException de) {\n\t\t\ttry { \n\t\t\t\tthrow new ServiceException(de);\n\t\t\t} catch (ServiceException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\treturn result;\t\n\t}\n\t\n\t/**----------------------------------------------------------\n\t \t*UPDATE STOCK IN TABLE STOCK BY LSPRODUCT*\n\t  -----------------------------------------------------------*/\n\t@Override\n\tpublic boolean updateStockByLsProductId(final ProductDTO productDTO){\n\t\tboolean result=false;\n\t\tfinal Product product=new Product();\n\t\tproduct.setLoyaltySourceProductId(productDTO.getLoyaltyProductId());\n\t\tproduct.setStock(productDTO.getStock());\n\t\ttry{\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tresult = (Boolean) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\n\t\t\t\t\treturn daoManager.getOrdersDao().updateStockByLsProductId(product);\n\t\t\t\t}\n\t\t\t});\n\t\t}catch (DaoException de) {\n\t\t\ttry { \n\t\t\t\tthrow new ServiceException(de);\n\t\t\t} catch (ServiceException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\treturn result;\t\n\t}\n\t\n\t/**----------------------------------------------------------\n\t \t*CHECK IF PRODUCT ALREADY EXIST IN TABLE STOCK*\n\t  -----------------------------------------------------------*/\n\t@Override\n\tpublic boolean isExistProductInStock(ProductDTO productDTO){\n\t\tboolean result=false;\n\t\tfinal Product product=new Product();\n\t\tproduct.setId(productDTO.getId());\n\t\ttry{\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tresult = (Boolean) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\n\t\t\t\t\treturn daoManager.getOrdersDao().isExistProductInStock(product);\n\t\t\t\t}\n\t\t\t});\n\t\t\t}catch (DaoException de) {\n\t\t\ttry { \n\t\t\t\tthrow new ServiceException(de);\n\t\t\t} catch (ServiceException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\treturn result;\t\n\t}\n\t\n\t/**----------------------------------------------------------\n\t \t*INSERT PRODUCT IN TABLE STOCK WHITH QANTITY STOCK*\n\t  -----------------------------------------------------------*/\n\t@Override\n\tpublic boolean insertProductInStock(ProductDTO productDTO){\n\t\tboolean result=false;\n\t\tfinal Product product=new Product();\n\t\tproduct.setId(productDTO.getId());\n\t\tproduct.setStock(productDTO.getStock());\n\t\ttry{\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tresult = (Boolean) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t@Override\n\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\n\t\t\t\treturn daoManager.getOrdersDao().insertProductInStock(product);\n\t\t\t\t}\n\t\t\t});\n\t\t\t}catch (DaoException de) {\n\t\t\ttry { \n\t\t\t\tthrow new ServiceException(de);\n\t\t\t} catch (ServiceException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\treturn result;\t\n\t}\n\t\n\t/**----------------------------------------------------------\n\t \t*CREATE XLS FILE FROM THE LIST ORDERS*\n\t  -----------------------------------------------------------*/\n\t@Override\n\tpublic void generateAdminXLS(List<OrdersDTO> listOrdersDTO,String ordersAdminTemplateFolder,boolean isReport){\n\t\tfinal String sheetName = ""Sheet1"";\n\t\tfinal int ROW_TO_BEGIN=1;\n\t\t//COLUMNS NUMBER\n\t\tfinal int COL_RECORD_TYPE=1,\n\t\tCOL_LS_ORDER_ID=2,\n\t\tCOL_CONTRY_CODE=14,\n\t\tCOL_CLIENT_FIRST_NAME=4,\n\t\tCOL_CLIENT_LAST_NAME=5,\n\t\tCOL_CLIENT_OTHER_NAMES=3,\n\t\tCOL_CLIENT_STREET=9,\n\t\tCOL_CLIENT_OTHER_ADRESS=8,\n\t\tCOL_CLIENT_CITY=11,\n\t\tCOL_CLIENT_PROVINCE=12,\n\t\tCOL_CLIENT_POSTAL_CODE=13,\n\t\tCOL_CLIENT_PHONE=15,\n\t\tCOL_CLIENT_EMAIL=16;\n\t\t//COLUMNS Data\n\t\tString LS_ORDER_ID=null;\n\t\tString CLIENT_FIRST_NAME="""";\n\t\tString CLIENT_LAST_NAME="""";\n\t\tString CLIENT_OTHER_NAMES="""";\n\t\tString CLIENT_STREET="""";\n\t\tString CLIENT_OTHER_ADRESS="""";\n\t\tString CLIENT_CITY="""";\n\t\tString CLIENT_PROVINCE="""";\n\t\tString CLIENT_POSTAL_CODE="""";\n\t\tString CLIENT_PHONE="""";\n\t\tString CLIENT_EMAIL="""";\n\t\tint row = 0;\n\t\ttry {\n\t\tWorkbook existingWorkbook = Workbook.getWorkbook(new File(ordersAdminTemplateFolder+""EstTemplate.xls""));\n\t\tWritableWorkbook workbookCopy = Workbook.createWorkbook(new File(ordersAdminTemplateFolder+""ordersAdminExport.xls""), existingWorkbook);\n\t\tWritableSheet sheetToEdit = workbookCopy.getSheet(sheetName);\n\n\t    // Create cell font and format\n\t    WritableFont cellFont = new WritableFont(WritableFont.TIMES, 12);\n\t    cellFont.setColour(Colour.BLACK);\n\t    \n\t    WritableCellFormat cellFormat = new WritableCellFormat(cellFont);\n\t    cellFormat.setBackground(Colour.ORANGE);\n\t    cellFormat.setVerticalAlignment(VerticalAlignment.CENTRE);\n\t    cellFormat.setBorder(Border.ALL, BorderLineStyle.THIN);\n\t\tWritableCell cellROW_ID=null;\n\t\tWritableCell cellRECORD_TYPE=null;\n\t\tWritableCell cellCONTRY_CODE=null;\n\t\tWritableCell cellCLIENT_FIRST_NAME=null;\n\t\tWritableCell cellCLIENT_LAST_NAME=null;\n\t\tWritableCell cellCLIENT_OTHER_NAMES=null;\n\t\tWritableCell cellCLIENT_STREET=null;\n\t\tWritableCell cellCLIENT_OTHER_ADRESS=null;\n\t\tWritableCell cellCLIENT_CITY=null;\n\t\tWritableCell cellCLIENT_PROVINCE=null;\n\t\tWritableCell cellCLIENT_POSTAL_CODE=null;\n\t\tWritableCell cellCLIENT_PHONE=null;\n\t\tWritableCell cellCLIENT_EMAIL=null;\n\t\t//LABELS\n\t\tLabel labelROW_ID=null,\n\t\tlabelCONTRY_CODE=null,\n\t\tlabelRECORD_TYPE=null,\n\t\tlabelCLIENT_FIRST_NAME=null,\n\t\tlabelCLIENT_LAST_NAME=null,\n\t\tlabelCLIENT_OTHER_NAMES=null,\n\t\tlabelCLIENT_STREET=null,\n\t\tlabelCLIENT_OTHER_ADRESS=null,\n\t\tlabelCLIENT_CITY=null,\n\t\tlabelCLIENT_PROVINCE=null,\n\t\tlabelCLIENT_POSTAL_CODE=null,\n\t\tlabelCLIENT_PHONE=null,\n\t\tlabelCLIENT_EMAIL=null;\n\t\t//START FROM ROW_TO_BEGIN\n\t\trow = ROW_TO_BEGIN;\n\t\tif(!isReport){\n\t\tfor (OrdersDTO orderDTO : listOrdersDTO) {\n\t\t\tfor(OrdersRows rowOrder:orderDTO.getRowsList()){\n\t\t\t\t\n\t\t\t// 1: RECORD TYPE (must be always 1)\n\t\t\t\tlabelRECORD_TYPE = new Label(COL_RECORD_TYPE-1, row, ""1"");\n\t\t\t\tcellRECORD_TYPE = (WritableCell) labelRECORD_TYPE;\n\t\t\t\tsheetToEdit.addCell(cellRECORD_TYPE);\n\n\t\t\t// 2: ROW_ID (must be lest than 30 letters)\n\t\t\tif (rowOrder.getLsOrderId() != null) {\n\t\t\t\tLS_ORDER_ID = rowOrder.getLsOrderId();\n\t\t\t\tlabelROW_ID = new Label(COL_LS_ORDER_ID-1, row, LS_ORDER_ID);\n\t\t\t\tcellROW_ID = (WritableCell) labelROW_ID;\n\t\t\t\tsheetToEdit.addCell(cellROW_ID);\n\t\t\t}\n\t\t\t\n\t\t\t// 3: CLIENT_OTHER_NAMES (must be lest than 15 letters)\n\t\t\tif (orderDTO.getClientOtherNames() != null && orderDTO.getClientOtherNames().length()<=15) {\n\t\t\t\tCLIENT_OTHER_NAMES = orderDTO.getClientOtherNames();\n\t\t\t\tlabelCLIENT_OTHER_NAMES = new Label(COL_CLIENT_OTHER_NAMES-1, row, CLIENT_OTHER_NAMES);\n\t\t\t\tcellCLIENT_OTHER_NAMES = (WritableCell) labelCLIENT_OTHER_NAMES;\n\t\t\t\tsheetToEdit.addCell(cellCLIENT_OTHER_NAMES);\n\t\t\t}else if( orderDTO.getClientOtherNames() != null && orderDTO.getClientOtherNames().length()>15){\n\t\t\t\tCLIENT_OTHER_NAMES = orderDTO.getClientOtherNames();\n\t\t\t\tlabelCLIENT_OTHER_NAMES = new Label(COL_CLIENT_OTHER_NAMES-1, row, ""?????"",cellFormat);\n\t\t\t\tcellCLIENT_OTHER_NAMES = (WritableCell) labelCLIENT_OTHER_NAMES;\n\t\t\t\tsheetToEdit.addCell(cellCLIENT_OTHER_NAMES);\n\t\t\t}\n\t\t\t\n\t\t\t// 4: CLIENT_FIRST_NAME (must be lest than 30 letters)\n\t\t\tif (orderDTO.getClientFirstName() != null && orderDTO.getClientFirstName().length()<=30) {\n\t\t\t\tCLIENT_FIRST_NAME = orderDTO.getClientFirstName();\n\t\t\t\tif(CLIENT_FIRST_NAME==null || CLIENT_FIRST_NAME.equals("""")){\n\t\t\t\t\tlabelCLIENT_FIRST_NAME = new Label(COL_CLIENT_FIRST_NAME-1, row, CLIENT_FIRST_NAME,cellFormat);\n\t\t\t\t}else{\n\t\t\t\t\tlabelCLIENT_FIRST_NAME = new Label(COL_CLIENT_FIRST_NAME-1, row, CLIENT_FIRST_NAME);\n\t\t\t\t}\n\t\t\t\tcellCLIENT_FIRST_NAME = (WritableCell) labelCLIENT_FIRST_NAME;\n\t\t\t\tsheetToEdit.addCell(cellCLIENT_FIRST_NAME);\n\t\t\t}else if(orderDTO.getClientFirstName() == null){\n\t\t\t\tlabelCLIENT_FIRST_NAME = new Label(COL_CLIENT_FIRST_NAME-1, row, """",cellFormat);\n\t\t\t\tcellCLIENT_FIRST_NAME = (WritableCell) labelCLIENT_FIRST_NAME;\n\t\t\t\tsheetToEdit.addCell(cellCLIENT_FIRST_NAME);\n\t\t\t}else{\n\t\t\t\tlabelCLIENT_FIRST_NAME = new Label(COL_CLIENT_FIRST_NAME-1, row, ""?????"",cellFormat);\n\t\t\t\tcellCLIENT_FIRST_NAME = (WritableCell) labelCLIENT_FIRST_NAME;\n\t\t\t\tsheetToEdit.addCell(cellCLIENT_FIRST_NAME);\n\t\t\t}\n\t\t\t\n\t\t\t// 5: CLIENT_LAST_NAME (must be lest than 40 letters)\n\t\t\tif (orderDTO.getClientLastName() != null && orderDTO.getClientLastName().length()<=40) {\n\t\t\t\tCLIENT_LAST_NAME = orderDTO.getClientLastName();\n\t\t\t\tif(CLIENT_LAST_NAME.equals("""")){\n\t\t\t\t\tlabelCLIENT_LAST_NAME = new Label(COL_CLIENT_LAST_NAME-1, row, CLIENT_LAST_NAME,cellFormat);\n\t\t\t\t}else{\n\t\t\t\t\tlabelCLIENT_LAST_NAME = new Label(COL_CLIENT_LAST_NAME-1, row, CLIENT_LAST_NAME);\n\t\t\t\t}\n\t\t\t\tcellCLIENT_LAST_NAME = (WritableCell) labelCLIENT_LAST_NAME;\n\t\t\t\tsheetToEdit.addCell(cellCLIENT_LAST_NAME);\n\t\t\t}else if(orderDTO.getClientLastName() == null){\n\t\t\t\tlabelCLIENT_LAST_NAME = new Label(COL_CLIENT_LAST_NAME-1, row, """",cellFormat);\n\t\t\t\tcellCLIENT_LAST_NAME = (WritableCell) labelCLIENT_LAST_NAME;\n\t\t\t\tsheetToEdit.addCell(cellCLIENT_LAST_NAME);\n\t\t\t}else{\n\t\t\t\tlabelCLIENT_LAST_NAME = new Label(COL_CLIENT_LAST_NAME-1, row, ""?????"",cellFormat);\n\t\t\t\tcellCLIENT_LAST_NAME = (WritableCell) labelCLIENT_LAST_NAME;\n\t\t\t\tsheetToEdit.addCell(cellCLIENT_LAST_NAME);\n\t\t\t}\n\t\t\t\n\t\t\t// 8: CLIENT_OTHER_ADRESS (must be lest than 44 letters)\n\t\t\tif (orderDTO.getClientOtherStreet()!= null && orderDTO.getClientOtherStreet().length()<=44) {\n\t\t\t\tCLIENT_OTHER_ADRESS = orderDTO.getClientOtherStreet();\n\t\t\t\tlabelCLIENT_OTHER_ADRESS = new Label(COL_CLIENT_OTHER_ADRESS-1, row, CLIENT_OTHER_ADRESS);\n\t\t\t\tcellCLIENT_OTHER_ADRESS = (WritableCell) labelCLIENT_OTHER_ADRESS;\n\t\t\t\tsheetToEdit.addCell(cellCLIENT_OTHER_ADRESS);\n\t\t\t}else if(orderDTO.getClientOtherStreet()== null){\n\t\t\t\tlabelCLIENT_OTHER_ADRESS = new Label(COL_CLIENT_OTHER_ADRESS-1, row, """");\n\t\t\t\tcellCLIENT_OTHER_ADRESS = (WritableCell) labelCLIENT_OTHER_ADRESS;\n\t\t\t\tsheetToEdit.addCell(cellCLIENT_OTHER_ADRESS);\n\t\t\t}else{\n\t\t\t\tlabelCLIENT_OTHER_ADRESS = new Label(COL_CLIENT_OTHER_ADRESS-1, row, ""?????"",cellFormat);\n\t\t\t\tcellCLIENT_OTHER_ADRESS = (WritableCell) labelCLIENT_OTHER_ADRESS;\n\t\t\t\tsheetToEdit.addCell(cellCLIENT_OTHER_ADRESS);\n\t\t\t}\n\t\t\t\n\t\t\t// 9: CLIENT_STREET (must be lest than 44 letters)\n\t\t\tif (orderDTO.getClientStreet() != null && orderDTO.getClientStreet().length()<=44) {\n\t\t\t\tCLIENT_STREET = orderDTO.getClientStreet();\n\t\t\t\tif(CLIENT_STREET==null || CLIENT_STREET.equals("""")){\n\t\t\t\t\tlabelCLIENT_STREET = new Label(COL_CLIENT_STREET-1, row, CLIENT_STREET,cellFormat);\n\t\t\t\t}else{\n\t\t\t\t\tlabelCLIENT_STREET = new Label(COL_CLIENT_STREET-1, row, CLIENT_STREET);\n\t\t\t\t}\n\t\t\t\tcellCLIENT_STREET = (WritableCell) labelCLIENT_STREET;\n\t\t\t\tsheetToEdit.addCell(cellCLIENT_STREET);\n\t\t\t}else if(orderDTO.getClientStreet() == null){\n\t\t\t\tlabelCLIENT_STREET = new Label(COL_CLIENT_STREET-1, row, """",cellFormat);\n\t\t\t\tcellCLIENT_STREET = (WritableCell) labelCLIENT_STREET;\n\t\t\t\tsheetToEdit.addCell(cellCLIENT_STREET);\n\t\t\t}else{\n\t\t\t\tlabelCLIENT_STREET = new Label(COL_CLIENT_STREET-1, row, ""?????"",cellFormat);\n\t\t\t\tcellCLIENT_STREET = (WritableCell) labelCLIENT_STREET;\n\t\t\t\tsheetToEdit.addCell(cellCLIENT_STREET);\n\t\t\t}\n\t\t\t\n\t\t\t// 11: CLIENT_CITY (must be lest than 25 letters)\n\t\t\tif (orderDTO.getClientCity()!= null && orderDTO.getClientCity().length()<=25) {\n\t\t\t\tCLIENT_CITY = orderDTO.getClientCity();\n\t\t\t\tif(CLIENT_CITY.equals("""")){\n\t\t\t\t\tlabelCLIENT_CITY = new Label(COL_CLIENT_CITY-1, row, CLIENT_CITY,cellFormat);\n\t\t\t\t}else{\n\t\t\t\t\tlabelCLIENT_CITY = new Label(COL_CLIENT_CITY-1, row, CLIENT_CITY);\n\t\t\t\t}\n\t\t\t\tcellCLIENT_CITY = (WritableCell) labelCLIENT_CITY;\n\t\t\t\tsheetToEdit.addCell(cellCLIENT_CITY);\n\t\t\t}else if(orderDTO.getClientCity()== null){\n\t\t\t\tlabelCLIENT_CITY = new Label(COL_CLIENT_CITY-1, row, """",cellFormat);\n\t\t\t\tcellCLIENT_CITY = (WritableCell) labelCLIENT_CITY;\n\t\t\t\tsheetToEdit.addCell(cellCLIENT_CITY);\n\t\t\t}else{\n\t\t\t\tlabelCLIENT_CITY = new Label(COL_CLIENT_CITY-1, row, ""?????"",cellFormat);\n\t\t\t\tcellCLIENT_CITY = (WritableCell) labelCLIENT_CITY;\n\t\t\t\tsheetToEdit.addCell(cellCLIENT_CITY);\n\t\t\t}\n\t\t\t\n\t\t\t// 12: CLIENT_PROVINCE (must be lest than 20 letters)\n\t\t\tif (orderDTO.getClientProvince()!= null && orderDTO.getClientProvince().length()<=20) {\n\t\t\t\tCLIENT_PROVINCE = orderDTO.getClientProvince();\n\t\t\t\tif(CLIENT_PROVINCE==null || CLIENT_PROVINCE.equals("""")){\n\t\t\t\t\tlabelCLIENT_PROVINCE = new Label(COL_CLIENT_PROVINCE-1, row, CLIENT_PROVINCE,cellFormat);\n\t\t\t\t}else{\n\t\t\t\t\tlabelCLIENT_PROVINCE = new Label(COL_CLIENT_PROVINCE-1, row, CLIENT_PROVINCE);\n\t\t\t\t}\n\t\t\t\tcellCLIENT_PROVINCE = (WritableCell) labelCLIENT_PROVINCE;\n\t\t\t\tsheetToEdit.addCell(cellCLIENT_PROVINCE);\n\t\t\t}else if(orderDTO.getClientProvince()== null){\n\t\t\t\tlabelCLIENT_PROVINCE = new Label(COL_CLIENT_PROVINCE-1, row, """",cellFormat);\n\t\t\t\tcellCLIENT_PROVINCE = (WritableCell) labelCLIENT_PROVINCE;\n\t\t\t\tsheetToEdit.addCell(cellCLIENT_PROVINCE);\n\t\t\t}else{\n\t\t\t\tlabelCLIENT_PROVINCE = new Label(COL_CLIENT_PROVINCE-1, row, ""?????"",cellFormat);\n\t\t\t\tcellCLIENT_PROVINCE = (WritableCell) labelCLIENT_PROVINCE;\n\t\t\t\tsheetToEdit.addCell(cellCLIENT_PROVINCE);\n\t\t\t}\n\t\t\t\n\t\t\t// 13: CLIENT_POSTAL_CODE (must be lest than 14 letters)\n\t\t\tif (orderDTO.getClientPostalCode()!= null && orderDTO.getClientPostalCode().length()<=14) {\n\t\t\t\tCLIENT_POSTAL_CODE = orderDTO.getClientPostalCode();\n\t\t\t\tif(CLIENT_POSTAL_CODE.equals("""")){\n\t\t\t\t\tlabelCLIENT_POSTAL_CODE = new Label(COL_CLIENT_POSTAL_CODE-1, row, CLIENT_POSTAL_CODE,cellFormat);\n\t\t\t\t}else{\n\t\t\t\t\tlabelCLIENT_POSTAL_CODE = new Label(COL_CLIENT_POSTAL_CODE-1, row, CLIENT_POSTAL_CODE);\n\t\t\t\t}\n\t\t\t\tcellCLIENT_POSTAL_CODE = (WritableCell) labelCLIENT_POSTAL_CODE;\n\t\t\t\tsheetToEdit.addCell(cellCLIENT_POSTAL_CODE);\n\t\t\t}else if(orderDTO.getClientPostalCode()==null){\n\t\t\t\tlabelCLIENT_POSTAL_CODE = new Label(COL_CLIENT_POSTAL_CODE-1, row, """",cellFormat);\n\t\t\t\tcellCLIENT_POSTAL_CODE = (WritableCell) labelCLIENT_POSTAL_CODE;\n\t\t\t\tsheetToEdit.addCell(cellCLIENT_POSTAL_CODE);\n\t\t\t}else{\n\t\t\t\tlabelCLIENT_POSTAL_CODE = new Label(COL_CLIENT_POSTAL_CODE-1, row, ""?????"",cellFormat);\n\t\t\t\tcellCLIENT_POSTAL_CODE = (WritableCell) labelCLIENT_POSTAL_CODE;\n\t\t\t\tsheetToEdit.addCell(cellCLIENT_POSTAL_CODE);\n\t\t\t}\n\t\t\t\n\t\t\t// 14: CONTRY CODE (must be always CA)\n\t\t\t\tlabelCONTRY_CODE = new Label(COL_CONTRY_CODE-1, row, ""CA"");\n\t\t\t\tcellCONTRY_CODE = (WritableCell) labelCONTRY_CODE;\n\t\t\t\tsheetToEdit.addCell(cellCONTRY_CODE);\n\n\t\t\t// 15: CLIENT_PHONE (must be lest than 25 letters)\n\t\t\tif (orderDTO.getClientPhone()!= null && orderDTO.getClientPhone().length()<=25) {\n\t\t\t\tCLIENT_PHONE = orderDTO.getClientPhone();\n\t\t\t\tlabelCLIENT_PHONE = new Label(COL_CLIENT_PHONE-1, row, CLIENT_PHONE);\n\t\t\t\tcellCLIENT_PHONE = (WritableCell) labelCLIENT_PHONE;\n\t\t\t\tsheetToEdit.addCell(cellCLIENT_PHONE);\n\t\t\t}else if(orderDTO.getClientPhone()!= null && orderDTO.getClientPhone().length()>25){\n\t\t\t\tlabelCLIENT_PHONE = new Label(COL_CLIENT_PHONE-1, row, ""?????"",cellFormat);\n\t\t\t\tcellCLIENT_PHONE = (WritableCell) labelCLIENT_PHONE;\n\t\t\t\tsheetToEdit.addCell(cellCLIENT_PHONE);\n\t\t\t}\n\t\t\t\n\t\t\t// 16: CLIENT_EMAIL (must be lest than 60 letters)\n\t\t\tif (orderDTO.getClientEmail()!= null && orderDTO.getClientEmail().length()<=60) {\n\t\t\t\tCLIENT_EMAIL = orderDTO.getClientEmail();\n\t\t\t\tlabelCLIENT_EMAIL = new Label(COL_CLIENT_EMAIL-1, row, CLIENT_EMAIL);\n\t\t\t\tcellCLIENT_EMAIL = (WritableCell) labelCLIENT_EMAIL;\n\t\t\t\tsheetToEdit.addCell(cellCLIENT_EMAIL);\n\t\t\t}else if(orderDTO.getClientEmail()!= null && orderDTO.getClientEmail().length()>60){\n\t\t\t\tlabelCLIENT_EMAIL = new Label(COL_CLIENT_EMAIL-1, row, ""?????"",cellFormat);\n\t\t\t\tcellCLIENT_EMAIL = (WritableCell) labelCLIENT_EMAIL;\n\t\t\t\tsheetToEdit.addCell(cellCLIENT_EMAIL);\n\t\t\t}\n\t\t\t\n\t\t\t++row;\n\t\t\t}\t\t\n\t\t}\n\t}else{\n\t\t\n\t\tfor (OrdersDTO orderDTO : listOrdersDTO) {\n\n\t\t\t// 1: RECORD TYPE (must be always 1)\n\t\t\t\tlabelRECORD_TYPE = new Label(COL_RECORD_TYPE-1, row, ""1"");\n\t\t\t\tcellRECORD_TYPE = (WritableCell) labelRECORD_TYPE;\n\t\t\t\tsheetToEdit.addCell(cellRECORD_TYPE);\n\n\t\t\t// 2: ROW_ID (must be lest than 30 letters)\n\t\t\tif (orderDTO.getId() >= 0L) {\n\t\t\t\tLS_ORDER_ID = orderDTO.getLsOrderId();\n\t\t\t\tlabelROW_ID = new Label(COL_LS_ORDER_ID-1, row, LS_ORDER_ID);\n\t\t\t\tcellROW_ID = (WritableCell) labelROW_ID;\n\t\t\t\tsheetToEdit.addCell(cellROW_ID);\n\t\t\t}\n\t\t\t\n\t\t\t// 3: CLIENT_OTHER_NAMES (must be lest than 15 letters)\n\t\t\tif (orderDTO.getClientOtherNames() != null && orderDTO.getClientOtherNames().length()<=15) {\n\t\t\t\tCLIENT_OTHER_NAMES = orderDTO.getClientOtherNames();\n\t\t\t\tlabelCLIENT_OTHER_NAMES = new Label(COL_CLIENT_OTHER_NAMES-1, row, CLIENT_OTHER_NAMES);\n\t\t\t\tcellCLIENT_OTHER_NAMES = (WritableCell) labelCLIENT_OTHER_NAMES;\n\t\t\t\tsheetToEdit.addCell(cellCLIENT_OTHER_NAMES);\n\t\t\t}else if( orderDTO.getClientOtherNames() != null && orderDTO.getClientOtherNames().length()>15){\n\t\t\t\tCLIENT_OTHER_NAMES = orderDTO.getClientOtherNames();\n\t\t\t\tlabelCLIENT_OTHER_NAMES = new Label(COL_CLIENT_OTHER_NAMES-1, row, ""?????"",cellFormat);\n\t\t\t\tcellCLIENT_OTHER_NAMES = (WritableCell) labelCLIENT_OTHER_NAMES;\n\t\t\t\tsheetToEdit.addCell(cellCLIENT_OTHER_NAMES);\n\t\t\t}\n\n\t\t\t// 4: CLIENT_FIRST_NAME (must be lest than 30 letters)\n\t\t\tif (orderDTO.getClientFirstName() != null && orderDTO.getClientFirstName().length()<=30) {\n\t\t\t\tCLIENT_FIRST_NAME = orderDTO.getClientFirstName();\n\t\t\t\tif(CLIENT_FIRST_NAME==null || CLIENT_FIRST_NAME.equals("""")){\n\t\t\t\t\tlabelCLIENT_FIRST_NAME = new Label(COL_CLIENT_FIRST_NAME-1, row, CLIENT_FIRST_NAME,cellFormat);\n\t\t\t\t}else{\n\t\t\t\t\tlabelCLIENT_FIRST_NAME = new Label(COL_CLIENT_FIRST_NAME-1, row, CLIENT_FIRST_NAME);\n\t\t\t\t}\n\t\t\t\tcellCLIENT_FIRST_NAME = (WritableCell) labelCLIENT_FIRST_NAME;\n\t\t\t\tsheetToEdit.addCell(cellCLIENT_FIRST_NAME);\n\t\t\t}else if(orderDTO.getClientFirstName() == null){\n\t\t\t\tlabelCLIENT_FIRST_NAME = new Label(COL_CLIENT_FIRST_NAME-1, row, """",cellFormat);\n\t\t\t\tcellCLIENT_FIRST_NAME = (WritableCell) labelCLIENT_FIRST_NAME;\n\t\t\t\tsheetToEdit.addCell(cellCLIENT_FIRST_NAME);\n\t\t\t}else{\n\t\t\t\tlabelCLIENT_FIRST_NAME = new Label(COL_CLIENT_FIRST_NAME-1, row, ""?????"",cellFormat);\n\t\t\t\tcellCLIENT_FIRST_NAME = (WritableCell) labelCLIENT_FIRST_NAME;\n\t\t\t\tsheetToEdit.addCell(cellCLIENT_FIRST_NAME);\n\t\t\t}\n\n\t\t\t// 5: CLIENT_LAST_NAME (must be lest than 40 letters)\n\t\t\tif (orderDTO.getClientLastName() != null && orderDTO.getClientLastName().length()<=40) {\n\t\t\t\tCLIENT_LAST_NAME = orderDTO.getClientLastName();\n\t\t\t\tif(CLIENT_LAST_NAME.equals("""")){\n\t\t\t\t\tlabelCLIENT_LAST_NAME = new Label(COL_CLIENT_LAST_NAME-1, row, CLIENT_LAST_NAME,cellFormat);\n\t\t\t\t}else{\n\t\t\t\t\tlabelCLIENT_LAST_NAME = new Label(COL_CLIENT_LAST_NAME-1, row, CLIENT_LAST_NAME);\n\t\t\t\t}\n\t\t\t\tcellCLIENT_LAST_NAME = (WritableCell) labelCLIENT_LAST_NAME;\n\t\t\t\tsheetToEdit.addCell(cellCLIENT_LAST_NAME);\n\t\t\t}else if(orderDTO.getClientLastName() == null){\n\t\t\t\tlabelCLIENT_LAST_NAME = new Label(COL_CLIENT_LAST_NAME-1, row, """",cellFormat);\n\t\t\t\tcellCLIENT_LAST_NAME = (WritableCell) labelCLIENT_LAST_NAME;\n\t\t\t\tsheetToEdit.addCell(cellCLIENT_LAST_NAME);\n\t\t\t}else{\n\t\t\t\tlabelCLIENT_LAST_NAME = new Label(COL_CLIENT_LAST_NAME-1, row, ""?????"",cellFormat);\n\t\t\t\tcellCLIENT_LAST_NAME = (WritableCell) labelCLIENT_LAST_NAME;\n\t\t\t\tsheetToEdit.addCell(cellCLIENT_LAST_NAME);\n\t\t\t}\n\t\t\t\n\t\t\t// 8: CLIENT_OTHER_ADRESS (must be lest than 44 letters)\n\t\t\tif (orderDTO.getClientOtherStreet()!= null && orderDTO.getClientOtherStreet().length()<=44) {\n\t\t\t\tCLIENT_OTHER_ADRESS = orderDTO.getClientOtherStreet();\n\t\t\t\tlabelCLIENT_OTHER_ADRESS = new Label(COL_CLIENT_OTHER_ADRESS-1, row, CLIENT_OTHER_ADRESS);\n\t\t\t\tcellCLIENT_OTHER_ADRESS = (WritableCell) labelCLIENT_OTHER_ADRESS;\n\t\t\t\tsheetToEdit.addCell(cellCLIENT_OTHER_ADRESS);\n\t\t\t}else if(orderDTO.getClientOtherStreet()== null){\n\t\t\t\tlabelCLIENT_OTHER_ADRESS = new Label(COL_CLIENT_OTHER_ADRESS-1, row, """");\n\t\t\t\tcellCLIENT_OTHER_ADRESS = (WritableCell) labelCLIENT_OTHER_ADRESS;\n\t\t\t\tsheetToEdit.addCell(cellCLIENT_OTHER_ADRESS);\n\t\t\t}else{\n\t\t\t\tlabelCLIENT_OTHER_ADRESS = new Label(COL_CLIENT_OTHER_ADRESS-1, row, ""?????"",cellFormat);\n\t\t\t\tcellCLIENT_OTHER_ADRESS = (WritableCell) labelCLIENT_OTHER_ADRESS;\n\t\t\t\tsheetToEdit.addCell(cellCLIENT_OTHER_ADRESS);\n\t\t\t}\n\t\t\t\n\t\t\t// 9: CLIENT_STREET (must be lest than 44 letters)\n\t\t\tif (orderDTO.getClientStreet() != null && orderDTO.getClientStreet().length()<=44) {\n\t\t\t\tCLIENT_STREET = orderDTO.getClientStreet();\n\t\t\t\tif(CLIENT_STREET==null || CLIENT_STREET.equals("""")){\n\t\t\t\t\tlabelCLIENT_STREET = new Label(COL_CLIENT_STREET-1, row, CLIENT_STREET,cellFormat);\n\t\t\t\t}else{\n\t\t\t\t\tlabelCLIENT_STREET = new Label(COL_CLIENT_STREET-1, row, CLIENT_STREET);\n\t\t\t\t}\n\t\t\t\tcellCLIENT_STREET = (WritableCell) labelCLIENT_STREET;\n\t\t\t\tsheetToEdit.addCell(cellCLIENT_STREET);\n\t\t\t}else if(orderDTO.getClientStreet() == null){\n\t\t\t\tlabelCLIENT_STREET = new Label(COL_CLIENT_STREET-1, row, """",cellFormat);\n\t\t\t\tcellCLIENT_STREET = (WritableCell) labelCLIENT_STREET;\n\t\t\t\tsheetToEdit.addCell(cellCLIENT_STREET);\n\t\t\t}else{\n\t\t\t\tlabelCLIENT_STREET = new Label(COL_CLIENT_STREET-1, row, ""?????"",cellFormat);\n\t\t\t\tcellCLIENT_STREET = (WritableCell) labelCLIENT_STREET;\n\t\t\t\tsheetToEdit.addCell(cellCLIENT_STREET);\n\t\t\t}\n\t\t\t\n\t\t\t// 11: CLIENT_CITY (must be lest than 25 letters)\n\t\t\tif (orderDTO.getClientCity()!= null && orderDTO.getClientCity().length()<=25) {\n\t\t\t\tCLIENT_CITY = orderDTO.getClientCity();\n\t\t\t\tif(CLIENT_CITY.equals("""")){\n\t\t\t\t\tlabelCLIENT_CITY = new Label(COL_CLIENT_CITY-1, row, CLIENT_CITY,cellFormat);\n\t\t\t\t}else{\n\t\t\t\t\tlabelCLIENT_CITY = new Label(COL_CLIENT_CITY-1, row, CLIENT_CITY);\n\t\t\t\t}\n\t\t\t\tcellCLIENT_CITY = (WritableCell) labelCLIENT_CITY;\n\t\t\t\tsheetToEdit.addCell(cellCLIENT_CITY);\n\t\t\t}else if(orderDTO.getClientCity()== null){\n\t\t\t\tlabelCLIENT_CITY = new Label(COL_CLIENT_CITY-1, row, """",cellFormat);\n\t\t\t\tcellCLIENT_CITY = (WritableCell) labelCLIENT_CITY;\n\t\t\t\tsheetToEdit.addCell(cellCLIENT_CITY);\n\t\t\t}else{\n\t\t\t\tlabelCLIENT_CITY = new Label(COL_CLIENT_CITY-1, row, ""?????"",cellFormat);\n\t\t\t\tcellCLIENT_CITY = (WritableCell) labelCLIENT_CITY;\n\t\t\t\tsheetToEdit.addCell(cellCLIENT_CITY);\n\t\t\t}\n\t\t\t\n\t\t\t// 12: CLIENT_PROVINCE (must be lest than 20 letters)\n\t\t\tif (orderDTO.getClientProvince()!= null && orderDTO.getClientProvince().length()<=20) {\n\t\t\t\tCLIENT_PROVINCE = orderDTO.getClientProvince();\n\t\t\t\tif(CLIENT_PROVINCE==null || CLIENT_PROVINCE.equals("""")){\n\t\t\t\t\tlabelCLIENT_PROVINCE = new Label(COL_CLIENT_PROVINCE-1, row, CLIENT_PROVINCE,cellFormat);\n\t\t\t\t}else{\n\t\t\t\t\tlabelCLIENT_PROVINCE = new Label(COL_CLIENT_PROVINCE-1, row, CLIENT_PROVINCE);\n\t\t\t\t}\n\t\t\t\tcellCLIENT_PROVINCE = (WritableCell) labelCLIENT_PROVINCE;\n\t\t\t\tsheetToEdit.addCell(cellCLIENT_PROVINCE);\n\t\t\t}else if(orderDTO.getClientProvince()== null){\n\t\t\t\tlabelCLIENT_PROVINCE = new Label(COL_CLIENT_PROVINCE-1, row, """",cellFormat);\n\t\t\t\tcellCLIENT_PROVINCE = (WritableCell) labelCLIENT_PROVINCE;\n\t\t\t\tsheetToEdit.addCell(cellCLIENT_PROVINCE);\n\t\t\t}else{\n\t\t\t\tlabelCLIENT_PROVINCE = new Label(COL_CLIENT_PROVINCE-1, row, ""?????"",cellFormat);\n\t\t\t\tcellCLIENT_PROVINCE = (WritableCell) labelCLIENT_PROVINCE;\n\t\t\t\tsheetToEdit.addCell(cellCLIENT_PROVINCE);\n\t\t\t}\n\t\t\t\n\t\t\t// 13: CLIENT_POSTAL_CODE (must be lest than 14 letters)\n\t\t\tif (orderDTO.getClientPostalCode()!= null && orderDTO.getClientPostalCode().length()<=14) {\n\t\t\t\tCLIENT_POSTAL_CODE = orderDTO.getClientPostalCode();\n\t\t\t\tif(CLIENT_POSTAL_CODE.equals("""")){\n\t\t\t\t\tlabelCLIENT_POSTAL_CODE = new Label(COL_CLIENT_POSTAL_CODE-1, row, CLIENT_POSTAL_CODE,cellFormat);\n\t\t\t\t}else{\n\t\t\t\t\tlabelCLIENT_POSTAL_CODE = new Label(COL_CLIENT_POSTAL_CODE-1, row, CLIENT_POSTAL_CODE);\n\t\t\t\t}\n\t\t\t\tcellCLIENT_POSTAL_CODE = (WritableCell) labelCLIENT_POSTAL_CODE;\n\t\t\t\tsheetToEdit.addCell(cellCLIENT_POSTAL_CODE);\n\t\t\t}else if(orderDTO.getClientPostalCode()==null){\n\t\t\t\tlabelCLIENT_POSTAL_CODE = new Label(COL_CLIENT_POSTAL_CODE-1, row, """",cellFormat);\n\t\t\t\tcellCLIENT_POSTAL_CODE = (WritableCell) labelCLIENT_POSTAL_CODE;\n\t\t\t\tsheetToEdit.addCell(cellCLIENT_POSTAL_CODE);\n\t\t\t}else{\n\t\t\t\tlabelCLIENT_POSTAL_CODE = new Label(COL_CLIENT_POSTAL_CODE-1, row, ""?????"",cellFormat);\n\t\t\t\tcellCLIENT_POSTAL_CODE = (WritableCell) labelCLIENT_POSTAL_CODE;\n\t\t\t\tsheetToEdit.addCell(cellCLIENT_POSTAL_CODE);\n\t\t\t}\n\t\t\t\n\t\t\t// 14: CONTRY CODE (must be always CA)\n\t\t\t\tlabelCONTRY_CODE = new Label(COL_CONTRY_CODE-1, row, ""CA"");\n\t\t\t\tcellCONTRY_CODE = (WritableCell) labelCONTRY_CODE;\n\t\t\t\tsheetToEdit.addCell(cellCONTRY_CODE);\n\n\t\t\t// 15: CLIENT_PHONE (must be lest than 25 letters)\n\t\t\tif (orderDTO.getClientPhone()!= null && orderDTO.getClientPhone().length()<=25) {\n\t\t\t\tCLIENT_PHONE = orderDTO.getClientPhone();\n\t\t\t\tlabelCLIENT_PHONE = new Label(COL_CLIENT_PHONE-1, row, CLIENT_PHONE);\n\t\t\t\tcellCLIENT_PHONE = (WritableCell) labelCLIENT_PHONE;\n\t\t\t\tsheetToEdit.addCell(cellCLIENT_PHONE);\n\t\t\t}else if(orderDTO.getClientPhone()!= null && orderDTO.getClientPhone().length()>25){\n\t\t\t\tlabelCLIENT_PHONE = new Label(COL_CLIENT_PHONE-1, row, ""?????"",cellFormat);\n\t\t\t\tcellCLIENT_PHONE = (WritableCell) labelCLIENT_PHONE;\n\t\t\t\tsheetToEdit.addCell(cellCLIENT_PHONE);\n\t\t\t}\n\t\t\t\n\t\t\t// 16: CLIENT_EMAIL (must be lest than 60 letters)\n\t\t\tif (orderDTO.getClientEmail()!= null && orderDTO.getClientEmail().length()<=60) {\n\t\t\t\tCLIENT_EMAIL = orderDTO.getClientEmail();\n\t\t\t\tlabelCLIENT_EMAIL = new Label(COL_CLIENT_EMAIL-1, row, CLIENT_EMAIL);\n\t\t\t\tcellCLIENT_EMAIL = (WritableCell) labelCLIENT_EMAIL;\n\t\t\t\tsheetToEdit.addCell(cellCLIENT_EMAIL);\n\t\t\t}else if(orderDTO.getClientEmail()!= null && orderDTO.getClientEmail().length()>60){\n\t\t\t\tlabelCLIENT_EMAIL = new Label(COL_CLIENT_EMAIL-1, row, ""?????"",cellFormat);\n\t\t\t\tcellCLIENT_EMAIL = (WritableCell) labelCLIENT_EMAIL;\n\t\t\t\tsheetToEdit.addCell(cellCLIENT_EMAIL);\n\t\t\t}\n\t\t\t\n\t\t\t++row;\t\n\t\t}\n\t}\t\n\t\tworkbookCopy.write();\n\t\tworkbookCopy.close();\n\t\texistingWorkbook.close();\n\t\t\n\t\t} catch (Exception x) {\n\t\tx.printStackTrace();\n\t\t}\n\t\tSystem.out.println(""XLS PROGRAM SUCCESSFULLY EXECUTED!!!"");\n\t}\n\t\n\t/**----------------------------------------------------------\n\t \t*UPDATE TABLE ORDERS ROWS IN DATABASES FROM XLS FILE*\n\t \t*WE SAVE TRACKING NUMBER,SHUPPING DATE AND SHIPPING PRICE*\n\t  -----------------------------------------------------------*/\n\t@Override\n\tpublic void updateOrdersRowsFromAdminXLS(String destFileAdminXLS)throws Exception{\n\t\tString errorReport="""";\n\t\t//variable indicating the numbers of columns in the XLS file\n\t\tint ROW_TO_START = 1;\n\t\tfinal int COL_LS_ORDER_ID=31;\n\t\tfinal int COL_TRACKING_NUMBER=17;\n\t\tfinal int COL_SHIPPING_PRICE=10;\n\t\tString  strSHIPPING_PRICE="""";\n\t\t//Values of cells\n\t\tString  LS_ORDER_ID="""";\n\t\tDate SHIPPED_DATE=null;\n\t\tString TRACKING_NUMBER = null;\n\t\tDouble SHIPPING_PRICE = null;\n\t\t//Cells\n\t\tCell cellLS_ORDER_ID= null;\n\t\tCell cellTRACKING_NUMBER= null;\n\t\tCell cellSHIPPING_PRICE= null;\n\t\t\n\t//try {\n\t\tWorkbook existingWorkbook = Workbook.getWorkbook(new File(destFileAdminXLS+""ordersAdminImport.xls""));\n\t\tSheet sheetToRead=existingWorkbook.getSheet(0);\n\t\tint ROW_MAX = sheetToRead.getRows();\n\t\tfor(int row=ROW_TO_START; row< ROW_MAX;row++) {\n\n\t\t\t//--------------- 31: LS_ORDER_ID\n\t\t\tcellLS_ORDER_ID = sheetToRead.getCell(COL_LS_ORDER_ID-1, row);\t\t\t\n\t\t\tif(cellLS_ORDER_ID!=null)LS_ORDER_ID = cellLS_ORDER_ID.getContents();\n\t\t\tif(LS_ORDER_ID==null || LS_ORDER_ID.equals("""")){\n\t\t\t\terrorReport+=""Order ID:""+LS_ORDER_ID+"" in line:""+row+"" |---->dosen't exist \\n"";\n\t\t\t}\n\n\t\t\t//--------------- SHIPPED_DATE\n\t\t\tSHIPPED_DATE=new Date();\n\n\t\t\t//--------------- 17: TRACKING_NUMBER\n\t\t\tcellTRACKING_NUMBER = sheetToRead.getCell(COL_TRACKING_NUMBER-1, row);\t\t\t\n\t\t\tif(cellTRACKING_NUMBER!=null)TRACKING_NUMBER = cellTRACKING_NUMBER.getContents();\n\t\t\tif(TRACKING_NUMBER==null || TRACKING_NUMBER.equals("""")){\n\t\t\t\terrorReport+=""TRACKING_NUMBER:""+TRACKING_NUMBER+"" in line:""+row+"" |---->is null \\n"";\n\t\t\t}\n\t\t\t\n\t\t\t//--------------- 10:SHIPPING_PRICE\n\t\t\tcellSHIPPING_PRICE = sheetToRead.getCell(COL_SHIPPING_PRICE-1, row);\t\t\t\n\t\t\tif(cellSHIPPING_PRICE!=null){\n\t\t\t\tstrSHIPPING_PRICE = cellSHIPPING_PRICE.getContents();\n\t\t\t\tstrSHIPPING_PRICE=strSHIPPING_PRICE.replaceAll("" "", """");\n\t\t\t\tif(strSHIPPING_PRICE!=null && !strSHIPPING_PRICE.equals("""")){\n\t\t\t\t\tint index=strSHIPPING_PRICE.indexOf("","");\n\t\t\t\t\tif(index>=0){\n\t\t\t\t\t\tString strSHIPPING_PRICE1=strSHIPPING_PRICE.substring(0, index);\n\t\t\t\t\t\tString strSHIPPING_PRICE2= strSHIPPING_PRICE.substring(index+1, strSHIPPING_PRICE.length());\n\t\t\t\t\t\tstrSHIPPING_PRICE=strSHIPPING_PRICE1+"".""+strSHIPPING_PRICE2;\n\t\t\t\t\t}\n\t\t\t\t}else errorReport+=""SHIPPING_PRICE:""+strSHIPPING_PRICE+"" in line:""+row+"" |---->is null \\n"";\n\t\t\t\tSHIPPING_PRICE=null;\n              \ttry {\n              \t\tSHIPPING_PRICE = Double.parseDouble(strSHIPPING_PRICE);\n              \t}\n              \tcatch (Exception pe) {\n              \t\tSHIPPING_PRICE=null;\n              \t}\n\t\t\t}\n\n\t\t\t//--------------- Update Row if shipped\n\t\t\tif(LS_ORDER_ID!=null){\n\t\t\t\tOrdersRows orderRow=getRowByLsOrderId(LS_ORDER_ID);\n\t\t\t\tif(orderRow!=null){\n\t\t\t\t\tif( (TRACKING_NUMBER!=null && !TRACKING_NUMBER.equals(""""))){\n\t\t\t\t\t\torderRow.setShippedDate(SHIPPED_DATE);\n\t\t\t\t\t\torderRow.setShippingPrice(SHIPPING_PRICE);\n\t\t\t\t\t\torderRow.setTrackingNumber(TRACKING_NUMBER);\n\t\t\t\t\t\tmakeRowOrderInShippedById(orderRow);\n\t\t\t\t\t}else{\n\t\t\t\t\t\tmakeRowOrderInOpenById(orderRow);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t//} catch (Exception x) {\n\t//\tx.printStackTrace();\n\t//}\n\tcreateLogsFileStock(destFileAdminXLS, errorReport,2);\n\tFile ordersAdminImport=new File(destFileAdminXLS+""ordersAdminImport.xls"");\n\tordersAdminImport.delete();\n\t\n  }\n\t\n\t/**----------------------------------------------------------\n\t \t*UPDATE TABLE STOCK IN DATABASES FROM XLS FILE*\n\t  -----------------------------------------------------------*/\n\t@Override\n\tpublic void updateStockFromStockXLS(String destFileStockXLS){\n\t\tString errorReport="""";\n\t\t//variable indicating the numbers of columns in the XLS file\n\t\tint ROW_TO_START = 1;\n\t\tfinal int COL_LS_PRODUCT_ID=1;\n\t\tfinal int COL_STOCK=2;\n\n\t\tString  strSTOCK="""";\n\t\t\n\t\t//Values of cells\n\t\tString  LS_PRODUCT_ID="""";\n\t\tDouble STOCK = null;\n\t\n\t\t//Cells\n\t\tCell cellLS_PRODUCT_ID= null;\n\t\tCell cellSTOCK= null;\n\n\ttry {\n\t\tproductService=serviceLocator.getProductService();\n\t\tWorkbook existingWorkbook = Workbook.getWorkbook(new File(destFileStockXLS+""stock.xls""));\n\t\tSheet sheetToRead=existingWorkbook.getSheet(0);\n\t\tint ROW_MAX = sheetToRead.getRows();\n\t\tfor(int row=ROW_TO_START; row< ROW_MAX;row++) {\n\n\t\t\t//--------------- 1: LS_PRODUCT_ID\n\t\t\tcellLS_PRODUCT_ID = sheetToRead.getCell(COL_LS_PRODUCT_ID-1, row);\t\t\t\n\t\t\tif(cellLS_PRODUCT_ID!=null)LS_PRODUCT_ID = cellLS_PRODUCT_ID.getContents();\n\t\t\tSystem.out.println(""LS_PRODUCT_ID:""+LS_PRODUCT_ID);\n\t\t\tif(LS_PRODUCT_ID==null || LS_PRODUCT_ID.equals("""")){\n\t\t\t\terrorReport+=""LS_PRODUCT_ID:""+LS_PRODUCT_ID+"" in line:""+row+"" |---->dosen't exist \\n"";\n\t\t\t}else{\n\t\t\t\tint index=LS_PRODUCT_ID.indexOf(""/"");\n\t\t\t\tif(index>0)LS_PRODUCT_ID=LS_PRODUCT_ID.substring(0, index);\n\t\t\t\t\n\t\t\t}\n\n\t\t\t//--------------- 2:STOCK\n\t\t\tcellSTOCK = sheetToRead.getCell(COL_STOCK-1, row);\t\t\t\n\t\t\tif(cellSTOCK!=null){\n\t\t\t\tstrSTOCK = cellSTOCK.getContents();\n\t\t\t\tstrSTOCK=strSTOCK.replaceAll("" "", """");\n\t\t\t\tif(strSTOCK!=null && !strSTOCK.equals("""")){\n\t\t\t\t\tint index=strSTOCK.indexOf("","");\n\t\t\t\t\tif(index>=0){\n\t\t\t\t\t\tString strSTOCK1=strSTOCK.substring(0, index);\n\t\t\t\t\t\tString strSTOCK2= strSTOCK.substring(index+1, strSTOCK.length());\n\t\t\t\t\t\tstrSTOCK=strSTOCK1+"".""+strSTOCK2;\n\t\t\t\t\t}\n\t\t\t\t}else errorReport+=""STOCK:""+strSTOCK+"" in line:""+row+"" |---->is null \\n"";\n\t\t\t\tSTOCK=null;\n              \ttry {\n              \t\tSTOCK = Double.parseDouble(strSTOCK);\n              \t}\n              \tcatch (Exception pe) {\n              \t\tSTOCK=null;\n              \t}\n\t\t\t}\n\t\t\t\n\t\t\t//--------------- Update Row if shipped\n\t\t\tif(LS_PRODUCT_ID!=null){\n\t\t\t\tProductDTO pDTO=productService.getProductByLsProductId(LS_PRODUCT_ID);\n\t\t\t\tif(pDTO!=null){\n\t\t\t\t\tpDTO.setStock(STOCK);\n\t\t\t\t\tif(isExistProductInStock(pDTO)){\n\t\t\t\t\t\tupdateStockByLsProductId(pDTO);\n\t\t\t\t\t}else{\n\t\t\t\t\t\tinsertProductInStock(pDTO);\n\t\t\t\t\t}\n\t\t\t\t}else  errorReport+=""LS_PRODUCT_ID:""+LS_PRODUCT_ID+"" IN THE LINE NUMBER:""+row+"" |--->DOSEN'T EXIST!\\n"";\n\t\t\t}else errorReport+=""LS_PRODUCT_ID IN THE LINE NUMBER:""+row+"" |--->IS NULL\\n"";\n\t\t}\n\t} catch (Exception x) {\n\t\tx.printStackTrace();\n\t}\n\tcreateLogsFileStock(destFileStockXLS, errorReport,1);\n\t}\n\t\n\t/**----------------------------------------------------------\n\t \t*CREATION FILE LOGS OF UPDATING STOCK*\n\t  -----------------------------------------------------------*/\n\t@Override\n\tpublic void createLogsFileStock(String folderStock, String errorReport,int option){\n\n\t\ttry{\n\t\t\tSimpleDateFormat frm=new SimpleDateFormat(""yyyy-MM-dd"");\n\t\t\tString logFileName = null;\n\t\t\tString logFileNameHystic=null;\n\t\t\tDate date=new Date();\n\t\t\tCalendar myCalendar = Calendar.getInstance();\n\t\t\tmyCalendar.setTime(date);\n\t\t\tmyCalendar.add(Calendar.DATE, -6);\n\t\t\tFile folderLog = new File(folderStock+""logs""); \n\t\t\tfolderLog.mkdirs();\n\t\t\tswitch (option) {\n\t\t\tcase 1://STOCK\n\t\t\t\tlogFileName=folderStock+""logs/stock_""+frm.format(date)+"".txt"";\n\t\t\t\tlogFileNameHystic=folderStock+""logs/stock_"";\n\t\t\t\tbreak;\n\t\t\tcase 2://UPDATE ORDERS\n\t\t\t\tlogFileName=folderStock+""logs/orders_""+frm.format(date)+"".txt"";\n\t\t\t\tlogFileNameHystic=folderStock+""logs/orders_"";\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\tfor(int i=1; i<=6;i++){\n\t\t\t\tmyCalendar.add(Calendar.DATE, -1);\n\t\t\t\tDate d=myCalendar.getTime();\n\t\t\t\tString logFileNameHysticItem=logFileNameHystic+frm.format(d);\t\t\n\t\t\t\tFile fileLog=new File(logFileNameHysticItem+"".txt"");\n\t\t\t\tfileLog.delete();\t\t\n\t\t\t}\n\t\t\tPrintWriter pw= new PrintWriter(new FileWriter(logFileName,true),true);\n\t\t\tDate today=new Date();\n\t\t\tSimpleDateFormat frmTime=new SimpleDateFormat(""dd/MM/yyyy HH:mm:ss"");\n\t\t\tString strToday=frmTime.format(today);\n\t\t\tString rapport=""=====================\\n"";\n\t\t\trapport=rapport+strToday+""\\n""+""=====================\\n"";\t\n\t\t\tpw.println(rapport+errorReport);\n\t\t\tpw.close();\n\t\t}catch(Exception e){\n\t\t\te.printStackTrace();\n\t\tSystem.out.println(""Dossier ou lecteur invalide"");\t\n\t\t}\n\t}\n\n\t/**----------------------------------------------------------\n\t \t*PARCING CSV*\n\t  -----------------------------------------------------------*/\n\t@Override\n\t public void csvParsing(String csvFolder,String userLogin){\n\t\t \n    \tBufferedReader pr=null;\n\t\tString result="""";\n\t\tString ligne="""";\n\t\tUser user=null;\n\t\tInteger id=0;\n\t\tArrayList<String[]> arraylist=new ArrayList<String[]>();\n\t\ttry{\n\t\t\tuserService= serviceLocator.getUserService();\n\t\t\tuser=userService.getUserByLogin(userLogin);\n\t\t\tid=Integer.parseInt(user.getId().toString());\n\t\t\tpr=new BufferedReader(new FileReader(csvFolder+userLogin+"".csv"")); \n\t\t\twhile((ligne=pr.readLine())!=null){\n\t\t\t\tligne=ligne.replaceAll(""\\"""", """");\n\t\t\t\tString[] data=ligne.split("","");\n\t\t\t\tarraylist.add(data);\n\t\t\t\tresult+=ligne;\n\t\t\t\tSystem.out.println(ligne);\t\n\t\t\t} //End loop while\n\t\t\tpr.close();\n\t\t}catch(Exception e){\n\t\t\tSystem.out.println(""Folder or drive disk not valid"");\t\n\t\t}\n\t\tfinal String sheetName = ""Sheet1"";\n\t\tint row = 0;\n\t\ttry {\n\t\t\t\tWorkbook existingWorkbook = Workbook.getWorkbook(new File(csvFolder+""transCsvTemplate.xls""));\n\t\t\t\tWritableWorkbook workbookCopy = Workbook.createWorkbook(new File(csvFolder+userLogin+"".xls""), existingWorkbook);\n\t\t\t\tWritableSheet sheetToEdit = workbookCopy.getSheet(sheetName);\n\t\t\t\t//LABELS\n\t\t\t\tLabel label=null;\n\t\t\t\trow=0;\n\t\t\t\tint col=0;\n\t\t\t    // Create cell font and format\n\t\t\t    WritableFont cellFontHeader = new WritableFont(WritableFont.TIMES, 12);\n\t\t\t    cellFontHeader.setColour(Colour.BLACK);\n\t\t\t    cellFontHeader.setBoldStyle(WritableFont.BOLD);\n\t\t\t    WritableFont cellFontData = new WritableFont(WritableFont.TIMES);\n\t\t\t    WritableCellFormat cellFormatHeader = new WritableCellFormat(cellFontHeader);\n\t\t\t    WritableCellFormat cellFormatData = new WritableCellFormat(cellFontData);\n\t\t\t    cellFormatHeader.setVerticalAlignment(VerticalAlignment.CENTRE);\n\t\t\t    cellFormatHeader.setBorder(Border.ALL, BorderLineStyle.HAIR);\n\t\t\t    cellFormatData.setVerticalAlignment(VerticalAlignment.CENTRE);\n\t\t\t\tWritableCell cell;\n\t\t\t\tfor (String[] d : arraylist) {\n\t\t\t\t\tcol=0;\n\t\t\t\t\tfor(int i=0;i< d.length;i++){\n\t\t\t\t\t\tif(row==0){\n\t\t\t\t\t\t\tlabel = new Label(col, row, d[col],cellFormatHeader);\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tString lsOrderId=d[col];\n\t\t\t\t\t\t\tif(col==16){\n\t\t\t\t\t\t\t\tswitch (id) {\n\t\t\t\t\t\t\t\tcase 39:\n\t\t\t\t\t\t\t\t\tlsOrderId=lsOrderId.replace(""LYS-CA-AC-"", """");\n\t\t\t\t\t\t\t\t\tlsOrderId=user.getCode()+lsOrderId;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\t\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tlabel = new Label(col, row, lsOrderId,cellFormatData);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcell = (WritableCell) label;\n\t\t\t\t\t\tsheetToEdit.addCell(cell);\n\t\t\t\t\t\tcol++;\n\t\t\t\t\t}\n\t\t\t\t\trow++;\n\t\t\t\t}\t\n\t\t\t\tworkbookCopy.write();\n\t\t\t\tworkbookCopy.close();\n\t\t\t\texistingWorkbook.close();\n\t\t\n\t\t} catch (Exception x) {\n\t\tx.printStackTrace();\n\t\t}\n    }\n\n\n\tpublic OrdersDTO orderDTOSplitFirstLastName(OrdersDTO orderDTO,int option){\n\t\tString whole = orderDTO.getClientLastName();\n\t\tString[] elems = null;\n\t\tif (whole != null) {\n\t\t\telems = whole.split(""\\\\s"");\n\t\t\tswitch (option) {\n\t\t\tcase 0:\n\t\t\t\torderDTO.setClientFirstName("""");\n\t\t\t\torderDTO.setClientLastName("""");\n\t\t\t\tbreak;\n\t\t\tcase 1:\n\t\t\t\torderDTO.setClientFirstName("""");\n\t\t\t\torderDTO.setClientLastName("""");\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\torderDTO.setClientFirstName("""");\n\t\t\t\torderDTO.setClientLastName(elems[1]);\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\torderDTO.setClientFirstName(elems[2]);\n\t\t\t\torderDTO.setClientLastName(elems[1]);\n\t\t\t\tbreak;\n\t\t\tcase 4:\n\t\t\t\torderDTO.setClientFirstName(elems[3]);\n\t\t\t\torderDTO.setClientLastName(elems[1]+"" ""+elems[2]);\n\t\t\t\tbreak;\n\t\t\tcase 5:\n\t\t\t\torderDTO.setClientFirstName(elems[4]);\n\t\t\t\torderDTO.setClientLastName(elems[1] + "" "" + elems[2]+"" ""+ elems[3]);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t}\n\t\treturn orderDTO;\n\t}\n\t\n\t\n\t\n}\n\n----------------------------------- SOURCE END -------------------------------------",1380644916104
error,log,,,"Problems occurred when invoking code from plug-in: ""org.eclipse.jdt.ui"".",1380644916104
error,log,,,"Error in JDT Core during reconcile",1380644916104
activated,editor,org.eclipse.jdt.ui,3.6.2.r362_v20110203,"org.eclipse.jdt.ui.CompilationUnitEditor",1380644918491
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.text.contentAssist.proposals",1380644980906
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.cut",1380644988784
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.paste",1380644992014
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.delete",1380644996116
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.copy",1380645018144
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.paste",1380645021576
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.copy",1380645043728
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.copy",1380645043977
activated,editor,org.eclipse.jdt.ui,3.6.2.r362_v20110203,"org.eclipse.jdt.ui.PropertiesFileEditor",1380645047799
executed,command,org.eclipse.ui.workbench.texteditor,3.6.1.r361_v20100714-0800,"org.eclipse.ui.edit.text.goto.lineEnd",1380645050716
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.paste",1380645052807
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.copy",1380645115160
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.copy",1380645115457
