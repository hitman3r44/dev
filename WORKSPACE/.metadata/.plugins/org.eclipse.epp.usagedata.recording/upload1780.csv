what,kind,bundleId,bundleVersion,description,time
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.copy",1425317771531
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.delete",1425317780064
executed,command,org.eclipse.ui.workbench.texteditor,3.6.1.r361_v20100714-0800,"org.eclipse.ui.edit.text.goto.lineEnd",1425317789211
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.delete",1425317798776
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.paste",1425317805449
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.text.contentAssist.proposals",1425317850699
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.copy",1425317866643
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.text.contentAssist.proposals",1425317879720
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.text.contentAssist.proposals",1425317884774
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.copy",1425317892076
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.paste",1425317894994
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1425317900412
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1425317900620
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.delete",1425317908034
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.delete",1425317908407
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.copy",1425317915675
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.delete",1425317919514
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.file.save",1425317921503
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1425317922444
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1425317922582
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1425317924919
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1425317927061
activated,view,org.eclipse.ui.console,3.5.0.v20100526,"org.eclipse.ui.console.ConsoleView",1425317927074
activated,view,org.eclipse.wst.server.ui,1.1.207.v20110119,"org.eclipse.wst.server.ui.ServersView",1425317927457
activated,view,org.eclipse.ui.console,3.5.0.v20100526,"org.eclipse.ui.console.ConsoleView",1425317928885
activated,view,org.eclipse.wst.server.ui,1.1.207.v20110119,"org.eclipse.wst.server.ui.ServersView",1425317931642
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1425317934049
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1425317934982
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1425317938006
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1425317939976
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1425317940313
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1425317971172
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1425317976773
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1425317978078
executed,command,org.eclipse.ui.ide,3.6.2.M20101201-0800,"org.eclipse.ui.project.cleanAction",1425317978089
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1425317978367
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1425317978513
error,log,,,"Exception occurred during problem detection:\n----------------------------------- SOURCE BEGIN -------------------------------------\npackage com.loyauty.web.struts.action.orders;\n\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.io.StringReader;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Hashtable;\nimport java.util.List;\nimport javax.servlet.http.HttpSession;\nimport org.apache.pdfbox.cos.COSDocument;\nimport org.apache.pdfbox.pdfparser.PDFParser;\nimport org.apache.pdfbox.pdmodel.PDDocument;\nimport org.apache.pdfbox.util.PDFTextStripper;\n\nimport lombok.Getter;\nimport lombok.Setter;\n\nimport com.loyauty.exception.ServiceException;\nimport com.loyauty.exception.ServiceLocatorException;\nimport com.loyauty.model.OrdersRows;\nimport com.loyauty.model.User;\nimport com.loyauty.service.core.DTOFactory;\nimport com.loyauty.service.core.dto.BasicUserDTO;\nimport com.loyauty.service.core.dto.CurrencyDTO;\nimport com.loyauty.service.core.dto.OrdersDTO;\nimport com.loyauty.service.core.dto.UserConnectionDTO;\nimport com.loyauty.service.core.dto.UserFileDataRecoveryDTO;\nimport com.loyauty.service.core.dto.UserFileRecoveryDTO;\nimport com.loyauty.service.core.dto.UserFilesDownloadedDTO;\nimport com.loyauty.service.core.dto.UserSessionDTO;\nimport com.loyauty.service.orders.OrdersService;\nimport com.loyauty.service.user.UserService;\nimport com.loyauty.web.struts.action.LoyautyAction;\n\n\npublic class CreateOrdersAutoRemoteFile extends LoyautyAction {\n\tprivate static final long serialVersionUID = -1238269595572206024L;\n\n\tprivate UserService userService;\n\tprivate OrdersService orderService;\n\t@Getter @Setter\n\tprivate String userLogin;\n\t@Getter @Setter\n\tprivate List<User> usersList;\n\tprivate static int USER_TYPE = 2;\n\t@Getter @Setter\n\tprivate File orderFile;\n\t@Getter @Setter\n\tList<OrdersDTO>listOrdersDTO;\n\tHashtable<String, OrdersDTO>hashOrders;\n\t@Getter @Setter\n\tprivate String orderSelected;\n\t@Getter @Setter\n\tprivate Long showOrderSignal;\n\t@Getter @Setter\n\tprivate Long okShowOrderSignal;\n\t@Getter @Setter\n\tprivate Long saveOrdersSignal;\n\t@Getter @Setter\n\tprivate Long confirmSaveOrdersSignal;\n\t@Getter @Setter\n\tprivate Long duplicateOrderSignal;\n\t@Getter @Setter\n\tprivate String lsOrderId;\n\t@Getter @Setter\n\tprivate String message;\n\t@Getter @Setter\n\tprivate String userLogo;\n\t@Getter @Setter\n\tInteger indexOrder;\n\t@Getter @Setter\n\tInteger indexRow;\n\t@Getter @Setter\n\tprivate Double quantityToChange;\n\t@Getter @Setter\n\tprivate Long quantityToChangeSignal;\n\t@Getter @Setter\n\tprivate Long checkBoxPrintSignal;\n\t@Getter @Setter\n\tprivate Long okSaveSuccessPopSignal;\n\t@Getter @Setter\n\tprivate Boolean checkBoxPrintEtem;\n\t@Getter @Setter\n\tprivate Boolean checkBoxPrint;\n\t@Getter @Setter\n\tprivate Long pageTop=0L;\n\t@Getter @Setter\n\tprivate Integer notSaved;\n\t@Getter @Setter\n\tprivate String showNotificationPop=""visibility:hidden;display:none;"";\n\t@Getter @Setter\n\tprivate String showSaveSuccessPop=""visibility:hidden;display:none;"";\n\tprivate Boolean listNotSavedAtFirst;\n\t@Getter @Setter\n\tprivate String oploadedFileName;\n\t@Getter @Setter\n\tList<UserFilesDownloadedDTO>userFilelist;\n\t@Getter @Setter\n\tprivate Long userIdFindedSignal;\n\tprivate String filePath;\n\t@Getter @Setter\n\tprivate String fileToImport;\n\t@Getter @Setter\n\tprivate Boolean checkAllFiles;\n\tprivate Integer nbProductOrderNumber;\n\tpublic  CreateOrdersAutoRemoteFile() throws ServiceLocatorException {\n\t\tsuper();\t\n\t\tuserService = getServiceLocator().getUserService();\n\t\torderService = getServiceLocator().getOrderService();\n\t\tlistOrdersDTO=new ArrayList<OrdersDTO>();\n\t\tcheckAllFiles=false;\n\t}\n\n\t/*=========================================================================================\n\t \t\t\t\t\t\t\t\t\t\t\tmethod execute\n\t  =========================================================================================*/\n\t@SuppressWarnings({ ""rawtypes"", ""unchecked"" })\n\t@Override\n\tpublic String execute() throws Exception {\n\t\thashOrders=new Hashtable<String, OrdersDTO>();\n\t\tHttpSession session = request.getSession(true);\n\t\tfilePath = session.getServletContext().getRealPath(""/"");\n\t\tlistOrdersDTO=\t(ArrayList<OrdersDTO>)session.getAttribute(""listOrdersDTOAuto"");\n\t\tnotSaved=orderService.nbOrdersNotSaved(listOrdersDTO);\n\t\tboolean isThereDuplicate=orderService.isThereDuplicate(listOrdersDTO);\n\t\tif(isThereDuplicate)notSaved=1;\n\t\tuserLogo=(String)session.getAttribute(""userLogo"");\n\t\tlistNotSavedAtFirst=(Boolean)session.getAttribute(""listNotSavedAtFirst"");\n\t\tint rowIndex;\n\t\tString nameFile="""";\n\t\tString dataPath="""";\n\t\ttry {\n\t\t\t\t/*-------------------- recovery users list -----------------------------------\n\t\t\t\t\t\twe access to the database only once to retrieve a list of users\n\t\t\t\t -----------------------------------------------------------------------------*/\n\t\t\t\tBasicUserDTO basicUserDTO = new BasicUserDTO();\n\t\t\t\tbasicUserDTO.setTypeId(USER_TYPE);\n\t\t\t\tList<User> usersListSession=(List<User>)session.getAttribute(""usersListSession"");\n\t\t\t\tif(usersListSession==null){\n\t\t\t\t\tList<UserSessionDTO> listAllUsers= userService.getAllUsers(basicUserDTO);\n\t\t\t\t\tusersList=new ArrayList<User>();\n\t\t\t\t\tfor(UserSessionDTO userDTO:listAllUsers){\n\t\t\t\t\t\tUser user=new User();\n\t\t\t\t\t\tuser.setId(userDTO.getId());\n\t\t\t\t\t\tuser.setLogin(userDTO.getLogin());\n\t\t\t\t\t\tusersList.add(user);\n\t\t\t\t\t}\n\t\t\t\t\tsession.setAttribute(""usersListSession"",usersList);\n\t\t\t\t}else usersList=usersListSession;\n\t\t\t\t\n\t\t\t\tuserFilelist=(List<UserFilesDownloadedDTO>)session.getAttribute(""userFilelist"");\n\t\t\t\tif(userFilelist==null)userFilelist=new ArrayList<UserFilesDownloadedDTO>();\n\t\t\t\t/*-------------------- When user check print item -----------------------------\n\t\t\t\t\t\tAdd or remove this element from the orders to print\n\t\t \t\t -----------------------------------------------------------------------------*/\n\t\t\t\tif(checkBoxPrintSignal!=null && checkBoxPrintSignal!=0L){\n\t\t\t\t\tlistOrdersDTO=\t(ArrayList<OrdersDTO>) session.getAttribute(""listOrdersDTOAuto"");\n\t\t\t\t\thashOrders= (Hashtable<String, OrdersDTO>)session.getAttribute(""hashOrders"");\n\t\t\t\t\tInteger count=orderService.nbOrdersNotSaved(listOrdersDTO);\n\t\t\t\t\tif(count>=1L || isThereDuplicate || listNotSavedAtFirst==null || listNotSavedAtFirst==false){\n\t\t\t\t\t\taddActionError(getText(""loyauty.error.common.savingOrders""));\n\t\t\t\t\t\treturn SUCCESS;\n\t\t\t\t\t}\n\t\t\t\t\tOrdersDTO orderDTOInHash=hashOrders.get(lsOrderId);\n\t\t\t\t\torderDTOInHash.setPrint(checkBoxPrint);\n\t\t\t\t\tOrdersDTO orderDTOInList=listOrdersDTO.get(indexOrder);\n\t\t\t\t\torderDTOInList.setPrint(checkBoxPrint);\n\t\t\t\t\treturn SUCCESS;\n\t\t\t\t}\n\n\n\t\t\t\t/*------------- When user check on the button OK of dialog saveSuccessPop ----\n\t\t\t\t\t\t\t \t\t\tjust hide the popup saveSuccessPop\n\t\t \t\t -----------------------------------------------------------------------------*/\n\t\t\t\tif(okSaveSuccessPopSignal!=null && okSaveSuccessPopSignal!=0L){\n\t\t\t\t\tnotSaved=0;\n\t\t\t\t\tlistOrdersDTO=\t(ArrayList<OrdersDTO>) session.getAttribute(""listOrdersDTOAuto"");\n\t\t\t\t\treturn SUCCESS;\n\t\t\t\t}\n\n\t\t\t\t/*-------------------- When user change Quantity to split --------------------\n\t\t\t\t\tprepare order to split from two other orders witch\n\t\t\t\t\t one must have a lsOrder with underscore \n\t\t \t\t -----------------------------------------------------------------------------*/\n\t\t\t\tif(quantityToChangeSignal!=null && quantityToChangeSignal!=0L){\n\t\t\t\t\tlistOrdersDTO=\t(ArrayList<OrdersDTO>) session.getAttribute(""listOrdersDTOAuto"");\n\t\t\t\t\thashOrders= (Hashtable<String, OrdersDTO>)session.getAttribute(""hashOrders"");\n\t\t\t\t\tInteger count=orderService.nbOrdersNotSaved(listOrdersDTO);\n\t\t\t\t\tif(count>=1L || isThereDuplicate  || listNotSavedAtFirst==null || listNotSavedAtFirst==false){\n\t\t\t\t\t\taddActionError(getText(""loyauty.error.common.savingOrders""));\n\t\t\t\t\t\treturn SUCCESS;\n\t\t\t\t\t}\n\t\t\t\t\tOrdersDTO orderToChangeQt=hashOrders.get(lsOrderId);\n\t\t\t\t\tint index=orderToChangeQt.getIndex();\n\t\t\t\t\tOrdersRows orderRow=listOrdersDTO.get(index).getRowsList().get(indexRow);\n\t\t\t\t\tif(quantityToChange<orderRow.getQuantity()){\n\t\t\t\t\t\torderRow.setQuantityToSplit(quantityToChange);\n\t\t\t\t\t\torderToChangeQt.getRowsList().get(0).setQuantityToSplit(quantityToChange);\n\t\t\t\t\t}\n\t\t\t\t\tsession.setAttribute(""listOrdersDTOAuto"",listOrdersDTO);\n\t\t\t\t\treturn SUCCESS;\n\t\t\t\t}\n\n\t\t\t\t/*-------------------- SAVE ORDERS -------------------------------------------\n\t\t\t\t\t\tsave in data bases just orders witch has print checked \n\t\t \t\t -----------------------------------------------------------------------------*/\n\t\t\t\tif(saveOrdersSignal!=null && saveOrdersSignal!=0L){\n\t\t\t\t\t//notSaved=-1;\n\t\t\t\t\tnotSaved=orderService.nbOrdersNotSaved(listOrdersDTO);\n\t\t\t\t\tnbProductOrderNumber=getNbProductOrderNumber(listOrdersDTO);\n\t\t\t\t\tlistOrdersDTO=\t(ArrayList<OrdersDTO>) session.getAttribute(""listOrdersDTOAuto"");\n\t\t\t\t\tboolean callNotification=orderService.isExistAnyLsOrderIdInDB(listOrdersDTO);\n\t\t\t\t\tif(callNotification){//ask admin if he want to save all orders\n\t\t\t\t\t\tif(confirmSaveOrdersSignal==null || confirmSaveOrdersSignal==0L){\n\t\t\t\t\t\t\tmessage=""This File is already Imported in DB !!!!!.\\n"";\n\t\t\t\t\t\t\tshowNotificationPop=""display:block;visibility:visible;"";\t\n\t\t\t\t\t\t}else if(confirmSaveOrdersSignal==1L){//add all orders in DB\n\t\t\t\t\t\t\t//notSaved=0;\n\t\t\t\t\t\t\tsession.setAttribute(""listNotSavedAtFirst"",true);\n\t\t\t\t\t\t\tmessage=""Saving has completed successfuly"";\n\t\t\t\t\t\t\tif(notSaved==nbProductOrderNumber){\n\t\t\t\t\t\t\t\tlistOrdersDTO=orderService.insertListOrders(listOrdersDTO);\n\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\tmessage=""Saving has not done successfuly !!!!!!"";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t//listOrdersDTO=orderService.insertListOrders(listOrdersDTO); \n\t\t\t\t\t\t\t//change userFileDownloded Status\n\t\t\t\t\t\t\tnotSaved=orderService.nbOrdersNotSaved(listOrdersDTO);\n\t\t\t\t\t\t\tif(notSaved==0)orderService.updateFilesDownloadedStatus(fileToImport,userLogin,true);\n\t\t\t\t\t\t\tuserFilelist=getUserFilesListByOption(userLogin,checkAllFiles,session);\n\t\t\t\t\t\t\tsession.setAttribute(""listOrdersDTOAuto"",listOrdersDTO);\n\t\t\t\t\t\t\thashOrders =orderService.getHashOrdersDTOFromListOrdersDTO(listOrdersDTO);\n\t\t\t\t\t\t\tsession.setAttribute(""hashOrders"",hashOrders);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tshowSaveSuccessPop=""display:block;visibility:visible;"";\n\t\t\t\t\t\t}/*else if(confirmSaveOrdersSignal==2L){//add just orders if not exist in DB\n\t\t\t\t\t\t\t//notSaved=0;\n\t\t\t\t\t\t\t//orderService.insertListOrdersIfNotExist(listOrdersDTO);\n\t\t\t\t\t\t\tsession.setAttribute(""listNotSavedAtFirst"",true);\n\t\t\t\t\t\t\tmessage=""Saving has completed successfuly"";\n\t\t\t\t\t\t\tif(notSaved==nbProductOrderNumber){\n\t\t\t\t\t\t\t\tlistOrdersDTO=orderService.insertListOrders(listOrdersDTO);\n\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\tmessage=""Saving has not done successfuly !!!!!!"";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t//change userFileDownloded Status\n\t\t\t\t\t\t\tnotSaved=orderService.nbOrdersNotSaved(listOrdersDTO);\n\t\t\t\t\t\t\tif(notSaved==0)orderService.updateFilesDownloadedStatus(fileToImport,userLogin,true);\n\t\t\t\t\t\t\tuserFilelist=getUserFilesListByOption(userLogin,checkAllFiles,session);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tlistOrdersDTO=orderService.getListOrdersByPONumber(listOrdersDTO);\n\t\t\t\t\t\t\thashOrders =orderService.getHashOrdersDTOFromListOrdersDTO(listOrdersDTO);\n\t\t\t\t\t\t\tsession.setAttribute(""hashOrders"",hashOrders);\n\t\t\t\t\t\t\tsession.setAttribute(""listOrdersDTOAuto"",listOrdersDTO);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tshowSaveSuccessPop=""display:block;visibility:visible;"";\n\t\t\t\t\t\t}*/\n\t\t\t\t\t}else{\n\t\t\t\t\t\t//notSaved=0;\n\t\t\t\t\t\tsession.setAttribute(""listNotSavedAtFirst"",true);\n\t\t\t\t\t\tmessage=""Saving has completed successfuly"";\n\t\t\t\t\t\tshowSaveSuccessPop=""display:block;visibility:visible;"";\n\t\t\t\t\t\tif(notSaved!=null && notSaved.equals(nbProductOrderNumber)){\n\t\t\t\t\t\t\tlistOrdersDTO=orderService.insertListOrders(listOrdersDTO);\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\tmessage=""Saving has not done successfuly !!!!!"";\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//change userFileDownloded Status\n\t\t\t\t\t\tnotSaved=orderService.nbOrdersNotSaved(listOrdersDTO);\n\t\t\t\t\t\tif(notSaved==0)orderService.updateFilesDownloadedStatus(fileToImport,userLogin,true);\n\t\t\t\t\t\tuserFilelist=getUserFilesListByOption(userLogin,checkAllFiles,session);\n\t\t\t\t\t\tsession.setAttribute(""listOrdersDTOAuto"",listOrdersDTO);\n\t\t\t\t\t}\n\t\t\t\t\treturn SUCCESS;\n\t\t\t\t}\n\n\t\t\t\t/*-------------------- Duplicate Order ----------------------------------------\n\t\t\t\t\t\tCreate order in just in memory\n\t\t \t\t -----------------------------------------------------------------------------*/\n\t\t\t\tif(duplicateOrderSignal!=null && duplicateOrderSignal!=0L){\n\t\t\t\tlistOrdersDTO=\t(ArrayList<OrdersDTO>) session.getAttribute(""listOrdersDTOAuto"");\n\t\t\t\thashOrders= (Hashtable<String, OrdersDTO>)session.getAttribute(""hashOrders"");\n\t\t\t\tInteger count=orderService.nbOrdersNotSaved(listOrdersDTO);\n\t\t\t\tif(count>=1L || isThereDuplicate || listNotSavedAtFirst==null || listNotSavedAtFirst==false){\n\t\t\t\t\taddActionError(getText(""loyauty.error.common.savingOrders""));\n\t\t\t\t\treturn SUCCESS;\n\t\t\t\t}\n\t\t\t\tOrdersDTO orderToClone=hashOrders.get(lsOrderId);\n\t\t\t\tint index=orderToClone.getIndex();\n\t\t\t\tOrdersDTO orderInArrayList=listOrdersDTO.get(index);\n\t\t\t\torderInArrayList.setToUpdate(true);\n\t\t\t\tOrdersDTO orderClone=DTOFactory.getOrderDTOSplitted(orderToClone);\n\t\t\t\torderInArrayList.setQuantity(orderToClone.getQuantity());\n\t\t\t\tif(orderClone!=null){\n\t\t\t\t\torderClone.setDuplicate(true);\n\t\t\t\t\tString lsOrder=orderToClone.getLsOrderId();\n\t\t\t\t\tString strlsOrder=orderService.generateLsOrderId(lsOrder, hashOrders);\n\t\t\t\t\torderClone.setLsOrderId(strlsOrder);\n\t\t\t\t\torderClone.setCssStyle(""background-color:#FFFF99;border-right: 1px solid #CCCCCC;border-left:1px solid #CCCCCC;border-top:  1px solid #CCCCCC;border-bottom:  1px solid #CCCCCC;"");\n\t\t\t\t\trowIndex=0;\n\t\t\t\t\tfor(OrdersRows row: orderClone.getRowsList()){\n\t\t\t\t\t\trow.setIndex(rowIndex);\n\t\t\t\t\t\trowIndex++;\n\t\t\t\t\t}\n\t\t\t\t\tnotSaved=0;\n\t\t\t\t\tlistOrdersDTO.add(indexOrder+1,orderClone);\n\t\t\t\t\thashOrders.put(orderClone.getLsOrderId(), orderClone);\n\t\t\t\t\tif(listOrdersDTO.size()>0){\n\t\t\t\t\t\tsession.setAttribute(""listOrdersDTOAuto"",listOrdersDTO);\n\t\t\t\t\t\tsession.setAttribute(""hashOrders"",hashOrders);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tnotSaved=orderService.nbOrdersNotSaved(listOrdersDTO);\n\t\t\t\tisThereDuplicate=orderService.isThereDuplicate(listOrdersDTO);\n\t\t\t\tif(isThereDuplicate)notSaved=1;\n\t\t\t\treturn SUCCESS;\n\t\t\t\t}\n\n\t\t\t\t/*---------------- retrieve file info customer order -------------------------*/\n\t\t\t\t/*UserFileRecoveryDTO ufrDTO=orderService.getUserFileRecoveryByUser(userLogin);\n\t\t\t\tsession.setAttribute(""userLogin"",userLogin);\n\t\t\t\tif(ufrDTO==null || orderFile==null){\n\t\t\t\t\tuserLogo=null;\n\t\t\t\t\tsession.setAttribute(""userLogo"",null);\n\t\t\t\t\taddActionError(getText(""loyauty.error.common.userFilePoOrders""));\n\t\t\t\t\treturn SUCCESS;\n\t\t\t\t}*/\n\t\t\t\t/*--------------------recovery OrderFile client ------------------------------\n\t\t\t\t\trecovered the client file and converts it into a list, and  \n \t\t\t\t\ta Hatable witch allow use to control the orders rows\n\t\t\t\t -----------------------------------------------------------------------------*/\n\n\t\t\t\t/*---------------- retrieve file info customer order -------------------------*/\n\t\t\t\tUserFileRecoveryDTO ufrDTO=orderService.getUserFileRecoveryByUser(userLogin);\n\t\t\t\tsession.setAttribute(""userLogin"",userLogin);\n\t\t\t\tif(ufrDTO==null){\n\t\t\t\t\tuserLogo=null;\n\t\t\t\t\tuserFilelist=new ArrayList<UserFilesDownloadedDTO>();\n\t\t\t\t\tsession.setAttribute(""userFilelist"",userFilelist);\n\t\t\t\t\tsession.setAttribute(""userLogo"",null);\n\t\t\t\t\taddActionError(getText(""loyauty.error.common.userFilePoOrders""));\n\t\t\t\t\treturn SUCCESS;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t/*-------------------- When Admin Find User Login ---------------------------\n\t\t\t\tchange all value of userid list of orders\n\t\t\t\t -----------------------------------------------------------------------------*/\n\t\t\t\tif(userIdFindedSignal!=null && userIdFindedSignal!=0L){\n\t\t\t\t\tUser user=userService.getUserByLogin(userLogin);\n\t\t\t\t\tuserLogo=null;\n\t\t\t\t\tif(user!=null){\n\t\t\t\t\t\t//show user logo\n\t\t\t\t\t\tuserLogo=""./images/orders/usersLogos/""+userLogin+"".png"";\n\t\t\t\t\t\t/*if(checkAllFiles){\n\t\t\t\t\t\t\tuserFilelist=orderService.getListFileDownloadedDTO(user.getLogin(), 1, 3);\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\tuserFilelist=orderService.getListFileDownloadedDTO(user.getLogin(), 1, 0);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tsession.setAttribute(""userFilelist"",userFilelist);*/\n\t\t\t\t\t\tuserFilelist=getUserFilesListByOption(userLogin,checkAllFiles,session);\n\t\t\t\t\t\tlistOrdersDTO=new ArrayList<OrdersDTO>();\n\t\t\t\t\t\tsession.setAttribute(""listOrdersDTOAuto"",listOrdersDTO);\n\t\t\t\t\t}else userLogin=null;\n\t\t\t\t\treturn SUCCESS;\n\t\t\t\t}\t\t\n\n\t\t\t\tFile OrderFilePermanent=null;\n\t\t\t\tsession.setAttribute(""listNotSavedAtFirst"",null);\n\t\t\t\tif(fileToImport!=null){\n\t\t\t\t\t\n\t\t\t\t\t//verify that this file is exactly for the user selected \n\t\t\t\t\tBoolean isFileForThisUser=orderService.isFileForUser(fileToImport,userLogin);\n\t\t\t\t\tif(!isFileForThisUser){\n\t\t\t\t\t\taddActionError(getText(""loyauty.error.common.FileNotFound""));\n\t\t\t\t\t\tlistOrdersDTO=new ArrayList<OrdersDTO>();\n\t\t\t\t\t\tsession.setAttribute(""listOrdersDTOAuto"",listOrdersDTO);\n\t\t\t\t\t\treturn SUCCESS;\n\t\t\t\t\t}\n\t\t\t\t\t//oploadedFileName=fileToImport;\n\t\t\t\t\t//session.setAttribute(""oploadedFileName"",oploadedFileName);\n\t\t\t\t\tUserConnectionDTO userConn=userService.getUserConnectionByLogin(userLogin);\n\t\t\t\t\tif(userConn!=null)orderFile=new File(userConn.getOrdersFolder()+userLogin+""/""+fileToImport);\n\n\t\t\t\t\tString filePath = request.getSession().getServletContext().getRealPath(""/"");\n\t\t\t\t\tdataPath = filePath + ""WEB-INF/jsp/orders/data/"";\n        \t\t\tnameFile=dataPath+userLogin+"".""+ufrDTO.getFileType();\n        \t\t\t//show user logo\n        \t\t\tuserLogo=""./images/orders/usersLogos/""+userLogin+"".png"";\n        \t\t\t\n\n        \t\t\t//if userLogo dosn't exist give him a blank logo\n        \t\t\tcopyFile(filePath +""images/orders/usersLogos/BLANK.png"", filePath +""images/orders/usersLogos/""+userLogin+"".png"");\n        \t\t\tsession.setAttribute(""userLogo"",userLogo);\n        \t\t\tOrderFilePermanent = new File(nameFile);\n\t\t\t\t\tif(OrderFilePermanent.exists())OrderFilePermanent.delete();\n\t\t\t\t\ttry {\n\t\t\t\t\t\tOrderFilePermanent = new File(nameFile);\n\t\t\t\t\t\tcopyFile(userConn.getOrdersFolder()+userLogin+""/""+fileToImport, nameFile);\n\t\t\t\t\t} catch (IOException e) {\n\t\t\t\t\t\taddActionError(getText(""loyauty.error.common.CreateOrdersFromFiles""));\n\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\treturn ""input"";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t/*-------------------- converts the order file to a list and HashTable -------\n\t\t\t\t\trecovered the client file and converts it into a list, and  \n \t\t\t\t\ta Hashtable witch allow use to control the orders rows\n\t\t\t\t -----------------------------------------------------------------------------*/\n\t\t\t\tCollection listUsrDataDTO=null;\n\t\t\t\tnotSaved=1;\n\t\t\t\ttry {\n\t\t\t\t\tswitch (ufrDTO.getFileTypeId()) {\n\t\t\t\t\tcase 1: //case xml file\n\t\t\t\t\t\tif(userLogin.equalsIgnoreCase(""Rideau"")){\n\t\t\t\t\t\t\tlistUsrDataDTO=orderService.toArrayListFromXML_Rideau(OrderFilePermanent, userLogin,fileToImport);\n\t\t\t\t\t\t\tif(listUsrDataDTO.size()==0){\n\t\t\t\t\t\t\t\taddActionError(getText(""loyauty.error.common.FileSeqNotValid""));\n\t\t\t\t\t\t\t\treturn SUCCESS;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse{\n\t\t\t\t\t\t\tlistUsrDataDTO=orderService.toArrayListFromXML(OrderFilePermanent, userLogin);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2: //case xls file\n\t\t\t\t\t\tlistUsrDataDTO=orderService.toArrayListFromXLS(OrderFilePermanent, userLogin);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 3: // case csv file\n\t\t\t\t\t\torderService.csvParsing(dataPath,userLogin);\n\t\t\t\t\t\tnameFile=dataPath+userLogin+"".xls"";\n\t\t\t\t\t\tOrderFilePermanent = new File(nameFile);\n\t\t\t\t\t\tlistUsrDataDTO=orderService.toArrayListFromXLS(OrderFilePermanent, userLogin);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 4: // case pdf file\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tList<String> listFromPdf = getListOfLinesFromPDF(nameFile);\n\t\t\t\t\t\t\tif(listFromPdf==null) {\n\t\t\t\t\t\t\t\tSystem.out.println(""Parsing from PDF is not done. The file selected is not PDF or is too big more than 100KB."");\n\t\t\t\t\t\t\t\taddActionError(getText(""loyauty.error.common.CreateOrdersFromFiles""));\n\t\t\t\t\t\t\t\treturn ""input"";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tlistUsrDataDTO = orderService.toArrayListFromListOfPDFLines(listFromPdf, userLogin);\n\t\t\t\t\t\t} catch(Exception e) {\n\t\t\t\t\t\t\taddActionError(getText(""loyauty.error.common.CreateOrdersFromFiles""));\n\t\t\t\t\t\t\treturn ""input"";\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t} \n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\taddActionError(getText(""loyauty.error.common.CreateOrdersFromFiles""));\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tArrayList<UserFileDataRecoveryDTO> list=(ArrayList<UserFileDataRecoveryDTO>)listUsrDataDTO;\n\t\t\t\thashOrders =orderService.getHashOrdersFromUserDataRecovery(ufrDTO.getUserId(),list);\n\t\t\t\tlistOrdersDTO=new ArrayList<OrdersDTO>();\n\t\t\t\tint balance=0;\n\t\t\t\tint OrderIndex=0;\n\t\t\t\trowIndex=0;\n\t\t\t\toploadedFileName=(String)session.getAttribute(""oploadedFileName"");\n\t\t\t\t\n\t\t\t\t//currency\n\t\t\t\tUser user = null;\n\t\t\t\tif(userLogin!=null)user=userService.getUserByLogin(userLogin);\n\t\t\t\tLong userId = null;\n\t\t\t\tLong currencyId = 1L;\n\t\t\t\tString currencySymbol = ""CAD"";\n\t\t\t\tDouble currencyRate = 1D;\n\t\t\t\tDouble currencyUnitPrice = 0D;\n\t\t\t\tDouble currencyTotalPrice = null;\n\t\t\t\tDouble unitPrice = null;\n\t\t\t\tif(user!=null) {\n\t\t\t\t\tuserId = user.getId();\n\t\t\t\t\tCurrencyDTO currencyDTO = orderService.getCurrencyIdByUserId(userId);\n\t\t\t\t\tif(currencyDTO!=null) {\n\t\t\t\t\t\tcurrencyId = currencyDTO.getId();\n\t\t\t\t\t\tif(currencyDTO.getSymbol()!=null) currencySymbol = currencyDTO.getSymbol();\n\t\t\t\t\t\tif(currencyDTO.getRate()!=null) currencyRate = currencyDTO.getRate();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfor(OrdersDTO orDTO: hashOrders.values()){\n\t\t\t\t\tbalance=(balance==1?0:1);\n\t\t\t\t\tif(balance==1){\n\t\t\t\t\t\torDTO.setCssStyle(""background-color: rgb(245,249,252);border-right: 1px solid #CCCCCC;border-left:1px solid #CCCCCC;border-top:  1px solid #CCCCCC;border-bottom:  1px solid #CCCCCC;"");\n\t\t\t\t\t}else{\n\t\t\t\t\t\torDTO.setCssStyle(""background-color: color:white;border-right: 1px solid #CCCCCC;border-left:1px solid #CCCCCC;border-top:  1px solid #CCCCCC;border-bottom:  1px solid #CCCCCC;"");\n\t\t\t\t\t}\n\t\t\t\t\t//orDTO.setOrderFileInfo(oploadedFileName);\n\t\t\t\t\t\n\t\t\t\t\t//add special handling shipping\t+ currency\n\t\t\t\t\tuser=null;\n\t\t\t\t\tif(userLogin!=null)user=userService.getUserByLogin(userLogin);\n\t\t\t\t\tif(user!=null){\n\t\t\t\t\t\tDouble totalPrice=null;\n\t\t\t\t\t\torDTO.setSpecialHandlingName(user.getSpecialHandlingName());\n\t\t\t\t\t\torDTO.setSpecialHandlingFee(user.getSpecialHandlingFee());\n\t\t\t\t\t\tif(orDTO.getRowsList().get(0).getQuantity()!=null && orDTO.getRowsList().get(0).getUnitPrice()!=null){\n\t\t\t\t\t\t\tunitPrice = orDTO.getRowsList().get(0).getUnitPrice();\n\t\t\t\t\t\t\ttotalPrice= orDTO.getRowsList().get(0).getQuantity()*unitPrice;\n\t\t\t\t\t\t\ttotalPrice = (double) Math.round(totalPrice * 100) / 100;\n\t\t\t\t\t\t\t\tif(currencyId!=1) {\n\t\t\t\t\t\t\t\t\tcurrencyUnitPrice = unitPrice;\n\t\t\t\t\t\t\t\t\tunitPrice = unitPrice / currencyRate;\n\t\t\t\t\t\t\t\t\tunitPrice = (double) Math.round(unitPrice*100)/100;\n\t\t\t\t\t\t\t\t\torDTO.setUnitPrice(unitPrice);\n\t\t\t\t\t\t\t\t\torDTO.getRowsList().get(0).setUnitPrice(unitPrice);\n\t\t\t\t\t\t\t\t\tcurrencyTotalPrice = totalPrice;\n\t\t\t\t\t\t\t\t\ttotalPrice = (double) Math.round((totalPrice / currencyRate)*100)/100;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(orDTO.getRowsList().get(0).getUnitPrice()==null) {\n\t\t\t\t\t\t\tcurrencyUnitPrice = null;\n\t\t\t\t\t\t\tcurrencyTotalPrice = null;\n\t\t\t\t\t\t}\n\t\t\t\t\t\torDTO.setTotalPrice(totalPrice);\n\t\t\t\t\t\torDTO.setCurrencyId(currencyId);\n\t\t\t\t\t\torDTO.setCurrencySymbol(currencySymbol);\n\t\t\t\t\t\torDTO.setCurrencyRate(currencyRate);\n\t\t\t\t\t\torDTO.setCurrencyUnitPrice(currencyUnitPrice);\n\t\t\t\t\t\torDTO.setCurrencyTotalPrice(currencyTotalPrice);\n\t\t\t\t\t}\n\n\t\t\t\t\torDTO.setIndex(OrderIndex); \n\t\t\t\t\tlistOrdersDTO.add(orDTO);\n\t\t\t\t\trowIndex=0;\n\t\t\t\t\tfor(OrdersRows row: orDTO.getRowsList()){\n\t\t\t\t\t\trow.setIndex(rowIndex);\n\t\t\t\t\t\t//Currency\n\t\t\t\t\t\trow.setCurrencyId(currencyId);\n\t\t\t\t\t\trow.setCurrencySymbol(currencySymbol);\n\t\t\t\t\t\trow.setCurrencyRate(currencyRate);\n\t\t\t\t\t\trow.setCurrencyUnitPrice(currencyUnitPrice);\n\n\t\t\t\t\t\trowIndex++;\n\t\t\t\t\t}\n\t\t\t\t\tOrderIndex++;\n\t\t\t\t}\n\t\t\t\tif(listOrdersDTO.size()>0){\n\t\t\t\t\tsession.setAttribute(""listOrdersDTOAuto"",listOrdersDTO);\n\t\t\t\t\tsession.setAttribute(""hashOrders"",hashOrders);\n\t\t\t\t}else userLogo=null;\n\t\t\t\tsession.setAttribute(""userLogo"",userLogo);\t\n\t\t\t} catch (Exception e) {\n\t\t\t\te.printStackTrace();\n\t\t\t\treturn ""input"";\n\t\t\t}\n\treturn SUCCESS;\n\t}\n\n\t/*=========================  createUserLogo ===========================\n\t \t\t\t\tCreate  Blank User Logo if not Exist\n\t  =================================================================*/\n\tpublic void copyFile(String source, String destination) throws IOException{\n\t\tFile fileLogo=new File(destination);\n\t\tif(!fileLogo.exists()){\n\t\t\tInputStream in = new FileInputStream(source);\n\t\t\tOutputStream out = new FileOutputStream(destination);\n\t\t\tbyte[] buf = new byte[1024];\n\t\t\tint len;\n\t\t\twhile ((len = in.read(buf)) > 0) {\n\t\t\t\tout.write(buf, 0, len);\n\t\t\t}\n\t\t\tin.close();\n\t\t\tout.close();\t\n\t\t}\n\t}\n\t\n\tpublic List<UserFilesDownloadedDTO> getUserFilesListByOption(String userLogin,Boolean checkAllFiles,HttpSession session) throws ServiceException{\n\t\tList<UserFilesDownloadedDTO> result;\n\t\tif(checkAllFiles){\n\t\t\tresult=orderService.getListFileDownloadedDTO(userLogin, 1, 3);\n\t\t}else{\n\t\t\tresult=orderService.getListFileDownloadedDTO(userLogin, 1, 0);\n\t\t}\n\t\tsession.setAttribute(""userFilelist"",result);\n\t\treturn result;\n\t}\n\n\t/*================  getNbProductOrderNumber ===========================\n\t \t\t\t\tcalculate count off productOrderNumber\n\t  =================================================================*/\n\tpublic Integer getNbProductOrderNumber(List<OrdersDTO>listOrders) throws IOException{\n\t\tHashtable<Object, Object>hashTab=new Hashtable<Object, Object>();\n\t\tfor(OrdersDTO ordDTO:listOrders){\n\t\t\tif(!hashTab.contains(ordDTO.getProductOrderNumber()))hashTab.put(ordDTO.getProductOrderNumber(), ordDTO.getProductOrderNumber());\n\t\t}\n\t\treturn hashTab.size();\n\t}\n\t\n\t/*===============================================================================\n\t \tMethod: getTextFromExtractingPDF\n\t \treturns a String from the pdf file  \n\t  ===============================================================================*/\n\tpublic String getTextFromPDF(String nameFile) throws Exception{\n\t\tString result = null;\n\t\tPDFTextStripper pdfStripper = null;\n\t\tPDDocument pdDoc = null;\n\t\tCOSDocument cosDoc = null;\n\t\tFile file = new File(nameFile);\n\t\ttry {\n\t\t\tif(file.length() <= 1020*1024) {\n\t\t\t\tPDFParser parser = new PDFParser(new FileInputStream(file));\n\t\t\t\tparser.parse();\n\t\t\t\tcosDoc = parser.getDocument();\n\t\t        pdfStripper = new PDFTextStripper();\n\t\t        pdDoc = new PDDocument(cosDoc);\n\t\t        pdfStripper.setStartPage(1);\n\t\t        pdfStripper.setEndPage(5);\n\t\t        result = pdfStripper.getText(pdDoc);\n\t\t\t} else System.out.println(""The file selected is too big."");\n\t\t} catch (IOException e) {\n\t\t\tresult = null;\n\t        System.out.println(""Error when Parsing PDF to String"");\n\t\t\t//e.printStackTrace();\n\t    } finally {\n\t        if (file != null) {\n\t\t\t\tfile.delete();\n\t\t\t}\n\t    }\n\t    return result;\n\t}\n\t\n\t/*===============================================================================\n\t \tMethod: getListOfLinesFromPDF\n\t \tGets a list of the text lines extracted from the PDF file  \n\t  ===============================================================================*/\n\tpublic List<String> getListOfLinesFromPDF(String pdfFileName) {\n\t\tList<String> result = null;\n\t\tString textGotFromPdf = null;\n\t\t\n\t\ttry {\n\t\t\ttextGotFromPdf = getTextFromPDF(pdfFileName);\n\t\t\tif(textGotFromPdf!=null) {\n\t\t\t\tBufferedReader bufferReader = new BufferedReader(new StringReader(textGotFromPdf));\n\t\t\t\tString currentLine = null;\n\t\t\t\tint lineNumber = 0;\n\t\t\t\ttry {\n\t\t\t\t\twhile ((currentLine = bufferReader.readLine()) != null) {\n\t\t\t\t\t\tlineNumber +=1;\n\t\t\t\t\t\tcurrentLine = removeUnusedSpaces(currentLine);\n\t\t\t\t\t\tif(result==null && !currentLine.equals("""")) result = new ArrayList<String>();\n\t\t\t\t\t\tif(!currentLine.equals("""")) result.add(currentLine);\n\t\t\t\t\t}\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\tSystem.out.println(""*** Error when reading PDF file line by line"");\n\t\t\t\t\t//e.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e1) {\n\t\t\t//System.out.println(""Error when parsing PDF"");\n\t\t}\n\t\n\t\treturn result;\n\t}\n\t\n\t/*===============================================================================\n\t \tMethod: removeUnusedSpaces\n\t  ===============================================================================*/\t\n\tpublic String removeUnusedSpaces(String srtValue) {\n\t\tString result = srtValue.replaceAll(""^\\\\s+"", """").replaceAll(""^\\\\t+"", """")\t//Remove Left  Spaces and Tabs\n\t\t\t\t\t\t\t\t.replaceAll(""\\\\s+$"", """").replaceAll(""\\\\t+$"", """")\t//Remove Right Spaces and Tabs\n\t\t\t\t\t\t\t\t.replaceAll(""\\\\s+"", "" "");\t\t\t\t\t\t\t//Remove duplicate Spaces\n\t\treturn result;\n\t}\n\n}\n\n----------------------------------- SOURCE END -------------------------------------",1425317979505
error,log,,,"Problems occurred when invoking code from plug-in: ""org.eclipse.jdt.ui"".",1425317979510
error,log,,,"Error in JDT Core during reconcile",1425317979511
error,log,,,"Exception occurred during problem detection:\n----------------------------------- SOURCE BEGIN -------------------------------------\npackage com.loyauty.web.struts.action.product;\n\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Set;\n\nimport javax.servlet.http.HttpSession;\n\nimport org.jsoup.Jsoup;\n\nimport lombok.Getter;\nimport lombok.Setter;\n\nimport com.loyauty.enums.Language;\nimport com.loyauty.enums.PriceType;\nimport com.loyauty.enums.ProductStatus;\nimport com.loyauty.enums.UserProductStatus;\nimport com.loyauty.enums.UserType;\nimport com.loyauty.exception.ServiceException;\nimport com.loyauty.exception.ServiceLocatorException;\nimport com.loyauty.model.User;\nimport com.loyauty.service.brand.BrandService;\nimport com.loyauty.service.common.CommonService;\nimport com.loyauty.service.core.dto.AlterProductXMLDTO;\nimport com.loyauty.service.core.dto.AlterUserProductXMLDTO;\nimport com.loyauty.service.core.dto.BasicUserDTO;\nimport com.loyauty.service.core.dto.BoxDTO;\nimport com.loyauty.service.core.dto.CategoryDTO;\nimport com.loyauty.service.core.dto.ClientCategoryDTO;\nimport com.loyauty.service.core.dto.CommonDTO;\nimport com.loyauty.service.core.dto.ImageDTO;\nimport com.loyauty.service.core.dto.OperationsDTO;\nimport com.loyauty.service.core.dto.OrdersDTO;\nimport com.loyauty.service.core.dto.ProductDTO;\nimport com.loyauty.service.core.dto.ProductLinkDTO;\nimport com.loyauty.service.core.dto.ProductModelDTO;\nimport com.loyauty.service.core.dto.SpecificationDTO;\nimport com.loyauty.service.core.dto.UserDTO;\nimport com.loyauty.service.core.dto.UserProductPriceDTO;\nimport com.loyauty.service.core.dto.UserSessionDTO;\nimport com.loyauty.service.image.ImageService;\nimport com.loyauty.service.operations.OperationsService;\nimport com.loyauty.service.product.ProductService;\nimport com.loyauty.service.user.UserService;\nimport com.loyauty.util.CommonUtils;\nimport com.loyauty.web.WebConstants;\nimport com.loyauty.web.struts.action.LoyautyAction;\n\npublic class EditSaleProduct extends LoyautyAction{\n\tprivate static final long serialVersionUID = -5162061504759408826L;\n\n\t\n\n\tprivate ProductService productService;\n\tprivate ImageService imageService;\n\tprivate CommonService commonService;\n\tprivate BrandService brandService;\n\tprivate UserService userService;\n\tprivate OperationsService operationsService;\n\t\n\tprivate UserSessionDTO userSession;\n\t@Getter @Setter\n\tprivate long productId;\n\t@Getter @Setter\n\tprivate long imageId;\n\t@Getter @Setter\n\tprivate long brand;\n\t@Getter @Setter\n\tprivate String brandName;\n\t@Getter @Setter\n\tprivate long category;\n\t@Getter @Setter\n\tprivate String categoryName;\n\t@Getter @Setter\n\tprivate long mainSpecification; \n\t@Getter @Setter\n\tprivate String mainSpecificationName;\n\t@Getter @Setter\n\tprivate String manufProductID;\n\t@Getter @Setter\n\tprivate String manufProductID1;\n\t@Getter @Setter\n\tprivate String manufProductID2;\n\t@Getter @Setter\n\tprivate String manufProductID3;\n\t@Getter @Setter\n\tprivate String manufProductID4;\n\t\n\t@Getter @Setter\n\tprivate Integer manufProductQuantity = 0;\n\t@Getter @Setter\n\tprivate Integer manufProductQuantity1 = 0;\n\t@Getter @Setter\n\tprivate Integer manufProductQuantity2 = 0;\n\t@Getter @Setter\n\tprivate Integer manufProductQuantity3 = 0;\n\t@Getter @Setter\n\tprivate Integer manufProductQuantity4 = 0;\n\t\n\t@Getter @Setter\n\tprivate String supplier;\n\t@Getter @Setter\n\tprivate String supplier1;\n\t@Getter @Setter\n\tprivate String supplier2;\n\t@Getter @Setter\n\tprivate String supplier3;\n\t@Getter @Setter\n\tprivate String supplier4;\n\t\n\t@Getter @Setter\n\tprivate String price;\n\t@Getter @Setter\n\tprivate String price1;\n\t@Getter @Setter\n\tprivate String price2;\n\t@Getter @Setter\n\tprivate String price3;\n\t@Getter @Setter\n\tprivate String price4;\t\n\n\t@Getter @Setter\n\tprivate String msrp0;\n\t@Getter @Setter\n\tprivate String msrp1;\n\t@Getter @Setter\n\tprivate String msrp2;\n\t@Getter @Setter\n\tprivate String msrp3;\n\t@Getter @Setter\n\tprivate String msrp4;\n\t\n\t@Getter @Setter\n\tprivate String upc;\n\t@Getter @Setter\n\tprivate String loyaltyProductId;\n\t@Getter @Setter\n\tprivate String nameEn;\n\t@Getter @Setter\n\tprivate String nameFr;\n\t@Getter @Setter\n\tprivate String msrp;\n\t@Getter @Setter\n\tprivate String cost;\n\t@Getter @Setter\n\tprivate String large;\n\t@Getter @Setter\n\tprivate String width;\n\t@Getter @Setter\n\tprivate String high;\n\t@Getter @Setter\n\tprivate String weight;\n\t@Getter @Setter\n\tprivate Double boxLength;\n\t@Getter @Setter\n\tprivate Double boxWidth;\n\t@Getter @Setter\n\tprivate Double boxHeight;\n\t/*\n\t@Getter @Setter\n\tprivate Double boxWeight;\n\t*/\n\t@Getter @Setter\n\tprivate Double boxTotalWeight;\n\t@Getter @Setter\n\tprivate String largeCm;\n\t@Getter @Setter\n\tprivate String widthCm;\n\t@Getter @Setter\n\tprivate String highCm;\n\t@Getter @Setter\n\tprivate String weightKg;\n\t@Getter @Setter\n\tprivate String boxLengthCm;\n\t@Getter @Setter\n\tprivate String boxWidthCm;\n\t@Getter @Setter\n\tprivate String boxHeightCm;\n\t@Getter @Setter\n\tprivate String boxWeightKg;\n\t@Getter @Setter\n\tprivate Integer statusProductBox;\n\t@Getter @Setter\n\tprivate Boolean canadaPostSizesVerified;\n\t@Getter @Setter\n\tprivate BoxDTO boxDTO;\n\t\n\t@Getter @Setter\n\tprivate String descriptionEn;\n\t@Getter @Setter\n\tprivate String descriptionFr;\n\t@Getter @Setter\n\tprivate String specificationEn;\n\t@Getter @Setter\n\tprivate String specificationFr;\n\t@Getter @Setter\n\tprivate String otherEng;\n\t@Getter @Setter\n\tprivate String otherFr;\n\t\n\t//uploading files\n\t@Getter @Setter\t\n\tprivate File productImage; \n\t@Getter @Setter\n\tprivate String productImageContentType;\n\t@Getter @Setter\n\tprivate String productImageFileName;\n\t@Getter @Setter\n\tprivate ImageDTO imgDTO;\n\t@Getter @Setter\n\tprivate List<CommonDTO> categoryList;\n\t@Getter @Setter\n\tprivate List<SpecificationDTO> mainSpecificationList;\n\t@Getter @Setter\n\tprivate boolean update = false;\n\t@Getter @Setter\n\tprivate ProductDTO productDTO;\n\t@Getter @Setter\n\tprivate UserProductPriceDTO userProductPriceDTO;\t\n\t\n\t@Getter @Setter\n\tprivate List<CommonDTO> brandList;\n\t@Getter @Setter\n\tprivate List<CommonDTO> statusList;\n\n\t@Getter @Setter\n\tprivate String linkUrl;\n\t@Getter @Setter\n\tprivate String note;\n\t@Getter @Setter\n\tprivate String statusName;\t\n\t@Getter @Setter\n\tprivate Integer statusId;\n\t@Getter @Setter\n\tprivate List<UserDTO> activeClientsList;\n\t@Getter @Setter\n\tprivate int activeClientsSize;\n\t@Getter @Setter\n\tprivate int activeClientsTFSize;\t\n\t@Getter @Setter\n\tprivate String loyaltyProductIdSub;\n\t\n\t@Getter @Setter\n\tprivate String periodTime;\n\t@Getter @Setter\n\tprivate String warrantyQuantity;\n\t@Getter @Setter\n\tprivate Boolean defectFree;\n\t\n\t@Getter @Setter\n\tprivate List<UserSessionDTO> userNameList;\n\t@Getter @Setter\n\tprivate String[] userPrice;\n\t@Getter @Setter\n\tprivate String[] percentageProfit;\n\t@Getter @Setter\n\tprivate String[] percentageDiscount;\n\t@Getter @Setter\n\tprivate String[] isExcluded;\n\t@Getter @Setter\n\tprivate String[] excluded;\n\t\n\t@Getter @Setter\n\tprivate Double[] currencyRate;\n\t@Getter @Setter\n\tprivate String[] currencySymbol;\n\t@Getter @Setter\n\tprivate String[] currencyPrice;\t//CURRENCY_LS_PRICE\n\t@Getter @Setter\n\tprivate List<ClientCategoryDTO> listClientCategory;\n\t@Getter @Setter\n\tprivate OperationsDTO operationDTO;\n\t@Getter @Setter\n\tprivate Integer thisProductForSale;\n\t@Getter @Setter\n\tprivate Boolean salesByDate;\n\t@Getter @Setter\n\tprivate Boolean saleForAllCleint;\n\t@Getter @Setter\n\tprivate String strUsersId;\n\t\n\t@Getter @Setter\n\tprivate Boolean futurSUB;\n\t@Getter @Setter\n\tprivate Date startDate=new Date();\n\t@Getter @Setter\n\tprivate Date endDate=new Date();\n\t\n\tpublic  EditSaleProduct() throws ServiceLocatorException {\n\t\tsuper();\t\n\t\tproductService = getServiceLocator().getProductService();\n\t\tcommonService = getServiceLocator().getCommonService();\n\t\timageService = getServiceLocator().getImageService();\n\t\tbrandService = getServiceLocator().getBrandService();\n\t\tuserService = getServiceLocator().getUserService();\n\t\toperationsService = getServiceLocator().getOperationsService();\n\t}\n\n\n\t@SuppressWarnings(""unchecked"")\n\t@Override  \n\tpublic String execute() throws Exception {\n\t\ttry {\n\n\t\t\tbrandList = commonService.getBrands();\n\t\t\tstatusList = commonService.getAllProductStatuses();\n\t\t\tcategoryList  = internationalizeName(commonService.getCategoriesByBrand(brand));\n\t\t\tmainSpecificationList = productService.getMainSpecificationByCategory(category);\n\t\t\t\n\t\t\t//productId = (Long) request.getSession(true).getAttribute(""productId"");\n\t\t\tproductDTO = productService.getProductInformation(productId, null);\n\t\t\tboxDTO = productService.getBoxByProductId(productId);\n\t\t\tif(boxDTO==null)boxDTO=new BoxDTO();\n\t\t\timgDTO = productDTO.getImage();\n\t\t\tactiveClientsList = productService.getAllActiveClients(productId);\n\t\t\tactiveClientsTFSize = activeClientsSize = activeClientsList.size();\n\t\t\tactiveClientsTFSize = activeClientsList.isEmpty() ? 1 : activeClientsTFSize;\n\t\t\tBasicUserDTO basicUserDTO = new BasicUserDTO();\n\t\t\tbasicUserDTO.setTypeId(UserType.USER.getValue());\n\t\t\tbasicUserDTO.setActive(true);\n\t\t\tuserNameList = userService.getAllUserAccounts(basicUserDTO);\n\t\t\t//listClientCategory = userService.getAllClientCategory();\n\t\t\tfor (UserSessionDTO usrDTO : userNameList) {\n\t\t\t\tProductDTO pDTO=productService.getSaleActiveByProductIdAndUserId(productId, usrDTO.getId());\n\t\t\t\tif(pDTO!=null)usrDTO.setSelected(true);\n\t\t\t\t//usrDTO.setSelected(true);\n\t\t\t}\t\t\t\n\t\t\tupc=productDTO.getUpc();\n\t\t\tloyaltyProductId=productDTO.getLoyaltyProductId();\n\t\t\tmsrp=productDTO.getMsrp();\n\t\t\tcost=productDTO.getCost();\n\t\t\tmainSpecificationName=productDTO.getSpecificationProduct();\n\t\t\t/*------------------------------------------\n\t\t\t \t\t\t\t\tSale\n\t\t\t  ------------------------------------------*/\n\t\t\tif(salesByDate==null)salesByDate=true;\n\t\t\tif(saleForAllCleint==null)saleForAllCleint=true;\n\t\t\tif(futurSUB==null)futurSUB=false;\n\t\t\tif(strUsersId==null)strUsersId="""";\n\t\t\tString[] strTabUsersId=strUsersId.split("","");\n\t\t\tList<Long> tabUsersId=new ArrayList<Long>();\n\t\t\t\n\t\t\tfor(int i=0;i<strTabUsersId.length;i++){\n\t\t\t\tif(!strTabUsersId[i].equals("""")){\n\t\t\t\t\tLong item=Long.parseLong(strTabUsersId[i]);\n\t\t\t\t\ttabUsersId.add(item);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t\n\t\t\treturn SUCCESS;\n\t\t} catch(ServiceException e) {\n\t\t\tlog.debug(""Service Error when loading file"");\n\t\t\taddActionError(getText(""loyauty.error.common.service""));\n\t\t} catch (Exception e) {\n\t\t\taddActionError(getText(""loyauty.error.common.service""));\n\t\t}\n\t\treturn INPUT;\n\t}\n\n\t\n\tprivate List<CommonDTO> internationalizeName(List<CategoryDTO> list){\n\t\tList<CommonDTO> commonListDTO = new ArrayList<CommonDTO>();\n\t\tCommonDTO commonDTO;\n\t\tfor(CategoryDTO cat : list){\n\t\t\tcommonDTO = CommonDTO.valueOf(cat.getId(), getText(cat.getCode()));\t\t\t\n\t\t\tcommonListDTO.add(commonDTO);\n\t\t}\t\t\n\t\treturn commonListDTO;\n\t}\n    \n   \n\tpublic static UserSessionDTO getUserSessionDTO(ClientCategoryDTO clDTO){\n\t\tLong userId=clDTO.getClientCategoryId();\n\t\tString login=clDTO.getClientCategoryName();\n\t\tInteger TypeId=2;\n\t\tInteger userLangId = 2;\n\t\tInteger RESULTS_PER_PAGE=10;\n\t\tString email="""";\n\t\tString code="""";\n\t\tBoolean isActive=true;\n\t\tLong template =1L;\n\t\tUserSessionDTO sessionDTO =new UserSessionDTO(userId, login, TypeId, userLangId, Language.ENGLISH.getValue(),\n\t\t\t\t\t\t\t\t\t\t\t\t\t  RESULTS_PER_PAGE, email, code, isActive,template);\n\t\t\n\t\treturn sessionDTO;\n\t}\n\t\n\n}\n\n----------------------------------- SOURCE END -------------------------------------",1425317979538
error,log,,,"Problems occurred when invoking code from plug-in: ""org.eclipse.jdt.ui"".",1425317979539
error,log,,,"Error in JDT Core during reconcile",1425317979540
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1425317980484
error,log,,,"Exception occurred during problem detection:\n----------------------------------- SOURCE BEGIN -------------------------------------\npackage com.loyauty.web.struts.action.product;\n\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Set;\n\nimport javax.servlet.http.HttpSession;\n\nimport org.jsoup.Jsoup;\n\nimport lombok.Getter;\nimport lombok.Setter;\n\nimport com.loyauty.enums.Language;\nimport com.loyauty.enums.PriceType;\nimport com.loyauty.enums.ProductStatus;\nimport com.loyauty.enums.UserProductStatus;\nimport com.loyauty.enums.UserType;\nimport com.loyauty.exception.ServiceException;\nimport com.loyauty.exception.ServiceLocatorException;\nimport com.loyauty.model.User;\nimport com.loyauty.service.brand.BrandService;\nimport com.loyauty.service.common.CommonService;\nimport com.loyauty.service.core.dto.AlterProductXMLDTO;\nimport com.loyauty.service.core.dto.AlterUserProductXMLDTO;\nimport com.loyauty.service.core.dto.BasicUserDTO;\nimport com.loyauty.service.core.dto.BoxDTO;\nimport com.loyauty.service.core.dto.CategoryDTO;\nimport com.loyauty.service.core.dto.ClientCategoryDTO;\nimport com.loyauty.service.core.dto.CommonDTO;\nimport com.loyauty.service.core.dto.ImageDTO;\nimport com.loyauty.service.core.dto.OperationsDTO;\nimport com.loyauty.service.core.dto.OrdersDTO;\nimport com.loyauty.service.core.dto.ProductDTO;\nimport com.loyauty.service.core.dto.ProductLinkDTO;\nimport com.loyauty.service.core.dto.ProductModelDTO;\nimport com.loyauty.service.core.dto.SpecificationDTO;\nimport com.loyauty.service.core.dto.UserDTO;\nimport com.loyauty.service.core.dto.UserProductPriceDTO;\nimport com.loyauty.service.core.dto.UserSessionDTO;\nimport com.loyauty.service.image.ImageService;\nimport com.loyauty.service.operations.OperationsService;\nimport com.loyauty.service.product.ProductService;\nimport com.loyauty.service.user.UserService;\nimport com.loyauty.util.CommonUtils;\nimport com.loyauty.web.WebConstants;\nimport com.loyauty.web.struts.action.LoyautyAction;\n\npublic class EditSaleProduct extends LoyautyAction{\n\tprivate static final long serialVersionUID = -5162061504759408826L;\n\n\t\n\n\tprivate ProductService productService;\n\tprivate ImageService imageService;\n\tprivate CommonService commonService;\n\tprivate BrandService brandService;\n\tprivate UserService userService;\n\tprivate OperationsService operationsService;\n\t\n\tprivate UserSessionDTO userSession;\n\t@Getter @Setter\n\tprivate long productId;\n\t@Getter @Setter\n\tprivate long imageId;\n\t@Getter @Setter\n\tprivate long brand;\n\t@Getter @Setter\n\tprivate String brandName;\n\t@Getter @Setter\n\tprivate long category;\n\t@Getter @Setter\n\tprivate String categoryName;\n\t@Getter @Setter\n\tprivate long mainSpecification; \n\t@Getter @Setter\n\tprivate String mainSpecificationName;\n\t@Getter @Setter\n\tprivate String manufProductID;\n\t@Getter @Setter\n\tprivate String manufProductID1;\n\t@Getter @Setter\n\tprivate String manufProductID2;\n\t@Getter @Setter\n\tprivate String manufProductID3;\n\t@Getter @Setter\n\tprivate String manufProductID4;\n\t\n\t@Getter @Setter\n\tprivate Integer manufProductQuantity = 0;\n\t@Getter @Setter\n\tprivate Integer manufProductQuantity1 = 0;\n\t@Getter @Setter\n\tprivate Integer manufProductQuantity2 = 0;\n\t@Getter @Setter\n\tprivate Integer manufProductQuantity3 = 0;\n\t@Getter @Setter\n\tprivate Integer manufProductQuantity4 = 0;\n\t\n\t@Getter @Setter\n\tprivate String supplier;\n\t@Getter @Setter\n\tprivate String supplier1;\n\t@Getter @Setter\n\tprivate String supplier2;\n\t@Getter @Setter\n\tprivate String supplier3;\n\t@Getter @Setter\n\tprivate String supplier4;\n\t\n\t@Getter @Setter\n\tprivate String price;\n\t@Getter @Setter\n\tprivate String price1;\n\t@Getter @Setter\n\tprivate String price2;\n\t@Getter @Setter\n\tprivate String price3;\n\t@Getter @Setter\n\tprivate String price4;\t\n\n\t@Getter @Setter\n\tprivate String msrp0;\n\t@Getter @Setter\n\tprivate String msrp1;\n\t@Getter @Setter\n\tprivate String msrp2;\n\t@Getter @Setter\n\tprivate String msrp3;\n\t@Getter @Setter\n\tprivate String msrp4;\n\t\n\t@Getter @Setter\n\tprivate String upc;\n\t@Getter @Setter\n\tprivate String loyaltyProductId;\n\t@Getter @Setter\n\tprivate String nameEn;\n\t@Getter @Setter\n\tprivate String nameFr;\n\t@Getter @Setter\n\tprivate String msrp;\n\t@Getter @Setter\n\tprivate String cost;\n\t@Getter @Setter\n\tprivate String large;\n\t@Getter @Setter\n\tprivate String width;\n\t@Getter @Setter\n\tprivate String high;\n\t@Getter @Setter\n\tprivate String weight;\n\t@Getter @Setter\n\tprivate Double boxLength;\n\t@Getter @Setter\n\tprivate Double boxWidth;\n\t@Getter @Setter\n\tprivate Double boxHeight;\n\t/*\n\t@Getter @Setter\n\tprivate Double boxWeight;\n\t*/\n\t@Getter @Setter\n\tprivate Double boxTotalWeight;\n\t@Getter @Setter\n\tprivate String largeCm;\n\t@Getter @Setter\n\tprivate String widthCm;\n\t@Getter @Setter\n\tprivate String highCm;\n\t@Getter @Setter\n\tprivate String weightKg;\n\t@Getter @Setter\n\tprivate String boxLengthCm;\n\t@Getter @Setter\n\tprivate String boxWidthCm;\n\t@Getter @Setter\n\tprivate String boxHeightCm;\n\t@Getter @Setter\n\tprivate String boxWeightKg;\n\t@Getter @Setter\n\tprivate Integer statusProductBox;\n\t@Getter @Setter\n\tprivate Boolean canadaPostSizesVerified;\n\t@Getter @Setter\n\tprivate BoxDTO boxDTO;\n\t\n\t@Getter @Setter\n\tprivate String descriptionEn;\n\t@Getter @Setter\n\tprivate String descriptionFr;\n\t@Getter @Setter\n\tprivate String specificationEn;\n\t@Getter @Setter\n\tprivate String specificationFr;\n\t@Getter @Setter\n\tprivate String otherEng;\n\t@Getter @Setter\n\tprivate String otherFr;\n\t\n\t//uploading files\n\t@Getter @Setter\t\n\tprivate File productImage; \n\t@Getter @Setter\n\tprivate String productImageContentType;\n\t@Getter @Setter\n\tprivate String productImageFileName;\n\t@Getter @Setter\n\tprivate ImageDTO imgDTO;\n\t@Getter @Setter\n\tprivate List<CommonDTO> categoryList;\n\t@Getter @Setter\n\tprivate List<SpecificationDTO> mainSpecificationList;\n\t@Getter @Setter\n\tprivate boolean update = false;\n\t@Getter @Setter\n\tprivate ProductDTO productDTO;\n\t@Getter @Setter\n\tprivate UserProductPriceDTO userProductPriceDTO;\t\n\t\n\t@Getter @Setter\n\tprivate List<CommonDTO> brandList;\n\t@Getter @Setter\n\tprivate List<CommonDTO> statusList;\n\n\t@Getter @Setter\n\tprivate String linkUrl;\n\t@Getter @Setter\n\tprivate String note;\n\t@Getter @Setter\n\tprivate String statusName;\t\n\t@Getter @Setter\n\tprivate Integer statusId;\n\t@Getter @Setter\n\tprivate List<UserDTO> activeClientsList;\n\t@Getter @Setter\n\tprivate int activeClientsSize;\n\t@Getter @Setter\n\tprivate int activeClientsTFSize;\t\n\t@Getter @Setter\n\tprivate String loyaltyProductIdSub;\n\t\n\t@Getter @Setter\n\tprivate String periodTime;\n\t@Getter @Setter\n\tprivate String warrantyQuantity;\n\t@Getter @Setter\n\tprivate Boolean defectFree;\n\t\n\t@Getter @Setter\n\tprivate List<UserSessionDTO> userNameList;\n\t@Getter @Setter\n\tprivate String[] userPrice;\n\t@Getter @Setter\n\tprivate String[] percentageProfit;\n\t@Getter @Setter\n\tprivate String[] percentageDiscount;\n\t@Getter @Setter\n\tprivate String[] isExcluded;\n\t@Getter @Setter\n\tprivate String[] excluded;\n\t\n\t@Getter @Setter\n\tprivate Double[] currencyRate;\n\t@Getter @Setter\n\tprivate String[] currencySymbol;\n\t@Getter @Setter\n\tprivate String[] currencyPrice;\t//CURRENCY_LS_PRICE\n\t@Getter @Setter\n\tprivate List<ClientCategoryDTO> listClientCategory;\n\t@Getter @Setter\n\tprivate OperationsDTO operationDTO;\n\t@Getter @Setter\n\tprivate Integer thisProductForSale;\n\t@Getter @Setter\n\tprivate Boolean salesByDate;\n\t@Getter @Setter\n\tprivate Boolean saleForAllCleint;\n\t@Getter @Setter\n\tprivate String strUsersId;\n\t\n\t@Getter @Setter\n\tprivate Boolean futurSUB;\n\t@Getter @Setter\n\tprivate Date startDate=new Date();\n\t@Getter @Setter\n\tprivate Date endDate=new Date();\n\t\n\tpublic  EditSaleProduct() throws ServiceLocatorException {\n\t\tsuper();\t\n\t\tproductService = getServiceLocator().getProductService();\n\t\tcommonService = getServiceLocator().getCommonService();\n\t\timageService = getServiceLocator().getImageService();\n\t\tbrandService = getServiceLocator().getBrandService();\n\t\tuserService = getServiceLocator().getUserService();\n\t\toperationsService = getServiceLocator().getOperationsService();\n\t}\n\n\n\t@SuppressWarnings(""unchecked"")\n\t@Override  \n\tpublic String execute() throws Exception {\n\t\ttry {\n\n\t\t\tbrandList = commonService.getBrands();\n\t\t\tstatusList = commonService.getAllProductStatuses();\n\t\t\tcategoryList  = internationalizeName(commonService.getCategoriesByBrand(brand));\n\t\t\tmainSpecificationList = productService.getMainSpecificationByCategory(category);\n\t\t\t\n\t\t\t//productId = (Long) request.getSession(true).getAttribute(""productId"");\n\t\t\tproductDTO = productService.getProductInformation(productId, null);\n\t\t\tboxDTO = productService.getBoxByProductId(productId);\n\t\t\tif(boxDTO==null)boxDTO=new BoxDTO();\n\t\t\timgDTO = productDTO.getImage();\n\t\t\tactiveClientsList = productService.getAllActiveClients(productId);\n\t\t\tactiveClientsTFSize = activeClientsSize = activeClientsList.size();\n\t\t\tactiveClientsTFSize = activeClientsList.isEmpty() ? 1 : activeClientsTFSize;\n\t\t\tBasicUserDTO basicUserDTO = new BasicUserDTO();\n\t\t\tbasicUserDTO.setTypeId(UserType.USER.getValue());\n\t\t\tbasicUserDTO.setActive(true);\n\t\t\tuserNameList = userService.getAllUserAccounts(basicUserDTO);\n\t\t\t//listClientCategory = userService.getAllClientCategory();\n\t\t\tfor (UserSessionDTO usrDTO : userNameList) {\n\t\t\t\tProductDTO pDTO=productService.getSaleActiveByProductIdAndUserId(productId, usrDTO.getId());\n\t\t\t\tif(pDTO!=null)usrDTO.setSelected(true);\n\t\t\t\t//usrDTO.setSelected(true);\n\t\t\t}\t\t\t\n\t\t\tupc=productDTO.getUpc();\n\t\t\tloyaltyProductId=productDTO.getLoyaltyProductId();\n\t\t\tmsrp=productDTO.getMsrp();\n\t\t\tcost=productDTO.getCost();\n\t\t\tmainSpecificationName=productDTO.getSpecificationProduct();\n\t\t\t/*------------------------------------------\n\t\t\t \t\t\t\t\tSale\n\t\t\t  ------------------------------------------*/\n\t\t\tif(salesByDate==null)salesByDate=true;\n\t\t\tif(saleForAllCleint==null)saleForAllCleint=true;\n\t\t\tif(futurSUB==null)futurSUB=false;\n\t\t\tif(strUsersId==null)strUsersId="""";\n\t\t\tString[] strTabUsersId=strUsersId.split("","");\n\t\t\tList<Long> tabUsersId=new ArrayList<Long>();\n\t\t\t\n\t\t\tfor(int i=0;i<strTabUsersId.length;i++){\n\t\t\t\tif(!strTabUsersId[i].equals("""")){\n\t\t\t\t\tLong item=Long.parseLong(strTabUsersId[i]);\n\t\t\t\t\ttabUsersId.add(item);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t\n\t\t\treturn SUCCESS;\n\t\t} catch(ServiceException e) {\n\t\t\tlog.debug(""Service Error when loading file"");\n\t\t\taddActionError(getText(""loyauty.error.common.service""));\n\t\t} catch (Exception e) {\n\t\t\taddActionError(getText(""loyauty.error.common.service""));\n\t\t}\n\t\treturn INPUT;\n\t}\n\n\t\n\tprivate List<CommonDTO> internationalizeName(List<CategoryDTO> list){\n\t\tList<CommonDTO> commonListDTO = new ArrayList<CommonDTO>();\n\t\tCommonDTO commonDTO;\n\t\tfor(CategoryDTO cat : list){\n\t\t\tcommonDTO = CommonDTO.valueOf(cat.getId(), getText(cat.getCode()));\t\t\t\n\t\t\tcommonListDTO.add(commonDTO);\n\t\t}\t\t\n\t\treturn commonListDTO;\n\t}\n    \n   \n\tpublic static UserSessionDTO getUserSessionDTO(ClientCategoryDTO clDTO){\n\t\tLong userId=clDTO.getClientCategoryId();\n\t\tString login=clDTO.getClientCategoryName();\n\t\tInteger TypeId=2;\n\t\tInteger userLangId = 2;\n\t\tInteger RESULTS_PER_PAGE=10;\n\t\tString email="""";\n\t\tString code="""";\n\t\tBoolean isActive=true;\n\t\tLong template =1L;\n\t\tUserSessionDTO sessionDTO =new UserSessionDTO(userId, login, TypeId, userLangId, Language.ENGLISH.getValue(),\n\t\t\t\t\t\t\t\t\t\t\t\t\t  RESULTS_PER_PAGE, email, code, isActive,template);\n\t\t\n\t\treturn sessionDTO;\n\t}\n\t\n\n}\n\n----------------------------------- SOURCE END -------------------------------------",1425317981110
error,log,,,"Problems occurred when invoking code from plug-in: ""org.eclipse.jdt.ui"".",1425317981111
error,log,,,"Error in JDT Core during reconcile",1425317981112
error,log,,,"Exception occurred during problem detection:\n----------------------------------- SOURCE BEGIN -------------------------------------\npackage com.loyauty.web.struts.action.product;\n\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Set;\n\nimport javax.servlet.http.HttpSession;\n\nimport org.jsoup.Jsoup;\n\nimport lombok.Getter;\nimport lombok.Setter;\n\nimport com.loyauty.enums.Language;\nimport com.loyauty.enums.PriceType;\nimport com.loyauty.enums.ProductStatus;\nimport com.loyauty.enums.UserProductStatus;\nimport com.loyauty.enums.UserType;\nimport com.loyauty.exception.ServiceException;\nimport com.loyauty.exception.ServiceLocatorException;\nimport com.loyauty.model.User;\nimport com.loyauty.service.brand.BrandService;\nimport com.loyauty.service.common.CommonService;\nimport com.loyauty.service.core.dto.AlterProductXMLDTO;\nimport com.loyauty.service.core.dto.AlterUserProductXMLDTO;\nimport com.loyauty.service.core.dto.BasicUserDTO;\nimport com.loyauty.service.core.dto.BoxDTO;\nimport com.loyauty.service.core.dto.CategoryDTO;\nimport com.loyauty.service.core.dto.ClientCategoryDTO;\nimport com.loyauty.service.core.dto.CommonDTO;\nimport com.loyauty.service.core.dto.ImageDTO;\nimport com.loyauty.service.core.dto.OperationsDTO;\nimport com.loyauty.service.core.dto.OrdersDTO;\nimport com.loyauty.service.core.dto.ProductDTO;\nimport com.loyauty.service.core.dto.ProductLinkDTO;\nimport com.loyauty.service.core.dto.ProductModelDTO;\nimport com.loyauty.service.core.dto.SpecificationDTO;\nimport com.loyauty.service.core.dto.UserDTO;\nimport com.loyauty.service.core.dto.UserProductPriceDTO;\nimport com.loyauty.service.core.dto.UserSessionDTO;\nimport com.loyauty.service.image.ImageService;\nimport com.loyauty.service.operations.OperationsService;\nimport com.loyauty.service.product.ProductService;\nimport com.loyauty.service.user.UserService;\nimport com.loyauty.util.CommonUtils;\nimport com.loyauty.web.WebConstants;\nimport com.loyauty.web.struts.action.LoyautyAction;\n\npublic class EditSaleProduct extends LoyautyAction{\n\tprivate static final long serialVersionUID = -5162061504759408826L;\n\n\t\n\n\tprivate ProductService productService;\n\tprivate ImageService imageService;\n\tprivate CommonService commonService;\n\tprivate BrandService brandService;\n\tprivate UserService userService;\n\tprivate OperationsService operationsService;\n\t\n\tprivate UserSessionDTO userSession;\n\t@Getter @Setter\n\tprivate long productId;\n\t@Getter @Setter\n\tprivate long imageId;\n\t@Getter @Setter\n\tprivate long brand;\n\t@Getter @Setter\n\tprivate String brandName;\n\t@Getter @Setter\n\tprivate long category;\n\t@Getter @Setter\n\tprivate String categoryName;\n\t@Getter @Setter\n\tprivate long mainSpecification; \n\t@Getter @Setter\n\tprivate String mainSpecificationName;\n\t@Getter @Setter\n\tprivate String manufProductID;\n\t@Getter @Setter\n\tprivate String manufProductID1;\n\t@Getter @Setter\n\tprivate String manufProductID2;\n\t@Getter @Setter\n\tprivate String manufProductID3;\n\t@Getter @Setter\n\tprivate String manufProductID4;\n\t\n\t@Getter @Setter\n\tprivate Integer manufProductQuantity = 0;\n\t@Getter @Setter\n\tprivate Integer manufProductQuantity1 = 0;\n\t@Getter @Setter\n\tprivate Integer manufProductQuantity2 = 0;\n\t@Getter @Setter\n\tprivate Integer manufProductQuantity3 = 0;\n\t@Getter @Setter\n\tprivate Integer manufProductQuantity4 = 0;\n\t\n\t@Getter @Setter\n\tprivate String supplier;\n\t@Getter @Setter\n\tprivate String supplier1;\n\t@Getter @Setter\n\tprivate String supplier2;\n\t@Getter @Setter\n\tprivate String supplier3;\n\t@Getter @Setter\n\tprivate String supplier4;\n\t\n\t@Getter @Setter\n\tprivate String price;\n\t@Getter @Setter\n\tprivate String price1;\n\t@Getter @Setter\n\tprivate String price2;\n\t@Getter @Setter\n\tprivate String price3;\n\t@Getter @Setter\n\tprivate String price4;\t\n\n\t@Getter @Setter\n\tprivate String msrp0;\n\t@Getter @Setter\n\tprivate String msrp1;\n\t@Getter @Setter\n\tprivate String msrp2;\n\t@Getter @Setter\n\tprivate String msrp3;\n\t@Getter @Setter\n\tprivate String msrp4;\n\t\n\t@Getter @Setter\n\tprivate String upc;\n\t@Getter @Setter\n\tprivate String loyaltyProductId;\n\t@Getter @Setter\n\tprivate String nameEn;\n\t@Getter @Setter\n\tprivate String nameFr;\n\t@Getter @Setter\n\tprivate String msrp;\n\t@Getter @Setter\n\tprivate String cost;\n\t@Getter @Setter\n\tprivate String large;\n\t@Getter @Setter\n\tprivate String width;\n\t@Getter @Setter\n\tprivate String high;\n\t@Getter @Setter\n\tprivate String weight;\n\t@Getter @Setter\n\tprivate Double boxLength;\n\t@Getter @Setter\n\tprivate Double boxWidth;\n\t@Getter @Setter\n\tprivate Double boxHeight;\n\t/*\n\t@Getter @Setter\n\tprivate Double boxWeight;\n\t*/\n\t@Getter @Setter\n\tprivate Double boxTotalWeight;\n\t@Getter @Setter\n\tprivate String largeCm;\n\t@Getter @Setter\n\tprivate String widthCm;\n\t@Getter @Setter\n\tprivate String highCm;\n\t@Getter @Setter\n\tprivate String weightKg;\n\t@Getter @Setter\n\tprivate String boxLengthCm;\n\t@Getter @Setter\n\tprivate String boxWidthCm;\n\t@Getter @Setter\n\tprivate String boxHeightCm;\n\t@Getter @Setter\n\tprivate String boxWeightKg;\n\t@Getter @Setter\n\tprivate Integer statusProductBox;\n\t@Getter @Setter\n\tprivate Boolean canadaPostSizesVerified;\n\t@Getter @Setter\n\tprivate BoxDTO boxDTO;\n\t\n\t@Getter @Setter\n\tprivate String descriptionEn;\n\t@Getter @Setter\n\tprivate String descriptionFr;\n\t@Getter @Setter\n\tprivate String specificationEn;\n\t@Getter @Setter\n\tprivate String specificationFr;\n\t@Getter @Setter\n\tprivate String otherEng;\n\t@Getter @Setter\n\tprivate String otherFr;\n\t\n\t//uploading files\n\t@Getter @Setter\t\n\tprivate File productImage; \n\t@Getter @Setter\n\tprivate String productImageContentType;\n\t@Getter @Setter\n\tprivate String productImageFileName;\n\t@Getter @Setter\n\tprivate ImageDTO imgDTO;\n\t@Getter @Setter\n\tprivate List<CommonDTO> categoryList;\n\t@Getter @Setter\n\tprivate List<SpecificationDTO> mainSpecificationList;\n\t@Getter @Setter\n\tprivate boolean update = false;\n\t@Getter @Setter\n\tprivate ProductDTO productDTO;\n\t@Getter @Setter\n\tprivate UserProductPriceDTO userProductPriceDTO;\t\n\t\n\t@Getter @Setter\n\tprivate List<CommonDTO> brandList;\n\t@Getter @Setter\n\tprivate List<CommonDTO> statusList;\n\n\t@Getter @Setter\n\tprivate String linkUrl;\n\t@Getter @Setter\n\tprivate String note;\n\t@Getter @Setter\n\tprivate String statusName;\t\n\t@Getter @Setter\n\tprivate Integer statusId;\n\t@Getter @Setter\n\tprivate List<UserDTO> activeClientsList;\n\t@Getter @Setter\n\tprivate int activeClientsSize;\n\t@Getter @Setter\n\tprivate int activeClientsTFSize;\t\n\t@Getter @Setter\n\tprivate String loyaltyProductIdSub;\n\t\n\t@Getter @Setter\n\tprivate String periodTime;\n\t@Getter @Setter\n\tprivate String warrantyQuantity;\n\t@Getter @Setter\n\tprivate Boolean defectFree;\n\t\n\t@Getter @Setter\n\tprivate List<UserSessionDTO> userNameList;\n\t@Getter @Setter\n\tprivate String[] userPrice;\n\t@Getter @Setter\n\tprivate String[] percentageProfit;\n\t@Getter @Setter\n\tprivate String[] percentageDiscount;\n\t@Getter @Setter\n\tprivate String[] isExcluded;\n\t@Getter @Setter\n\tprivate String[] excluded;\n\t\n\t@Getter @Setter\n\tprivate Double[] currencyRate;\n\t@Getter @Setter\n\tprivate String[] currencySymbol;\n\t@Getter @Setter\n\tprivate String[] currencyPrice;\t//CURRENCY_LS_PRICE\n\t@Getter @Setter\n\tprivate List<ClientCategoryDTO> listClientCategory;\n\t@Getter @Setter\n\tprivate OperationsDTO operationDTO;\n\t@Getter @Setter\n\tprivate Integer thisProductForSale;\n\t@Getter @Setter\n\tprivate Boolean salesByDate;\n\t@Getter @Setter\n\tprivate Boolean saleForAllCleint;\n\t@Getter @Setter\n\tprivate String strUsersId;\n\t\n\t@Getter @Setter\n\tprivate Boolean futurSUB;\n\t@Getter @Setter\n\tprivate Date startDate=new Date();\n\t@Getter @Setter\n\tprivate Date endDate=new Date();\n\t\n\tpublic  EditSaleProduct() throws ServiceLocatorException {\n\t\tsuper();\t\n\t\tproductService = getServiceLocator().getProductService();\n\t\tcommonService = getServiceLocator().getCommonService();\n\t\timageService = getServiceLocator().getImageService();\n\t\tbrandService = getServiceLocator().getBrandService();\n\t\tuserService = getServiceLocator().getUserService();\n\t\toperationsService = getServiceLocator().getOperationsService();\n\t}\n\n\n\t@SuppressWarnings(""unchecked"")\n\t@Override  \n\tpublic String execute() throws Exception {\n\t\ttry {\n\n\t\t\tbrandList = commonService.getBrands();\n\t\t\tstatusList = commonService.getAllProductStatuses();\n\t\t\tcategoryList  = internationalizeName(commonService.getCategoriesByBrand(brand));\n\t\t\tmainSpecificationList = productService.getMainSpecificationByCategory(category);\n\t\t\t\n\t\t\t//productId = (Long) request.getSession(true).getAttribute(""productId"");\n\t\t\tproductDTO = productService.getProductInformation(productId, null);\n\t\t\tboxDTO = productService.getBoxByProductId(productId);\n\t\t\tif(boxDTO==null)boxDTO=new BoxDTO();\n\t\t\timgDTO = productDTO.getImage();\n\t\t\tactiveClientsList = productService.getAllActiveClients(productId);\n\t\t\tactiveClientsTFSize = activeClientsSize = activeClientsList.size();\n\t\t\tactiveClientsTFSize = activeClientsList.isEmpty() ? 1 : activeClientsTFSize;\n\t\t\tBasicUserDTO basicUserDTO = new BasicUserDTO();\n\t\t\tbasicUserDTO.setTypeId(UserType.USER.getValue());\n\t\t\tbasicUserDTO.setActive(true);\n\t\t\tuserNameList = userService.getAllUserAccounts(basicUserDTO);\n\t\t\t//listClientCategory = userService.getAllClientCategory();\n\t\t\tfor (UserSessionDTO usrDTO : userNameList) {\n\t\t\t\tProductDTO pDTO=productService.getSaleActiveByProductIdAndUserId(productId, usrDTO.getId());\n\t\t\t\tif(pDTO!=null)usrDTO.setSelected(true);\n\t\t\t\t//usrDTO.setSelected(true);\n\t\t\t}\t\t\t\n\t\t\tupc=productDTO.getUpc();\n\t\t\tloyaltyProductId=productDTO.getLoyaltyProductId();\n\t\t\tmsrp=productDTO.getMsrp();\n\t\t\tcost=productDTO.getCost();\n\t\t\tmainSpecificationName=productDTO.getSpecificationProduct();\n\t\t\t/*------------------------------------------\n\t\t\t \t\t\t\t\tSale\n\t\t\t  ------------------------------------------*/\n\t\t\tif(salesByDate==null)salesByDate=true;\n\t\t\tif(saleForAllCleint==null)saleForAllCleint=true;\n\t\t\tif(futurSUB==null)futurSUB=false;\n\t\t\tif(strUsersId==null)strUsersId="""";\n\t\t\tString[] strTabUsersId=strUsersId.split("","");\n\t\t\tList<Long> tabUsersId=new ArrayList<Long>();\n\t\t\t\n\t\t\tfor(int i=0;i<strTabUsersId.length;i++){\n\t\t\t\tif(!strTabUsersId[i].equals("""")){\n\t\t\t\t\tLong item=Long.parseLong(strTabUsersId[i]);\n\t\t\t\t\ttabUsersId.add(item);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t\n\t\t\treturn SUCCESS;\n\t\t} catch(ServiceException e) {\n\t\t\tlog.debug(""Service Error when loading file"");\n\t\t\taddActionError(getText(""loyauty.error.common.service""));\n\t\t} catch (Exception e) {\n\t\t\taddActionError(getText(""loyauty.error.common.service""));\n\t\t}\n\t\treturn INPUT;\n\t}\n\n\t\n\tprivate List<CommonDTO> internationalizeName(List<CategoryDTO> list){\n\t\tList<CommonDTO> commonListDTO = new ArrayList<CommonDTO>();\n\t\tCommonDTO commonDTO;\n\t\tfor(CategoryDTO cat : list){\n\t\t\tcommonDTO = CommonDTO.valueOf(cat.getId(), getText(cat.getCode()));\t\t\t\n\t\t\tcommonListDTO.add(commonDTO);\n\t\t}\t\t\n\t\treturn commonListDTO;\n\t}\n    \n   \n\tpublic static UserSessionDTO getUserSessionDTO(ClientCategoryDTO clDTO){\n\t\tLong userId=clDTO.getClientCategoryId();\n\t\tString login=clDTO.getClientCategoryName();\n\t\tInteger TypeId=2;\n\t\tInteger userLangId = 2;\n\t\tInteger RESULTS_PER_PAGE=10;\n\t\tString email="""";\n\t\tString code="""";\n\t\tBoolean isActive=true;\n\t\tLong template =1L;\n\t\tUserSessionDTO sessionDTO =new UserSessionDTO(userId, login, TypeId, userLangId, Language.ENGLISH.getValue(),\n\t\t\t\t\t\t\t\t\t\t\t\t\t  RESULTS_PER_PAGE, email, code, isActive,template);\n\t\t\n\t\treturn sessionDTO;\n\t}\n\t\n\n}\n\n----------------------------------- SOURCE END -------------------------------------",1425317986180
error,log,,,"Problems occurred when invoking code from plug-in: ""org.eclipse.jdt.ui"".",1425317986180
error,log,,,"Error in JDT Core during reconcile",1425317986181
