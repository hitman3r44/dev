what,kind,bundleId,bundleVersion,description,time
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1420673494527
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1420673495519
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1420673495850
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1420673504815
activated,view,org.eclipse.ui.console,3.5.0.v20100526,"org.eclipse.ui.console.ConsoleView",1420673504941
activated,view,org.eclipse.wst.server.ui,1.1.207.v20110119,"org.eclipse.wst.server.ui.ServersView",1420673511183
executed,command,org.eclipse.wst.server.ui,1.1.207.v20110119,"org.eclipse.wst.server.debug",1420673516231
activated,view,org.eclipse.ui.console,3.5.0.v20100526,"org.eclipse.ui.console.ConsoleView",1420673521569
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1420673525858
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1420673539340
activated,view,org.eclipse.wst.server.ui,1.1.207.v20110119,"org.eclipse.wst.server.ui.ServersView",1420673579478
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1420673582612
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1420673625616
executed,command,org.eclipse.wst.server.ui,1.1.207.v20110119,"org.eclipse.wst.server.stop",1420673627567
activated,view,org.eclipse.ui.console,3.5.0.v20100526,"org.eclipse.ui.console.ConsoleView",1420673629400
activated,view,org.eclipse.wst.server.ui,1.1.207.v20110119,"org.eclipse.wst.server.ui.ServersView",1420673629746
activated,view,org.eclipse.ui.console,3.5.0.v20100526,"org.eclipse.ui.console.ConsoleView",1420673631345
activated,view,org.eclipse.wst.server.ui,1.1.207.v20110119,"org.eclipse.wst.server.ui.ServersView",1420673636452
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1420673639961
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1420673641143
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1420673641672
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1420673646310
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1420673650011
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1420673651594
executed,command,org.eclipse.ui.ide,3.6.2.M20101201-0800,"org.eclipse.ui.project.cleanAction",1420673651604
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1420673651893
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1420673652128
error,log,,,"Exception occurred during problem detection:\n----------------------------------- SOURCE BEGIN -------------------------------------\npackage com.loyauty.web.struts.action.product;\n\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.Calendar;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Set;\nimport lombok.Getter;\nimport lombok.Setter;\n\nimport com.loyauty.enums.Language;\nimport com.loyauty.enums.PriceType;\nimport com.loyauty.enums.ProductStatus;\nimport com.loyauty.enums.UserProductStatus;\nimport com.loyauty.enums.UserType;\nimport com.loyauty.exception.ServiceException;\nimport com.loyauty.exception.ServiceLocatorException;\n//import com.loyauty.model.Operations;\nimport com.loyauty.model.User;\nimport com.loyauty.service.brand.BrandService;\nimport com.loyauty.service.common.CommonService;\nimport com.loyauty.service.core.dto.AlterProductXMLDTO;\nimport com.loyauty.service.core.dto.AlterUserProductXMLDTO;\nimport com.loyauty.service.core.dto.BasicUserDTO;\nimport com.loyauty.service.core.dto.BoxDTO;\nimport com.loyauty.service.core.dto.CategoryDTO;\nimport com.loyauty.service.core.dto.ClientCategoryDTO;\nimport com.loyauty.service.core.dto.CommonDTO;\nimport com.loyauty.service.core.dto.ImageDTO;\nimport com.loyauty.service.core.dto.OperationsDTO;\nimport com.loyauty.service.core.dto.ProductDTO;\nimport com.loyauty.service.core.dto.ProductLinkDTO;\nimport com.loyauty.service.core.dto.ProductModelDTO;\nimport com.loyauty.service.core.dto.SpecificationDTO;\nimport com.loyauty.service.core.dto.UserDTO;\nimport com.loyauty.service.core.dto.UserProductPriceDTO;\nimport com.loyauty.service.core.dto.UserSessionDTO;\n//import com.loyauty.service.core.dto.UsersPrivilegesDTO;\nimport com.loyauty.service.image.ImageService;\nimport com.loyauty.service.operations.OperationsService;\nimport com.loyauty.service.product.ProductService;\nimport com.loyauty.service.user.UserService;\nimport com.loyauty.util.CommonUtils;\nimport com.loyauty.web.WebConstants;\nimport com.loyauty.web.struts.action.LoyautyAction;\nimport org.jsoup.Jsoup;\n\npublic class EditProduct extends LoyautyAction {\n\t\n\tprivate static final long serialVersionUID = 4688139859406086753L;\n\t\n\tprivate ProductService productService;\n\tprivate ImageService imageService;\n\tprivate CommonService commonService;\n\tprivate BrandService brandService;\n\tprivate UserService userService;\n\tprivate OperationsService operationsService;\n\t\n\tprivate UserSessionDTO userSession;\n\t@Getter @Setter\n\tprivate long productId;\n\t@Getter @Setter\n\tprivate long imageId;\n\t@Getter @Setter\n\tprivate long brand;\n\t@Getter @Setter\n\tprivate String brandName;\n\t@Getter @Setter\n\tprivate long category;\n\t@Getter @Setter\n\tprivate String categoryName;\n\t@Getter @Setter\n\tprivate long mainSpecification; \n\t@Getter @Setter\n\tprivate String mainSpecificationName;\n\t@Getter @Setter\n\tprivate String manufProductID;\n\t@Getter @Setter\n\tprivate String manufProductID1;\n\t@Getter @Setter\n\tprivate String manufProductID2;\n\t@Getter @Setter\n\tprivate String manufProductID3;\n\t@Getter @Setter\n\tprivate String manufProductID4;\n\t\n\t@Getter @Setter\n\tprivate Integer manufProductQuantity = 0;\n\t@Getter @Setter\n\tprivate Integer manufProductQuantity1 = 0;\n\t@Getter @Setter\n\tprivate Integer manufProductQuantity2 = 0;\n\t@Getter @Setter\n\tprivate Integer manufProductQuantity3 = 0;\n\t@Getter @Setter\n\tprivate Integer manufProductQuantity4 = 0;\n\t\n\t@Getter @Setter\n\tprivate String supplier;\n\t@Getter @Setter\n\tprivate String supplier1;\n\t@Getter @Setter\n\tprivate String supplier2;\n\t@Getter @Setter\n\tprivate String supplier3;\n\t@Getter @Setter\n\tprivate String supplier4;\n\t\n\t@Getter @Setter\n\tprivate String price;\n\t@Getter @Setter\n\tprivate String price1;\n\t@Getter @Setter\n\tprivate String price2;\n\t@Getter @Setter\n\tprivate String price3;\n\t@Getter @Setter\n\tprivate String price4;\t\n\n\t@Getter @Setter\n\tprivate String msrp0;\n\t@Getter @Setter\n\tprivate String msrp1;\n\t@Getter @Setter\n\tprivate String msrp2;\n\t@Getter @Setter\n\tprivate String msrp3;\n\t@Getter @Setter\n\tprivate String msrp4;\n\t\n\t@Getter @Setter\n\tprivate String upc;\n\t@Getter @Setter\n\tprivate String loyaltyProductId;\n\t@Getter @Setter\n\tprivate String nameEn;\n\t@Getter @Setter\n\tprivate String nameFr;\n\t@Getter @Setter\n\tprivate String msrp;\n\t@Getter @Setter\n\tprivate String cost;\n\t@Getter @Setter\n\tprivate String large;\n\t@Getter @Setter\n\tprivate String width;\n\t@Getter @Setter\n\tprivate String high;\n\t@Getter @Setter\n\tprivate String weight;\n\t@Getter @Setter\n\tprivate Double boxLength;\n\t@Getter @Setter\n\tprivate Double boxWidth;\n\t@Getter @Setter\n\tprivate Double boxHeight;\n\t/*\n\t@Getter @Setter\n\tprivate Double boxWeight;\n\t*/\n\t@Getter @Setter\n\tprivate Double boxTotalWeight;\n\t@Getter @Setter\n\tprivate String largeCm;\n\t@Getter @Setter\n\tprivate String widthCm;\n\t@Getter @Setter\n\tprivate String highCm;\n\t@Getter @Setter\n\tprivate String weightKg;\n\t@Getter @Setter\n\tprivate String boxLengthCm;\n\t@Getter @Setter\n\tprivate String boxWidthCm;\n\t@Getter @Setter\n\tprivate String boxHeightCm;\n\t@Getter @Setter\n\tprivate String boxWeightKg;\n\t@Getter @Setter\n\tprivate Integer statusProductBox;\n\t@Getter @Setter\n\tprivate Boolean canadaPostSizesVerified;\n\t@Getter @Setter\n\tprivate BoxDTO boxDTO;\n\t\n\t@Getter @Setter\n\tprivate String descriptionEn;\n\t@Getter @Setter\n\tprivate String descriptionFr;\n\t@Getter @Setter\n\tprivate String specificationEn;\n\t@Getter @Setter\n\tprivate String specificationFr;\n\t@Getter @Setter\n\tprivate String otherEng;\n\t@Getter @Setter\n\tprivate String otherFr;\n\t\n\t//uploading files\n\t@Getter @Setter\t\n\tprivate File productImage; \n\t@Getter @Setter\n\tprivate String productImageContentType;\n\t@Getter @Setter\n\tprivate String productImageFileName;\n\t@Getter @Setter\n\tprivate ImageDTO imgDTO;\n\t@Getter @Setter\n\tprivate List<CommonDTO> categoryList;\n\t@Getter @Setter\n\tprivate List<SpecificationDTO> mainSpecificationList;\n\t@Getter @Setter\n\tprivate boolean update = false;\n\t@Getter @Setter\n\tprivate ProductDTO productDTO;\n\t@Getter @Setter\n\tprivate UserProductPriceDTO userProductPriceDTO;\t\n\t\n\t@Getter @Setter\n\tprivate List<CommonDTO> brandList;\n\t@Getter @Setter\n\tprivate List<CommonDTO> statusList;\n\n\t@Getter @Setter\n\tprivate String linkUrl;\n\t@Getter @Setter\n\tprivate String note;\n\t@Getter @Setter\n\tprivate String statusName;\t\n\t@Getter @Setter\n\tprivate Integer statusId;\n\t@Getter @Setter\n\tprivate List<UserDTO> activeClientsList;\n\t@Getter @Setter\n\tprivate int activeClientsSize;\n\t@Getter @Setter\n\tprivate int activeClientsTFSize;\t\n\t@Getter @Setter\n\tprivate String loyaltyProductIdSub;\n\t\n\t@Getter @Setter\n\tprivate String periodTime;\n\t@Getter @Setter\n\tprivate String warrantyQuantity;\n\t@Getter @Setter\n\tprivate Boolean defectFree;\n\t\n\t@Getter @Setter\n\tprivate List<UserSessionDTO> userNameList;\n\t@Getter @Setter\n\tprivate String[] userPrice;\n\t@Getter @Setter\n\tprivate String[] percentageProfit;\n\t@Getter @Setter\n\tprivate String[] percentageDiscount;\n\t@Getter @Setter\n\tprivate String[] isExcluded;\n\t@Getter @Setter\n\tprivate String[] excluded;\n\t\n\t@Getter @Setter\n\tprivate Double[] currencyRate;\n\t@Getter @Setter\n\tprivate String[] currencySymbol;\n\t@Getter @Setter\n\tprivate String[] currencyPrice;\t//CURRENCY_LS_PRICE\n\t\n\t@Getter @Setter\n\tprivate List<ClientCategoryDTO> listClientCategory;\n\t\n\t@Getter @Setter\n\tprivate OperationsDTO operationDTO;\n\t\n\tpublic EditProduct () throws ServiceLocatorException {\n\t\tsuper();\t\n\t\tproductService = getServiceLocator().getProductService();\n\t\tcommonService = getServiceLocator().getCommonService();\n\t\timageService = getServiceLocator().getImageService();\n\t\tbrandService = getServiceLocator().getBrandService();\n\t\tuserService = getServiceLocator().getUserService();\n\t\toperationsService = getServiceLocator().getOperationsService();\n\t}\n\t\n\t@Override\n\tpublic void prepare() {\n\t\ttry {\n\t\t\tbrandList = commonService.getBrands();\n\t\t\tstatusList = commonService.getAllProductStatuses();\n\t\t\tcategoryList  = internationalizeName(commonService.getCategoriesByBrand(brand));\n\t\t\tmainSpecificationList = productService.getMainSpecificationByCategory(category);\t\t\t\n\t\t\tproductId = (Long) request.getSession(true).getAttribute(""productId"");\n\t\t\tproductDTO = productService.getProductInformation(productId, null);\n\t\t\tboxDTO = productService.getBoxByProductId(productId);\n\t\t\tif(boxDTO==null)boxDTO=new BoxDTO();\n\t\t\timgDTO = productDTO.getImage();\n\t\t\tactiveClientsList = productService.getAllActiveClients(productId);\n\t\t\tactiveClientsTFSize = activeClientsSize = activeClientsList.size();\n\t\t\tactiveClientsTFSize = activeClientsList.isEmpty() ? 1 : activeClientsTFSize;\n\t\t\tBasicUserDTO basicUserDTO = new BasicUserDTO();\n\t\t\tbasicUserDTO.setTypeId(UserType.USER.getValue());\n\t\t\tbasicUserDTO.setActive(true);\n\t\t\tuserNameList = userService.getAllUserAccounts(basicUserDTO);\n\t\t\tlistClientCategory = userService.getAllClientCategory();\n\t\t\tfor (ClientCategoryDTO ccDTO : listClientCategory) {\n\t\t\t\tuserNameList.add(getUserSessionDTO(ccDTO));\n\t\t\t}\t\t\t\n\t\t} catch(Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tlog.debug(""Error when getting product in method prepare()"");\n\t\t}\n\t}\n\t\n\t@Override\n\tpublic void validate() {\n\t\t\t\n\t\t\tif(brand < 0)\n\t\t\t\taddActionError(getText(""loyauty.error.common.brand_required""));\n\t\t\tif(category < 0)\n\t\t\t\taddActionError(getText(""loyauty.error.common.category_required""));\n/*\t\t\tif(mainSpecification < 0)\n\t\t\t\taddActionError(getText(""loyauty.error.common.type_spec_required""));*/\n\t\t\tif(manufProductID.trim().length() == 0)\n\t\t\t\taddActionError(getText(""loyauty.error.common.manufacture_required""));\n\t\t\t\n\t\t\tif(loyaltyProductId.trim().length() == 0) {\n\t\t\t\taddActionError(getText(""loyauty.error.common.productId_required""));\n\t\t\t} else {\t\n\t\t\t\ttry {\n\t\t\t\t\tProductDTO aProductDTO = productService.getProductIdFromLSProductId(loyaltyProductId);\n\t\t\t\t\tif (aProductDTO != null) {\n\t\t\t\t\t\tif (productId != aProductDTO.getId() && !productDTO.getLoyaltyProductId().matches(""^\\\\s*$"")) {\n\t\t\t\t\t\t\taddActionError(getText(""loyauty.error.common.productId_alreadyExists""));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif(!loyaltyProductId.trim().startsWith(brandService.getBrand(brand).getCode()))\n\t\t\t\t\t{\n\t\t\t\t\t\taddActionError(getText(""loyauty.error.common.productId_code""));\n\t\t\t\t\t}\n\t\t\t\t} catch (ServiceException sx) {\n\t\t\t\t\taddActionError(getText(""loyauty.error.common.service""));\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif(nameEn.trim().length() == 0)\n\t\t\t\taddActionError(getText(""loyauty.error.common.name_en_required""));\n\t\t\tif(nameFr.trim().length() == 0)\n\t\t\t\taddActionError(getText(""loyauty.error.common.name_fr_required""));\n\t\t\t\n\t\t\tif(msrp.trim().length() == 0 || msrp.equals(""NaN""))\n\t\t\t\taddActionError(getText(""loyauty.error.common.msrp_required""));\n\t\t\tif(cost.trim().length() == 0 || cost.equals(""NaN""))\n\t\t\t\taddActionError(getText(""loyauty.error.common.cost_required""));\n\t\t\t\n\t\t\tif (statusId == ProductStatus.DISCONTINUED.getValue()) {\n\t\t\t\ttry {\n\t\t\t\t\tif (loyaltyProductIdSub.length() > 0 && !loyaltyProductIdSub.matches(""^\\\\s*$"") ) {\n\t\t\t\t\t\tProductDTO newProductDTO = productService.getProductIdFromLSProductId(loyaltyProductIdSub);\n\t\t\t\t\t\tString newSubbie = (newProductDTO == null) ? """" : newProductDTO.getLoyaltyProductId();\n\t\t\t\t\t\tif (newSubbie == null || newSubbie.matches(""^\\\\s*$"")) {\n\t\t\t\t\t\t\taddActionError(getText(""loyauty.error.common.productIdSub_required""));\n\t\t\t\t\t\t} else  {\n\t\t\t\t\t\t\tif (newSubbie.equalsIgnoreCase(loyaltyProductId)) {\n\t\t\t\t\t\t\t\taddActionError(getText(""loyauty.error.common.productIdSub_equal""));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} catch (ServiceException sx) {\n\t\t\t\t\taddActionError(getText(""loyauty.error.common.service""));\n\t\t\t\t}\n\t\t\t} else if (statusId == ProductStatus.DISABLED.getValue()) {\n\t\t\t\tif (activeClientsList.size() != 0) {\n\t\t\t\t\taddActionError(getText(""loyauty.error.common.disableWithActive""));\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t/*if(descriptionEn.trim().length() == 0)\n\t\t\t\taddActionError(getText(""loyauty.error.common.description_en_required""));\n\t\t\tif(descriptionFr.trim().length() == 0)\n\t\t\t\taddActionError(getText(""loyauty.error.common.description_fr_required""));\n\t\t\tif(specificationEn.trim().length() == 0)\n\t\t\t\taddActionError(getText(""loyauty.error.common.specification_en_required""));\n\t\t\tif(specificationFr.trim().length() == 0)\n\t\t\t\taddActionError(getText(""loyauty.error.common.specification_fr_required""));\n\t\t\tif(width == 0)\n\t\t\t\taddActionError(getText(""loyauty.error.common.width_required""));\n\t\t\tif(large == 0)\n\t\t\t\taddActionError(getText(""loyauty.error.common.large_required""));\n\t\t\tif(high == 0)\n\t\t\t\taddActionError(getText(""loyauty.error.common.high_required""));\n\t\t\t*/\n\t\t\t\n\t\t\ttry {\t\t\t\n\t\t\t\tFloat.parseFloat(msrp);\n\t\t\t} catch(NumberFormatException mfe){\n\t\t\t\taddActionError(getText(""loyauty.error.common.msrp_number""));\n\t\t\t}\t\t\t\n\t\t\ttry {\t\t\t\n\t\t\t\tFloat.parseFloat(cost);\n\t\t\t} catch(NumberFormatException mfe){\n\t\t\t\taddActionError(getText(""loyauty.error.common.cost_number""));\n\t\t\t}\n\t\t\t/*\n\t\t\ttry {\n\t\t\t\tInteger.parseInt(weight);\n\t\t\t} catch(NumberFormatException mfe){\n\t\t\t\taddActionError(getText(""loyauty.error.common.weight_number""));\n\t\t\t}*/\n\t}\n\t\n\t@Override\n\tpublic String execute() throws Exception {\n\t\ttry {\n\t\t\t\n\t\t\tProductDTO productDTOB4 = productService.getProductInformation(productId, null);\n\t\t\tBoxDTO boxDTOB4 = productService.getBoxByProductId(productId);\n\t\t\tif(boxDTOB4 == null) boxDTOB4 = new BoxDTO();\n\t\t\toperationDTO = new OperationsDTO();\n\t\t\tString managerLogin = """";\n\t\t\tUser userManager = new User();\n\t\t\tuserSession = (UserSessionDTO) request.getSession().getAttribute(WebConstants.USER);\n\t\t\tif (userSession != null){\n\t\t\t\tmanagerLogin = userSession.getLogin();\n\t\t\t\tuserManager = userService.getUserByLogin(managerLogin);\n\t\t\t}\n\t\t\tLong managerId = userManager.getId();\n\t\t\tString dataBefore = """";\n\t\t\tString dataAfter = """";\n\t\t\t\n\t\t\t/*\n\t\t\tboolean wereWgtDimChanged = productDTO.getWereWgtDimChanged();\t\t\t\n\t\t\twereWgtDimChanged = (!wereWgtDimChanged) \n\t\t\t\t\t\t\t\t? (!weight.equalsIgnoreCase(productDTO.getWeight())\n\t\t\t\t\t\t\t\t\t|| \t!large.equalsIgnoreCase(productDTO.getLarge())\n\t\t\t\t\t\t\t\t\t|| \t!width.equalsIgnoreCase(productDTO.getWidth())\n\t\t\t\t\t\t\t\t\t|| \t!high.equalsIgnoreCase(productDTO.getHigh())\n\t\t\t\t\t\t\t\t\t|| \t!cost.equalsIgnoreCase(productDTO.getCost())) \n\t\t\t\t\t\t\t\t: wereWgtDimChanged;\n\t\t\tproductDTO.setWereWgtDimChanged(wereWgtDimChanged);\n\t\t\t*/\n\t\t\t\n\t\t\t/*if(boxDTOB4.getWeight()==null)boxDTOB4.setWeight(0.00);\n\t\t\tif(boxDTOB4.getLength()==null)boxDTOB4.setLength(0.00);\n\t\t\tif(boxDTOB4.getWidth()==null)boxDTOB4.setWidth(0.00);\n\t\t\tif(boxDTOB4.getHeight()==null)boxDTOB4.setHeight(0.00);\n\n\t\t\tif(boxDTO.getWeight()==null)boxDTO.setWeight(0.00);\n\t\t\tif(boxDTO.getLength()==null)boxDTO.setLength(0.00);\n\t\t\tif(boxDTO.getWidth()==null)boxDTO.setWidth(0.00);\n\t\t\tif(boxDTO.getHeight()==null)boxDTO.setHeight(0.00);*/\n\n\t\t\t\n\t\t\tboolean wereWgtDimChanged = productDTO.getWereWgtDimChanged();\t\t\t\n\t\t\twereWgtDimChanged = (!wereWgtDimChanged ) \n\t\t\t\t\t\t\t\t? ( (boxDTOB4.getWeight()!=boxDTO.getWeight())\n\t\t\t\t\t\t\t\t\t||(boxDTOB4.getLength()!=boxDTO.getLength())\n\t\t\t\t\t\t\t\t\t||(boxDTOB4.getWidth()!=boxDTO.getWidth())\n\t\t\t\t\t\t\t\t\t||(boxDTOB4.getHeight()!=boxDTO.getHeight())) \n\t\t\t\t\t\t\t\t: wereWgtDimChanged;\n\t\t\tproductDTO.setWereWgtDimChanged(wereWgtDimChanged);\n\t\t\t\n\t\t\tSystem.out.println(boxDTOB4.getWeight()+"" --- ""+boxDTO.getWeight());\n\t\t\tSystem.out.println(boxDTOB4.getLength()+"" --- ""+boxDTO.getLength());\n\t\t\tSystem.out.println(boxDTOB4.getWidth()+"" --- ""+boxDTO.getWidth());\n\t\t\tSystem.out.println(boxDTOB4.getHeight()+"" --- ""+boxDTO.getHeight());\n\t\t\t\n\t\t\tif(upc!=null && !upc.equals(""""))upc=upc.replaceAll("" "", """");\n\t\t\tproductDTO.setUpc(upc);\n\t\t\t\n\t\t\tboxDTO.setProductId(productId);\n\t\t\tboxDTO.setLength(boxLength);\n\t\t\tboxDTO.setWidth(boxWidth);\n\t\t\tboxDTO.setHeight(boxHeight);\n\t\t\tboxDTO.setTotalWeight(boxTotalWeight);\n\t\t\tif(statusProductBox==null)statusProductBox=0;\n\t\t\tboxDTO.setStatusId(statusProductBox);\n\t\t\t/*if(statusProductBox==1) {\n\t\t\t\tboxDTO.setStatusId(1);\n\t\t\t} else {\n\t\t\t\tboxDTO.setStatusId(0);\n\t\t\t}*/\n\t\t\t//Make ""large"" and ""boxLength"" the biggest size between L,W and H\n\t\t\tswitchBetweenLargeWidthHeight();\n\t\t\t\n\t\t\tif (!productDTOB4.getLarge().equals(large)) {\n\t\t\t\tdataBefore += "" Large:["" + productDTOB4.getLarge() + ""]\\n"";\n\t\t\t\tdataAfter += "" Large:["" + large + ""]\\n"";\n\t\t\t}\n\t\t\t\n\t\t\tif (!productDTOB4.getWidth().equals(width)) {\n\t\t\t\tdataBefore += "" Width:["" + productDTOB4.getWidth() + ""]\\n"";\n\t\t\t\tdataAfter += "" Width:["" + width + ""]\\n"";\n\t\t\t}\n\t\t\t\n\t\t\tif (!productDTOB4.getHigh().equals(high)) {\n\t\t\t\tdataBefore += "" High:["" + productDTOB4.getHigh() + ""]\\n"";\n\t\t\t\tdataAfter += "" High:["" + high + ""]\\n"";\n\t\t\t}\n\t\t\t\n\t\t\tif (!productDTOB4.getWeight().equals(weight)){\n\t\t\t\tdataBefore += "" Weight:[""+productDTOB4.getWeight()+""]\\n"";\n\t\t\t\tdataAfter += "" Weight:[""+weight+""]\\n"";\n\t\t\t}\n\t\t\t\n\t\t\t// Box sizes\n\t\t\tif (boxDTOB4.getLength()!= null && !boxDTOB4.getLength().equals(boxDTO.getLength())) {\n\t\t\t\tdataBefore += "" Box Large:["" + boxDTOB4.getLength() + ""]\\n"";\n\t\t\t\tdataAfter += "" Box Large:["" + boxDTO.getLength() + ""]\\n"";\n\t\t\t}\n\t\t\t\n\t\t\tif (boxDTOB4.getWidth()!=null && !boxDTOB4.getWidth().equals(boxDTO.getWidth())) {\n\t\t\t\tdataBefore += "" Box Width:["" + boxDTOB4.getWidth() + ""]\\n"";\n\t\t\t\tdataAfter += "" Box Width:["" + boxDTO.getWidth() + ""]\\n"";\n\t\t\t}\n\t\t\t\n\t\t\tif (boxDTOB4.getHeight()!=null && !boxDTOB4.getHeight().equals(boxDTO.getHeight())) {\n\t\t\t\tdataBefore += "" Box Height:["" + boxDTOB4.getHeight() + ""]\\n"";\n\t\t\t\tdataAfter += "" Box Height:["" + boxDTO.getHeight() + ""]\\n"";\n\t\t\t}\n\t\t\t\n\t\t\tif (boxDTOB4.getTotalWeight()!=null && !boxDTOB4.getTotalWeight().equals(boxDTO.getTotalWeight())) {\n\t\t\t\tdataBefore += "" Box Weight:[""+boxDTOB4.getTotalWeight()+""]\\n"";\n\t\t\t\tdataAfter += "" Box Weight:[""+boxDTO.getTotalWeight()+""]\\n"";\n\t\t\t}\n\t\t\t\n\t\t\tif (boxDTOB4.getStatusId()!=null && !boxDTOB4.getStatusId().equals(boxDTO.getStatusId())) {\n\t\t\t\tdataBefore += "" CP Verified:[""+boxDTOB4.getStatusId()+""]\\n"";\n\t\t\t\tdataAfter += "" CP Verified:[""+boxDTO.getStatusId()+""]\\n"";\n\t\t\t}\n\t\t\t\n\t\t\tif (productDTOB4.getUpc()!=null && !productDTOB4.getUpc().equals(upc)) {\n\t\t\t\tdataBefore += "" UPC:["" + productDTOB4.getUpc() + ""]\\n"";\n\t\t\t\tdataAfter += "" UPC:["" + upc + ""]\\n"";\n\t\t\t}\n\t\t\n\t\t\t\n\t\t\tif (productDTOB4.getUpc()!=null && !productDTOB4.getUpc().equals(upc)) {\n\t\t\t\tdataBefore += "" UPC:["" + productDTOB4.getUpc() + ""]\\n"";\n\t\t\t\tdataAfter += "" UPC:["" + upc + ""]\\n"";\n\t\t\t}\n\t\t\t\n\t\t\tif (!productDTOB4.getCost().equals(cost)) {\n\t\t\t\tdataBefore += "" Our Cost:["" + productDTOB4.getCost() + ""]\\n"";\n\t\t\t\tdataAfter += "" Our Cost:["" + cost + ""]\\n"";\n\t\t\t}\t\n\t\t\tif (manufProductID != null)\n\t\t\t\tif(manufProductQuantity != null)\n\t\t\t\t\tupdateListManufactureProduct(0, manufProductID, manufProductQuantity, supplier, price, msrp0);\n\t\t\t\telse\n\t\t\t\t\tupdateListManufactureProduct(0, manufProductID, 0, supplier, price, msrp0);\n\t\t\tif (manufProductID1 != null)\n\t\t\t\tif(manufProductQuantity1 != null)\n\t\t\t\t\tupdateListManufactureProduct(1, manufProductID1, manufProductQuantity1, supplier1, price1, msrp1);\n\t\t\t\telse\n\t\t\t\t\tupdateListManufactureProduct(1, manufProductID1, 0, supplier1, price1, msrp1);\n\t\t\tif (manufProductID2 != null)\n\t\t\t\tif(manufProductQuantity2 != null)\n\t\t\t\t\tupdateListManufactureProduct(2, manufProductID2, manufProductQuantity2, supplier2, price2, msrp2);\n\t\t\t\telse\n\t\t\t\t\tupdateListManufactureProduct(2, manufProductID2, 0, supplier2, price2, msrp2);\n\t\t\tif (manufProductID3 != null)\n\t\t\t\tif (manufProductQuantity3 != null)\n\t\t\t\t\tupdateListManufactureProduct(3, manufProductID3, manufProductQuantity3, supplier3, price3, msrp3);\n\t\t\t\telse\n\t\t\t\t\tupdateListManufactureProduct(3, manufProductID3, 0, supplier3, price3, msrp3);\n\t\t\tif (manufProductID4 != null)\n\t\t\t\tif(manufProductQuantity4 != null)\n\t\t\t\t\tupdateListManufactureProduct(4, manufProductID4, manufProductQuantity4, supplier4, price4, msrp4);\n\t\t\t\telse\n\t\t\t\t\tupdateListManufactureProduct(4, manufProductID4, 0, supplier4, price4, msrp4);\n\t\t    List<ProductModelDTO>listModelB4= productDTOB4.getManufactureProductList();\n\t\t    List<ProductModelDTO>listModelAfter= productDTO.getManufactureProductList();\n\t\t    for(int i=0;i<listModelB4.size() && i<listModelAfter.size();i++){\n\t\t    \tfor(int j=0;j<listModelAfter.size();j++){\n\t\t    \t\t\tString manufPB4="" Manuf.P:""+listModelB4.get(i).getName()+""["";\n\t\t    \t\t\tString manufPAfter="" Manuf.P:""+listModelB4.get(i).getName()+""["";\n\t\t    \t\t\tboolean isChanged=false;\n\t\t    \t\tif(listModelB4.get(i).getId()==listModelAfter.get(j).getId()){\n\t\t    \t\t\tif(listModelB4.get(i).getName()!=null && !listModelB4.get(i).getName().equals(listModelAfter.get(j).getName())){\n\t\t    \t\t\t\tmanufPB4+=""Name:""+listModelB4.get(i).getName()+"";"";\n\t\t    \t\t\t\tmanufPAfter+=""Name:""+listModelAfter.get(j).getName()+"";"";\n\t\t\t\t\t\t\tisChanged=true;\n\t\t\t\t    \t}\n\t\t\t\t    \tif(listModelB4.get(i).getQuantity()!=null && listModelB4.get(i).getQuantity()!=listModelAfter.get(j).getQuantity()){\n\t\t\t\t    \t\tmanufPB4+=""Quantity:""+listModelB4.get(i).getQuantity()+"";"";\n\t\t\t\t    \t\tmanufPAfter+=""Quantity:""+listModelAfter.get(j).getQuantity()+"";"";\n\t\t\t\t\t\t\tisChanged=true;\n\t\t\t\t    \t}\n\t\t\t\t    \tif(listModelB4.get(i).getSupplier()!=null && !listModelB4.get(i).getSupplier().equals(listModelAfter.get(j).getSupplier())){\n\t\t\t\t    \t\tmanufPB4+=""Supplier:""+listModelB4.get(i).getSupplier()+"";"";\n\t\t\t\t    \t\tmanufPAfter+=""Supplier:""+listModelAfter.get(j).getSupplier()+"";"";\n\t\t\t\t\t\t\tisChanged=true;\n\t\t\t\t    \t}\n\t\t\t\t    \tif(listModelB4.get(i).getPrice()!=null && !listModelB4.get(i).getPrice().equals(listModelAfter.get(j).getPrice())){\n\t\t\t\t    \t\tmanufPB4+=""Cost:""+listModelB4.get(i).getPrice()+"";"";\n\t\t\t\t    \t\tmanufPAfter+=""Cost:""+listModelAfter.get(j).getPrice()+"";"";\n\t\t\t\t\t\t\tisChanged=true;\n\t\t\t\t    \t}\n\t\t\t\t    \tif(listModelB4.get(i).getMsrp()!=null && !listModelB4.get(i).getMsrp().equals(listModelAfter.get(j).getMsrp())){\n\t\t\t\t    \t\tmanufPB4+=""Msrp:""+listModelB4.get(i).getMsrp()+"";"";\n\t\t\t\t    \t\tmanufPAfter+=""Msrp:""+listModelAfter.get(j).getMsrp()+"";"";\n\t\t\t\t\t\t\tisChanged=true;\n\t\t\t\t    \t}\n\t\t    \t\t\tif(isChanged){\n\t\t\t    \t\t\tmanufPB4+=""]\\n"";\n\t\t\t    \t\t\tmanufPAfter+=""]\\n"";\n\t\t\t    \t\t\tif(listModelB4.get(i).getName()!=null && !listModelB4.get(i).getName().equals("""")&&\n\t\t\t    \t\t\t   listModelAfter.get(j).getName()!=null && !listModelAfter.get(j).getName().equals("""")){\n\t\t\t    \t\t\t\tdataBefore+=manufPB4;\n\t\t\t    \t\t\t\tdataAfter+=manufPAfter;\n\t\t\t    \t\t\t}\n\t\t    \t\t\t}\n\t\t    \t\t\tbreak;\n\t\t    \t\t}\n\t\t    \t\t\n\t\t    \t}\t\t    \t\n\t\t    }\n\t\t    \n\t\t    for(int i=0;i<listModelB4.size();i++){\n\t\t\t    \tboolean exist=false;\n\t\t\t    \tfor(int j=0;j<listModelAfter.size();j++){\n\t\t\t    \t\tif(listModelAfter.get(j).getId()==listModelB4.get(i).getId()&& !listModelAfter.get(j).getName().equals("""")){\n\t\t\t    \t\t\texist=true;\n\t\t\t    \t\t\tbreak;\n\t\t\t    \t\t}\n\t\t\t    \t}\n\t\t\t    \t\n\t\t\t    \tif(!exist){\n\t\t\t    \t\tboolean isChanged=false;\n\t\t    \t\t\tString manufPB4="" Manuf.P:["";\n\t\t    \t\t\tString manufPAfter="" Manuf.P:["";\n\t\t\t    \t\tif(listModelB4.get(i).getName()!=null){\n\t\t\t    \t\t\tisChanged=true;\n\t\t\t    \t\t\tmanufPB4+=""Name:""+listModelB4.get(i).getName()+"";"";\n\t\t\t\t    \t}\n\t\t\t\t    \tif(listModelB4.get(i).getQuantity()!=null){\n\t\t\t\t    \t\tisChanged=true;\n\t\t\t\t    \t\tmanufPB4+=""Quantity:""+listModelB4.get(i).getQuantity()+"";"";\n\t\t\t\t    \t\t\n\t\t\t\t    \t}\n\t\t\t\t    \tif(listModelB4.get(i).getSupplier()!=null){\n\t\t\t\t    \t\tisChanged=true;\n\t\t\t\t    \t\tmanufPB4+=""Supplier:""+listModelB4.get(i).getSupplier()+"";"";\n\t\t\t\t    \t\t\n\t\t\t\t    \t}\n\t\t\t\t    \tif(listModelB4.get(i).getPrice()!=null){\n\t\t\t\t    \t\tisChanged=true;\n\t\t\t\t    \t\tmanufPB4+=""Cost:""+listModelB4.get(i).getPrice()+"";"";\n\t\t\t\t    \t\t\n\t\t\t\t    \t}\n\t\t\t\t    \tif(listModelB4.get(i).getMsrp()!=null){\n\t\t\t\t    \t\tisChanged=true;\n\t\t\t\t    \t\tmanufPB4+=""Msrp:""+listModelB4.get(i).getMsrp();\n\t\t\t\t    \t}\n\t\t\t\t    \t\n\t\t    \t\t\tif(isChanged){\n\t\t\t    \t\t\tmanufPB4+=""]\\n"";\n\t\t\t    \t\t\tif(listModelB4.get(i).getName()!=null && !listModelB4.get(i).getName().equals(""""))dataBefore+=manufPB4;\n\t\t\t    \t\t\tmanufPAfter="" Manuf.P:""+""[Name:""+listModelB4.get(i).getName()+"" was removed!]\\n"";\n\t\t\t    \t\t\tif(listModelB4.get(i).getName()!=null && !listModelB4.get(i).getName().equals(""""))dataAfter+=manufPAfter;\n\t\t    \t\t\t}\t\t\t    \t\t\n\t\t\t    \t}\t\t\t    \t\n\t\t\t    }\n\t\t\t\t\n\t\t\t    for(int i=0;i<listModelAfter.size();i++){\n\t\t\t    \tboolean exist=false;\n\t\t\t    \tfor(int j=0;j<listModelB4.size();j++){\n\t\t\t    \t\tif(listModelB4.get(j).getId()==listModelAfter.get(i).getId()){\n\t\t\t    \t\t\texist=true;\n\t\t\t    \t\t\tbreak;\n\t\t\t    \t\t}\n\t\t\t    \t}\n\t\t\t    \t\n\t\t\t    \tif(!exist){\n\t\t\t    \t\tboolean isChanged=false;\n\t\t    \t\t\tString manufPAfter="" Manuf.P:["";\n\t\t    \t\t\tString manufPB4="" Manuf.P:["";\n\t\t    \t\t\tif(listModelAfter.get(i).getName()!=null){\n\t\t    \t\t\t\tisChanged=true;\n\t\t    \t\t\t\tmanufPAfter+=""Name:""+listModelAfter.get(i).getName()+"";"";\n\t\t\t\t    \t}\n\t\t\t\t    \tif(listModelAfter.get(i).getQuantity()!=null){\n\t\t\t\t    \t\tisChanged=true;\n\t\t\t\t    \t\tmanufPAfter+=""Quantity:""+listModelAfter.get(i).getQuantity()+"";"";\n\t\t\t\t    \t}\n\t\t\t\t    \tif(listModelAfter.get(i).getSupplier()!=null){\n\t\t\t\t    \t\tisChanged=true;\n\t\t\t\t    \t\tmanufPAfter+=""Supplier:""+listModelAfter.get(i).getSupplier()+"";"";\n\t\t\t\t    \t}\n\t\t\t\t    \tif(listModelAfter.get(i).getPrice()!=null){\n\t\t\t\t    \t\tisChanged=true;\n\t\t\t\t    \t\tmanufPAfter+=""Cost:""+listModelAfter.get(i).getPrice()+"";"";\n\t\t\t\t    \t}\n\t\t\t\t    \tif(listModelAfter.get(i).getMsrp()!=null){\n\t\t\t\t    \t\tisChanged=true;\n\t\t\t\t    \t\tmanufPAfter+=""Msrp:""+listModelAfter.get(i).getMsrp();\n\t\t\t\t    \t}\n\t\t\t\t    \t\n\t\t    \t\t\tif(isChanged){\n\t\t\t    \t\t\tmanufPAfter+=""]\\n"";\n\t\t\t    \t\t\tif(listModelAfter.get(i).getName()!=null && !listModelAfter.get(i).getName().equals(""""))dataAfter+=manufPAfter;\n\t\t\t    \t\t\t\n\t\t\t    \t\t\tmanufPB4+=""Name:""+listModelAfter.get(i).getName()+"" was added]\\n"";\n\t\t\t    \t\t\tif(listModelAfter.get(i).getName()!=null && !listModelAfter.get(i).getName().equals(""""))dataBefore+=manufPB4;\n\t\t\t    \t\t\t\n\t\t    \t\t\t}\n\t\t\t    \t}\n\t\t\t    }\n\t\t    \n\t\t\tproductDTO.getBrand().setId(brand);\n\t\t\tproductDTO.getCategory().setId(category);\n\t\t\tproductDTO.setMainFilterTypeId(mainSpecification);\n\t\t\tproductDTO.setLoyaltyProductId(loyaltyProductId);\n\t\t\tproductDTO.getNameEng().setName(nameEn);\n\t\t\tproductDTO.getNameFr().setName(nameFr);\n\t\t\tproductDTO.setMsrp(msrp);\n\t\t\tproductDTO.setCost(cost);\t\t\t\n\t\t\tproductDTO.setWidth(width);\n\t\t\tproductDTO.setLarge(large);\n\t\t\tproductDTO.setHigh(high);\n\t\t\tproductDTO.setWeight(weight);\n\t\t\t\n\t\t\tproductDTO.getDescriptionEng().setName(descriptionEn);\n\t\t\tproductDTO.getDescriptionFr().setName(descriptionFr);\n\t\t\tproductDTO.getSpecificationEng().setName(specificationEn);\n\t\t\tproductDTO.getSpecificationFr().setName(specificationFr);\t\t\t\n\t\t\tif (productDTO.getOtherEng() != null)\n\t\t\t\tproductDTO.getOtherEng().setName(otherEng);\t\t\t\n\t\t\tproductDTO.getOtherFr().setName(otherFr);\n\t\t\t\n\t\t\tproductDTO.setStatus((ProductStatus) CommonUtils.enumFromValue(ProductStatus.values(), statusId));\n\t\t\t\n\t\t\tif (statusId == ProductStatus.DISCONTINUED.getValue()) {\n\t\t\t\tproductDTO.setDiscontinuedStartDate(Calendar.getInstance().getTime());\n\t\t\t\tproductDTO.setLoyaltyProductIdSub(loyaltyProductIdSub);\n\t\t\t} else if (statusId == ProductStatus.DISABLED.getValue()) {\n\t\t\t\tif (productDTO.getDiscontinuedStartDate() != null) {\n\t\t\t\t\tproductDTO.setDiscontinuedStartDate(productDTO.getDiscontinuedStartDate());\n\t\t\t\t}\n\t\t\t\tif (productDTO.getLoyaltyProductIdSub() != null) {\n\t\t\t\t\tproductDTO.setLoyaltyProductIdSub(productDTO.getLoyaltyProductIdSub());\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tproductDTO.setNote(note);\n\t\t\t\n\t\t\t//Warranty\n\t\t\tString warrantyEng = """";\n\t\t\tString warrantyFr = """";\n\t\t\t\n\t\t\tif(defectFree) {\n\t\t\t\twarrantyEng = WebConstants.WARRANTY_DEFECT_FREE_ENG;\n\t\t\t\twarrantyFr = WebConstants.WARRANTY_DEFECT_FREE_FR;\n\t\t\t} else {\n\t\t\t\tif(periodTime.equalsIgnoreCase(WebConstants.WARRANTY_MONTH_ENG)) {\n\t\t\t\t\tif(Integer.valueOf(warrantyQuantity) > 1) {\n\t\t\t\t\t\twarrantyEng =  warrantyQuantity + "" "" + WebConstants.WARRANTY_MONTHS_ENG;\n\t\t\t\t\t} else {\n\t\t\t\t\t\twarrantyEng =  warrantyQuantity + "" "" + WebConstants.WARRANTY_MONTH_ENG;\n\t\t\t\t\t}\n\t\t\t\t\twarrantyFr = warrantyQuantity + "" "" + WebConstants.WARRANTY_MONTH_FR;\n\t\t\t\t} else {\n\t\t\t\t\tif(Integer.valueOf(warrantyQuantity) > 1) {\n\t\t\t\t\t\twarrantyEng =  warrantyQuantity + "" "" + WebConstants.WARRANTY_YEARS_ENG;\n\t\t\t\t\t\twarrantyFr = warrantyQuantity + "" "" + WebConstants.WARRANTY_YEARS_FR;\n\t\t\t\t\t} else {\n\t\t\t\t\t\twarrantyEng =  warrantyQuantity + "" "" + WebConstants.WARRANTY_YEAR_ENG;\n\t\t\t\t\t\twarrantyFr = warrantyQuantity + "" "" + WebConstants.WARRANTY_YEAR_FR;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif(productDTO.getWarrantyEng() == null) {\n\t\t\t\tCommonDTO commonWarrantyEng = CommonDTO.valueOf(0, warrantyEng);\n\t\t\t\tCommonDTO commonWarrantyFr = CommonDTO.valueOf(0, warrantyFr);\n\t\t\t\t\n\t\t\t\tproductDTO.setWarrantyEng(commonWarrantyEng);\n\t\t\t\tproductDTO.setWarrantyFr(commonWarrantyFr);\n\t\t\t} else {\n\t\t\t\tproductDTO.getWarrantyEng().setName(warrantyEng);\n\t\t\t\tproductDTO.getWarrantyFr().setName(warrantyFr);\n\t\t\t}\n\t\t\t\n\t\t\tString currentRealName = """";\n\t\t\t\n\t\t\t//That means that insert a new image and I have to link to the product\n\t\t\tif(imageId != 0) {\n\t\t\t\tif(productDTO.getImage() != null)\n\t\t\t\t\tproductDTO.getImage().setId(imageId);\n\t\t\t\telse\n\t\t\t\t\tproductDTO.setImage(imageService.getImage(imageId));\n\t\t\t\t\n\t\t\t\timgDTO = imageService.getImage(imageId);\n\t\t\t\tcurrentRealName = imgDTO.getRealName();\n\t\t\t}\n\t\t\t\n\t\t\tif(productDTO.getLinkList().size() == 0) {\n\t\t\t\t//If the link doesn't exist, I have to insert the link\n\t\t\t\tList<ProductLinkDTO> linkList = new ArrayList<ProductLinkDTO>();\n\t\t\t\tProductLinkDTO productLinkDTO = ProductLinkDTO.valueOf(linkUrl, productDTO.getId());\n\t\t\t\tlinkList.add(productLinkDTO);\n\t\t\t\tproductDTO.setLinkList(linkList);\n\t\t\t} else {\n\t\t\t\t//There is a link, so I have to update it.\n\t\t\t\tproductDTO.getLinkList().get(0).setLink(linkUrl);\n\t\t\t}\n\t\t\t\n\t\t\tboolean consideredForXML = productDTO.getConsideredForXML();\t\t\t\n\t\t\tif (!consideredForXML) { \n\t\t\t\tproductDTO.setConsideredForXML(true);\n\t\t\t}\n\t\t\t\n\t\t\tif(productDTOB4.getBrand().getId()!=productDTO.getBrand().getId()){\n\t    \t\tdataBefore+="" Brand:[""+productDTOB4.getBrand().getName()+""]\\n"";\n\t\t\t\tdataAfter+="" Brand::[""+productDTO.getBrand().getName()+""]\\n"";\n\t    \t}\n\t\t\t\n\t\t\t\n\t\t\tif(productDTOB4.getCategory().getId()!=productDTO.getCategory().getId()){\n\t    \t\tdataBefore+="" Category:[""+productDTOB4.getCategory().getName()+""]\\n"";\n\t\t\t\tdataAfter+="" Category:[""+productDTO.getCategory().getName()+""]\\n"";\n\t    \t}\n\t\t\t\n\t\t\tif(productDTOB4.getLoyaltyProductId()!=null && !productDTOB4.getLoyaltyProductId().equals(productDTO.getLoyaltyProductId())){\n\t    \t\tdataBefore+="" Loyalty P.Id:[""+productDTOB4.getLoyaltyProductId()+""]\\n"";\n\t\t\t\tdataAfter+="" Loyalty P.Id:[""+productDTO.getLoyaltyProductId()+""]\\n"";\n\t    \t}\n\t\t\t\n\t\t\tif(!productDTOB4.getNameEng().equals(productDTO.getNameEng())){\n\t    \t\tdataBefore+="" Name Eng:[""+productDTOB4.getNameEng()+""]\\n"";\n\t\t\t\tdataAfter+="" Name Eng:[""+productDTO.getNameEng()+""]\\n"";\n\t    \t}\n\n\t\t\tif(!productDTOB4.getNameFr().equals(productDTO.getNameFr())){\n\t    \t\tdataBefore+="" Name Fr:[""+productDTOB4.getNameFr()+""]\\n"";\n\t\t\t\tdataAfter+="" Name Fr:[""+productDTO.getNameFr()+""]\\n"";\n\t    \t}\n\n\t\t\tif(!productDTOB4.getMsrp().equals(productDTO.getMsrp())){\n\t    \t\tdataBefore+="" Msrp:[""+productDTOB4.getMsrp()+""]\\n"";\n\t\t\t\tdataAfter+="" Msrp:[""+productDTO.getMsrp()+""]\\n"";\n\t    \t} \n\n\t\t\tif(productDTOB4.getStatus().getValue()!=productDTO.getStatus().getValue()){\n\t\t\t\tString statusName=ProductStatus.getStatusByValue(productDTOB4.getStatus().getValue());\n\t    \t\tdataBefore+="" Status:[""+statusName+""]\\n"";\n\t    \t\tstatusName=ProductStatus.getStatusByValue(productDTO.getStatus().getValue());\n\t\t\t\tdataAfter+="" Status:[""+statusName+""]\\n"";\n\t    \t}\n\t\t\t\n\t\t\tif(!productDTOB4.getLoyaltyProductIdSub().equals(productDTO.getLoyaltyProductIdSub())){\n\t    \t\tdataBefore+="" Loyalty P.Id Sub:[""+productDTOB4.getLoyaltyProductIdSub()+""]\\n"";\n\t\t\t\tdataAfter+="" Loyalty P.Id Sub:[""+productDTO.getLoyaltyProductIdSub()+""]\\n"";\n\t    \t} \n\n\t\t\t// update product\n\t\t\tproductService.updateProduct(productDTO);\n\t\t\t\n\t\t\t// update product_box\n\t\t\t//UsersPrivilegesDTO usersPrivCPVerified = (UsersPrivilegesDTO)request.getSession(true).getAttribute(""usersPrivCanadaPostVerified"");\n\t\t\tproductService.updateProductBox(boxDTO);\n\n\t\t\trequest.getSession(true).setAttribute(""productID"", productId);\n\t\t\t\n\t\t\tfinal int SIZE = userNameList.size();\n\t\t\tString[] priceFull = new String[SIZE];\n\t\t\tString[] profitFull = new String[SIZE];\n\t\t\tString[] discountFull = new String[SIZE];\n\t\t\tBoolean[] excludedFull = new Boolean[SIZE];\n\t\t\texcluded = new String[SIZE];\n\t\t\tcurrencyRate = new Double[SIZE];\n\t\t\tcurrencySymbol = new String[SIZE];\n\t\t\tcurrencyPrice = new String[SIZE];\n\t\t\t\n\t\t\tArrayList<Long> arrayList = new ArrayList<Long>();\n\t\t\tUserDTO userDTOforCurrency;\n\t\t\tint count = 0;\n\t\t\tfor (UserSessionDTO uDTO : userNameList) {\n\t\t\t\tarrayList.add(uDTO.getId());\n\t\t\t\tuserDTOforCurrency = userService.getUserInformation(uDTO.getId());\n\t\t\t\tcurrencyRate[count] = 1D;\n\t\t\t\tcurrencySymbol[count] = ""CAD"";\n\t\t\t\tcurrencyPrice[count] = """";\n\t\t\t\tif(userDTOforCurrency!=null && userDTOforCurrency.getCurrencyRate()!=null) \n\t\t\t\t\tcurrencyRate[count] = userDTOforCurrency.getCurrencyRate();\n\t\t\t\tif(userDTOforCurrency!=null && userDTOforCurrency.getCurrencySymbol()!=null) \n\t\t\t\t\tcurrencySymbol[count] = userDTOforCurrency.getCurrencySymbol();\n\t\t\t\tcount++;\n\t\t\t}\n\n\t\t\tList<Long> whichUsersChangedByPrice = new ArrayList<Long>();\n\t\t\tList<Long> whichUsersChangedByExcluded = new ArrayList<Long>();\n\t\t\tcount = 0;\n\t\t\tint others = 0;\n\t\t\tfor (long userIdFromDTO : arrayList) {\n\t\t\t\tif (isThereTheExcludedInUserSessionDTO(isExcluded, userIdFromDTO)) {\n\t\t\t\t\texcludedFull[count] = true;\n\t\t\t\t\texcluded[count] = ""t"";\n\t\t\t\t\twhichUsersChangedByExcluded.add(userIdFromDTO);\n\t\t\t\t\tpriceFull[count] = """";\n\t\t\t\t\tprofitFull[count] = """";\n\t\t\t\t\tdiscountFull[count] = """";\n\t\t\t\t} else {\n\t\t\t\t\texcludedFull[count] = false;\n\t\t\t\t\texcluded[count] = ""f"";\n\t\t\t\t\twhichUsersChangedByPrice.add(userIdFromDTO);\n\t\t\t\t\tpriceFull[count] = userPrice[others];\n\t\t\t\t\tprofitFull[count] = percentageProfit[others];\n\t\t\t\t\tdiscountFull[count] = percentageDiscount[others];\n\t\t\t\t\t++others;\n\t\t\t\t}\n\t\t\t\t++count;\n\t\t\t}\n\t\t\t\n\t\t\tList<UserProductPriceDTO> uppDTOListCopy = productService.getUserProductPriceList(productId);\t\t\t\n\t\t\tUserProductPriceDTO uppDTO = new UserProductPriceDTO();\n\t\t\tint index = 0;\n\t\t\tfor (long userIdFromDTO : arrayList) {\n\t\t\t\tuppDTO = new UserProductPriceDTO();\n\t\t\t\tuppDTO.setExcluded(excludedFull[index]);\t\t\t\t\n\t\t\t\tuppDTO.setPrice(priceFull[index]);\n\t\t\t\tuppDTO.setProfit(profitFull[index]);\n\t\t\t\tuppDTO.setDiscount(discountFull[index]);\t\t\t\n\t\t\t\tuppDTO.setProductId(productId);\n\t\t\t\tuppDTO.setUserId(userIdFromDTO);\n\t\t\t\tuppDTO.setPriceType(PriceType.ADD_PRODUCT_PRICE_SET);\n\t\t\t\tuppDTO.setUserStatus(UserProductStatus.ACTIVE);\n\t\t\t\tproductService.updateUserProductPrice(uppDTO);\n\t\t\t\t++index;\n\t\t\t}\n\t\t\t\n\t\t\tuserPrice = priceFull;\n\t\t\tpercentageProfit = profitFull;\n\t\t\tpercentageDiscount = discountFull;\t\t\t\n\t\t\t\n\t\t\tfor(int i=0;i<userPrice.length; i++) {\n\t\t\t\tif(userPrice[i]!=null && userPrice[i].replaceAll("" "", """").matches(""^-?\\\\d*\\\\.\\\\d+$|^-?\\\\d+$"")) {\n\t\t\t\t\tDouble curPrice = currencyRate[i] * Double.parseDouble(userPrice[i]);\n\t\t\t\t\tcurPrice = (double) Math.round(curPrice*100)/100;\n\t\t\t\t\tcurrencyPrice[i] = curPrice+"""";\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tList<UserProductPriceDTO> uppDTOListPriceB4 = new ArrayList<UserProductPriceDTO>();\n\t\t\tUserProductPriceDTO  userProductPriceDTOB4 = new UserProductPriceDTO();\n\t\t\tfor (UserProductPriceDTO userProductPriceDTOCopy : uppDTOListCopy) {\n\t\t\t\tuserProductPriceDTOB4 = new UserProductPriceDTO();\n\t\t\t\tuserProductPriceDTOB4.setId(userProductPriceDTOCopy.getId());\n\t\t\t\tuserProductPriceDTOB4.setUserId(userProductPriceDTOCopy.getUserId());\n\t\t\t\tuserProductPriceDTOB4.setProductId(userProductPriceDTOCopy.getProductId());\n\t\t\t\tuserProductPriceDTOB4.setPriceType(userProductPriceDTOCopy.getPriceType());\n\t\t\t\tuserProductPriceDTOB4.setUserStatus(userProductPriceDTOCopy.getUserStatus());\t\t\t\t\n\t\t\t\tif (userProductPriceDTOCopy.getPrice() != null) {\n\t\t\t\t\tif (userProductPriceDTOCopy.getPrice().matches(""^\\\\s*$"")) {\n\t\t\t\t\t\tuserProductPriceDTOB4.setPrice(""0.00"");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tuserProductPriceDTOB4.setPrice(userProductPriceDTOCopy.getPrice());\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tuserProductPriceDTOB4.setPrice(""0.00"");\n\t\t\t\t}\n\t\t\t\tuserProductPriceDTOB4.setProfit(userProductPriceDTOCopy.getProfit());\n\t\t\t\tuserProductPriceDTOB4.setDiscount(userProductPriceDTOCopy.getDiscount());\n\t\t\t\tuserProductPriceDTOB4.setExcluded(userProductPriceDTOCopy.getExcluded());\n\t\t\t\tuppDTOListPriceB4.add(userProductPriceDTOB4);\n\t\t\t}\n\t\t\t\n\t\t\tuppDTOListCopy = null;\n\t\t\tList<UserProductPriceDTO> uppDTOListPriceAfter = new ArrayList<UserProductPriceDTO>();\n\t\t\tUserProductPriceDTO uppDTOAfter = new UserProductPriceDTO();\n\t\t\tindex = 0;\n\t\t\tfor (long userIdFromDTO : arrayList) {\n\t\t\t\tuppDTOAfter = new UserProductPriceDTO();\n\t\t\t\tuppDTOAfter.setExcluded(excludedFull[index]);\n\t\t\t\tif (priceFull[index].matches(""^\\\\s*$"")) {\n\t\t\t\t\tpriceFull[index] = ""0.00"";\n\t\t\t\t}\n\t\t\t\tuppDTOAfter.setPrice(priceFull[index]);\n\t\t\t\tuppDTOAfter.setProfit(profitFull[index]);\n\t\t\t\tuppDTOAfter.setDiscount(discountFull[index]);\n\t\t\t\tuppDTOAfter.setProductId(productId);\n\t\t\t\tuppDTOAfter.setUserId(userIdFromDTO);\n\t\t\t\tuppDTOAfter.setPriceType(PriceType.ADD_PRODUCT_PRICE_SET);\n\t\t\t\tuppDTOAfter.setUserStatus(UserProductStatus.ACTIVE);\n\t\t\t\tuppDTOListPriceAfter.add(uppDTOAfter);\n\t\t\t\t++index;\n\t\t\t}\n\t\t\tfor (int i=0; i<uppDTOListPriceB4.size(); i++) {\n\t\t\t\tfor (int j=0; j<uppDTOListPriceAfter.size(); j++) {\n\t\t\t\t\tif (uppDTOListPriceB4.get(i).getUserId() == uppDTOListPriceAfter.get(j).getUserId()) {\t\t\t\t\t\t\n\t\t\t\t\t\tif (uppDTOListPriceB4.get(i).getExcluded() != uppDTOListPriceAfter.get(j).getExcluded()) {\n\t\t\t\t\t\t\tUserDTO userDTO = userService.getUserOrTemplateById(uppDTOListPriceB4.get(i).getUserId());\n\t\t\t\t    \t\tdataBefore += "" Excluded:[""+userDTO.getLogin() + "":"" + uppDTOListPriceB4.get(i).getExcluded() + ""]\\n"";\n\t\t\t\t\t\t\tdataAfter += "" Excluded:[""+userDTO.getLogin() + "":"" + uppDTOListPriceAfter.get(j).getExcluded() + ""]\\n"";\n\t\t\t\t    \t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (uppDTOListPriceB4.get(i).getPrice() != null \n\t\t\t\t\t\t\t\t\t&& !uppDTOListPriceB4.get(i).getPrice().equals(uppDTOListPriceAfter.get(j).getPrice()) \n\t\t\t\t\t\t\t\t\t&& !uppDTOListPriceAfter.get(j).getExcluded()) {\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t//-------------------- recalculate shipping total-------------------------------------\n\t\t\t\t\t\t\t\tproductService.calculateShippingRate(uppDTOListPriceB4.get(i).getUserId(), uppDTOListPriceB4.get(i).getProductId());\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t//------------------------------------------------------------------------------------\n\t\t\t\t\t\t\t\tUserDTO userDTO = userService.getUserOrTemplateById(uppDTOListPriceB4.get(i).getUserId());\n\t\t\t\t\t\t\t\tdataBefore += "" User Price:[""+userDTO.getLogin() + "":"" + uppDTOListPriceB4.get(i).getPrice() + ""]\\n"";\n\t\t\t\t\t\t\t\tdataAfter += "" User Price:[""+userDTO.getLogin() + "":"" + uppDTOListPriceAfter.get(j).getPrice() + ""]\\n"";\n\t\t\t\t    \t} \n\t\t\t\t\t    break;\n\t\t\t\t\t}\t\t\t\t\t\n\t\t\t\t}\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\toperationDTO.setOperationType(""Update Product"");\n\t\t\toperationDTO.setDataBefore(dataBefore);\n\t\t\toperationDTO.setDataAfter(dataAfter);\n\t\t\toperationDTO.setObjectId(productId);\n\t\t\toperationDTO.setUserId(managerId);\n\t\t\toperationsService.insertOperation(operationDTO);\n\t\t\thandleAlterProductXML(productDTOB4, brand, category, mainSpecification, currentRealName, statusId,  nameEn, nameFr,\n\t\t\t\t\t\t\t\t\tdescriptionEn, descriptionFr, specificationEn, specificationFr, otherEng, \n\t\t\t\t\t\t\t\t\totherFr, warrantyEng, warrantyFr, msrp, large, width, high, weight, \n\t\t\t\t\t\t\t\t\tmanufProductID, whichUsersChangedByPrice, whichUsersChangedByExcluded, \n\t\t\t\t\t\t\t\t\tuppDTOListPriceB4, uppDTOListPriceAfter, wereWgtDimChanged);\n\t\t\t\n\t\t\treturn SUCCESS;\n\t\t} catch(ServiceException e) {\n\t\t\tlog.debug(""Service Error when loading file"");\n\t\t\taddActionError(getText(""loyauty.error.common.service""));\n\t\t} catch (Exception e) {\n\t\t\taddActionError(getText(""loyauty.error.common.service""));\n\t\t}\n\t\treturn INPUT;\n\t}\n\t\n\t/**\n\t * @author Rafael Padron\n\t */\n\tpublic void handleAlterProductXML(ProductDTO productDTO, long brand, long category, \n\t\t\tlong mainSpecification, String imageRealName, Integer statusId, String nameEn, String nameFr,\n\t\t\tString descriptionEn, String descriptionFr,\n\t\t\tString specificationEn, String specificationFr,\n\t\t\tString otherEng, String otherFr, String warrantyEng, String warrantyFr,\n\t\t\tString msrp, String large, String width, String high, String weight,\n\t\t\tString manufProductID, List<Long> whichUsersChangedByPrice,\n\t\t\tList<Long> whichUsersChangedByExcluded, List<UserProductPriceDTO> uppDTOListPriceB4,\n\t\t\tList<UserProductPriceDTO> uppDTOListPriceAfter, boolean wereWgtDimChanged) {\n\t\t\n\t\tfinal boolean TO_BE_EXECUTED = true;\n\t\t\n\t\t// Related to AlterProductXML.class\n\t\tboolean brand_xml = false;\n\t\tboolean category_xml = false;\n\t\tboolean mainSpecification_xml = false;\n\t\tboolean image_xml = false;\n\t\tboolean status_xml = false;\n\t\tboolean nameEn_xml = false;\n\t\tboolean nameFr_xml = false;\n\t\tboolean descriptionEn_xml = false;\n\t\tboolean descriptionFr_xml = false;\n\t\tboolean specificationEn_xml = false;\n\t\tboolean specificationFr_xml = false;\n\t\tboolean otherEng_xml = false;\n\t\tboolean otherFr_xml = false;\n\t\tboolean warrantyEng_xml = false;\n\t\tboolean warrantyFr_xml = false;\n\t\tboolean msrp_xml = false;\n\t\tboolean shipping_xml = false;\n\t\tboolean dimensions_xml = false;\n\t\tboolean weight_xml = false;\n\t\tboolean modelNumber_xml = false;\n\t\t\n\t\tboolean product_to_be_executed_xml = false;\n\t\t\n\t\t// Related to AlterUserProductXML.class\n\t\tboolean priceDiscount_xml = false;\n\t\tboolean excluded_xml = false;\n\t\t\n\t\ttry {\t\t\t\n\t\t\tlong productId = productDTO.getId();\n\t\t\t\n\t\t\tAlterProductXMLDTO apxDTOBefore = productService.getAlterProductXML(productId);\n\t\t\t\n\t\t\tboolean apxAlreadyExecuted = false;\n\t\t\t\n\t\t\tboolean isAPXBrandAlready = false;\n\t\t\tboolean isAPXCategoryAlready = false;\n\t\t\tboolean isAPXMainSpecAlready = false;\n\t\t\tboolean isAPXImageAlready = false;\n\t\t\tboolean isAPXStatusAlready = false;\n\t\t\tboolean isAPXNameEnAlready = false;\n\t\t\tboolean isAPXNameFrAlready = false;\n\t\t\tboolean isAPXDescEnAlready = false;\n\t\t\tboolean isAPXDescFrAlready = false;\n\t\t\tboolean isAPXSpecEnAlready = false;\n\t\t\tboolean isAPXSpecFrAlready = false;\n\t\t\tboolean isAPXOtherEnAlready = false;\n\t\t\tboolean isAPXOtherFrAlready = false;\n\t\t\tboolean isAPXWarrantyEnAlready = false;\n\t\t\tboolean isAPXWarrantyFrAlready = false;\n\t\t\tboolean isAPXMSRPAlready = false;\n\t\t\tboolean isAPXShippingAlready = false;\n\t\t\tboolean isAPXDimsAlready = false;\n\t\t\tboolean isAPXWgtAlready = false;\n\t\t\tboolean isAPXModelNoAlready = false;\t\t\t\n\t\t\t\n\t\t\tboolean apxExists = (apxDTOBefore != null);\n\t\t\tif (apxExists) {\n\t\t\t\tapxAlreadyExecuted = apxDTOBefore.getProductToBeExecuted();\n\t\t\t\t\n\t\t\t\tisAPXBrandAlready = apxDTOBefore.getBrandId();\n\t\t\t\tisAPXCategoryAlready = apxDTOBefore.getCategoryId();\n\t\t\t\tisAPXMainSpecAlready = apxDTOBefore.getTypeId();\n\t\t\t\tisAPXImageAlready = apxDTOBefore.getImageId();\n\t\t\t\tisAPXStatusAlready = apxDTOBefore.getStatusId();\n\t\t\t\tisAPXNameEnAlready = apxDTOBefore.getNameEn();\n\t\t\t\tisAPXNameFrAlready = apxDTOBefore.getNameFr();\n\t\t\t\tisAPXDescEnAlready = apxDTOBefore.getDescriptionEn();\n\t\t\t\tisAPXDescFrAlready = apxDTOBefore.getDescriptionFr();\n\t\t\t\tisAPXSpecEnAlready = apxDTOBefore.getSpecificationEn();\n\t\t\t\tisAPXSpecFrAlready = apxDTOBefore.getSpecificationFr();\n\t\t\t\tisAPXOtherEnAlready = apxDTOBefore.getOtherEn();\n\t\t\t\tisAPXOtherFrAlready = apxDTOBefore.getOtherFr();\n\t\t\t\tisAPXWarrantyEnAlready = apxDTOBefore.getWarrantyEn();\n\t\t\t\tisAPXWarrantyFrAlready = apxDTOBefore.getWarrantyFr();\n\t\t\t\tisAPXMSRPAlready = apxDTOBefore.getMsrp();\n\t\t\t\tisAPXShippingAlready = apxDTOBefore.getShipping();\n\t\t\t\tisAPXDimsAlready = apxDTOBefore.getDimensions();\n\t\t\t\tisAPXWgtAlready = apxDTOBefore.getWeight();\n\t\t\t\tisAPXModelNoAlready = apxDTOBefore.getModelNumber();\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tString descriptionEnCell = """", descriptionEnDB = """", descriptionFrCell = """", descriptionFrDB = """";\n\t\t\tString specificationEnCell = """", specificationEnDB = """", specificationFrCell = """", specificationFrDB = """";\n\t\t\tString otherEnCell = """", otherEnDB = """", otherFrCell = """", otherFrDB = """";\n\t\t\t\n\t\t\tif (productDTO.getBrand() != null) {\n\t\t\t\tbrand_xml = (brand != productDTO.getBrand().getId());\n\t\t\t\tif (apxExists) if (apxAlreadyExecuted) if (isAPXBrandAlready) brand_xml = true;\n\t\t\t}\n\t\t\t\n\t\t\tif (productDTO.getCategory() != null) {\n\t\t\t\tcategory_xml = (category != productDTO.getCategory().getId());\n\t\t\t\tif (apxExists) if (apxAlreadyExecuted) if (isAPXCategoryAlready) category_xml = true;\n\t\t\t}\t\t\t\n\t\t\t\n\t\t\tif (productDTO.getMainFilterTypeId() != null) {\n\t\t\t\tif (productDTO.getMainFilterTypeId() != 0L && productDTO.getMainFilterTypeId() != 51) {\n\t\t\t\t\tmainSpecification_xml = (mainSpecification != productDTO.getMainFilterTypeId().longValue());\n\t\t\t\t}\n\t\t\t\tif (apxExists) if (apxAlreadyExecuted) if (isAPXMainSpecAlready) mainSpecification_xml = true;\n\t\t\t}\n\t\t\t\n\t\t\tif (imageRealName != null && productDTO.getOldImageRealName() != null) {\n\t\t\t\t\timage_xml = (!imageRealName.equalsIgnoreCase(productDTO.getOldImageRealName()));\n\t\t\t\t\tif (apxExists) if (apxAlreadyExecuted) if (isAPXImageAlready) image_xml = true;\n\t\t\t}\n\t\t\t\n\t\t\tstatus_xml = (statusId != productDTO.getStatus().getValue());\n\t\t\tif (apxExists) if (apxAlreadyExecuted) if (isAPXStatusAlready) status_xml = true;\n\t\t\t\n\t\t\tif (nameEn != null && productDTO.getNameEng() != null) {\n\t\t\t\tnameEn_xml = (!nameEn.trim().equalsIgnoreCase(productDTO.getNameEng().getName().trim()));\n\t\t\t\tif (apxExists) if (apxAlreadyExecuted) if (isAPXNameEnAlready) nameEn_xml = true;\n\t\t\t}\n\t\t\t\n\t\t\tif (nameFr != null && productDTO.getNameFr() != null) {\t\t\t\t\n\t\t\t\tnameFr_xml = (!nameFr.trim().equalsIgnoreCase(productDTO.getNameFr().getName().trim()));\n\t\t\t\tif (apxExists) if (apxAlreadyExecuted) if (isAPXNameFrAlready) nameFr_xml = true;\n\t\t\t}\n\t\t\t\n\t\t\tif (descriptionEn != null && productDTO.getDescriptionEng() != null) {\n\t\t\t\tdescriptionEnCell = wsRipper(html2text(descriptionEn.trim()));\n\t\t\t\tdescriptionEnDB = wsRipper(html2text(productDTO.getDescriptionEng().getName().trim()));\t\t\t\t\n\t\t\t\tdescriptionEn_xml = (!descriptionEnCell.trim().equalsIgnoreCase(descriptionEnDB.trim()));\n\t\t\t\tif (apxExists) if (apxAlreadyExecuted) if (isAPXDescEnAlready) descriptionEn_xml = true;\n\t\t\t}\n\t\t\t\n\t\t\tif (descriptionFr != null && productDTO.getDescriptionFr() != null) {\n\t\t\t\tdescriptionFrCell = wsRipper(html2text(descriptionFr.trim()));\n\t\t\t\tdescriptionFrDB = wsRipper(html2text(productDTO.getDescriptionFr().getName().trim()));\t\t\t\t\n\t\t\t\tdescriptionFr_xml = (!descriptionFrCell.trim().equalsIgnoreCase(descriptionFrDB.trim()));\n\t\t\t\tif (apxExists) if (apxAlreadyExecuted) if (isAPXDescFrAlready) descriptionFr_xml = true;\n\t\t\t}\n\t\t\t\n\t\t\tif (specificationEn != null && productDTO.getSpecificationEng() != null) {\n\t\t\t\tspecificationEnCell = wsRipper(html2text(specificationEn.trim()));\t\t\n\t\t\t\tspecificationEnDB = wsRipper(html2text(productDTO.getSpecificationEng().getName().trim()));\t\t\t\t\n\t\t\t\tspecificationEn_xml = (!specificationEnCell.trim().equalsIgnoreCase(specificationEnDB.trim()));\t\t\t\t\n\t\t\t\tif (apxExists) if (apxAlreadyExecuted) if (isAPXSpecEnAlready) specificationEn_xml = true;\n\t\t\t}\n\t\t\t\n\t\t\tif (specificationFr != null && productDTO.getSpecificationFr() != null) {\n\t\t\t\tspecificationFrCell = wsRipper(html2text(specificationFr.trim()));\t\t\t\t\n\t\t\t\tspecificationFrDB = wsRipper(html2text(productDTO.getSpecificationFr().getName().trim()));\t\t\t\t\n\t\t\t\tspecificationFr_xml = (!specificationFrCell.trim().equalsIgnoreCase(specificationFrDB.trim()));\n\t\t\t\tif (apxExists) if (apxAlreadyExecuted) if (isAPXSpecFrAlready) specificationFr_xml = true;\n\t\t\t}\n\t\t\t\n\t\t\tif (otherEng != null && productDTO.getOtherEng() != null) {\n\t\t\t\totherEnCell = wsRipper(html2text(otherEng.trim()));\n\t\t\t\totherEnDB = wsRipper(html2text(productDTO.getOtherEng().getName().trim()));\t\t\t\t\n\t\t\t\totherEng_xml = (!otherEnCell.trim().equalsIgnoreCase(otherEnDB.trim()));\n\t\t\t\tif (apxExists) if (apxAlreadyExecuted) if (isAPXOtherEnAlready) otherEng_xml = true;\n\t\t\t}\n\t\t\t\n\t\t\tif (otherFr != null && productDTO.getOtherFr() != null) {\n\t\t\t\totherFrCell = wsRipper(html2text(otherFr.trim()));\n\t\t\t\totherFrDB = wsRipper(html2text(productDTO.getOtherFr().getName().trim()));\t\t\t\t\t\t\t\n\t\t\t\totherFr_xml = (!otherFrCell.trim().equalsIgnoreCase(otherFrDB.trim()));\n\t\t\t\tif (apxExists) if (apxAlreadyExecuted) if (isAPXOtherFrAlready) otherFr_xml = true;\n\t\t\t}\n\t\t\t\n\t\t\tif (warrantyEng != null && productDTO.getWarrantyEng() != null) {\n\t\t\t\twarrantyEng_xml = (!warrantyEng.trim().equalsIgnoreCase(productDTO.getWarrantyEng().getName().trim()));\n\t\t\t\tif (apxExists) if (apxAlreadyExecuted) if (isAPXWarrantyEnAlready) warrantyEng_xml = true;\n\t\t\t}\n\t\t\t\n\t\t\tif (warrantyFr != null && productDTO.getWarrantyFr() != null) {\n\t\t\t\twarrantyFr_xml = (!warrantyFr.trim().equalsIgnoreCase(productDTO.getWarrantyFr().getName().trim()));\n\t\t\t\tif (apxExists) if (apxAlreadyExecuted) if (isAPXWarrantyFrAlready) warrantyFr_xml = true;\n\t\t\t}\n\t\t\t\n\t\t\tmsrp_xml = (!msrp.equalsIgnoreCase(productDTO.getMsrp()));\n\t\t\tif (apxExists) if (apxAlreadyExecuted) if (isAPXMSRPAlready) msrp_xml = true;\n\t\t\t\n\t\t\tdimensions_xml = (!large.equalsIgnoreCase(productDTO.getLarge()) \n\t\t\t\t\t\t\t  || !width.equalsIgnoreCase(productDTO.getWidth())\n\t\t\t\t\t\t\t  || !high.equalsIgnoreCase(productDTO.getHigh()));\n\t\t\tif (apxExists) if (apxAlreadyExecuted) if (isAPXDimsAlready) dimensions_xml = true;\t\t\t\n\t\t\t\n\t\t\tweight_xml = (!weight.equalsIgnoreCase(productDTO.getWeight()));\n\t\t\tif (apxExists) if (apxAlreadyExecuted) if (isAPXWgtAlready) weight_xml = true;\t\n\t\t\t\n\t\t\tshipping_xml = wereWgtDimChanged;\n\t\t\tif (apxExists) if (apxAlreadyExecuted) if (isAPXShippingAlready) shipping_xml = true;\n\t\t\t\t\t\t\n\t\t\tif (productDTO.getManufactureProductList() != null) {\n\t\t\t\tif (productDTO.getManufactureProductList().size() == 1) {\n\t\t\t\t\tfor (ProductModelDTO productModelDTO : productDTO.getManufactureProductList()) {\n\t\t\t\t\t\tif (productModelDTO != null && productModelDTO.getName() != null) {\n\t\t\t\t\t\t\tmodelNumber_xml = !productModelDTO.getName().trim().equalsIgnoreCase(manufProductID.trim());\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (apxExists) if (apxAlreadyExecuted) if (isAPXModelNoAlready) modelNumber_xml = true;\n\t\t\t\n\t\t\t\n\t\t\tproduct_to_be_executed_xml = brand_xml || category_xml || mainSpecification_xml \n\t\t\t\t\t\t\t\t\t\t|| image_xml || status_xml || nameEn_xml \n\t\t\t\t\t\t\t\t\t\t|| nameFr_xml || descriptionEn_xml || descriptionFr_xml\n\t\t\t\t\t\t\t\t\t\t|| specificationEn_xml || specificationFr_xml || otherEng_xml\n\t\t\t\t\t\t\t\t\t\t|| otherFr_xml || warrantyEng_xml || warrantyFr_xml\n\t\t\t\t\t\t\t\t\t\t|| dimensions_xml || weight_xml || modelNumber_xml\n\t\t\t\t\t\t\t\t\t\t|| msrp_xml || shipping_xml;\n\t\t\t\n\t\t\tAlterProductXMLDTO alterProductXMLDTO = new AlterProductXMLDTO();\n\t\t\talterProductXMLDTO.setProductId(productId);\n\t\t\talterProductXMLDTO.setBrandId(brand_xml);\n\t\t\talterProductXMLDTO.setCategoryId(category_xml);\n\t\t\talterProductXMLDTO.setTypeId(mainSpecification_xml);\n\t\t\talterProductXMLDTO.setImageId(image_xml);\n\t\t\talterProductXMLDTO.setStatusId(status_xml);\n\t\t\talterProductXMLDTO.setNameEn(nameEn_xml);\n\t\t\talterProductXMLDTO.setNameFr(nameFr_xml);\n\t\t\talterProductXMLDTO.setDescriptionEn(descriptionEn_xml);\n\t\t\talterProductXMLDTO.setDescriptionFr(descriptionFr_xml);\n\t\t\talterProductXMLDTO.setSpecificationEn(specificationEn_xml);\n\t\t\talterProductXMLDTO.setSpecificationFr(specificationFr_xml);\n\t\t\talterProductXMLDTO.setOtherEn(otherEng_xml);\n\t\t\talterProductXMLDTO.setOtherFr(otherFr_xml);\n\t\t\talterProductXMLDTO.setWarrantyEn(warrantyEng_xml);\n\t\t\talterProductXMLDTO.setWarrantyFr(warrantyFr_xml);\n\t\t\talterProductXMLDTO.setDimensions(dimensions_xml);\n\t\t\talterProductXMLDTO.setWeight(weight_xml);\n\t\t\talterProductXMLDTO.setModelNumber(modelNumber_xml);\n\t\t\talterProductXMLDTO.setMsrp(msrp_xml);\n\t\t\talterProductXMLDTO.setShipping(shipping_xml);\n\t\t\talterProductXMLDTO.setProductToBeExecuted(product_to_be_executed_xml);\n\t\t\tif (productService.existsOnAlterProductXML(productId)) {\n\t\t\t\tproductService.updateAlterProductXML(alterProductXMLDTO);\n\t\t\t} else {\n\t\t\t\tproductService.createAlterProductXML(alterProductXMLDTO);\n\t\t\t}\n\t\t\t\n\t\t\tif (didPriceListChange(uppDTOListPriceB4, uppDTOListPriceAfter)) {\n\t\t\t\tAlterUserProductXMLDTO alterUserProductXMLDTO = new AlterUserProductXMLDTO();\n\t\t\t\tif (whichUsersChangedByPrice != null && whichUsersChangedByPrice.size() > 0) {\n\t\t\t\t\tAlterUserProductXMLDTO aupxDTOBefore = null;\n\t\t\t\t\tboolean aupxExists = false;\n\t\t\t\t\tboolean aupxAlreadyExecuted = false;\n\t\t\t\t\tboolean isAUPXPricingAlready = false;\n\t\t\t\t\tboolean user_product_to_be_executed = false;\n\t\t\t\t\t\n\t\t\t\t\tfor (long userId_price : whichUsersChangedByPrice) {\n\t\t\t\t\t\t\n\t\t\t\t\t\taupxDTOBefore = productService.getAlterUserProductXML(userId_price, productId);\n\t\t\t\t\t\t\n\t\t\t\t\t\taupxExists = (aupxDTOBefore != null);\n\t\t\t\t\t\tif (aupxExists) {\n\t\t\t\t\t\t\taupxAlreadyExecuted = aupxDTOBefore.getUserProductToBeExecuted();\n\t\t\t\t\t\t\tisAUPXPricingAlready = aupxDTOBefore.getPriceDiscount();\n\t\t\t\t\t\t\tpriceDiscount_xml = aupxDTOBefore.getPriceDiscount();\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (!priceDiscount_xml) {\n\t\t\t\t\t\t\tpriceDiscount_xml = analyzePriceDiscount(userId_price, uppDTOListPriceB4, uppDTOListPriceAfter);\n\t\t\t\t\t\t\tif (aupxExists) if (aupxAlreadyExecuted) if (isAUPXPricingAlready) priceDiscount_xml = true;\n\t\t\t\t\t\t}\t\t\t\t\t\t\n\t\t\t\t\t\t// Does this user exist in the UPP-list [for price]?\n\t\t\t\t\t\t// If so, it means that this value shouldn't be excluded or simply just must be rendered \n\t\t\t\t\t\t// in the XML-File to generate.\n\t\t\t\t\t\texcluded_xml = !analyzeExcluded(userId_price, uppDTOListPriceAfter);\n\t\t\t\t\t\tuser_product_to_be_executed = priceDiscount_xml ? priceDiscount_xml : user_product_to_be_executed;\n\t\t\t\t\t\talterUserProductXMLDTO = new AlterUserProductXMLDTO();\n\t\t\t\t\t\talterUserProductXMLDTO.setUserId(userId_price);\n\t\t\t\t\t\talterUserProductXMLDTO.setProductId(productId);\n\t\t\t\t\t\talterUserProductXMLDTO.setPriceDiscount(priceDiscount_xml);\n\t\t\t\t\t\talterUserProductXMLDTO.setShipping(false);\n\t\t\t\t\t\talterUserProductXMLDTO.setExcluded(excluded_xml);\n\t\t\t\t\t\talterUserProductXMLDTO.setExcludedMeaning(false);\n\t\t\t\t\t\talterUserProductXMLDTO.setUserProductToBeExecuted(user_product_to_be_executed);\t// TO_BE_EXECUTED\n\t\t\t\t\t\tif (productService.existsOnAlterUserProductXML(productId, userId_price)) {\n\t\t\t\t\t\t\tproductService.updateAlterUserProductXML(alterUserProductXMLDTO);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tproductService.createAlterUserProductXML(alterUserProductXMLDTO);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (whichUsersChangedByExcluded != null && whichUsersChangedByExcluded.size() > 0) {\n\t\t\t\t\tfor (long userId_excluded : whichUsersChangedByExcluded) {\n\t\t\t\t\t\talterUserProductXMLDTO = new AlterUserProductXMLDTO();\n\t\t\t\t\t\talterUserProductXMLDTO.setUserId(userId_excluded);\n\t\t\t\t\t\talterUserProductXMLDTO.setProductId(productId);\n\t\t\t\t\t\talterUserProductXMLDTO.setPriceDiscount(false);\n\t\t\t\t\t\talterUserProductXMLDTO.setShipping(false);\n\t\t\t\t\t\talterUserProductXMLDTO.setExcluded(true);\n\t\t\t\t\t\talterUserProductXMLDTO.setExcludedMeaning(true);\n\t\t\t\t\t\talterUserProductXMLDTO.setUserProductToBeExecuted(false);\n\t\t\t\t\t\tif (productService.existsOnAlterUserProductXML(productId, userId_excluded)) {\n\t\t\t\t\t\t\tproductService.updateAlterUserProductXML(alterUserProductXMLDTO);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tproductService.createAlterUserProductXML(alterUserProductXMLDTO);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tlong userId = 0L;\n\t\t\t\tAlterUserProductXMLDTO alterUserProductXMLDTO = new AlterUserProductXMLDTO();\n\t\t\t\tfor (UserProductPriceDTO userProductPriceDTO : uppDTOListPriceAfter) {\n\t\t\t\t\talterUserProductXMLDTO = new AlterUserProductXMLDTO();\n\t\t\t\t\tuserId = userProductPriceDTO.getUserId();\n\t\t\t\t\talterUserProductXMLDTO.setUserId(userId);\n\t\t\t\t\talterUserProductXMLDTO.setProductId(productId);\n\t\t\t\t\talterUserProductXMLDTO.setPriceDiscount(false);\n\t\t\t\t\talterUserProductXMLDTO.setShipping(false);\n\t\t\t\t\talterUserProductXMLDTO.setExcluded(false);\n\t\t\t\t\talterUserProductXMLDTO.setExcludedMeaning(userProductPriceDTO.getExcluded());\n\t\t\t\t\talterUserProductXMLDTO.setUserProductToBeExecuted(false);\n\t\t\t\t\tif (productService.existsOnAlterUserProductXML(productId, userId)) {\n\t\t\t\t\t\tproductService.updateAlterUserProductXML(alterUserProductXMLDTO);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tproductService.createAlterUserProductXML(alterUserProductXMLDTO);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (!product_to_be_executed_xml) {\n\t\t\t\t\tproductService.closeProductConsideredForXML(productId);\n\t\t\t\t}\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t} catch(ServiceException e){\n\t\t\tlog.debug(""Service Error when loading file"");\n\t\t\taddActionError(getText(""loyauty.error.common.service""));\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\taddActionError(getText(""loyauty.error.common.service""));\n\t\t}\n\t}\n\t\n\tprivate boolean analyzePriceDiscount(long userId, List<UserProductPriceDTO> uppDTOListPriceB4, \n\t\t\t\t\t\t\t\tList<UserProductPriceDTO> uppDTOListPriceAfter) {\n\t\tboolean outcome = false;\n\t\tif ((uppDTOListPriceB4 == null && uppDTOListPriceAfter != null) \n\t\t\t|| (uppDTOListPriceB4 != null && uppDTOListPriceAfter == null)) {\n\t\t\toutcome = true;\n\t\t} else if (uppDTOListPriceB4 == null && uppDTOListPriceAfter == null) {\n\t\t\toutcome = false;\n\t\t} else if (uppDTOListPriceB4 != null && uppDTOListPriceAfter != null) {\n\t\t\tif (uppDTOListPriceB4.size() == uppDTOListPriceAfter.size()) {\n\t\t\t\tint SIZE_before = uppDTOListPriceB4.size();\n\t\t\t\tint SIZE = SIZE_before;\n\t\t\t\tif (SIZE > 0) {\n\t\t\t\t\tString before = """";\n\t\t\t\t\tUserProductPriceDTO upp$DTO_0 = new UserProductPriceDTO();\n\t\t\t\t\tfor (Iterator<UserProductPriceDTO> itUPPBefore = uppDTOListPriceB4.iterator(); itUPPBefore.hasNext();) {\n\t\t\t\t\t\tupp$DTO_0 = itUPPBefore.next();\n\t\t\t\t\t\tif (userId == upp$DTO_0.getUserId()) {\n\t\t\t\t\t\t\tbefore = upp$DTO_0.getPrice();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tString after = """";\n\t\t\t\t\tUserProductPriceDTO upp$DTO_f = new UserProductPriceDTO();\n\t\t\t\t\tfor (Iterator<UserProductPriceDTO> itUPPAfter = uppDTOListPriceAfter.iterator(); itUPPAfter.hasNext();) {\n\t\t\t\t\t\tupp$DTO_f = itUPPAfter.next();\n\t\t\t\t\t\tif (userId == upp$DTO_f.getUserId()) {\n\t\t\t\t\t\t\tafter = upp$DTO_f.getPrice();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\toutcome = !before.trim().equalsIgnoreCase(after.trim());\n\t\t\t\t}\t// else OR SIZE=0 ==> outcome <-- false;\n\t\t\t} else {\n\t\t\t\toutcome = true;\n\t\t\t}\n\t\t}\n\t\treturn outcome;\t\t\n\t}\n\t\n\tprivate boolean analyzeExcluded(long userId, List<UserProductPriceDTO> uppDTOListPriceAfter) {\n\t\tboolean outcome = false;\n\t\tif (uppDTOListPriceAfter != null && uppDTOListPriceAfter.size() > 0) {\n\t\t\tfor (UserProductPriceDTO userProductPriceDTO : uppDTOListPriceAfter) {\n\t\t\t\toutcome |= (userId == userProductPriceDTO.getUserId().longValue());\n\t\t\t}\n\t\t}\n\t\treturn outcome;\n\t}\n\t\n\tprivate boolean isThereTheExcludedInUserSessionDTO(String[] isExcluded, long userIdFromDTO) {\n\t\tboolean outcome = false;\n\t\tif (isExcluded != null) {\n\t\t\tif (isExcluded.length == 0) return false;\n\t\t\tfor (String excluded : isExcluded) {\n\t\t\t\toutcome |= userIdFromDTO == Long.parseLong(excluded);\n\t\t\t}\n\t\t}\n\t\treturn outcome;\n\t}\n\t\n\tprivate void updateListManufactureProduct(int position, String value, int quantity, String suppliers, String price, String msrp) {\n\t    //lack to remove\n\t\tif(productDTO.getManufactureProductList().size() >= position +1) {\n\t\t\t((ProductModelDTO)productDTO.getManufactureProductList().get(position)).setName(value);\n\t\t\t((ProductModelDTO)productDTO.getManufactureProductList().get(position)).setQuantity(quantity);\n\t\t\t((ProductModelDTO)productDTO.getManufactureProductList().get(position)).setSupplier(suppliers);\n\t\t\t((ProductModelDTO)productDTO.getManufactureProductList().get(position)).setPrice(price);\n\t\t\t((ProductModelDTO)productDTO.getManufactureProductList().get(position)).setMsrp(msrp);\n\t\t} else {\n\t\t\tproductDTO.getManufactureProductList().add(ProductModelDTO.valueOf(0, value, quantity, suppliers, price, msrp));\n\t\t}\n\t}\n\t\n\tprivate List<CommonDTO> internationalizeName(List<CategoryDTO> list){\n\t\tList<CommonDTO> commonListDTO = new ArrayList<CommonDTO>();\n\t\tCommonDTO commonDTO;\n\t\tfor(CategoryDTO cat : list){\n\t\t\tcommonDTO = CommonDTO.valueOf(cat.getId(), getText(cat.getCode()));\t\t\t\n\t\t\tcommonListDTO.add(commonDTO);\n\t\t}\t\t\n\t\treturn commonListDTO;\n\t}\n    \n    private String html2text(String html) {\n        return Jsoup.parse(html).text();\n    }\n    \n    private boolean didPriceListChange(\tList<UserProductPriceDTO> uppDTOListBefore, \n    \t\t\t\t\t\t\t\t\tList<UserProductPriceDTO> uppDTOListAfter) {\n    \tboolean outcome = false;\n    \tint b4 = 0, after = 0;\n    \t\n    \tlong userId$B4 = 0L;\n    \tlong userId$After = 0L;\n    \tSet<Long> allUserIdsSet = new HashSet<Long>();\n    \t\n    \tfor (UserProductPriceDTO uppDTOB4 : uppDTOListBefore) {    \t\t\n    \t\tuserId$B4 =  uppDTOB4.getUserId();\n    \t\tallUserIdsSet.add(userId$B4);\n    \t\tif (!uppDTOB4.getExcluded()) ++b4;\n    \t}\n    \t\n    \tfor (UserProductPriceDTO uppDTOAfter : uppDTOListAfter) {\n    \t\tuserId$After = uppDTOAfter.getUserId();\n    \t\tallUserIdsSet.add(userId$After);\n    \t\tif (!uppDTOAfter.getExcluded()) ++after;\n    \t}\n    \t\n    \tif (b4 == after) {\n    \t\tfor (long userId : allUserIdsSet) {\n    \t\t\toutcome |= analyzePriceDiscount(userId, uppDTOListBefore, uppDTOListAfter);\n    \t\t}\n    \t} else {\n    \t\toutcome = true;\n    \t}\n    \t\n    \treturn outcome;\n    }\n    \n\tprivate String wsRipper(String input) {\n\t\tString outcome = """";\n\t\tif (input.length() > 0) {\n\t\t\tchar[] aCharArray = input.toCharArray();\n\t\t\tfor (char c : aCharArray) {\n\t\t\t\tif (c != ' ') {\n\t\t\t\t\toutcome += c;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn outcome;\n\t}\n    \n\tpublic static UserSessionDTO getUserSessionDTO(ClientCategoryDTO clDTO){\n\t\tLong userId=clDTO.getClientCategoryId();\n\t\tString login=clDTO.getClientCategoryName();\n\t\tInteger TypeId=2;\n\t\tInteger userLangId = 2;\n\t\tInteger RESULTS_PER_PAGE=10;\n\t\tString email="""";\n\t\tString code="""";\n\t\tBoolean isActive=true;\n\t\tLong template =1L;\n\t\tUserSessionDTO sessionDTO =new UserSessionDTO(userId, login, TypeId, userLangId, Language.ENGLISH.getValue(),\n\t\t\t\t\t\t\t\t\t\t\t\t\t  RESULTS_PER_PAGE, email, code, isActive,template);\n\t\t\n\t\treturn sessionDTO;\n\t}\n\t\n\t//Make ""large"" and ""boxLength"" the biggest size between L,W and H\n\tpublic void switchBetweenLargeWidthHeight () {\n\t\tDouble L,W,H, permute;\n\t\t// large/width/high\n\t\tL = W = H = 0D;\n\t\tif(large!=null && !large.replaceAll("" "", """").isEmpty()) L = Double.parseDouble(large);\n\t\tif(width!=null && !width.replaceAll("" "", """").isEmpty()) W = Double.parseDouble(width);\n\t\tif(high!=null && !high.replaceAll("" "", """").isEmpty())   H = Double.parseDouble(high);\n\t\tif(L < H) {\n\t\t\tpermute = L;\n\t\t\tL = H;\n\t\t\tH = permute;\n\t\t\tlarge = L+"""";\n\t\t\thigh = H+"""";\n\t\t}\n\t\tif(L < W) {\n\t\t\tpermute = L;\n\t\t\tL = W;\n\t\t\tW = permute;\n\t\t\tlarge = L+"""";\n\t\t\twidth = W+"""";\n\t\t}\n\t\tif(W < H) {\n\t\t\tpermute = W;\n\t\t\tW = H;\n\t\t\tH = permute;\n\t\t\twidth = W+"""";\n\t\t\thigh = H+"""";\n\t\t}\n\t\t\n\t\t// boxLength/boxWidth/boxHeight\n\t\tL = boxDTO.getLength();\n\t\tW = boxDTO.getWidth();\n\t\tH = boxDTO.getHeight();\n\t\tDouble WDTH = boxDTO.getTotalWeight();\n\t\tif(L==null) { L=0D; boxDTO.setLength(0D); }\n\t\tif(W==null) { W=0D; boxDTO.setWidth(0D); }\n\t\tif(H==null) { H=0D; boxDTO.setHeight(0D); }\n\t\tif(WDTH==null) { WDTH=0D; boxDTO.setTotalWeight(0D); }\n\t\tif(L < H) {\n\t\t\tpermute = L;\n\t\t\tL = H;\n\t\t\tH = permute;\n\t\t\tboxDTO.setLength(L);\n\t\t\tboxDTO.setHeight(H);\n\t\t}\n\t\tif(L < W) {\n\t\t\tpermute = L;\n\t\t\tL = W;\n\t\t\tW = permute;\n\t\t\tboxDTO.setLength(L);\n\t\t\tboxDTO.setWidth(W);\n\t\t}\n\t\tif(W < H) {\n\t\t\tpermute = W;\n\t\t\tW = H;\n\t\t\tH = permute;\n\t\t\tboxDTO.setWidth(W);\n\t\t\tboxDTO.setHeight(H);\n\t\t}\n\t\t\n\t\t// largeCm/widthCm/highCm\n\t\t// Only to display them on addProductSuccess\n\t\tL = W = H = 0D;\n\t\tif(largeCm!=null && !largeCm.replaceAll("" "", """").isEmpty()) L = Double.parseDouble(largeCm);\n\t\tif(widthCm!=null && !widthCm.replaceAll("" "", """").isEmpty()) W = Double.parseDouble(widthCm);\n\t\tif(highCm!=null && !highCm.replaceAll("" "", """").isEmpty())   H = Double.parseDouble(highCm);\n\t\tif(L < H) {\n\t\t\tpermute = L;\n\t\t\tL = H;\n\t\t\tH = permute;\n\t\t\tlargeCm = L+"""";\n\t\t\thighCm = H+"""";\n\t\t}\n\t\tif(L < W) {\n\t\t\tpermute = L;\n\t\t\tL = W;\n\t\t\tW = permute;\n\t\t\tlargeCm = L+"""";\n\t\t\twidthCm = W+"""";\n\t\t}\n\t\tif(W < H) {\n\t\t\tpermute = W;\n\t\t\tW = H;\n\t\t\tH = permute;\n\t\t\twidthCm = W+"""";\n\t\t\thighCm = H+"""";\n\t\t}\n\t\t\n\t\t// boxLengthCm/boxWidthCm/boxHeightCm\n\t\t// Only to display them on addProductSuccess\n\t\tL = W = H = 0D;\n\t\tif(boxLengthCm!=null && !boxLengthCm.replaceAll("" "", """").isEmpty()) L = Double.parseDouble(boxLengthCm);\n\t\tif(boxWidthCm!=null && !boxWidthCm.replaceAll("" "", """").isEmpty())   W = Double.parseDouble(boxWidthCm);\n\t\tif(boxHeightCm!=null && !boxHeightCm.replaceAll("" "", """").isEmpty()) H = Double.parseDouble(boxHeightCm);\n\t\tif(L < H) {\n\t\t\tpermute = L;\n\t\t\tL = H;\n\t\t\tH = permute;\n\t\t\tboxLengthCm = L+"""";\n\t\t\tboxHeightCm = H+"""";\n\t\t}\n\t\tif(L < W) {\n\t\t\tpermute = L;\n\t\t\tL = W;\n\t\t\tW = permute;\n\t\t\tboxLengthCm = L+"""";\n\t\t\tboxWidthCm = W+"""";\n\t\t}\n\t\tif(W < H) {\n\t\t\tpermute = W;\n\t\t\tW = H;\n\t\t\tH = permute;\n\t\t\tboxWidthCm = W+"""";\n\t\t\tboxHeightCm = H+"""";\n\t\t}\n\t}//Make ""large"" the biggest size between L,W and H\n\t\n}\n----------------------------------- SOURCE END -------------------------------------",1420673653123
error,log,,,"Problems occurred when invoking code from plug-in: ""org.eclipse.jdt.ui"".",1420673653125
error,log,,,"Error in JDT Core during reconcile",1420673653126
error,log,,,"Exception occurred during problem detection:\n----------------------------------- SOURCE BEGIN -------------------------------------\npackage com.loyauty.web.struts.action.product;\n\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.Calendar;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Set;\nimport lombok.Getter;\nimport lombok.Setter;\n\nimport com.loyauty.enums.Language;\nimport com.loyauty.enums.PriceType;\nimport com.loyauty.enums.ProductStatus;\nimport com.loyauty.enums.UserProductStatus;\nimport com.loyauty.enums.UserType;\nimport com.loyauty.exception.ServiceException;\nimport com.loyauty.exception.ServiceLocatorException;\n//import com.loyauty.model.Operations;\nimport com.loyauty.model.User;\nimport com.loyauty.service.brand.BrandService;\nimport com.loyauty.service.common.CommonService;\nimport com.loyauty.service.core.dto.AlterProductXMLDTO;\nimport com.loyauty.service.core.dto.AlterUserProductXMLDTO;\nimport com.loyauty.service.core.dto.BasicUserDTO;\nimport com.loyauty.service.core.dto.BoxDTO;\nimport com.loyauty.service.core.dto.CategoryDTO;\nimport com.loyauty.service.core.dto.ClientCategoryDTO;\nimport com.loyauty.service.core.dto.CommonDTO;\nimport com.loyauty.service.core.dto.ImageDTO;\nimport com.loyauty.service.core.dto.OperationsDTO;\nimport com.loyauty.service.core.dto.ProductDTO;\nimport com.loyauty.service.core.dto.ProductLinkDTO;\nimport com.loyauty.service.core.dto.ProductModelDTO;\nimport com.loyauty.service.core.dto.SpecificationDTO;\nimport com.loyauty.service.core.dto.UserDTO;\nimport com.loyauty.service.core.dto.UserProductPriceDTO;\nimport com.loyauty.service.core.dto.UserSessionDTO;\n//import com.loyauty.service.core.dto.UsersPrivilegesDTO;\nimport com.loyauty.service.image.ImageService;\nimport com.loyauty.service.operations.OperationsService;\nimport com.loyauty.service.product.ProductService;\nimport com.loyauty.service.user.UserService;\nimport com.loyauty.util.CommonUtils;\nimport com.loyauty.web.WebConstants;\nimport com.loyauty.web.struts.action.LoyautyAction;\nimport org.jsoup.Jsoup;\n\npublic class EditProduct extends LoyautyAction {\n\t\n\tprivate static final long serialVersionUID = 4688139859406086753L;\n\t\n\tprivate ProductService productService;\n\tprivate ImageService imageService;\n\tprivate CommonService commonService;\n\tprivate BrandService brandService;\n\tprivate UserService userService;\n\tprivate OperationsService operationsService;\n\t\n\tprivate UserSessionDTO userSession;\n\t@Getter @Setter\n\tprivate long productId;\n\t@Getter @Setter\n\tprivate long imageId;\n\t@Getter @Setter\n\tprivate long brand;\n\t@Getter @Setter\n\tprivate String brandName;\n\t@Getter @Setter\n\tprivate long category;\n\t@Getter @Setter\n\tprivate String categoryName;\n\t@Getter @Setter\n\tprivate long mainSpecification; \n\t@Getter @Setter\n\tprivate String mainSpecificationName;\n\t@Getter @Setter\n\tprivate String manufProductID;\n\t@Getter @Setter\n\tprivate String manufProductID1;\n\t@Getter @Setter\n\tprivate String manufProductID2;\n\t@Getter @Setter\n\tprivate String manufProductID3;\n\t@Getter @Setter\n\tprivate String manufProductID4;\n\t\n\t@Getter @Setter\n\tprivate Integer manufProductQuantity = 0;\n\t@Getter @Setter\n\tprivate Integer manufProductQuantity1 = 0;\n\t@Getter @Setter\n\tprivate Integer manufProductQuantity2 = 0;\n\t@Getter @Setter\n\tprivate Integer manufProductQuantity3 = 0;\n\t@Getter @Setter\n\tprivate Integer manufProductQuantity4 = 0;\n\t\n\t@Getter @Setter\n\tprivate String supplier;\n\t@Getter @Setter\n\tprivate String supplier1;\n\t@Getter @Setter\n\tprivate String supplier2;\n\t@Getter @Setter\n\tprivate String supplier3;\n\t@Getter @Setter\n\tprivate String supplier4;\n\t\n\t@Getter @Setter\n\tprivate String price;\n\t@Getter @Setter\n\tprivate String price1;\n\t@Getter @Setter\n\tprivate String price2;\n\t@Getter @Setter\n\tprivate String price3;\n\t@Getter @Setter\n\tprivate String price4;\t\n\n\t@Getter @Setter\n\tprivate String msrp0;\n\t@Getter @Setter\n\tprivate String msrp1;\n\t@Getter @Setter\n\tprivate String msrp2;\n\t@Getter @Setter\n\tprivate String msrp3;\n\t@Getter @Setter\n\tprivate String msrp4;\n\t\n\t@Getter @Setter\n\tprivate String upc;\n\t@Getter @Setter\n\tprivate String loyaltyProductId;\n\t@Getter @Setter\n\tprivate String nameEn;\n\t@Getter @Setter\n\tprivate String nameFr;\n\t@Getter @Setter\n\tprivate String msrp;\n\t@Getter @Setter\n\tprivate String cost;\n\t@Getter @Setter\n\tprivate String large;\n\t@Getter @Setter\n\tprivate String width;\n\t@Getter @Setter\n\tprivate String high;\n\t@Getter @Setter\n\tprivate String weight;\n\t@Getter @Setter\n\tprivate Double boxLength;\n\t@Getter @Setter\n\tprivate Double boxWidth;\n\t@Getter @Setter\n\tprivate Double boxHeight;\n\t/*\n\t@Getter @Setter\n\tprivate Double boxWeight;\n\t*/\n\t@Getter @Setter\n\tprivate Double boxTotalWeight;\n\t@Getter @Setter\n\tprivate String largeCm;\n\t@Getter @Setter\n\tprivate String widthCm;\n\t@Getter @Setter\n\tprivate String highCm;\n\t@Getter @Setter\n\tprivate String weightKg;\n\t@Getter @Setter\n\tprivate String boxLengthCm;\n\t@Getter @Setter\n\tprivate String boxWidthCm;\n\t@Getter @Setter\n\tprivate String boxHeightCm;\n\t@Getter @Setter\n\tprivate String boxWeightKg;\n\t@Getter @Setter\n\tprivate Integer statusProductBox;\n\t@Getter @Setter\n\tprivate Boolean canadaPostSizesVerified;\n\t@Getter @Setter\n\tprivate BoxDTO boxDTO;\n\t\n\t@Getter @Setter\n\tprivate String descriptionEn;\n\t@Getter @Setter\n\tprivate String descriptionFr;\n\t@Getter @Setter\n\tprivate String specificationEn;\n\t@Getter @Setter\n\tprivate String specificationFr;\n\t@Getter @Setter\n\tprivate String otherEng;\n\t@Getter @Setter\n\tprivate String otherFr;\n\t\n\t//uploading files\n\t@Getter @Setter\t\n\tprivate File productImage; \n\t@Getter @Setter\n\tprivate String productImageContentType;\n\t@Getter @Setter\n\tprivate String productImageFileName;\n\t@Getter @Setter\n\tprivate ImageDTO imgDTO;\n\t@Getter @Setter\n\tprivate List<CommonDTO> categoryList;\n\t@Getter @Setter\n\tprivate List<SpecificationDTO> mainSpecificationList;\n\t@Getter @Setter\n\tprivate boolean update = false;\n\t@Getter @Setter\n\tprivate ProductDTO productDTO;\n\t@Getter @Setter\n\tprivate UserProductPriceDTO userProductPriceDTO;\t\n\t\n\t@Getter @Setter\n\tprivate List<CommonDTO> brandList;\n\t@Getter @Setter\n\tprivate List<CommonDTO> statusList;\n\n\t@Getter @Setter\n\tprivate String linkUrl;\n\t@Getter @Setter\n\tprivate String note;\n\t@Getter @Setter\n\tprivate String statusName;\t\n\t@Getter @Setter\n\tprivate Integer statusId;\n\t@Getter @Setter\n\tprivate List<UserDTO> activeClientsList;\n\t@Getter @Setter\n\tprivate int activeClientsSize;\n\t@Getter @Setter\n\tprivate int activeClientsTFSize;\t\n\t@Getter @Setter\n\tprivate String loyaltyProductIdSub;\n\t\n\t@Getter @Setter\n\tprivate String periodTime;\n\t@Getter @Setter\n\tprivate String warrantyQuantity;\n\t@Getter @Setter\n\tprivate Boolean defectFree;\n\t\n\t@Getter @Setter\n\tprivate List<UserSessionDTO> userNameList;\n\t@Getter @Setter\n\tprivate String[] userPrice;\n\t@Getter @Setter\n\tprivate String[] percentageProfit;\n\t@Getter @Setter\n\tprivate String[] percentageDiscount;\n\t@Getter @Setter\n\tprivate String[] isExcluded;\n\t@Getter @Setter\n\tprivate String[] excluded;\n\t\n\t@Getter @Setter\n\tprivate Double[] currencyRate;\n\t@Getter @Setter\n\tprivate String[] currencySymbol;\n\t@Getter @Setter\n\tprivate String[] currencyPrice;\t//CURRENCY_LS_PRICE\n\t\n\t@Getter @Setter\n\tprivate List<ClientCategoryDTO> listClientCategory;\n\t\n\t@Getter @Setter\n\tprivate OperationsDTO operationDTO;\n\t\n\tpublic EditProduct () throws ServiceLocatorException {\n\t\tsuper();\t\n\t\tproductService = getServiceLocator().getProductService();\n\t\tcommonService = getServiceLocator().getCommonService();\n\t\timageService = getServiceLocator().getImageService();\n\t\tbrandService = getServiceLocator().getBrandService();\n\t\tuserService = getServiceLocator().getUserService();\n\t\toperationsService = getServiceLocator().getOperationsService();\n\t}\n\t\n\t@Override\n\tpublic void prepare() {\n\t\ttry {\n\t\t\tbrandList = commonService.getBrands();\n\t\t\tstatusList = commonService.getAllProductStatuses();\n\t\t\tcategoryList  = internationalizeName(commonService.getCategoriesByBrand(brand));\n\t\t\tmainSpecificationList = productService.getMainSpecificationByCategory(category);\t\t\t\n\t\t\tproductId = (Long) request.getSession(true).getAttribute(""productId"");\n\t\t\tproductDTO = productService.getProductInformation(productId, null);\n\t\t\tboxDTO = productService.getBoxByProductId(productId);\n\t\t\tif(boxDTO==null)boxDTO=new BoxDTO();\n\t\t\timgDTO = productDTO.getImage();\n\t\t\tactiveClientsList = productService.getAllActiveClients(productId);\n\t\t\tactiveClientsTFSize = activeClientsSize = activeClientsList.size();\n\t\t\tactiveClientsTFSize = activeClientsList.isEmpty() ? 1 : activeClientsTFSize;\n\t\t\tBasicUserDTO basicUserDTO = new BasicUserDTO();\n\t\t\tbasicUserDTO.setTypeId(UserType.USER.getValue());\n\t\t\tbasicUserDTO.setActive(true);\n\t\t\tuserNameList = userService.getAllUserAccounts(basicUserDTO);\n\t\t\tlistClientCategory = userService.getAllClientCategory();\n\t\t\tfor (ClientCategoryDTO ccDTO : listClientCategory) {\n\t\t\t\tuserNameList.add(getUserSessionDTO(ccDTO));\n\t\t\t}\t\t\t\n\t\t} catch(Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tlog.debug(""Error when getting product in method prepare()"");\n\t\t}\n\t}\n\t\n\t@Override\n\tpublic void validate() {\n\t\t\t\n\t\t\tif(brand < 0)\n\t\t\t\taddActionError(getText(""loyauty.error.common.brand_required""));\n\t\t\tif(category < 0)\n\t\t\t\taddActionError(getText(""loyauty.error.common.category_required""));\n/*\t\t\tif(mainSpecification < 0)\n\t\t\t\taddActionError(getText(""loyauty.error.common.type_spec_required""));*/\n\t\t\tif(manufProductID.trim().length() == 0)\n\t\t\t\taddActionError(getText(""loyauty.error.common.manufacture_required""));\n\t\t\t\n\t\t\tif(loyaltyProductId.trim().length() == 0) {\n\t\t\t\taddActionError(getText(""loyauty.error.common.productId_required""));\n\t\t\t} else {\t\n\t\t\t\ttry {\n\t\t\t\t\tProductDTO aProductDTO = productService.getProductIdFromLSProductId(loyaltyProductId);\n\t\t\t\t\tif (aProductDTO != null) {\n\t\t\t\t\t\tif (productId != aProductDTO.getId() && !productDTO.getLoyaltyProductId().matches(""^\\\\s*$"")) {\n\t\t\t\t\t\t\taddActionError(getText(""loyauty.error.common.productId_alreadyExists""));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif(!loyaltyProductId.trim().startsWith(brandService.getBrand(brand).getCode()))\n\t\t\t\t\t{\n\t\t\t\t\t\taddActionError(getText(""loyauty.error.common.productId_code""));\n\t\t\t\t\t}\n\t\t\t\t} catch (ServiceException sx) {\n\t\t\t\t\taddActionError(getText(""loyauty.error.common.service""));\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif(nameEn.trim().length() == 0)\n\t\t\t\taddActionError(getText(""loyauty.error.common.name_en_required""));\n\t\t\tif(nameFr.trim().length() == 0)\n\t\t\t\taddActionError(getText(""loyauty.error.common.name_fr_required""));\n\t\t\t\n\t\t\tif(msrp.trim().length() == 0 || msrp.equals(""NaN""))\n\t\t\t\taddActionError(getText(""loyauty.error.common.msrp_required""));\n\t\t\tif(cost.trim().length() == 0 || cost.equals(""NaN""))\n\t\t\t\taddActionError(getText(""loyauty.error.common.cost_required""));\n\t\t\t\n\t\t\tif (statusId == ProductStatus.DISCONTINUED.getValue()) {\n\t\t\t\ttry {\n\t\t\t\t\tif (loyaltyProductIdSub.length() > 0 && !loyaltyProductIdSub.matches(""^\\\\s*$"") ) {\n\t\t\t\t\t\tProductDTO newProductDTO = productService.getProductIdFromLSProductId(loyaltyProductIdSub);\n\t\t\t\t\t\tString newSubbie = (newProductDTO == null) ? """" : newProductDTO.getLoyaltyProductId();\n\t\t\t\t\t\tif (newSubbie == null || newSubbie.matches(""^\\\\s*$"")) {\n\t\t\t\t\t\t\taddActionError(getText(""loyauty.error.common.productIdSub_required""));\n\t\t\t\t\t\t} else  {\n\t\t\t\t\t\t\tif (newSubbie.equalsIgnoreCase(loyaltyProductId)) {\n\t\t\t\t\t\t\t\taddActionError(getText(""loyauty.error.common.productIdSub_equal""));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} catch (ServiceException sx) {\n\t\t\t\t\taddActionError(getText(""loyauty.error.common.service""));\n\t\t\t\t}\n\t\t\t} else if (statusId == ProductStatus.DISABLED.getValue()) {\n\t\t\t\tif (activeClientsList.size() != 0) {\n\t\t\t\t\taddActionError(getText(""loyauty.error.common.disableWithActive""));\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t/*if(descriptionEn.trim().length() == 0)\n\t\t\t\taddActionError(getText(""loyauty.error.common.description_en_required""));\n\t\t\tif(descriptionFr.trim().length() == 0)\n\t\t\t\taddActionError(getText(""loyauty.error.common.description_fr_required""));\n\t\t\tif(specificationEn.trim().length() == 0)\n\t\t\t\taddActionError(getText(""loyauty.error.common.specification_en_required""));\n\t\t\tif(specificationFr.trim().length() == 0)\n\t\t\t\taddActionError(getText(""loyauty.error.common.specification_fr_required""));\n\t\t\tif(width == 0)\n\t\t\t\taddActionError(getText(""loyauty.error.common.width_required""));\n\t\t\tif(large == 0)\n\t\t\t\taddActionError(getText(""loyauty.error.common.large_required""));\n\t\t\tif(high == 0)\n\t\t\t\taddActionError(getText(""loyauty.error.common.high_required""));\n\t\t\t*/\n\t\t\t\n\t\t\ttry {\t\t\t\n\t\t\t\tFloat.parseFloat(msrp);\n\t\t\t} catch(NumberFormatException mfe){\n\t\t\t\taddActionError(getText(""loyauty.error.common.msrp_number""));\n\t\t\t}\t\t\t\n\t\t\ttry {\t\t\t\n\t\t\t\tFloat.parseFloat(cost);\n\t\t\t} catch(NumberFormatException mfe){\n\t\t\t\taddActionError(getText(""loyauty.error.common.cost_number""));\n\t\t\t}\n\t\t\t/*\n\t\t\ttry {\n\t\t\t\tInteger.parseInt(weight);\n\t\t\t} catch(NumberFormatException mfe){\n\t\t\t\taddActionError(getText(""loyauty.error.common.weight_number""));\n\t\t\t}*/\n\t}\n\t\n\t@Override\n\tpublic String execute() throws Exception {\n\t\ttry {\n\t\t\t\n\t\t\tProductDTO productDTOB4 = productService.getProductInformation(productId, null);\n\t\t\tBoxDTO boxDTOB4 = productService.getBoxByProductId(productId);\n\t\t\tif(boxDTOB4 == null) boxDTOB4 = new BoxDTO();\n\t\t\toperationDTO = new OperationsDTO();\n\t\t\tString managerLogin = """";\n\t\t\tUser userManager = new User();\n\t\t\tuserSession = (UserSessionDTO) request.getSession().getAttribute(WebConstants.USER);\n\t\t\tif (userSession != null){\n\t\t\t\tmanagerLogin = userSession.getLogin();\n\t\t\t\tuserManager = userService.getUserByLogin(managerLogin);\n\t\t\t}\n\t\t\tLong managerId = userManager.getId();\n\t\t\tString dataBefore = """";\n\t\t\tString dataAfter = """";\n\t\t\t\n\t\t\t/*\n\t\t\tboolean wereWgtDimChanged = productDTO.getWereWgtDimChanged();\t\t\t\n\t\t\twereWgtDimChanged = (!wereWgtDimChanged) \n\t\t\t\t\t\t\t\t? (!weight.equalsIgnoreCase(productDTO.getWeight())\n\t\t\t\t\t\t\t\t\t|| \t!large.equalsIgnoreCase(productDTO.getLarge())\n\t\t\t\t\t\t\t\t\t|| \t!width.equalsIgnoreCase(productDTO.getWidth())\n\t\t\t\t\t\t\t\t\t|| \t!high.equalsIgnoreCase(productDTO.getHigh())\n\t\t\t\t\t\t\t\t\t|| \t!cost.equalsIgnoreCase(productDTO.getCost())) \n\t\t\t\t\t\t\t\t: wereWgtDimChanged;\n\t\t\tproductDTO.setWereWgtDimChanged(wereWgtDimChanged);\n\t\t\t*/\n\t\t\t\n\t\t\t/*if(boxDTOB4.getWeight()==null)boxDTOB4.setWeight(0.00);\n\t\t\tif(boxDTOB4.getLength()==null)boxDTOB4.setLength(0.00);\n\t\t\tif(boxDTOB4.getWidth()==null)boxDTOB4.setWidth(0.00);\n\t\t\tif(boxDTOB4.getHeight()==null)boxDTOB4.setHeight(0.00);\n\n\t\t\tif(boxDTO.getWeight()==null)boxDTO.setWeight(0.00);\n\t\t\tif(boxDTO.getLength()==null)boxDTO.setLength(0.00);\n\t\t\tif(boxDTO.getWidth()==null)boxDTO.setWidth(0.00);\n\t\t\tif(boxDTO.getHeight()==null)boxDTO.setHeight(0.00);*/\n\n\t\t\t\n\t\t\tboolean wereWgtDimChanged = productDTO.getWereWgtDimChanged();\t\t\t\n\t\t\twereWgtDimChanged = (!wereWgtDimChanged ) \n\t\t\t\t\t\t\t\t? ( (boxDTOB4.getWeight()!=boxDTO.getWeight())\n\t\t\t\t\t\t\t\t\t||(boxDTOB4.getLength()!=boxDTO.getLength())\n\t\t\t\t\t\t\t\t\t||(boxDTOB4.getWidth()!=boxDTO.getWidth())\n\t\t\t\t\t\t\t\t\t||(boxDTOB4.getHeight()!=boxDTO.getHeight())) \n\t\t\t\t\t\t\t\t: wereWgtDimChanged;\n\t\t\tproductDTO.setWereWgtDimChanged(wereWgtDimChanged);\n\t\t\t\n\t\t\tSystem.out.println(boxDTOB4.getWeight()+"" --- ""+boxDTO.getWeight());\n\t\t\tSystem.out.println(boxDTOB4.getLength()+"" --- ""+boxDTO.getLength());\n\t\t\tSystem.out.println(boxDTOB4.getWidth()+"" --- ""+boxDTO.getWidth());\n\t\t\tSystem.out.println(boxDTOB4.getHeight()+"" --- ""+boxDTO.getHeight());\n\t\t\t\n\t\t\tif(upc!=null && !upc.equals(""""))upc=upc.replaceAll("" "", """");\n\t\t\tproductDTO.setUpc(upc);\n\t\t\t\n\t\t\tboxDTO.setProductId(productId);\n\t\t\tboxDTO.setLength(boxLength);\n\t\t\tboxDTO.setWidth(boxWidth);\n\t\t\tboxDTO.setHeight(boxHeight);\n\t\t\tboxDTO.setTotalWeight(boxTotalWeight);\n\t\t\tif(statusProductBox==null)statusProductBox=0;\n\t\t\tboxDTO.setStatusId(statusProductBox);\n\t\t\t/*if(statusProductBox==1) {\n\t\t\t\tboxDTO.setStatusId(1);\n\t\t\t} else {\n\t\t\t\tboxDTO.setStatusId(0);\n\t\t\t}*/\n\t\t\t//Make ""large"" and ""boxLength"" the biggest size between L,W and H\n\t\t\tswitchBetweenLargeWidthHeight();\n\t\t\t\n\t\t\tif (!productDTOB4.getLarge().equals(large)) {\n\t\t\t\tdataBefore += "" Large:["" + productDTOB4.getLarge() + ""]\\n"";\n\t\t\t\tdataAfter += "" Large:["" + large + ""]\\n"";\n\t\t\t}\n\t\t\t\n\t\t\tif (!productDTOB4.getWidth().equals(width)) {\n\t\t\t\tdataBefore += "" Width:["" + productDTOB4.getWidth() + ""]\\n"";\n\t\t\t\tdataAfter += "" Width:["" + width + ""]\\n"";\n\t\t\t}\n\t\t\t\n\t\t\tif (!productDTOB4.getHigh().equals(high)) {\n\t\t\t\tdataBefore += "" High:["" + productDTOB4.getHigh() + ""]\\n"";\n\t\t\t\tdataAfter += "" High:["" + high + ""]\\n"";\n\t\t\t}\n\t\t\t\n\t\t\tif (!productDTOB4.getWeight().equals(weight)){\n\t\t\t\tdataBefore += "" Weight:[""+productDTOB4.getWeight()+""]\\n"";\n\t\t\t\tdataAfter += "" Weight:[""+weight+""]\\n"";\n\t\t\t}\n\t\t\t\n\t\t\t// Box sizes\n\t\t\tif (boxDTOB4.getLength()!= null && !boxDTOB4.getLength().equals(boxDTO.getLength())) {\n\t\t\t\tdataBefore += "" Box Large:["" + boxDTOB4.getLength() + ""]\\n"";\n\t\t\t\tdataAfter += "" Box Large:["" + boxDTO.getLength() + ""]\\n"";\n\t\t\t}\n\t\t\t\n\t\t\tif (boxDTOB4.getWidth()!=null && !boxDTOB4.getWidth().equals(boxDTO.getWidth())) {\n\t\t\t\tdataBefore += "" Box Width:["" + boxDTOB4.getWidth() + ""]\\n"";\n\t\t\t\tdataAfter += "" Box Width:["" + boxDTO.getWidth() + ""]\\n"";\n\t\t\t}\n\t\t\t\n\t\t\tif (boxDTOB4.getHeight()!=null && !boxDTOB4.getHeight().equals(boxDTO.getHeight())) {\n\t\t\t\tdataBefore += "" Box Height:["" + boxDTOB4.getHeight() + ""]\\n"";\n\t\t\t\tdataAfter += "" Box Height:["" + boxDTO.getHeight() + ""]\\n"";\n\t\t\t}\n\t\t\t\n\t\t\tif (boxDTOB4.getTotalWeight()!=null && !boxDTOB4.getTotalWeight().equals(boxDTO.getTotalWeight())) {\n\t\t\t\tdataBefore += "" Box Weight:[""+boxDTOB4.getTotalWeight()+""]\\n"";\n\t\t\t\tdataAfter += "" Box Weight:[""+boxDTO.getTotalWeight()+""]\\n"";\n\t\t\t}\n\t\t\t\n\t\t\tif (boxDTOB4.getStatusId()!=null && !boxDTOB4.getStatusId().equals(boxDTO.getStatusId())) {\n\t\t\t\tdataBefore += "" CP Verified:[""+boxDTOB4.getStatusId()+""]\\n"";\n\t\t\t\tdataAfter += "" CP Verified:[""+boxDTO.getStatusId()+""]\\n"";\n\t\t\t}\n\t\t\t\n\t\t\tif (productDTOB4.getUpc()!=null && !productDTOB4.getUpc().equals(upc)) {\n\t\t\t\tdataBefore += "" UPC:["" + productDTOB4.getUpc() + ""]\\n"";\n\t\t\t\tdataAfter += "" UPC:["" + upc + ""]\\n"";\n\t\t\t}\n\t\t\n\t\t\t\n\t\t\tif (productDTOB4.getUpc()!=null && !productDTOB4.getUpc().equals(upc)) {\n\t\t\t\tdataBefore += "" UPC:["" + productDTOB4.getUpc() + ""]\\n"";\n\t\t\t\tdataAfter += "" UPC:["" + upc + ""]\\n"";\n\t\t\t}\n\t\t\t\n\t\t\tif (!productDTOB4.getCost().equals(cost)) {\n\t\t\t\tdataBefore += "" Our Cost:["" + productDTOB4.getCost() + ""]\\n"";\n\t\t\t\tdataAfter += "" Our Cost:["" + cost + ""]\\n"";\n\t\t\t}\t\n\t\t\tif (manufProductID != null)\n\t\t\t\tif(manufProductQuantity != null)\n\t\t\t\t\tupdateListManufactureProduct(0, manufProductID, manufProductQuantity, supplier, price, msrp0);\n\t\t\t\telse\n\t\t\t\t\tupdateListManufactureProduct(0, manufProductID, 0, supplier, price, msrp0);\n\t\t\tif (manufProductID1 != null)\n\t\t\t\tif(manufProductQuantity1 != null)\n\t\t\t\t\tupdateListManufactureProduct(1, manufProductID1, manufProductQuantity1, supplier1, price1, msrp1);\n\t\t\t\telse\n\t\t\t\t\tupdateListManufactureProduct(1, manufProductID1, 0, supplier1, price1, msrp1);\n\t\t\tif (manufProductID2 != null)\n\t\t\t\tif(manufProductQuantity2 != null)\n\t\t\t\t\tupdateListManufactureProduct(2, manufProductID2, manufProductQuantity2, supplier2, price2, msrp2);\n\t\t\t\telse\n\t\t\t\t\tupdateListManufactureProduct(2, manufProductID2, 0, supplier2, price2, msrp2);\n\t\t\tif (manufProductID3 != null)\n\t\t\t\tif (manufProductQuantity3 != null)\n\t\t\t\t\tupdateListManufactureProduct(3, manufProductID3, manufProductQuantity3, supplier3, price3, msrp3);\n\t\t\t\telse\n\t\t\t\t\tupdateListManufactureProduct(3, manufProductID3, 0, supplier3, price3, msrp3);\n\t\t\tif (manufProductID4 != null)\n\t\t\t\tif(manufProductQuantity4 != null)\n\t\t\t\t\tupdateListManufactureProduct(4, manufProductID4, manufProductQuantity4, supplier4, price4, msrp4);\n\t\t\t\telse\n\t\t\t\t\tupdateListManufactureProduct(4, manufProductID4, 0, supplier4, price4, msrp4);\n\t\t    List<ProductModelDTO>listModelB4= productDTOB4.getManufactureProductList();\n\t\t    List<ProductModelDTO>listModelAfter= productDTO.getManufactureProductList();\n\t\t    for(int i=0;i<listModelB4.size() && i<listModelAfter.size();i++){\n\t\t    \tfor(int j=0;j<listModelAfter.size();j++){\n\t\t    \t\t\tString manufPB4="" Manuf.P:""+listModelB4.get(i).getName()+""["";\n\t\t    \t\t\tString manufPAfter="" Manuf.P:""+listModelB4.get(i).getName()+""["";\n\t\t    \t\t\tboolean isChanged=false;\n\t\t    \t\tif(listModelB4.get(i).getId()==listModelAfter.get(j).getId()){\n\t\t    \t\t\tif(listModelB4.get(i).getName()!=null && !listModelB4.get(i).getName().equals(listModelAfter.get(j).getName())){\n\t\t    \t\t\t\tmanufPB4+=""Name:""+listModelB4.get(i).getName()+"";"";\n\t\t    \t\t\t\tmanufPAfter+=""Name:""+listModelAfter.get(j).getName()+"";"";\n\t\t\t\t\t\t\tisChanged=true;\n\t\t\t\t    \t}\n\t\t\t\t    \tif(listModelB4.get(i).getQuantity()!=null && listModelB4.get(i).getQuantity()!=listModelAfter.get(j).getQuantity()){\n\t\t\t\t    \t\tmanufPB4+=""Quantity:""+listModelB4.get(i).getQuantity()+"";"";\n\t\t\t\t    \t\tmanufPAfter+=""Quantity:""+listModelAfter.get(j).getQuantity()+"";"";\n\t\t\t\t\t\t\tisChanged=true;\n\t\t\t\t    \t}\n\t\t\t\t    \tif(listModelB4.get(i).getSupplier()!=null && !listModelB4.get(i).getSupplier().equals(listModelAfter.get(j).getSupplier())){\n\t\t\t\t    \t\tmanufPB4+=""Supplier:""+listModelB4.get(i).getSupplier()+"";"";\n\t\t\t\t    \t\tmanufPAfter+=""Supplier:""+listModelAfter.get(j).getSupplier()+"";"";\n\t\t\t\t\t\t\tisChanged=true;\n\t\t\t\t    \t}\n\t\t\t\t    \tif(listModelB4.get(i).getPrice()!=null && !listModelB4.get(i).getPrice().equals(listModelAfter.get(j).getPrice())){\n\t\t\t\t    \t\tmanufPB4+=""Cost:""+listModelB4.get(i).getPrice()+"";"";\n\t\t\t\t    \t\tmanufPAfter+=""Cost:""+listModelAfter.get(j).getPrice()+"";"";\n\t\t\t\t\t\t\tisChanged=true;\n\t\t\t\t    \t}\n\t\t\t\t    \tif(listModelB4.get(i).getMsrp()!=null && !listModelB4.get(i).getMsrp().equals(listModelAfter.get(j).getMsrp())){\n\t\t\t\t    \t\tmanufPB4+=""Msrp:""+listModelB4.get(i).getMsrp()+"";"";\n\t\t\t\t    \t\tmanufPAfter+=""Msrp:""+listModelAfter.get(j).getMsrp()+"";"";\n\t\t\t\t\t\t\tisChanged=true;\n\t\t\t\t    \t}\n\t\t    \t\t\tif(isChanged){\n\t\t\t    \t\t\tmanufPB4+=""]\\n"";\n\t\t\t    \t\t\tmanufPAfter+=""]\\n"";\n\t\t\t    \t\t\tif(listModelB4.get(i).getName()!=null && !listModelB4.get(i).getName().equals("""")&&\n\t\t\t    \t\t\t   listModelAfter.get(j).getName()!=null && !listModelAfter.get(j).getName().equals("""")){\n\t\t\t    \t\t\t\tdataBefore+=manufPB4;\n\t\t\t    \t\t\t\tdataAfter+=manufPAfter;\n\t\t\t    \t\t\t}\n\t\t    \t\t\t}\n\t\t    \t\t\tbreak;\n\t\t    \t\t}\n\t\t    \t\t\n\t\t    \t}\t\t    \t\n\t\t    }\n\t\t    \n\t\t    for(int i=0;i<listModelB4.size();i++){\n\t\t\t    \tboolean exist=false;\n\t\t\t    \tfor(int j=0;j<listModelAfter.size();j++){\n\t\t\t    \t\tif(listModelAfter.get(j).getId()==listModelB4.get(i).getId()&& !listModelAfter.get(j).getName().equals("""")){\n\t\t\t    \t\t\texist=true;\n\t\t\t    \t\t\tbreak;\n\t\t\t    \t\t}\n\t\t\t    \t}\n\t\t\t    \t\n\t\t\t    \tif(!exist){\n\t\t\t    \t\tboolean isChanged=false;\n\t\t    \t\t\tString manufPB4="" Manuf.P:["";\n\t\t    \t\t\tString manufPAfter="" Manuf.P:["";\n\t\t\t    \t\tif(listModelB4.get(i).getName()!=null){\n\t\t\t    \t\t\tisChanged=true;\n\t\t\t    \t\t\tmanufPB4+=""Name:""+listModelB4.get(i).getName()+"";"";\n\t\t\t\t    \t}\n\t\t\t\t    \tif(listModelB4.get(i).getQuantity()!=null){\n\t\t\t\t    \t\tisChanged=true;\n\t\t\t\t    \t\tmanufPB4+=""Quantity:""+listModelB4.get(i).getQuantity()+"";"";\n\t\t\t\t    \t\t\n\t\t\t\t    \t}\n\t\t\t\t    \tif(listModelB4.get(i).getSupplier()!=null){\n\t\t\t\t    \t\tisChanged=true;\n\t\t\t\t    \t\tmanufPB4+=""Supplier:""+listModelB4.get(i).getSupplier()+"";"";\n\t\t\t\t    \t\t\n\t\t\t\t    \t}\n\t\t\t\t    \tif(listModelB4.get(i).getPrice()!=null){\n\t\t\t\t    \t\tisChanged=true;\n\t\t\t\t    \t\tmanufPB4+=""Cost:""+listModelB4.get(i).getPrice()+"";"";\n\t\t\t\t    \t\t\n\t\t\t\t    \t}\n\t\t\t\t    \tif(listModelB4.get(i).getMsrp()!=null){\n\t\t\t\t    \t\tisChanged=true;\n\t\t\t\t    \t\tmanufPB4+=""Msrp:""+listModelB4.get(i).getMsrp();\n\t\t\t\t    \t}\n\t\t\t\t    \t\n\t\t    \t\t\tif(isChanged){\n\t\t\t    \t\t\tmanufPB4+=""]\\n"";\n\t\t\t    \t\t\tif(listModelB4.get(i).getName()!=null && !listModelB4.get(i).getName().equals(""""))dataBefore+=manufPB4;\n\t\t\t    \t\t\tmanufPAfter="" Manuf.P:""+""[Name:""+listModelB4.get(i).getName()+"" was removed!]\\n"";\n\t\t\t    \t\t\tif(listModelB4.get(i).getName()!=null && !listModelB4.get(i).getName().equals(""""))dataAfter+=manufPAfter;\n\t\t    \t\t\t}\t\t\t    \t\t\n\t\t\t    \t}\t\t\t    \t\n\t\t\t    }\n\t\t\t\t\n\t\t\t    for(int i=0;i<listModelAfter.size();i++){\n\t\t\t    \tboolean exist=false;\n\t\t\t    \tfor(int j=0;j<listModelB4.size();j++){\n\t\t\t    \t\tif(listModelB4.get(j).getId()==listModelAfter.get(i).getId()){\n\t\t\t    \t\t\texist=true;\n\t\t\t    \t\t\tbreak;\n\t\t\t    \t\t}\n\t\t\t    \t}\n\t\t\t    \t\n\t\t\t    \tif(!exist){\n\t\t\t    \t\tboolean isChanged=false;\n\t\t    \t\t\tString manufPAfter="" Manuf.P:["";\n\t\t    \t\t\tString manufPB4="" Manuf.P:["";\n\t\t    \t\t\tif(listModelAfter.get(i).getName()!=null){\n\t\t    \t\t\t\tisChanged=true;\n\t\t    \t\t\t\tmanufPAfter+=""Name:""+listModelAfter.get(i).getName()+"";"";\n\t\t\t\t    \t}\n\t\t\t\t    \tif(listModelAfter.get(i).getQuantity()!=null){\n\t\t\t\t    \t\tisChanged=true;\n\t\t\t\t    \t\tmanufPAfter+=""Quantity:""+listModelAfter.get(i).getQuantity()+"";"";\n\t\t\t\t    \t}\n\t\t\t\t    \tif(listModelAfter.get(i).getSupplier()!=null){\n\t\t\t\t    \t\tisChanged=true;\n\t\t\t\t    \t\tmanufPAfter+=""Supplier:""+listModelAfter.get(i).getSupplier()+"";"";\n\t\t\t\t    \t}\n\t\t\t\t    \tif(listModelAfter.get(i).getPrice()!=null){\n\t\t\t\t    \t\tisChanged=true;\n\t\t\t\t    \t\tmanufPAfter+=""Cost:""+listModelAfter.get(i).getPrice()+"";"";\n\t\t\t\t    \t}\n\t\t\t\t    \tif(listModelAfter.get(i).getMsrp()!=null){\n\t\t\t\t    \t\tisChanged=true;\n\t\t\t\t    \t\tmanufPAfter+=""Msrp:""+listModelAfter.get(i).getMsrp();\n\t\t\t\t    \t}\n\t\t\t\t    \t\n\t\t    \t\t\tif(isChanged){\n\t\t\t    \t\t\tmanufPAfter+=""]\\n"";\n\t\t\t    \t\t\tif(listModelAfter.get(i).getName()!=null && !listModelAfter.get(i).getName().equals(""""))dataAfter+=manufPAfter;\n\t\t\t    \t\t\t\n\t\t\t    \t\t\tmanufPB4+=""Name:""+listModelAfter.get(i).getName()+"" was added]\\n"";\n\t\t\t    \t\t\tif(listModelAfter.get(i).getName()!=null && !listModelAfter.get(i).getName().equals(""""))dataBefore+=manufPB4;\n\t\t\t    \t\t\t\n\t\t    \t\t\t}\n\t\t\t    \t}\n\t\t\t    }\n\t\t    \n\t\t\tproductDTO.getBrand().setId(brand);\n\t\t\tproductDTO.getCategory().setId(category);\n\t\t\tproductDTO.setMainFilterTypeId(mainSpecification);\n\t\t\tproductDTO.setLoyaltyProductId(loyaltyProductId);\n\t\t\tproductDTO.getNameEng().setName(nameEn);\n\t\t\tproductDTO.getNameFr().setName(nameFr);\n\t\t\tproductDTO.setMsrp(msrp);\n\t\t\tproductDTO.setCost(cost);\t\t\t\n\t\t\tproductDTO.setWidth(width);\n\t\t\tproductDTO.setLarge(large);\n\t\t\tproductDTO.setHigh(high);\n\t\t\tproductDTO.setWeight(weight);\n\t\t\t\n\t\t\tproductDTO.getDescriptionEng().setName(descriptionEn);\n\t\t\tproductDTO.getDescriptionFr().setName(descriptionFr);\n\t\t\tproductDTO.getSpecificationEng().setName(specificationEn);\n\t\t\tproductDTO.getSpecificationFr().setName(specificationFr);\t\t\t\n\t\t\tif (productDTO.getOtherEng() != null)\n\t\t\t\tproductDTO.getOtherEng().setName(otherEng);\t\t\t\n\t\t\tproductDTO.getOtherFr().setName(otherFr);\n\t\t\t\n\t\t\tproductDTO.setStatus((ProductStatus) CommonUtils.enumFromValue(ProductStatus.values(), statusId));\n\t\t\t\n\t\t\tif (statusId == ProductStatus.DISCONTINUED.getValue()) {\n\t\t\t\tproductDTO.setDiscontinuedStartDate(Calendar.getInstance().getTime());\n\t\t\t\tproductDTO.setLoyaltyProductIdSub(loyaltyProductIdSub);\n\t\t\t} else if (statusId == ProductStatus.DISABLED.getValue()) {\n\t\t\t\tif (productDTO.getDiscontinuedStartDate() != null) {\n\t\t\t\t\tproductDTO.setDiscontinuedStartDate(productDTO.getDiscontinuedStartDate());\n\t\t\t\t}\n\t\t\t\tif (productDTO.getLoyaltyProductIdSub() != null) {\n\t\t\t\t\tproductDTO.setLoyaltyProductIdSub(productDTO.getLoyaltyProductIdSub());\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tproductDTO.setNote(note);\n\t\t\t\n\t\t\t//Warranty\n\t\t\tString warrantyEng = """";\n\t\t\tString warrantyFr = """";\n\t\t\t\n\t\t\tif(defectFree) {\n\t\t\t\twarrantyEng = WebConstants.WARRANTY_DEFECT_FREE_ENG;\n\t\t\t\twarrantyFr = WebConstants.WARRANTY_DEFECT_FREE_FR;\n\t\t\t} else {\n\t\t\t\tif(periodTime.equalsIgnoreCase(WebConstants.WARRANTY_MONTH_ENG)) {\n\t\t\t\t\tif(Integer.valueOf(warrantyQuantity) > 1) {\n\t\t\t\t\t\twarrantyEng =  warrantyQuantity + "" "" + WebConstants.WARRANTY_MONTHS_ENG;\n\t\t\t\t\t} else {\n\t\t\t\t\t\twarrantyEng =  warrantyQuantity + "" "" + WebConstants.WARRANTY_MONTH_ENG;\n\t\t\t\t\t}\n\t\t\t\t\twarrantyFr = warrantyQuantity + "" "" + WebConstants.WARRANTY_MONTH_FR;\n\t\t\t\t} else {\n\t\t\t\t\tif(Integer.valueOf(warrantyQuantity) > 1) {\n\t\t\t\t\t\twarrantyEng =  warrantyQuantity + "" "" + WebConstants.WARRANTY_YEARS_ENG;\n\t\t\t\t\t\twarrantyFr = warrantyQuantity + "" "" + WebConstants.WARRANTY_YEARS_FR;\n\t\t\t\t\t} else {\n\t\t\t\t\t\twarrantyEng =  warrantyQuantity + "" "" + WebConstants.WARRANTY_YEAR_ENG;\n\t\t\t\t\t\twarrantyFr = warrantyQuantity + "" "" + WebConstants.WARRANTY_YEAR_FR;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif(productDTO.getWarrantyEng() == null) {\n\t\t\t\tCommonDTO commonWarrantyEng = CommonDTO.valueOf(0, warrantyEng);\n\t\t\t\tCommonDTO commonWarrantyFr = CommonDTO.valueOf(0, warrantyFr);\n\t\t\t\t\n\t\t\t\tproductDTO.setWarrantyEng(commonWarrantyEng);\n\t\t\t\tproductDTO.setWarrantyFr(commonWarrantyFr);\n\t\t\t} else {\n\t\t\t\tproductDTO.getWarrantyEng().setName(warrantyEng);\n\t\t\t\tproductDTO.getWarrantyFr().setName(warrantyFr);\n\t\t\t}\n\t\t\t\n\t\t\tString currentRealName = """";\n\t\t\t\n\t\t\t//That means that insert a new image and I have to link to the product\n\t\t\tif(imageId != 0) {\n\t\t\t\tif(productDTO.getImage() != null)\n\t\t\t\t\tproductDTO.getImage().setId(imageId);\n\t\t\t\telse\n\t\t\t\t\tproductDTO.setImage(imageService.getImage(imageId));\n\t\t\t\t\n\t\t\t\timgDTO = imageService.getImage(imageId);\n\t\t\t\tcurrentRealName = imgDTO.getRealName();\n\t\t\t}\n\t\t\t\n\t\t\tif(productDTO.getLinkList().size() == 0) {\n\t\t\t\t//If the link doesn't exist, I have to insert the link\n\t\t\t\tList<ProductLinkDTO> linkList = new ArrayList<ProductLinkDTO>();\n\t\t\t\tProductLinkDTO productLinkDTO = ProductLinkDTO.valueOf(linkUrl, productDTO.getId());\n\t\t\t\tlinkList.add(productLinkDTO);\n\t\t\t\tproductDTO.setLinkList(linkList);\n\t\t\t} else {\n\t\t\t\t//There is a link, so I have to update it.\n\t\t\t\tproductDTO.getLinkList().get(0).setLink(linkUrl);\n\t\t\t}\n\t\t\t\n\t\t\tboolean consideredForXML = productDTO.getConsideredForXML();\t\t\t\n\t\t\tif (!consideredForXML) { \n\t\t\t\tproductDTO.setConsideredForXML(true);\n\t\t\t}\n\t\t\t\n\t\t\tif(productDTOB4.getBrand().getId()!=productDTO.getBrand().getId()){\n\t    \t\tdataBefore+="" Brand:[""+productDTOB4.getBrand().getName()+""]\\n"";\n\t\t\t\tdataAfter+="" Brand::[""+productDTO.getBrand().getName()+""]\\n"";\n\t    \t}\n\t\t\t\n\t\t\t\n\t\t\tif(productDTOB4.getCategory().getId()!=productDTO.getCategory().getId()){\n\t    \t\tdataBefore+="" Category:[""+productDTOB4.getCategory().getName()+""]\\n"";\n\t\t\t\tdataAfter+="" Category:[""+productDTO.getCategory().getName()+""]\\n"";\n\t    \t}\n\t\t\t\n\t\t\tif(productDTOB4.getLoyaltyProductId()!=null && !productDTOB4.getLoyaltyProductId().equals(productDTO.getLoyaltyProductId())){\n\t    \t\tdataBefore+="" Loyalty P.Id:[""+productDTOB4.getLoyaltyProductId()+""]\\n"";\n\t\t\t\tdataAfter+="" Loyalty P.Id:[""+productDTO.getLoyaltyProductId()+""]\\n"";\n\t    \t}\n\t\t\t\n\t\t\tif(!productDTOB4.getNameEng().equals(productDTO.getNameEng())){\n\t    \t\tdataBefore+="" Name Eng:[""+productDTOB4.getNameEng()+""]\\n"";\n\t\t\t\tdataAfter+="" Name Eng:[""+productDTO.getNameEng()+""]\\n"";\n\t    \t}\n\n\t\t\tif(!productDTOB4.getNameFr().equals(productDTO.getNameFr())){\n\t    \t\tdataBefore+="" Name Fr:[""+productDTOB4.getNameFr()+""]\\n"";\n\t\t\t\tdataAfter+="" Name Fr:[""+productDTO.getNameFr()+""]\\n"";\n\t    \t}\n\n\t\t\tif(!productDTOB4.getMsrp().equals(productDTO.getMsrp())){\n\t    \t\tdataBefore+="" Msrp:[""+productDTOB4.getMsrp()+""]\\n"";\n\t\t\t\tdataAfter+="" Msrp:[""+productDTO.getMsrp()+""]\\n"";\n\t    \t} \n\n\t\t\tif(productDTOB4.getStatus().getValue()!=productDTO.getStatus().getValue()){\n\t\t\t\tString statusName=ProductStatus.getStatusByValue(productDTOB4.getStatus().getValue());\n\t    \t\tdataBefore+="" Status:[""+statusName+""]\\n"";\n\t    \t\tstatusName=ProductStatus.getStatusByValue(productDTO.getStatus().getValue());\n\t\t\t\tdataAfter+="" Status:[""+statusName+""]\\n"";\n\t    \t}\n\t\t\t\n\t\t\tif(!productDTOB4.getLoyaltyProductIdSub().equals(productDTO.getLoyaltyProductIdSub())){\n\t    \t\tdataBefore+="" Loyalty P.Id Sub:[""+productDTOB4.getLoyaltyProductIdSub()+""]\\n"";\n\t\t\t\tdataAfter+="" Loyalty P.Id Sub:[""+productDTO.getLoyaltyProductIdSub()+""]\\n"";\n\t    \t} \n\n\t\t\t// update product\n\t\t\tproductService.updateProduct(productDTO);\n\t\t\t\n\t\t\t// update product_box\n\t\t\t//UsersPrivilegesDTO usersPrivCPVerified = (UsersPrivilegesDTO)request.getSession(true).getAttribute(""usersPrivCanadaPostVerified"");\n\t\t\tproductService.updateProductBox(boxDTO);\n\n\t\t\trequest.getSession(true).setAttribute(""productID"", productId);\n\t\t\t\n\t\t\tfinal int SIZE = userNameList.size();\n\t\t\tString[] priceFull = new String[SIZE];\n\t\t\tString[] profitFull = new String[SIZE];\n\t\t\tString[] discountFull = new String[SIZE];\n\t\t\tBoolean[] excludedFull = new Boolean[SIZE];\n\t\t\texcluded = new String[SIZE];\n\t\t\tcurrencyRate = new Double[SIZE];\n\t\t\tcurrencySymbol = new String[SIZE];\n\t\t\tcurrencyPrice = new String[SIZE];\n\t\t\t\n\t\t\tArrayList<Long> arrayList = new ArrayList<Long>();\n\t\t\tUserDTO userDTOforCurrency;\n\t\t\tint count = 0;\n\t\t\tfor (UserSessionDTO uDTO : userNameList) {\n\t\t\t\tarrayList.add(uDTO.getId());\n\t\t\t\tuserDTOforCurrency = userService.getUserInformation(uDTO.getId());\n\t\t\t\tcurrencyRate[count] = 1D;\n\t\t\t\tcurrencySymbol[count] = ""CAD"";\n\t\t\t\tcurrencyPrice[count] = """";\n\t\t\t\tif(userDTOforCurrency!=null && userDTOforCurrency.getCurrencyRate()!=null) \n\t\t\t\t\tcurrencyRate[count] = userDTOforCurrency.getCurrencyRate();\n\t\t\t\tif(userDTOforCurrency!=null && userDTOforCurrency.getCurrencySymbol()!=null) \n\t\t\t\t\tcurrencySymbol[count] = userDTOforCurrency.getCurrencySymbol();\n\t\t\t\tcount++;\n\t\t\t}\n\n\t\t\tList<Long> whichUsersChangedByPrice = new ArrayList<Long>();\n\t\t\tList<Long> whichUsersChangedByExcluded = new ArrayList<Long>();\n\t\t\tcount = 0;\n\t\t\tint others = 0;\n\t\t\tfor (long userIdFromDTO : arrayList) {\n\t\t\t\tif (isThereTheExcludedInUserSessionDTO(isExcluded, userIdFromDTO)) {\n\t\t\t\t\texcludedFull[count] = true;\n\t\t\t\t\texcluded[count] = ""t"";\n\t\t\t\t\twhichUsersChangedByExcluded.add(userIdFromDTO);\n\t\t\t\t\tpriceFull[count] = """";\n\t\t\t\t\tprofitFull[count] = """";\n\t\t\t\t\tdiscountFull[count] = """";\n\t\t\t\t} else {\n\t\t\t\t\texcludedFull[count] = false;\n\t\t\t\t\texcluded[count] = ""f"";\n\t\t\t\t\twhichUsersChangedByPrice.add(userIdFromDTO);\n\t\t\t\t\tpriceFull[count] = userPrice[others];\n\t\t\t\t\tprofitFull[count] = percentageProfit[others];\n\t\t\t\t\tdiscountFull[count] = percentageDiscount[others];\n\t\t\t\t\t++others;\n\t\t\t\t}\n\t\t\t\t++count;\n\t\t\t}\n\t\t\t\n\t\t\tList<UserProductPriceDTO> uppDTOListCopy = productService.getUserProductPriceList(productId);\t\t\t\n\t\t\tUserProductPriceDTO uppDTO = new UserProductPriceDTO();\n\t\t\tint index = 0;\n\t\t\tfor (long userIdFromDTO : arrayList) {\n\t\t\t\tuppDTO = new UserProductPriceDTO();\n\t\t\t\tuppDTO.setExcluded(excludedFull[index]);\t\t\t\t\n\t\t\t\tuppDTO.setPrice(priceFull[index]);\n\t\t\t\tuppDTO.setProfit(profitFull[index]);\n\t\t\t\tuppDTO.setDiscount(discountFull[index]);\t\t\t\n\t\t\t\tuppDTO.setProductId(productId);\n\t\t\t\tuppDTO.setUserId(userIdFromDTO);\n\t\t\t\tuppDTO.setPriceType(PriceType.ADD_PRODUCT_PRICE_SET);\n\t\t\t\tuppDTO.setUserStatus(UserProductStatus.ACTIVE);\n\t\t\t\tproductService.updateUserProductPrice(uppDTO);\n\t\t\t\t++index;\n\t\t\t}\n\t\t\t\n\t\t\tuserPrice = priceFull;\n\t\t\tpercentageProfit = profitFull;\n\t\t\tpercentageDiscount = discountFull;\t\t\t\n\t\t\t\n\t\t\tfor(int i=0;i<userPrice.length; i++) {\n\t\t\t\tif(userPrice[i]!=null && userPrice[i].replaceAll("" "", """").matches(""^-?\\\\d*\\\\.\\\\d+$|^-?\\\\d+$"")) {\n\t\t\t\t\tDouble curPrice = currencyRate[i] * Double.parseDouble(userPrice[i]);\n\t\t\t\t\tcurPrice = (double) Math.round(curPrice*100)/100;\n\t\t\t\t\tcurrencyPrice[i] = curPrice+"""";\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tList<UserProductPriceDTO> uppDTOListPriceB4 = new ArrayList<UserProductPriceDTO>();\n\t\t\tUserProductPriceDTO  userProductPriceDTOB4 = new UserProductPriceDTO();\n\t\t\tfor (UserProductPriceDTO userProductPriceDTOCopy : uppDTOListCopy) {\n\t\t\t\tuserProductPriceDTOB4 = new UserProductPriceDTO();\n\t\t\t\tuserProductPriceDTOB4.setId(userProductPriceDTOCopy.getId());\n\t\t\t\tuserProductPriceDTOB4.setUserId(userProductPriceDTOCopy.getUserId());\n\t\t\t\tuserProductPriceDTOB4.setProductId(userProductPriceDTOCopy.getProductId());\n\t\t\t\tuserProductPriceDTOB4.setPriceType(userProductPriceDTOCopy.getPriceType());\n\t\t\t\tuserProductPriceDTOB4.setUserStatus(userProductPriceDTOCopy.getUserStatus());\t\t\t\t\n\t\t\t\tif (userProductPriceDTOCopy.getPrice() != null) {\n\t\t\t\t\tif (userProductPriceDTOCopy.getPrice().matches(""^\\\\s*$"")) {\n\t\t\t\t\t\tuserProductPriceDTOB4.setPrice(""0.00"");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tuserProductPriceDTOB4.setPrice(userProductPriceDTOCopy.getPrice());\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tuserProductPriceDTOB4.setPrice(""0.00"");\n\t\t\t\t}\n\t\t\t\tuserProductPriceDTOB4.setProfit(userProductPriceDTOCopy.getProfit());\n\t\t\t\tuserProductPriceDTOB4.setDiscount(userProductPriceDTOCopy.getDiscount());\n\t\t\t\tuserProductPriceDTOB4.setExcluded(userProductPriceDTOCopy.getExcluded());\n\t\t\t\tuppDTOListPriceB4.add(userProductPriceDTOB4);\n\t\t\t}\n\t\t\t\n\t\t\tuppDTOListCopy = null;\n\t\t\tList<UserProductPriceDTO> uppDTOListPriceAfter = new ArrayList<UserProductPriceDTO>();\n\t\t\tUserProductPriceDTO uppDTOAfter = new UserProductPriceDTO();\n\t\t\tindex = 0;\n\t\t\tfor (long userIdFromDTO : arrayList) {\n\t\t\t\tuppDTOAfter = new UserProductPriceDTO();\n\t\t\t\tuppDTOAfter.setExcluded(excludedFull[index]);\n\t\t\t\tif (priceFull[index].matches(""^\\\\s*$"")) {\n\t\t\t\t\tpriceFull[index] = ""0.00"";\n\t\t\t\t}\n\t\t\t\tuppDTOAfter.setPrice(priceFull[index]);\n\t\t\t\tuppDTOAfter.setProfit(profitFull[index]);\n\t\t\t\tuppDTOAfter.setDiscount(discountFull[index]);\n\t\t\t\tuppDTOAfter.setProductId(productId);\n\t\t\t\tuppDTOAfter.setUserId(userIdFromDTO);\n\t\t\t\tuppDTOAfter.setPriceType(PriceType.ADD_PRODUCT_PRICE_SET);\n\t\t\t\tuppDTOAfter.setUserStatus(UserProductStatus.ACTIVE);\n\t\t\t\tuppDTOListPriceAfter.add(uppDTOAfter);\n\t\t\t\t++index;\n\t\t\t}\n\t\t\tfor (int i=0; i<uppDTOListPriceB4.size(); i++) {\n\t\t\t\tfor (int j=0; j<uppDTOListPriceAfter.size(); j++) {\n\t\t\t\t\tif (uppDTOListPriceB4.get(i).getUserId() == uppDTOListPriceAfter.get(j).getUserId()) {\t\t\t\t\t\t\n\t\t\t\t\t\tif (uppDTOListPriceB4.get(i).getExcluded() != uppDTOListPriceAfter.get(j).getExcluded()) {\n\t\t\t\t\t\t\tUserDTO userDTO = userService.getUserOrTemplateById(uppDTOListPriceB4.get(i).getUserId());\n\t\t\t\t    \t\tdataBefore += "" Excluded:[""+userDTO.getLogin() + "":"" + uppDTOListPriceB4.get(i).getExcluded() + ""]\\n"";\n\t\t\t\t\t\t\tdataAfter += "" Excluded:[""+userDTO.getLogin() + "":"" + uppDTOListPriceAfter.get(j).getExcluded() + ""]\\n"";\n\t\t\t\t    \t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (uppDTOListPriceB4.get(i).getPrice() != null \n\t\t\t\t\t\t\t\t\t&& !uppDTOListPriceB4.get(i).getPrice().equals(uppDTOListPriceAfter.get(j).getPrice()) \n\t\t\t\t\t\t\t\t\t&& !uppDTOListPriceAfter.get(j).getExcluded()) {\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t//-------------------- recalculate shipping total-------------------------------------\n\t\t\t\t\t\t\t\tproductService.calculateShippingRate(uppDTOListPriceB4.get(i).getUserId(), uppDTOListPriceB4.get(i).getProductId());\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t//------------------------------------------------------------------------------------\n\t\t\t\t\t\t\t\tUserDTO userDTO = userService.getUserOrTemplateById(uppDTOListPriceB4.get(i).getUserId());\n\t\t\t\t\t\t\t\tdataBefore += "" User Price:[""+userDTO.getLogin() + "":"" + uppDTOListPriceB4.get(i).getPrice() + ""]\\n"";\n\t\t\t\t\t\t\t\tdataAfter += "" User Price:[""+userDTO.getLogin() + "":"" + uppDTOListPriceAfter.get(j).getPrice() + ""]\\n"";\n\t\t\t\t    \t} \n\t\t\t\t\t    break;\n\t\t\t\t\t}\t\t\t\t\t\n\t\t\t\t}\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\toperationDTO.setOperationType(""Update Product"");\n\t\t\toperationDTO.setDataBefore(dataBefore);\n\t\t\toperationDTO.setDataAfter(dataAfter);\n\t\t\toperationDTO.setObjectId(productId);\n\t\t\toperationDTO.setUserId(managerId);\n\t\t\toperationsService.insertOperation(operationDTO);\n\t\t\thandleAlterProductXML(productDTOB4, brand, category, mainSpecification, currentRealName, statusId,  nameEn, nameFr,\n\t\t\t\t\t\t\t\t\tdescriptionEn, descriptionFr, specificationEn, specificationFr, otherEng, \n\t\t\t\t\t\t\t\t\totherFr, warrantyEng, warrantyFr, msrp, large, width, high, weight, \n\t\t\t\t\t\t\t\t\tmanufProductID, whichUsersChangedByPrice, whichUsersChangedByExcluded, \n\t\t\t\t\t\t\t\t\tuppDTOListPriceB4, uppDTOListPriceAfter, wereWgtDimChanged);\n\t\t\t\n\t\t\treturn SUCCESS;\n\t\t} catch(ServiceException e) {\n\t\t\tlog.debug(""Service Error when loading file"");\n\t\t\taddActionError(getText(""loyauty.error.common.service""));\n\t\t} catch (Exception e) {\n\t\t\taddActionError(getText(""loyauty.error.common.service""));\n\t\t}\n\t\treturn INPUT;\n\t}\n\t\n\t/**\n\t * @author Rafael Padron\n\t */\n\tpublic void handleAlterProductXML(ProductDTO productDTO, long brand, long category, \n\t\t\tlong mainSpecification, String imageRealName, Integer statusId, String nameEn, String nameFr,\n\t\t\tString descriptionEn, String descriptionFr,\n\t\t\tString specificationEn, String specificationFr,\n\t\t\tString otherEng, String otherFr, String warrantyEng, String warrantyFr,\n\t\t\tString msrp, String large, String width, String high, String weight,\n\t\t\tString manufProductID, List<Long> whichUsersChangedByPrice,\n\t\t\tList<Long> whichUsersChangedByExcluded, List<UserProductPriceDTO> uppDTOListPriceB4,\n\t\t\tList<UserProductPriceDTO> uppDTOListPriceAfter, boolean wereWgtDimChanged) {\n\t\t\n\t\tfinal boolean TO_BE_EXECUTED = true;\n\t\t\n\t\t// Related to AlterProductXML.class\n\t\tboolean brand_xml = false;\n\t\tboolean category_xml = false;\n\t\tboolean mainSpecification_xml = false;\n\t\tboolean image_xml = false;\n\t\tboolean status_xml = false;\n\t\tboolean nameEn_xml = false;\n\t\tboolean nameFr_xml = false;\n\t\tboolean descriptionEn_xml = false;\n\t\tboolean descriptionFr_xml = false;\n\t\tboolean specificationEn_xml = false;\n\t\tboolean specificationFr_xml = false;\n\t\tboolean otherEng_xml = false;\n\t\tboolean otherFr_xml = false;\n\t\tboolean warrantyEng_xml = false;\n\t\tboolean warrantyFr_xml = false;\n\t\tboolean msrp_xml = false;\n\t\tboolean shipping_xml = false;\n\t\tboolean dimensions_xml = false;\n\t\tboolean weight_xml = false;\n\t\tboolean modelNumber_xml = false;\n\t\t\n\t\tboolean product_to_be_executed_xml = false;\n\t\t\n\t\t// Related to AlterUserProductXML.class\n\t\tboolean priceDiscount_xml = false;\n\t\tboolean excluded_xml = false;\n\t\t\n\t\ttry {\t\t\t\n\t\t\tlong productId = productDTO.getId();\n\t\t\t\n\t\t\tAlterProductXMLDTO apxDTOBefore = productService.getAlterProductXML(productId);\n\t\t\t\n\t\t\tboolean apxAlreadyExecuted = false;\n\t\t\t\n\t\t\tboolean isAPXBrandAlready = false;\n\t\t\tboolean isAPXCategoryAlready = false;\n\t\t\tboolean isAPXMainSpecAlready = false;\n\t\t\tboolean isAPXImageAlready = false;\n\t\t\tboolean isAPXStatusAlready = false;\n\t\t\tboolean isAPXNameEnAlready = false;\n\t\t\tboolean isAPXNameFrAlready = false;\n\t\t\tboolean isAPXDescEnAlready = false;\n\t\t\tboolean isAPXDescFrAlready = false;\n\t\t\tboolean isAPXSpecEnAlready = false;\n\t\t\tboolean isAPXSpecFrAlready = false;\n\t\t\tboolean isAPXOtherEnAlready = false;\n\t\t\tboolean isAPXOtherFrAlready = false;\n\t\t\tboolean isAPXWarrantyEnAlready = false;\n\t\t\tboolean isAPXWarrantyFrAlready = false;\n\t\t\tboolean isAPXMSRPAlready = false;\n\t\t\tboolean isAPXShippingAlready = false;\n\t\t\tboolean isAPXDimsAlready = false;\n\t\t\tboolean isAPXWgtAlready = false;\n\t\t\tboolean isAPXModelNoAlready = false;\t\t\t\n\t\t\t\n\t\t\tboolean apxExists = (apxDTOBefore != null);\n\t\t\tif (apxExists) {\n\t\t\t\tapxAlreadyExecuted = apxDTOBefore.getProductToBeExecuted();\n\t\t\t\t\n\t\t\t\tisAPXBrandAlready = apxDTOBefore.getBrandId();\n\t\t\t\tisAPXCategoryAlready = apxDTOBefore.getCategoryId();\n\t\t\t\tisAPXMainSpecAlready = apxDTOBefore.getTypeId();\n\t\t\t\tisAPXImageAlready = apxDTOBefore.getImageId();\n\t\t\t\tisAPXStatusAlready = apxDTOBefore.getStatusId();\n\t\t\t\tisAPXNameEnAlready = apxDTOBefore.getNameEn();\n\t\t\t\tisAPXNameFrAlready = apxDTOBefore.getNameFr();\n\t\t\t\tisAPXDescEnAlready = apxDTOBefore.getDescriptionEn();\n\t\t\t\tisAPXDescFrAlready = apxDTOBefore.getDescriptionFr();\n\t\t\t\tisAPXSpecEnAlready = apxDTOBefore.getSpecificationEn();\n\t\t\t\tisAPXSpecFrAlready = apxDTOBefore.getSpecificationFr();\n\t\t\t\tisAPXOtherEnAlready = apxDTOBefore.getOtherEn();\n\t\t\t\tisAPXOtherFrAlready = apxDTOBefore.getOtherFr();\n\t\t\t\tisAPXWarrantyEnAlready = apxDTOBefore.getWarrantyEn();\n\t\t\t\tisAPXWarrantyFrAlready = apxDTOBefore.getWarrantyFr();\n\t\t\t\tisAPXMSRPAlready = apxDTOBefore.getMsrp();\n\t\t\t\tisAPXShippingAlready = apxDTOBefore.getShipping();\n\t\t\t\tisAPXDimsAlready = apxDTOBefore.getDimensions();\n\t\t\t\tisAPXWgtAlready = apxDTOBefore.getWeight();\n\t\t\t\tisAPXModelNoAlready = apxDTOBefore.getModelNumber();\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tString descriptionEnCell = """", descriptionEnDB = """", descriptionFrCell = """", descriptionFrDB = """";\n\t\t\tString specificationEnCell = """", specificationEnDB = """", specificationFrCell = """", specificationFrDB = """";\n\t\t\tString otherEnCell = """", otherEnDB = """", otherFrCell = """", otherFrDB = """";\n\t\t\t\n\t\t\tif (productDTO.getBrand() != null) {\n\t\t\t\tbrand_xml = (brand != productDTO.getBrand().getId());\n\t\t\t\tif (apxExists) if (apxAlreadyExecuted) if (isAPXBrandAlready) brand_xml = true;\n\t\t\t}\n\t\t\t\n\t\t\tif (productDTO.getCategory() != null) {\n\t\t\t\tcategory_xml = (category != productDTO.getCategory().getId());\n\t\t\t\tif (apxExists) if (apxAlreadyExecuted) if (isAPXCategoryAlready) category_xml = true;\n\t\t\t}\t\t\t\n\t\t\t\n\t\t\tif (productDTO.getMainFilterTypeId() != null) {\n\t\t\t\tif (productDTO.getMainFilterTypeId() != 0L && productDTO.getMainFilterTypeId() != 51) {\n\t\t\t\t\tmainSpecification_xml = (mainSpecification != productDTO.getMainFilterTypeId().longValue());\n\t\t\t\t}\n\t\t\t\tif (apxExists) if (apxAlreadyExecuted) if (isAPXMainSpecAlready) mainSpecification_xml = true;\n\t\t\t}\n\t\t\t\n\t\t\tif (imageRealName != null && productDTO.getOldImageRealName() != null) {\n\t\t\t\t\timage_xml = (!imageRealName.equalsIgnoreCase(productDTO.getOldImageRealName()));\n\t\t\t\t\tif (apxExists) if (apxAlreadyExecuted) if (isAPXImageAlready) image_xml = true;\n\t\t\t}\n\t\t\t\n\t\t\tstatus_xml = (statusId != productDTO.getStatus().getValue());\n\t\t\tif (apxExists) if (apxAlreadyExecuted) if (isAPXStatusAlready) status_xml = true;\n\t\t\t\n\t\t\tif (nameEn != null && productDTO.getNameEng() != null) {\n\t\t\t\tnameEn_xml = (!nameEn.trim().equalsIgnoreCase(productDTO.getNameEng().getName().trim()));\n\t\t\t\tif (apxExists) if (apxAlreadyExecuted) if (isAPXNameEnAlready) nameEn_xml = true;\n\t\t\t}\n\t\t\t\n\t\t\tif (nameFr != null && productDTO.getNameFr() != null) {\t\t\t\t\n\t\t\t\tnameFr_xml = (!nameFr.trim().equalsIgnoreCase(productDTO.getNameFr().getName().trim()));\n\t\t\t\tif (apxExists) if (apxAlreadyExecuted) if (isAPXNameFrAlready) nameFr_xml = true;\n\t\t\t}\n\t\t\t\n\t\t\tif (descriptionEn != null && productDTO.getDescriptionEng() != null) {\n\t\t\t\tdescriptionEnCell = wsRipper(html2text(descriptionEn.trim()));\n\t\t\t\tdescriptionEnDB = wsRipper(html2text(productDTO.getDescriptionEng().getName().trim()));\t\t\t\t\n\t\t\t\tdescriptionEn_xml = (!descriptionEnCell.trim().equalsIgnoreCase(descriptionEnDB.trim()));\n\t\t\t\tif (apxExists) if (apxAlreadyExecuted) if (isAPXDescEnAlready) descriptionEn_xml = true;\n\t\t\t}\n\t\t\t\n\t\t\tif (descriptionFr != null && productDTO.getDescriptionFr() != null) {\n\t\t\t\tdescriptionFrCell = wsRipper(html2text(descriptionFr.trim()));\n\t\t\t\tdescriptionFrDB = wsRipper(html2text(productDTO.getDescriptionFr().getName().trim()));\t\t\t\t\n\t\t\t\tdescriptionFr_xml = (!descriptionFrCell.trim().equalsIgnoreCase(descriptionFrDB.trim()));\n\t\t\t\tif (apxExists) if (apxAlreadyExecuted) if (isAPXDescFrAlready) descriptionFr_xml = true;\n\t\t\t}\n\t\t\t\n\t\t\tif (specificationEn != null && productDTO.getSpecificationEng() != null) {\n\t\t\t\tspecificationEnCell = wsRipper(html2text(specificationEn.trim()));\t\t\n\t\t\t\tspecificationEnDB = wsRipper(html2text(productDTO.getSpecificationEng().getName().trim()));\t\t\t\t\n\t\t\t\tspecificationEn_xml = (!specificationEnCell.trim().equalsIgnoreCase(specificationEnDB.trim()));\t\t\t\t\n\t\t\t\tif (apxExists) if (apxAlreadyExecuted) if (isAPXSpecEnAlready) specificationEn_xml = true;\n\t\t\t}\n\t\t\t\n\t\t\tif (specificationFr != null && productDTO.getSpecificationFr() != null) {\n\t\t\t\tspecificationFrCell = wsRipper(html2text(specificationFr.trim()));\t\t\t\t\n\t\t\t\tspecificationFrDB = wsRipper(html2text(productDTO.getSpecificationFr().getName().trim()));\t\t\t\t\n\t\t\t\tspecificationFr_xml = (!specificationFrCell.trim().equalsIgnoreCase(specificationFrDB.trim()));\n\t\t\t\tif (apxExists) if (apxAlreadyExecuted) if (isAPXSpecFrAlready) specificationFr_xml = true;\n\t\t\t}\n\t\t\t\n\t\t\tif (otherEng != null && productDTO.getOtherEng() != null) {\n\t\t\t\totherEnCell = wsRipper(html2text(otherEng.trim()));\n\t\t\t\totherEnDB = wsRipper(html2text(productDTO.getOtherEng().getName().trim()));\t\t\t\t\n\t\t\t\totherEng_xml = (!otherEnCell.trim().equalsIgnoreCase(otherEnDB.trim()));\n\t\t\t\tif (apxExists) if (apxAlreadyExecuted) if (isAPXOtherEnAlready) otherEng_xml = true;\n\t\t\t}\n\t\t\t\n\t\t\tif (otherFr != null && productDTO.getOtherFr() != null) {\n\t\t\t\totherFrCell = wsRipper(html2text(otherFr.trim()));\n\t\t\t\totherFrDB = wsRipper(html2text(productDTO.getOtherFr().getName().trim()));\t\t\t\t\t\t\t\n\t\t\t\totherFr_xml = (!otherFrCell.trim().equalsIgnoreCase(otherFrDB.trim()));\n\t\t\t\tif (apxExists) if (apxAlreadyExecuted) if (isAPXOtherFrAlready) otherFr_xml = true;\n\t\t\t}\n\t\t\t\n\t\t\tif (warrantyEng != null && productDTO.getWarrantyEng() != null) {\n\t\t\t\twarrantyEng_xml = (!warrantyEng.trim().equalsIgnoreCase(productDTO.getWarrantyEng().getName().trim()));\n\t\t\t\tif (apxExists) if (apxAlreadyExecuted) if (isAPXWarrantyEnAlready) warrantyEng_xml = true;\n\t\t\t}\n\t\t\t\n\t\t\tif (warrantyFr != null && productDTO.getWarrantyFr() != null) {\n\t\t\t\twarrantyFr_xml = (!warrantyFr.trim().equalsIgnoreCase(productDTO.getWarrantyFr().getName().trim()));\n\t\t\t\tif (apxExists) if (apxAlreadyExecuted) if (isAPXWarrantyFrAlready) warrantyFr_xml = true;\n\t\t\t}\n\t\t\t\n\t\t\tmsrp_xml = (!msrp.equalsIgnoreCase(productDTO.getMsrp()));\n\t\t\tif (apxExists) if (apxAlreadyExecuted) if (isAPXMSRPAlready) msrp_xml = true;\n\t\t\t\n\t\t\tdimensions_xml = (!large.equalsIgnoreCase(productDTO.getLarge()) \n\t\t\t\t\t\t\t  || !width.equalsIgnoreCase(productDTO.getWidth())\n\t\t\t\t\t\t\t  || !high.equalsIgnoreCase(productDTO.getHigh()));\n\t\t\tif (apxExists) if (apxAlreadyExecuted) if (isAPXDimsAlready) dimensions_xml = true;\t\t\t\n\t\t\t\n\t\t\tweight_xml = (!weight.equalsIgnoreCase(productDTO.getWeight()));\n\t\t\tif (apxExists) if (apxAlreadyExecuted) if (isAPXWgtAlready) weight_xml = true;\t\n\t\t\t\n\t\t\tshipping_xml = wereWgtDimChanged;\n\t\t\tif (apxExists) if (apxAlreadyExecuted) if (isAPXShippingAlready) shipping_xml = true;\n\t\t\t\t\t\t\n\t\t\tif (productDTO.getManufactureProductList() != null) {\n\t\t\t\tif (productDTO.getManufactureProductList().size() == 1) {\n\t\t\t\t\tfor (ProductModelDTO productModelDTO : productDTO.getManufactureProductList()) {\n\t\t\t\t\t\tif (productModelDTO != null && productModelDTO.getName() != null) {\n\t\t\t\t\t\t\tmodelNumber_xml = !productModelDTO.getName().trim().equalsIgnoreCase(manufProductID.trim());\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (apxExists) if (apxAlreadyExecuted) if (isAPXModelNoAlready) modelNumber_xml = true;\n\t\t\t\n\t\t\t\n\t\t\tproduct_to_be_executed_xml = brand_xml || category_xml || mainSpecification_xml \n\t\t\t\t\t\t\t\t\t\t|| image_xml || status_xml || nameEn_xml \n\t\t\t\t\t\t\t\t\t\t|| nameFr_xml || descriptionEn_xml || descriptionFr_xml\n\t\t\t\t\t\t\t\t\t\t|| specificationEn_xml || specificationFr_xml || otherEng_xml\n\t\t\t\t\t\t\t\t\t\t|| otherFr_xml || warrantyEng_xml || warrantyFr_xml\n\t\t\t\t\t\t\t\t\t\t|| dimensions_xml || weight_xml || modelNumber_xml\n\t\t\t\t\t\t\t\t\t\t|| msrp_xml || shipping_xml;\n\t\t\t\n\t\t\tAlterProductXMLDTO alterProductXMLDTO = new AlterProductXMLDTO();\n\t\t\talterProductXMLDTO.setProductId(productId);\n\t\t\talterProductXMLDTO.setBrandId(brand_xml);\n\t\t\talterProductXMLDTO.setCategoryId(category_xml);\n\t\t\talterProductXMLDTO.setTypeId(mainSpecification_xml);\n\t\t\talterProductXMLDTO.setImageId(image_xml);\n\t\t\talterProductXMLDTO.setStatusId(status_xml);\n\t\t\talterProductXMLDTO.setNameEn(nameEn_xml);\n\t\t\talterProductXMLDTO.setNameFr(nameFr_xml);\n\t\t\talterProductXMLDTO.setDescriptionEn(descriptionEn_xml);\n\t\t\talterProductXMLDTO.setDescriptionFr(descriptionFr_xml);\n\t\t\talterProductXMLDTO.setSpecificationEn(specificationEn_xml);\n\t\t\talterProductXMLDTO.setSpecificationFr(specificationFr_xml);\n\t\t\talterProductXMLDTO.setOtherEn(otherEng_xml);\n\t\t\talterProductXMLDTO.setOtherFr(otherFr_xml);\n\t\t\talterProductXMLDTO.setWarrantyEn(warrantyEng_xml);\n\t\t\talterProductXMLDTO.setWarrantyFr(warrantyFr_xml);\n\t\t\talterProductXMLDTO.setDimensions(dimensions_xml);\n\t\t\talterProductXMLDTO.setWeight(weight_xml);\n\t\t\talterProductXMLDTO.setModelNumber(modelNumber_xml);\n\t\t\talterProductXMLDTO.setMsrp(msrp_xml);\n\t\t\talterProductXMLDTO.setShipping(shipping_xml);\n\t\t\talterProductXMLDTO.setProductToBeExecuted(product_to_be_executed_xml);\n\t\t\tif (productService.existsOnAlterProductXML(productId)) {\n\t\t\t\tproductService.updateAlterProductXML(alterProductXMLDTO);\n\t\t\t} else {\n\t\t\t\tproductService.createAlterProductXML(alterProductXMLDTO);\n\t\t\t}\n\t\t\t\n\t\t\tif (didPriceListChange(uppDTOListPriceB4, uppDTOListPriceAfter)) {\n\t\t\t\tAlterUserProductXMLDTO alterUserProductXMLDTO = new AlterUserProductXMLDTO();\n\t\t\t\tif (whichUsersChangedByPrice != null && whichUsersChangedByPrice.size() > 0) {\n\t\t\t\t\tAlterUserProductXMLDTO aupxDTOBefore = null;\n\t\t\t\t\tboolean aupxExists = false;\n\t\t\t\t\tboolean aupxAlreadyExecuted = false;\n\t\t\t\t\tboolean isAUPXPricingAlready = false;\n\t\t\t\t\tboolean user_product_to_be_executed = false;\n\t\t\t\t\t\n\t\t\t\t\tfor (long userId_price : whichUsersChangedByPrice) {\n\t\t\t\t\t\t\n\t\t\t\t\t\taupxDTOBefore = productService.getAlterUserProductXML(userId_price, productId);\n\t\t\t\t\t\t\n\t\t\t\t\t\taupxExists = (aupxDTOBefore != null);\n\t\t\t\t\t\tif (aupxExists) {\n\t\t\t\t\t\t\taupxAlreadyExecuted = aupxDTOBefore.getUserProductToBeExecuted();\n\t\t\t\t\t\t\tisAUPXPricingAlready = aupxDTOBefore.getPriceDiscount();\n\t\t\t\t\t\t\tpriceDiscount_xml = aupxDTOBefore.getPriceDiscount();\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (!priceDiscount_xml) {\n\t\t\t\t\t\t\tpriceDiscount_xml = analyzePriceDiscount(userId_price, uppDTOListPriceB4, uppDTOListPriceAfter);\n\t\t\t\t\t\t\tif (aupxExists) if (aupxAlreadyExecuted) if (isAUPXPricingAlready) priceDiscount_xml = true;\n\t\t\t\t\t\t}\t\t\t\t\t\t\n\t\t\t\t\t\t// Does this user exist in the UPP-list [for price]?\n\t\t\t\t\t\t// If so, it means that this value shouldn't be excluded or simply just must be rendered \n\t\t\t\t\t\t// in the XML-File to generate.\n\t\t\t\t\t\texcluded_xml = !analyzeExcluded(userId_price, uppDTOListPriceAfter);\n\t\t\t\t\t\tuser_product_to_be_executed = priceDiscount_xml ? priceDiscount_xml : user_product_to_be_executed;\n\t\t\t\t\t\talterUserProductXMLDTO = new AlterUserProductXMLDTO();\n\t\t\t\t\t\talterUserProductXMLDTO.setUserId(userId_price);\n\t\t\t\t\t\talterUserProductXMLDTO.setProductId(productId);\n\t\t\t\t\t\talterUserProductXMLDTO.setPriceDiscount(priceDiscount_xml);\n\t\t\t\t\t\talterUserProductXMLDTO.setShipping(false);\n\t\t\t\t\t\talterUserProductXMLDTO.setExcluded(excluded_xml);\n\t\t\t\t\t\talterUserProductXMLDTO.setExcludedMeaning(false);\n\t\t\t\t\t\talterUserProductXMLDTO.setUserProductToBeExecuted(user_product_to_be_executed);\t// TO_BE_EXECUTED\n\t\t\t\t\t\tif (productService.existsOnAlterUserProductXML(productId, userId_price)) {\n\t\t\t\t\t\t\tproductService.updateAlterUserProductXML(alterUserProductXMLDTO);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tproductService.createAlterUserProductXML(alterUserProductXMLDTO);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (whichUsersChangedByExcluded != null && whichUsersChangedByExcluded.size() > 0) {\n\t\t\t\t\tfor (long userId_excluded : whichUsersChangedByExcluded) {\n\t\t\t\t\t\talterUserProductXMLDTO = new AlterUserProductXMLDTO();\n\t\t\t\t\t\talterUserProductXMLDTO.setUserId(userId_excluded);\n\t\t\t\t\t\talterUserProductXMLDTO.setProductId(productId);\n\t\t\t\t\t\talterUserProductXMLDTO.setPriceDiscount(false);\n\t\t\t\t\t\talterUserProductXMLDTO.setShipping(false);\n\t\t\t\t\t\talterUserProductXMLDTO.setExcluded(true);\n\t\t\t\t\t\talterUserProductXMLDTO.setExcludedMeaning(true);\n\t\t\t\t\t\talterUserProductXMLDTO.setUserProductToBeExecuted(false);\n\t\t\t\t\t\tif (productService.existsOnAlterUserProductXML(productId, userId_excluded)) {\n\t\t\t\t\t\t\tproductService.updateAlterUserProductXML(alterUserProductXMLDTO);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tproductService.createAlterUserProductXML(alterUserProductXMLDTO);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tlong userId = 0L;\n\t\t\t\tAlterUserProductXMLDTO alterUserProductXMLDTO = new AlterUserProductXMLDTO();\n\t\t\t\tfor (UserProductPriceDTO userProductPriceDTO : uppDTOListPriceAfter) {\n\t\t\t\t\talterUserProductXMLDTO = new AlterUserProductXMLDTO();\n\t\t\t\t\tuserId = userProductPriceDTO.getUserId();\n\t\t\t\t\talterUserProductXMLDTO.setUserId(userId);\n\t\t\t\t\talterUserProductXMLDTO.setProductId(productId);\n\t\t\t\t\talterUserProductXMLDTO.setPriceDiscount(false);\n\t\t\t\t\talterUserProductXMLDTO.setShipping(false);\n\t\t\t\t\talterUserProductXMLDTO.setExcluded(false);\n\t\t\t\t\talterUserProductXMLDTO.setExcludedMeaning(userProductPriceDTO.getExcluded());\n\t\t\t\t\talterUserProductXMLDTO.setUserProductToBeExecuted(false);\n\t\t\t\t\tif (productService.existsOnAlterUserProductXML(productId, userId)) {\n\t\t\t\t\t\tproductService.updateAlterUserProductXML(alterUserProductXMLDTO);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tproductService.createAlterUserProductXML(alterUserProductXMLDTO);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (!product_to_be_executed_xml) {\n\t\t\t\t\tproductService.closeProductConsideredForXML(productId);\n\t\t\t\t}\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t} catch(ServiceException e){\n\t\t\tlog.debug(""Service Error when loading file"");\n\t\t\taddActionError(getText(""loyauty.error.common.service""));\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\taddActionError(getText(""loyauty.error.common.service""));\n\t\t}\n\t}\n\t\n\tprivate boolean analyzePriceDiscount(long userId, List<UserProductPriceDTO> uppDTOListPriceB4, \n\t\t\t\t\t\t\t\tList<UserProductPriceDTO> uppDTOListPriceAfter) {\n\t\tboolean outcome = false;\n\t\tif ((uppDTOListPriceB4 == null && uppDTOListPriceAfter != null) \n\t\t\t|| (uppDTOListPriceB4 != null && uppDTOListPriceAfter == null)) {\n\t\t\toutcome = true;\n\t\t} else if (uppDTOListPriceB4 == null && uppDTOListPriceAfter == null) {\n\t\t\toutcome = false;\n\t\t} else if (uppDTOListPriceB4 != null && uppDTOListPriceAfter != null) {\n\t\t\tif (uppDTOListPriceB4.size() == uppDTOListPriceAfter.size()) {\n\t\t\t\tint SIZE_before = uppDTOListPriceB4.size();\n\t\t\t\tint SIZE = SIZE_before;\n\t\t\t\tif (SIZE > 0) {\n\t\t\t\t\tString before = """";\n\t\t\t\t\tUserProductPriceDTO upp$DTO_0 = new UserProductPriceDTO();\n\t\t\t\t\tfor (Iterator<UserProductPriceDTO> itUPPBefore = uppDTOListPriceB4.iterator(); itUPPBefore.hasNext();) {\n\t\t\t\t\t\tupp$DTO_0 = itUPPBefore.next();\n\t\t\t\t\t\tif (userId == upp$DTO_0.getUserId()) {\n\t\t\t\t\t\t\tbefore = upp$DTO_0.getPrice();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tString after = """";\n\t\t\t\t\tUserProductPriceDTO upp$DTO_f = new UserProductPriceDTO();\n\t\t\t\t\tfor (Iterator<UserProductPriceDTO> itUPPAfter = uppDTOListPriceAfter.iterator(); itUPPAfter.hasNext();) {\n\t\t\t\t\t\tupp$DTO_f = itUPPAfter.next();\n\t\t\t\t\t\tif (userId == upp$DTO_f.getUserId()) {\n\t\t\t\t\t\t\tafter = upp$DTO_f.getPrice();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\toutcome = !before.trim().equalsIgnoreCase(after.trim());\n\t\t\t\t}\t// else OR SIZE=0 ==> outcome <-- false;\n\t\t\t} else {\n\t\t\t\toutcome = true;\n\t\t\t}\n\t\t}\n\t\treturn outcome;\t\t\n\t}\n\t\n\tprivate boolean analyzeExcluded(long userId, List<UserProductPriceDTO> uppDTOListPriceAfter) {\n\t\tboolean outcome = false;\n\t\tif (uppDTOListPriceAfter != null && uppDTOListPriceAfter.size() > 0) {\n\t\t\tfor (UserProductPriceDTO userProductPriceDTO : uppDTOListPriceAfter) {\n\t\t\t\toutcome |= (userId == userProductPriceDTO.getUserId().longValue());\n\t\t\t}\n\t\t}\n\t\treturn outcome;\n\t}\n\t\n\tprivate boolean isThereTheExcludedInUserSessionDTO(String[] isExcluded, long userIdFromDTO) {\n\t\tboolean outcome = false;\n\t\tif (isExcluded != null) {\n\t\t\tif (isExcluded.length == 0) return false;\n\t\t\tfor (String excluded : isExcluded) {\n\t\t\t\toutcome |= userIdFromDTO == Long.parseLong(excluded);\n\t\t\t}\n\t\t}\n\t\treturn outcome;\n\t}\n\t\n\tprivate void updateListManufactureProduct(int position, String value, int quantity, String suppliers, String price, String msrp) {\n\t    //lack to remove\n\t\tif(productDTO.getManufactureProductList().size() >= position +1) {\n\t\t\t((ProductModelDTO)productDTO.getManufactureProductList().get(position)).setName(value);\n\t\t\t((ProductModelDTO)productDTO.getManufactureProductList().get(position)).setQuantity(quantity);\n\t\t\t((ProductModelDTO)productDTO.getManufactureProductList().get(position)).setSupplier(suppliers);\n\t\t\t((ProductModelDTO)productDTO.getManufactureProductList().get(position)).setPrice(price);\n\t\t\t((ProductModelDTO)productDTO.getManufactureProductList().get(position)).setMsrp(msrp);\n\t\t} else {\n\t\t\tproductDTO.getManufactureProductList().add(ProductModelDTO.valueOf(0, value, quantity, suppliers, price, msrp));\n\t\t}\n\t}\n\t\n\tprivate List<CommonDTO> internationalizeName(List<CategoryDTO> list){\n\t\tList<CommonDTO> commonListDTO = new ArrayList<CommonDTO>();\n\t\tCommonDTO commonDTO;\n\t\tfor(CategoryDTO cat : list){\n\t\t\tcommonDTO = CommonDTO.valueOf(cat.getId(), getText(cat.getCode()));\t\t\t\n\t\t\tcommonListDTO.add(commonDTO);\n\t\t}\t\t\n\t\treturn commonListDTO;\n\t}\n    \n    private String html2text(String html) {\n        return Jsoup.parse(html).text();\n    }\n    \n    private boolean didPriceListChange(\tList<UserProductPriceDTO> uppDTOListBefore, \n    \t\t\t\t\t\t\t\t\tList<UserProductPriceDTO> uppDTOListAfter) {\n    \tboolean outcome = false;\n    \tint b4 = 0, after = 0;\n    \t\n    \tlong userId$B4 = 0L;\n    \tlong userId$After = 0L;\n    \tSet<Long> allUserIdsSet = new HashSet<Long>();\n    \t\n    \tfor (UserProductPriceDTO uppDTOB4 : uppDTOListBefore) {    \t\t\n    \t\tuserId$B4 =  uppDTOB4.getUserId();\n    \t\tallUserIdsSet.add(userId$B4);\n    \t\tif (!uppDTOB4.getExcluded()) ++b4;\n    \t}\n    \t\n    \tfor (UserProductPriceDTO uppDTOAfter : uppDTOListAfter) {\n    \t\tuserId$After = uppDTOAfter.getUserId();\n    \t\tallUserIdsSet.add(userId$After);\n    \t\tif (!uppDTOAfter.getExcluded()) ++after;\n    \t}\n    \t\n    \tif (b4 == after) {\n    \t\tfor (long userId : allUserIdsSet) {\n    \t\t\toutcome |= analyzePriceDiscount(userId, uppDTOListBefore, uppDTOListAfter);\n    \t\t}\n    \t} else {\n    \t\toutcome = true;\n    \t}\n    \t\n    \treturn outcome;\n    }\n    \n\tprivate String wsRipper(String input) {\n\t\tString outcome = """";\n\t\tif (input.length() > 0) {\n\t\t\tchar[] aCharArray = input.toCharArray();\n\t\t\tfor (char c : aCharArray) {\n\t\t\t\tif (c != ' ') {\n\t\t\t\t\toutcome += c;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn outcome;\n\t}\n    \n\tpublic static UserSessionDTO getUserSessionDTO(ClientCategoryDTO clDTO){\n\t\tLong userId=clDTO.getClientCategoryId();\n\t\tString login=clDTO.getClientCategoryName();\n\t\tInteger TypeId=2;\n\t\tInteger userLangId = 2;\n\t\tInteger RESULTS_PER_PAGE=10;\n\t\tString email="""";\n\t\tString code="""";\n\t\tBoolean isActive=true;\n\t\tLong template =1L;\n\t\tUserSessionDTO sessionDTO =new UserSessionDTO(userId, login, TypeId, userLangId, Language.ENGLISH.getValue(),\n\t\t\t\t\t\t\t\t\t\t\t\t\t  RESULTS_PER_PAGE, email, code, isActive,template);\n\t\t\n\t\treturn sessionDTO;\n\t}\n\t\n\t//Make ""large"" and ""boxLength"" the biggest size between L,W and H\n\tpublic void switchBetweenLargeWidthHeight () {\n\t\tDouble L,W,H, permute;\n\t\t// large/width/high\n\t\tL = W = H = 0D;\n\t\tif(large!=null && !large.replaceAll("" "", """").isEmpty()) L = Double.parseDouble(large);\n\t\tif(width!=null && !width.replaceAll("" "", """").isEmpty()) W = Double.parseDouble(width);\n\t\tif(high!=null && !high.replaceAll("" "", """").isEmpty())   H = Double.parseDouble(high);\n\t\tif(L < H) {\n\t\t\tpermute = L;\n\t\t\tL = H;\n\t\t\tH = permute;\n\t\t\tlarge = L+"""";\n\t\t\thigh = H+"""";\n\t\t}\n\t\tif(L < W) {\n\t\t\tpermute = L;\n\t\t\tL = W;\n\t\t\tW = permute;\n\t\t\tlarge = L+"""";\n\t\t\twidth = W+"""";\n\t\t}\n\t\tif(W < H) {\n\t\t\tpermute = W;\n\t\t\tW = H;\n\t\t\tH = permute;\n\t\t\twidth = W+"""";\n\t\t\thigh = H+"""";\n\t\t}\n\t\t\n\t\t// boxLength/boxWidth/boxHeight\n\t\tL = boxDTO.getLength();\n\t\tW = boxDTO.getWidth();\n\t\tH = boxDTO.getHeight();\n\t\tDouble WDTH = boxDTO.getTotalWeight();\n\t\tif(L==null) { L=0D; boxDTO.setLength(0D); }\n\t\tif(W==null) { W=0D; boxDTO.setWidth(0D); }\n\t\tif(H==null) { H=0D; boxDTO.setHeight(0D); }\n\t\tif(WDTH==null) { WDTH=0D; boxDTO.setTotalWeight(0D); }\n\t\tif(L < H) {\n\t\t\tpermute = L;\n\t\t\tL = H;\n\t\t\tH = permute;\n\t\t\tboxDTO.setLength(L);\n\t\t\tboxDTO.setHeight(H);\n\t\t}\n\t\tif(L < W) {\n\t\t\tpermute = L;\n\t\t\tL = W;\n\t\t\tW = permute;\n\t\t\tboxDTO.setLength(L);\n\t\t\tboxDTO.setWidth(W);\n\t\t}\n\t\tif(W < H) {\n\t\t\tpermute = W;\n\t\t\tW = H;\n\t\t\tH = permute;\n\t\t\tboxDTO.setWidth(W);\n\t\t\tboxDTO.setHeight(H);\n\t\t}\n\t\t\n\t\t// largeCm/widthCm/highCm\n\t\t// Only to display them on addProductSuccess\n\t\tL = W = H = 0D;\n\t\tif(largeCm!=null && !largeCm.replaceAll("" "", """").isEmpty()) L = Double.parseDouble(largeCm);\n\t\tif(widthCm!=null && !widthCm.replaceAll("" "", """").isEmpty()) W = Double.parseDouble(widthCm);\n\t\tif(highCm!=null && !highCm.replaceAll("" "", """").isEmpty())   H = Double.parseDouble(highCm);\n\t\tif(L < H) {\n\t\t\tpermute = L;\n\t\t\tL = H;\n\t\t\tH = permute;\n\t\t\tlargeCm = L+"""";\n\t\t\thighCm = H+"""";\n\t\t}\n\t\tif(L < W) {\n\t\t\tpermute = L;\n\t\t\tL = W;\n\t\t\tW = permute;\n\t\t\tlargeCm = L+"""";\n\t\t\twidthCm = W+"""";\n\t\t}\n\t\tif(W < H) {\n\t\t\tpermute = W;\n\t\t\tW = H;\n\t\t\tH = permute;\n\t\t\twidthCm = W+"""";\n\t\t\thighCm = H+"""";\n\t\t}\n\t\t\n\t\t// boxLengthCm/boxWidthCm/boxHeightCm\n\t\t// Only to display them on addProductSuccess\n\t\tL = W = H = 0D;\n\t\tif(boxLengthCm!=null && !boxLengthCm.replaceAll("" "", """").isEmpty()) L = Double.parseDouble(boxLengthCm);\n\t\tif(boxWidthCm!=null && !boxWidthCm.replaceAll("" "", """").isEmpty())   W = Double.parseDouble(boxWidthCm);\n\t\tif(boxHeightCm!=null && !boxHeightCm.replaceAll("" "", """").isEmpty()) H = Double.parseDouble(boxHeightCm);\n\t\tif(L < H) {\n\t\t\tpermute = L;\n\t\t\tL = H;\n\t\t\tH = permute;\n\t\t\tboxLengthCm = L+"""";\n\t\t\tboxHeightCm = H+"""";\n\t\t}\n\t\tif(L < W) {\n\t\t\tpermute = L;\n\t\t\tL = W;\n\t\t\tW = permute;\n\t\t\tboxLengthCm = L+"""";\n\t\t\tboxWidthCm = W+"""";\n\t\t}\n\t\tif(W < H) {\n\t\t\tpermute = W;\n\t\t\tW = H;\n\t\t\tH = permute;\n\t\t\tboxWidthCm = W+"""";\n\t\t\tboxHeightCm = H+"""";\n\t\t}\n\t}//Make ""large"" the biggest size between L,W and H\n\t\n}\n----------------------------------- SOURCE END -------------------------------------",1420673654682
error,log,,,"Problems occurred when invoking code from plug-in: ""org.eclipse.jdt.ui"".",1420673654684
error,log,,,"Error in JDT Core during reconcile",1420673654685
error,log,,,"Problems occurred when invoking code from plug-in: ""org.eclipse.core.resources"".",1420673655726
error,log,,,"Errors occurred during the build.",1420673656379
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1420673656404
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1420673658043
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1420673667663
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1420673669005
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1420673675465
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1420673676813
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1420673677313
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1420673682064
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1420673686781
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1420673688695
executed,command,org.eclipse.ui.ide,3.6.2.M20101201-0800,"org.eclipse.ui.project.cleanAction",1420673688700
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1420673689001
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1420673689201
error,log,,,"Exception occurred during problem detection:\n----------------------------------- SOURCE BEGIN -------------------------------------\npackage com.loyauty.service.product;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.Iterator;\nimport java.util.List;\n\nimport jxl.Cell;\nimport jxl.Sheet;\nimport jxl.Workbook;\nimport jxl.format.Alignment;\nimport jxl.format.Border;\nimport jxl.format.BorderLineStyle;\nimport jxl.format.Colour;\nimport jxl.format.VerticalAlignment;\nimport jxl.write.Label;\nimport jxl.write.WritableCell;\nimport jxl.write.WritableCellFormat;\nimport jxl.write.WritableFont;\nimport jxl.write.WritableSheet;\nimport jxl.write.WritableWorkbook;\n\nimport lombok.Getter;\nimport lombok.Setter;\n\nimport org.apache.log4j.Logger;\n\nimport com.loyauty.dao.core.DaoCommand;\nimport com.loyauty.dao.core.DaoManager;\nimport com.loyauty.dao.core.DaoManagerFactory;\nimport com.loyauty.enums.Language;\nimport com.loyauty.enums.PriceType;\nimport com.loyauty.enums.ProductStatus;\nimport com.loyauty.enums.Type;\nimport com.loyauty.exception.DaoException;\nimport com.loyauty.exception.ServiceException;\nimport com.loyauty.model.AlterProductXML;\nimport com.loyauty.model.AlterUserProductXML;\nimport com.loyauty.model.Box;\nimport com.loyauty.model.Brand;\nimport com.loyauty.model.Category;\nimport com.loyauty.model.City;\nimport com.loyauty.model.Currency;\nimport com.loyauty.model.Image;\nimport com.loyauty.model.LoyaltyEnum;\nimport com.loyauty.model.Product;\nimport com.loyauty.model.Province;\nimport com.loyauty.model.Query;\nimport com.loyauty.model.ProductLink;\nimport com.loyauty.model.ProductModelNumber;\nimport com.loyauty.model.Select;\nimport com.loyauty.model.ShippingCity;\nimport com.loyauty.model.ShippingProvince;\nimport com.loyauty.model.ShippingTotal;\nimport com.loyauty.model.Specification;\nimport com.loyauty.model.Translation;\nimport com.loyauty.model.TranslationEntry;\nimport com.loyauty.model.User;\nimport com.loyauty.model.UserBrandDiscount;\nimport com.loyauty.model.UserCategoryDiscount;\nimport com.loyauty.model.UserProductPrice;\nimport com.loyauty.model.UserProvincePopulation;\nimport com.loyauty.service.ServiceImpl;\nimport com.loyauty.service.core.DTOFactory;\nimport com.loyauty.service.core.dto.AlterProductXMLDTO;\nimport com.loyauty.service.core.dto.AlterUserProductXMLDTO;\nimport com.loyauty.service.core.dto.BoxDTO;\nimport com.loyauty.service.core.dto.CityDTO;\nimport com.loyauty.service.core.dto.CommonDTO;\nimport com.loyauty.service.core.dto.CommonUserDiscountDTO;\nimport com.loyauty.service.core.dto.CurrencyDTO;\nimport com.loyauty.service.core.dto.ImageDTO;\nimport com.loyauty.service.core.dto.ProductDTO;\nimport com.loyauty.service.core.dto.ProvinceDTO;\nimport com.loyauty.service.core.dto.QueryDTO;\nimport com.loyauty.service.core.dto.ProductModelDTO;\nimport com.loyauty.service.core.dto.SearchRequestDTO;\nimport com.loyauty.service.core.dto.SearchRequestDTO.SearchType;\nimport com.loyauty.service.core.dto.ShippingCityDTO;\nimport com.loyauty.service.core.dto.ShippingProvinceDTO;\nimport com.loyauty.service.core.dto.ShippingTotalDTO;\nimport com.loyauty.service.core.dto.SpecificationDTO;\nimport com.loyauty.service.core.dto.UserDTO;\nimport com.loyauty.service.core.dto.UserProductDTO;\nimport com.loyauty.service.core.dto.UserProductPriceDTO;\nimport com.loyauty.service.core.dto.UserProvincePopulationDTO;\nimport com.loyauty.service.image.ImageService;\nimport com.loyauty.service.image.ImageServiceImpl;\nimport com.loyauty.util.CommonUtils;\n\npublic class ProductServiceImpl extends ServiceImpl implements ProductService {\n\t\n\tprivate static final Logger log = Logger.getLogger(ProductServiceImpl.class);\n\t\n\t@Setter @Getter\n\n\tprotected DaoManager daoManager;\n\t\n\tpublic ProductServiceImpl() {\n\t\tsetDaoManager(DaoManagerFactory.getDaoManager());\n\t}\n\t \n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<SpecificationDTO> getMainSpecificationByCategory(final long categoryId)\n\t\t\tthrows ServiceException {\n\t\tList<Specification> list = null;\n\t\ttry {\n\t\t\tlist = (List<Specification>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\n\t\t\t\t\treturn daoManager.getSpecificationDao().getMainSpecificationByCategory(categoryId);\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException e) {\n\t\t\tthrow (new ServiceException(e));\n\t\t}\n\t\treturn DTOFactory.getSpecificationListDTO(list);\n\t}\n\t\n \t@Override\n\tpublic Long createProduct(final ProductDTO productDTO) throws ServiceException {\n\t\tProduct productResult = new Product();\n\t\t\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tproductResult = (Product) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t/* (non-Javadoc)\n\t\t\t\t * @see com.loyauty.dao.core.DaoCommand#execute(com.loyauty.dao.core.DaoManager)\n\t\t\t\t */\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\n\t\t\t\tthrows DaoException {\n\t\t\t\t\t\n\t\t\t\t\tProduct product = new Product();\n\t\t\t\t\t\n\t\t\t\t\t//Name\n\t\t\t\t\tTranslation translationName = new Translation();\n\t\t\t\t\tdaoManager.getTranslationDao().insertTranslation(translationName);\t\n\t\t\t\t\t//Eng Name\n\t\t\t\t\tTranslationEntry entryNameEng = new TranslationEntry(translationName.getId(), productDTO.getNameEng().getName() );\n\t\t\t\t\tentryNameEng.setLanguage(Language.ENGLISH);\n\t\t\t\t\tdaoManager.getTranslationDao().insertEntry(entryNameEng);\n\t\t\t\t\t//Fr Name\n\t\t\t\t\tTranslationEntry entryNameFr = new TranslationEntry(translationName.getId(), productDTO.getNameFr().getName());\n\t\t\t\t\tentryNameFr.setLanguage(Language.FRENCH);\n\t\t\t\t\tdaoManager.getTranslationDao().insertEntry(entryNameFr);\n\t\t\t\t\t\n\t\t\t\t\t//Description\n\t\t\t\t\tTranslation translationDescription = new Translation();\n\t\t\t\t\tdaoManager.getTranslationDao().insertTranslation(translationDescription);\n\t\t\t\t\t//Eng Description\n\t\t\t\t\tTranslationEntry entryDescriptionEng = new TranslationEntry(translationDescription.getId(), productDTO.getDescriptionEng().getName());\n\t\t\t\t\tentryDescriptionEng.setLanguage(Language.ENGLISH);\n\t\t\t\t\tdaoManager.getTranslationDao().insertEntry(entryDescriptionEng);\n\t\t\t\t\t//Fr Description\n\t\t\t\t\tTranslationEntry entryDescriptionFr = new TranslationEntry(translationDescription.getId(), productDTO.getDescriptionFr().getName());\n\t\t\t\t\tentryDescriptionFr.setLanguage(Language.FRENCH);\n\t\t\t\t\tdaoManager.getTranslationDao().insertEntry(entryDescriptionFr);\n\t\t\t\t\t\n\t\t\t\t\t//Specification\n\t\t\t\t\tTranslation translationSpecification = new Translation();\t\t\t\n\t\t\t\t\tdaoManager.getTranslationDao().insertTranslation(translationSpecification);\t\n\t\t\t\t\t//Eng Name\n\t\t\t\t\tTranslationEntry entrySpecificationEng = new TranslationEntry(translationSpecification.getId(), productDTO.getSpecificationEng().getName() );\n\t\t\t\t\tentrySpecificationEng.setLanguage(Language.ENGLISH);\n\t\t\t\t\tdaoManager.getTranslationDao().insertEntry(entrySpecificationEng);\n\t\t\t\t\t//Fr Name\n\t\t\t\t\tTranslationEntry entrySpecificationFr = new TranslationEntry(translationSpecification.getId(), productDTO.getSpecificationFr().getName());\n\t\t\t\t\tentrySpecificationFr.setLanguage(Language.FRENCH);\n\t\t\t\t\tdaoManager.getTranslationDao().insertEntry(entrySpecificationFr);\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t// Others\n\t\t\t\t\tTranslation translationOther = new Translation();\t\t\t\t\t\n\t\t\t\t\tdaoManager.getTranslationDao().insertTranslation(translationOther);\n\t\t\t\t\t// Eng Others\n\t\t\t\t\tTranslationEntry entryOtherEng = new TranslationEntry(translationOther.getId(), productDTO.getOtherEng().getName());\n\t\t\t\t\tentryOtherEng.setLanguage(Language.ENGLISH);\n\t\t\t\t\tdaoManager.getTranslationDao().insertEntry(entryOtherEng);\n\t\t\t\t\t// Fr Name\n\t\t\t\t\tTranslationEntry entryOtherFr = new TranslationEntry(translationOther.getId(), productDTO.getOtherFr().getName());\n\t\t\t\t\tentryOtherFr.setLanguage(Language.FRENCH);\n\t\t\t\t\tdaoManager.getTranslationDao().insertEntry(entryOtherFr);\n\t\t\t\t\t\n\t\t\t\t\t// Warranty\n\t\t\t\t\tTranslation translationWarranty = new Translation();\n\t\t\t\t\tdaoManager.getTranslationDao().insertTranslation(translationWarranty);\n\t\t\t\t\t// Eng Others\n\t\t\t\t\tTranslationEntry entryWarrantyEng = new TranslationEntry(translationWarranty.getId(), productDTO.getWarrantyEng().getName());\n\t\t\t\t\tentryWarrantyEng.setLanguage(Language.ENGLISH);\n\t\t\t\t\tdaoManager.getTranslationDao().insertEntry(entryWarrantyEng);\n\t\t\t\t\t// Fr Name\n\t\t\t\t\tTranslationEntry entryWarrantyFr = new TranslationEntry(translationWarranty.getId(), productDTO.getWarrantyFr().getName());\n\t\t\t\t\tentryWarrantyFr.setLanguage(Language.FRENCH);\n\t\t\t\t\tdaoManager.getTranslationDao().insertEntry(entryWarrantyFr);\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t//Insert Image product\n\t\t\t\t\tImage imageProduct = new Image();\n\t\t\t\t\tif(productDTO.getImage() != null) {\n\t\t\t\t\t\timageProduct.setName(productDTO.getImage().getName());\n\t\t\t\t\t\timageProduct.setRealNameImg(productDTO.getImage().getRealName());\n\t\t\t\t\t\timageProduct.setType(Type.PRODUCT);\n\t\t\t\t\t\timageProduct.setSize(productDTO.getImage().getSize());\n\t\t\t\t\t\timageProduct.setHeight(productDTO.getImage().getHeight());\n\t\t\t\t\t\timageProduct.setWidth(productDTO.getImage().getWidth());\n\t\t\t\t\t\timageProduct.setLarge(productDTO.getImage().isLarge());\n\t\t\t\t\t\timageProduct.setResolution(productDTO.getImage().getResolution());\n\t\t\t\t\t\timageProduct.setScore(productDTO.getImage().getScore());\n\t\t\t\t\t\tdaoManager.getImageDao().insertEntity(imageProduct);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t//Brand \n\t\t\t\t\tBrand brand = new Brand();\n\t\t\t\t\tbrand.setId(productDTO.getBrand().getId());\n\t\t\t\t\t//Category\n\t\t\t\t\tCategory category = new Category();\n\t\t\t\t\tcategory.setId(productDTO.getCategory().getId());\n\t\t\t\t\t\n\t\t\t\t\tproduct.setName(translationName);\n\t\t\t\t\tproduct.setDescription(translationDescription);\n\t\t\t\t\tproduct.setImage(imageProduct);\n\t\t\t\t\tproduct.setStatus(ProductStatus.AVAILABLE);\n\t\t\t\t\tproduct.setMsrp(productDTO.getMsrp());\n\t\t\t\t\tproduct.setCost(productDTO.getCost());\n\t\t\t\t\tproduct.setBrand(brand);\n\t\t\t\t\tproduct.setLoyaltySourceProductId(productDTO.getLoyaltyProductId());\n\t\t\t\t\tproduct.setProductHigh(productDTO.getHigh());\n\t\t\t\t\tproduct.setProductLong(productDTO.getLarge());\n\t\t\t\t\tproduct.setProductWidth(productDTO.getWidth());\n\t\t\t\t\tproduct.setWeight(productDTO.getWeight());\n\t\t\t\t\tproduct.setActualHeight(productDTO.getActualHeight());\n\t\t\t\t\tproduct.setActualLength(productDTO.getActualLength());\n\t\t\t\t\tproduct.setActualWidth(productDTO.getActualWidth());\n\t\t\t\t\tproduct.setActualWeight(productDTO.getActualWeight());\n\t\t\t\t\tproduct.setCategory(category);\n\t\t\t\t\tproduct.setSpecification(translationSpecification);\n\t\t\t\t\tproduct.setOther(translationOther);\n\t\t\t\t\tproduct.setNote(productDTO.getNote());\n\t\t\t\t\tproduct.setWereWgtDimChanged(productDTO.getWereWgtDimChanged());\n\t\t\t\t\tproduct.setConsideredForXML(productDTO.getConsideredForXML());\n\t\t\t\t\tproduct.setWarranty(translationWarranty);\n\t\t\t\t\tproduct.setUpc(productDTO.getUpc());\n\t\t\t\t\t//51 is N/A. To allow don't pick any option in edit product page in Admin\n\t\t\t\t\t//I do this trick\n\t\t\t\t\tif(productDTO.getMainFilterTypeId() != -1) {\n\t\t\t\t\t\tproduct.setTypeId(productDTO.getMainFilterTypeId());\n\t\t\t\t\t} else {\n\t\t\t\t\t\tproduct.setTypeId(new Long(51));\n\t\t\t\t\t}\n\t\t\t\t\tdaoManager.getProductDao().insertProduct(product);\n\t\t\t\t\t\n\t\t\t\t\t//Manufacture Product Id\n\t\t\t\t\tIterator<ProductModelDTO> stringIterator = productDTO.getManufactureProductList().iterator();\n\t\t\t\t\tProductModelNumber productModelNumber;\n\t\t\t\t\tProductModelDTO productModelDTO;\n\t\t\t\t\twhile(stringIterator.hasNext()) {\n\t\t\t\t\t\tproductModelNumber = new ProductModelNumber();\n\t\t\t\t\t\tproductModelDTO = (ProductModelDTO)stringIterator.next();\n\t\t\t\t\t\tproductModelNumber.setModelNumber(productModelDTO.getName());\n\t\t\t\t\t\tproductModelNumber.setQuantity(productModelDTO.getQuantity());\n\t\t\t\t\t\tproductModelNumber.setProductId(product.getId());\n\t\t\t\t\t\tproductModelNumber.setSupplier(productModelDTO.getSupplier());\n\t\t\t\t\t\tproductModelNumber.setPrice(productModelDTO.getPrice());\n\t\t\t\t\t\tproductModelNumber.setMsrp(productModelDTO.getMsrp());\n\t\t\t\t\t\tdaoManager.getProductDao().insertProductModelNumber(productModelNumber);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t//insert url link\n\t\t\t\t\tif(productDTO.getLinkList().size() > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tProductLink productLink = new ProductLink();\n\t\t\t\t\t\tproductLink.setProductId(product.getId());\n\t\t\t\t\t\tproductLink.setLink(productDTO.getLinkList().get(0).getLink());\n\t\t\t\t\t\tdaoManager.getProductDao().insertProductLink(productLink);\n\t\t\t\t\t}\n\t\t\t\t\treturn product;\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn(productResult.getId());\n\t\t} catch (DaoException e) {\n\t\t\tthrow (new ServiceException(e));\n\t\t}\n\t}\n\t\n\t@Override\n\tpublic ProductDTO getProductInformation(final Long productId, final Long userId) throws ServiceException {\n\n\t\tProduct productResult = new Product();\n\t\t\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tproductResult = (Product) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\n\t\t\t\t\t\tthrows DaoException {\n\t\t\t\t\tProduct product = new Product();\n\t\t\t\t\tSelect select = new Select();\n\t\t\t\t\tselect.setQuery(String.valueOf(productId));\n\t\t\t\t\tselect.setUserId(userId);\n\t\t\t\t\tproduct = daoManager.getProductDao().getProduct(select);\n\t\t\t\t\treturn product;\n\t\t\t\t}\n\t\t\t});\t\t\t\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn(DTOFactory.getProductDTO(productResult));\n\t}\n\t\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<UserProductDTO> getAllProdcutForProfit(final UserProductDTO userProducDTO) throws ServiceException{\n\n\t\tList <Product> productList = new ArrayList<Product>();\n\t\t\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tproductList = (List <Product>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\n\t\t\t\t\t\t\t\tthrows DaoException {\n\t\t\t\t\t\t\t//Brand\n\t\t\t\t\t\t\tBrand brand = null;\n\t\t\t\t\t\t\tif(userProducDTO.getBrandId() != null){\n\t\t\t\t\t\t\t\tbrand = new Brand();\n\t\t\t\t\t\t\t\tbrand.setId(userProducDTO.getBrandId());\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t//Category\n\t\t\t\t\t\t\tCategory category = null;\n\t\t\t\t\t\t\tif(userProducDTO.getCategoryId() != null){\n\t\t\t\t\t\t\t\tcategory = new Category();\n\t\t\t\t\t\t\t\tcategory.setId(userProducDTO.getCategoryId());\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tProduct product = new Product();\n\t\t\t\t\t\t\tproduct.setBrand(brand);\n\t\t\t\t\t\t\tproduct.setCategory(category);\t\n\t\t\t\t\t\t\tproduct.setUserProductStatus(userProducDTO.getUserProductStatus());\n\t\t\t\t\t\t\tproduct.setUserId(userProducDTO.getUserId());\n\t\t\t\t\t\t\tproduct.setLoyaltySourceProductId(userProducDTO.getLsProductId());\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\treturn daoManager.getProductDao().getAllProdcutForProfit(product);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\t\n\t\treturn(DTOFactory.getUserProductDTOList(productList));\n\t}\t\n\t\n\t@Override\n\tpublic ImageDTO addProductImage(File file, String fileName, String applicationPath, long uploaderId,\n\t\t\t int width, int height, int miniCoverWidth, boolean large) throws ServiceException, IOException {\n\t\n\t\tImageService ish = new ImageServiceImpl();\n\t\tLong tempId = new Long(0);\n\t\tImage image = new Image();\n\t\timage.setId(tempId);\n\t\timage.setUploaderId(uploaderId);\n\t\t\n\t\t// Validate if the name is already present in the DB\n\t\tString normalizedName= CommonUtils.getNormalizedProductImage(fileName);\n\t\t//TODO: we must create a validation in action //Validate if the image extension is JPEG or PNG\n\t\tint i = ish.isJPEGPNGImage(file);\n\t\tif (i==1) {\n\t\t\timage.addImageJps(file,normalizedName,fileName);\n\t\t}else if (i==2) {\n\t\t\timage.addImagePNG(file,normalizedName,fileName);\n\t\t}else{\n\t\t\tthrow new ServiceException(""Game Logo Image Format not supported "" + file.getName() );\n\t\t}\n\t\timage.setName(normalizedName);\n\t\timage.setRealNameImg(fileName);\n\t\t//Variables Initialization \n\t\timage.setType(Type.PRODUCT);\n\t\timage.setLarge(large);\n\t\t\n\t\t// Transfer the cover to the server cover/large/ directory\t\t\t\n\t\tif (!ish.transferProductImage(file, normalizedName, applicationPath, width, height, miniCoverWidth, large)){\n\t\t\tthrow new ServiceException(""Could not transfer the image"" + \n\t\t\t\t\t""\\nimageName:"" + file.getName() \n\t\t\t\t\t+ ""\\nNormalized image:"" + normalizedName);\n\t\t}\n\t\t\n\t\treturn DTOFactory.getImageDTO(image); \n\t}\t\t\n\t\n\t@Override\n\tpublic void updateProduct(final ProductDTO productDTO) throws ServiceException {\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t    daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\n\t\t\t\tthrows DaoException {\n\t\t\t\t\tProduct product = new Product();\n\t\t\t\t\tproduct.setUpc(productDTO.getUpc());\n\t\t\t\t\t//Eng Name\n\t\t\t\t\tdaoManager.getTranslationDao().updateEntry(new TranslationEntry(productDTO.getNameEng()));\n\t\t\t\t\t//Fr Name\n\t\t\t\t\tdaoManager.getTranslationDao().updateEntry(new TranslationEntry(productDTO.getNameFr()));\n\t\t\t\t\t\n\t\t\t\t\t//Eng Description\n\t\t\t\t\tdaoManager.getTranslationDao().updateEntry(new TranslationEntry(productDTO.getDescriptionEng()));\n\t\t\t\t\t//Fr Description\n\t\t\t\t\tdaoManager.getTranslationDao().updateEntry(new TranslationEntry(productDTO.getDescriptionFr()));\n\t\t\t\t\t\n\t\t\t\t\t//Eng Specification\n\t\t\t\t\tdaoManager.getTranslationDao().updateEntry(new TranslationEntry(productDTO.getSpecificationEng()));\n\t\t\t\t\t//Fr Specification\n\t\t\t\t\tdaoManager.getTranslationDao().updateEntry(new TranslationEntry(productDTO.getSpecificationFr()));\n\t\t\t\t\t\n\t\t\t\t\t//Eng Others\n\t\t\t\t\tif(productDTO.getOtherEng().getName() != null)\n\t\t\t\t\t\tdaoManager.getTranslationDao().updateEntry(new TranslationEntry(productDTO.getOtherEng()));\n\t\t\t\t\t//Fr Others\n\t\t\t\t\tif(productDTO.getOtherFr().getName() != null)\n\t\t\t\t\t\tdaoManager.getTranslationDao().updateEntry(new TranslationEntry(productDTO.getOtherFr()));\n\t\t\t\t\t\n\t\t\t\t\t//If the productDTO.getWarrantyEng is null that means that bothe warranty are null\n\t\t\t\t\t//So I have to insert the warranty instead of update them.\n\t\t\t\t\t// Warranty\n\t\t\t\t\tTranslation translationWarranty = new Translation();\n\t\t\t\t\tif(productDTO.getWarrantyEng().getId() != 0){\n\t\t\t\t\t\t//Eng Warranty\n\t\t\t\t\t\tdaoManager.getTranslationDao().updateEntry(new TranslationEntry(productDTO.getWarrantyEng()));\n\t\t\t\t\t\t//Fr Warranty\n\t\t\t\t\t\tdaoManager.getTranslationDao().updateEntry(new TranslationEntry(productDTO.getWarrantyFr()));\n\t\t\t\t\t\t\n\t\t\t\t\t\ttranslationWarranty.setId(productDTO.getWarrantyTranslationId());\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(productDTO.getWarrantyEng() != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tdaoManager.getTranslationDao().insertTranslation(translationWarranty);\n\t\t\t\t\t\t\t// Eng Others\n\t\t\t\t\t\t\tTranslationEntry entryWarrantyEng = new TranslationEntry(translationWarranty.getId(), productDTO.getWarrantyEng().getName());\n\t\t\t\t\t\t\tentryWarrantyEng.setLanguage(Language.ENGLISH);\n\t\t\t\t\t\t\tdaoManager.getTranslationDao().insertEntry(entryWarrantyEng);\n\t\t\t\t\t\t\t// Fr Name\n\t\t\t\t\t\t\tTranslationEntry entryWarrantyFr = new TranslationEntry(translationWarranty.getId(), productDTO.getWarrantyFr().getName());\n\t\t\t\t\t\t\tentryWarrantyFr.setLanguage(Language.FRENCH);\n\t\t\t\t\t\t\tdaoManager.getTranslationDao().insertEntry(entryWarrantyFr);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tproduct.setWarranty(translationWarranty);\t\n\t\t\t\t\t\n\t\t\t\t\t//Insert Image product\n\t\t\t\t\tImage imageProduct = new Image();\n\t\t\t\t\t//If the id image is null that means that the image is new.\n\t\t\t\t\t//So, Insert the image and update the product.\n\t\t\t\t\tif(productDTO.getImage() != null) {\n\t\t\t\t\t\tif (productDTO.getImage().getId() > 0L) {\t\t\t\t\t\t\n\t\t\t\t\t\t\timageProduct.setId(productDTO.getImage().getId());\n\t\t\t\t\t\t\timageProduct.setName(productDTO.getImage().getName());\n\t\t\t\t\t\t\timageProduct.setRealNameImg(productDTO.getImage().getRealName());\n\t\t\t\t\t\t\timageProduct.setType(Type.PRODUCT);\n\t\t\t\t\t\t\timageProduct.setSize(productDTO.getImage().getSize());\n\t\t\t\t\t\t\timageProduct.setHeight(productDTO.getImage().getHeight());\n\t\t\t\t\t\t\timageProduct.setWidth(productDTO.getImage().getWidth());\n\t\t\t\t\t\t\timageProduct.setLarge(productDTO.getImage().isLarge());\n\t\t\t\t\t\t\timageProduct.setResolution(productDTO.getImage().getResolution());\n\t\t\t\t\t\t\timageProduct.setScore(productDTO.getImage().getScore());\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t//For the image, I use the plugin and the insert or update of \n\t\t\t\t\t\t\t//the image is done in AjaxUploadFile So if I insert here the \n\t\t\t\t\t\t\t//image again, I'll get a duplicate key exception. \n\t\t\t\t\t\t\t//I update all the time.\n\t\t\t\t\t\t\t//daoManager.getImageDao().updateEntity(imageProduct);\t\t\n\t\t\t\t\t\t\t//I do nothing.\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t//Brand \n\t\t\t\t\tBrand brand = new Brand();\n\t\t\t\t\tbrand.setId(productDTO.getBrand().getId());\n\t\t\t\t\t\n\t\t\t\t\t//Category\n\t\t\t\t\tCategory category = new Category();\n\t\t\t\t\tcategory.setId(productDTO.getCategory().getId());\n\t\t\t\t\tproduct.setId(productDTO.getId());\n\t\t\t\t\t\t\n\t\t\t\t\t if (imageProduct != null) {\n\t\t\t\t\t\tproduct.setImage(imageProduct);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tproduct.setMsrp(productDTO.getMsrp());\n\t\t\t\t\tproduct.setCost(productDTO.getCost());\n\t\t\t\t\tproduct.setBrand(brand);\n\t\t\t\t\tproduct.setLoyaltySourceProductId(productDTO.getLoyaltyProductId());\n\t\t\t\t\tproduct.setProductHigh(productDTO.getHigh());\n\t\t\t\t\tproduct.setProductLong(productDTO.getLarge());\n\t\t\t\t\tproduct.setProductWidth(productDTO.getWidth());\n\t\t\t\t\tproduct.setWeight(productDTO.getWeight());\n\t\t\t\t\tproduct.setActualHeight(productDTO.getActualHeight());\n\t\t\t\t\tproduct.setActualLength(productDTO.getActualLength());\n\t\t\t\t\tproduct.setActualWidth(productDTO.getActualWidth());\n\t\t\t\t\tproduct.setActualWeight(productDTO.getActualWeight());\n\t\t\t\t\tproduct.setCategory(category);\n\t\t\t\t\tproduct.setStatus(productDTO.getStatus());\n\t\t\t\t\tproduct.setNote(productDTO.getNote());\n\t\t\t\t\tproduct.setWereWgtDimChanged(productDTO.getWereWgtDimChanged());\n\t\t\t\t\tproduct.setConsideredForXML(productDTO.getConsideredForXML());\n\n\t\t\t\t\tif (productDTO.getStatus() == ProductStatus.DISCONTINUED) {\n\t\t\t\t\t\tproduct.setDiscontinuedStartDate(productDTO.getDiscontinuedStartDate());\n\t\t\t\t\t\tString productSubstitute = productDTO.getLoyaltyProductIdSub();\n\t\t\t\t\t\tif (productSubstitute != null) {\n\t\t\t\t\t\t\tif (productSubstitute.length() > 0 && !productSubstitute.matches(""^\\\\s*$"")) {\n\t\t\t\t\t\t\t\tproduct.setLoyaltyProductIdSub(productDTO.getLoyaltyProductIdSub());\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (productDTO.getStatus() == ProductStatus.DISABLED) {\t\t\t\t\t\t\n\t\t\t\t\t\tDate discontinuedStartDate = productDTO.getDiscontinuedStartDate();\n\t\t\t\t\t\tif (discontinuedStartDate != null) {\n\t\t\t\t\t\t\tproduct.setDiscontinuedStartDate(discontinuedStartDate);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tString productSubstitute = productDTO.getLoyaltyProductIdSub();\n\t\t\t\t\t\tif (productSubstitute != null) {\n\t\t\t\t\t\t\tproduct.setLoyaltyProductIdSub(productDTO.getLoyaltyProductIdSub());\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t//51 is N/A. To allow don't pick any option in edit product page in Admin\n\t\t\t\t\t//I do this trick\n\t\t\t\t\tif(productDTO.getMainFilterTypeId() != -1)\n\t\t\t\t\t\tproduct.setTypeId(productDTO.getMainFilterTypeId());\n\t\t\t\t\telse\n\t\t\t\t\t\tproduct.setTypeId(new Long(51));\n\t\t\t\t\t\n\t\t\t\t\tdaoManager.getProductDao().updateProduct(product);\n\t\t\t\t\t\n\t\t\t\t\t//Manufacture Product Id\n\t\t\t\t\tIterator<ProductModelDTO> stringIterator = productDTO.getManufactureProductList().iterator();\n\t\t\t\t\tProductModelNumber productModelNumber;\n\t\t\t\t\tProductModelDTO productModelDTO;\n\t\t\t\t\twhile(stringIterator.hasNext()) {\n\t\t\t\t\t\tproductModelNumber = new ProductModelNumber();\n\t\t\t\t\t\tproductModelDTO = (ProductModelDTO)stringIterator.next();\n\t\t\t\t\t\tproductModelNumber.setModelNumber(productModelDTO.getName());\n\t\t\t\t\t\tproductModelNumber.setQuantity(productModelDTO.getQuantity());\n\t\t\t\t\t\tproductModelNumber.setSupplier(productModelDTO.getSupplier());\n\t\t\t\t\t\tproductModelNumber.setPrice(productModelDTO.getPrice());\n\t\t\t\t\t\tproductModelNumber.setMsrp(productModelDTO.getMsrp());\n\t\t\t\t\t\tproductModelNumber.setId(productModelDTO.getId());\n\t\t\t\t\t\tproductModelNumber.setProductId(product.getId());\n\t\t\t\t\t\tif(productModelNumber.getId() != 0) {\n\t\t\t\t\t\t    if(!productModelDTO.getName().trim().equals(""""))\n\t\t\t\t\t\t    \tdaoManager.getProductDao().updateProductModelNumber(productModelNumber);\n\t\t\t\t\t\t    else\n\t\t\t\t\t\t    \tdaoManager.getProductDao().deleteProductModelNumber(productModelNumber);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t    if(!productModelDTO.getName().trim().equals("""") )\n\t\t\t\t\t\t\t daoManager.getProductDao().insertProductModelNumber(productModelNumber);\n\t\t\t\t\t\t} \n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t//link url\n\t\t\t\t\tif(productDTO.getLinkList() != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tProductLink productLink = new ProductLink();\n\t\t\t\t\t\tproductLink.setId(productDTO.getLinkList().get(0).getId());\n\t\t\t\t\t\tproductLink.setLink(productDTO.getLinkList().get(0).getLink());\n\t\t\t\t\t\tproductLink.setProductId(productDTO.getLinkList().get(0).getProductId());\n\t\t\t\t\t\tif(productLink.getId() !=0 )\n\t\t\t\t\t\t\tdaoManager.getProductDao().updateProductLink(productLink);\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tdaoManager.getProductDao().insertProductLink(productLink);\n\t\t\t\t\t}\n\t\t\t\t\treturn product;\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException e) {\n\t\t\tthrow (new ServiceException(e));\n\t\t}\n\t}\n\t\n\t\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<ProductDTO> getAllProdcut() throws ServiceException{\n\n\t\tList <Product> productList = new ArrayList<Product>();\n\t\t\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tproductList = (List <Product>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\n\t\t\t\t\t\t\t\tthrows DaoException {\n\t\t\t\t\t\t\treturn daoManager.getProductDao().getAllProdcut();\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn(DTOFactory.getProductDTOList(productList));\n\t}\t\n\n\t@Override\n\tpublic void updateSellingPriceBrand(final UserProductDTO userProductDTO)\n\t\t\tthrows ServiceException {\n\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tdaoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\n\t\t\t\t\t\t\tthrows DaoException {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\tUserBrandDiscount userBrandDiscount = new UserBrandDiscount();\n\t\t\t\t\t\tuserBrandDiscount.setBrandId(userProductDTO.getBrandId());\n\t\t\t\t\t\tuserBrandDiscount.setDiscount(userProductDTO.getBrandDiscount());\n\t\t\t\t\t\tuserBrandDiscount.setUserId(userProductDTO.getUserId());\n\t\t\t\t\t\t//update selling price by brand\n\t\t\t\t\t\tdaoManager.getProductDao().updateSellingPriceBrand(userBrandDiscount);\n\t\t\t\t\t\t// insert user brand discount or category\n\t\t\t\t\t\tUserBrandDiscount ubd = daoManager.getUserBrandDiscountDao().getUserBrandDiscount(userBrandDiscount);\n\t\t\t\t\t\tif( ubd == null)\n\t\t\t\t\t\t\tdaoManager.getUserBrandDiscountDao().insertEntity(userBrandDiscount);\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tubd.setDiscount(userBrandDiscount.getDiscount());\n\t\t\t\t\t\t\tdaoManager.getUserBrandDiscountDao().updateEntity(ubd);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t}\n\t\n\t@Override\n\tpublic void updateSellingPriceCategory(final UserProductDTO userProductDTO)\n\t\t\tthrows ServiceException {\n\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tdaoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\n\t\t\t\t\t\t\tthrows DaoException {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\tUserCategoryDiscount userCatDiscount = new UserCategoryDiscount();\n\t\t\t\t\t\tuserCatDiscount.setCategoryId(userProductDTO.getCategoryId());\n\t\t\t\t\t\tuserCatDiscount.setDiscount(userProductDTO.getCategoryDiscount());\n\t\t\t\t\t\tuserCatDiscount.setUserId(userProductDTO.getUserId());\n\t\t\t\t\t\t//update selling price by brand\n\t\t\t\t\t\tdaoManager.getProductDao().updateSellingPriceCategory(userCatDiscount);\n\t\t\t\t\t\t// insert user brand discount or category\n\t\t\t\t\t\tUserCategoryDiscount  ucd = daoManager.getUserCategoryDiscountDao().getUserCategoryDiscount(userCatDiscount);\n\t\t\t\t\t\tif( ucd == null)\n\t\t\t\t\t\t\tdaoManager.getUserCategoryDiscountDao().insertEntity(userCatDiscount);\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tucd.setDiscount(userCatDiscount.getDiscount());\n\t\t\t\t\t\t\tdaoManager.getUserCategoryDiscountDao().updateEntity(ucd);\t\t\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t}\n\t\n\t@Override\n\tpublic CommonUserDiscountDTO getUserBrandDiscount(final CommonUserDiscountDTO userBrandDiscountDTO)\n\t\t\tthrows ServiceException {\n\t\tUserBrandDiscount discountResult = null;\n\t\ttry {\n\t\t\tdiscountResult = (UserBrandDiscount) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\n\t\t\t\t\t\n\t\t\t\t\tUserBrandDiscount userBrandDiscount = new UserBrandDiscount();\n\t\t\t\t\tuserBrandDiscount.setBrandId(userBrandDiscountDTO.getBrandId());\t\t\t\t\n\t\t\t\t\tuserBrandDiscount.setUserId(userBrandDiscountDTO.getUserId());\n\n\t\t\t\t\treturn daoManager.getUserBrandDiscountDao().getUserBrandDiscount(userBrandDiscount);\n\t\t\t\t}\n\t\t\t});\n\t\t}catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\t\n\t\tif(discountResult != null){\n\t\t\tCommonUserDiscountDTO udDTO = new CommonUserDiscountDTO();\n\t\t\tudDTO.setCategoryId(discountResult.getBrandId());\n\t\t\tudDTO.setUserId(discountResult.getUserId());\n\t\t\tudDTO.setDiscount(discountResult.getDiscount());\n\t\t\treturn udDTO;\t\t\t\t\t\t\t\t\t\n\t\t}\t\t\n\t\treturn null;\n\t}\n\n\t@Override\n\tpublic CommonUserDiscountDTO getUserCategoryDiscount(final CommonUserDiscountDTO userDiscountDTO) \n\t\t\tthrows ServiceException {\n\t\tUserCategoryDiscount discountResult = null;\n\t\ttry {\n\t\t\tdiscountResult = (UserCategoryDiscount) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\n\t\t\t\t\t\n\t\t\t\t\tUserCategoryDiscount userCatDiscount = new UserCategoryDiscount();\n\t\t\t\t\tuserCatDiscount.setCategoryId(userDiscountDTO.getCategoryId());\t\t\t\t\n\t\t\t\t\tuserCatDiscount.setUserId(userDiscountDTO.getUserId());\n\n\t\t\t\t\treturn daoManager.getUserCategoryDiscountDao().getUserCategoryDiscount(userCatDiscount);\n\t\t\t\t}\n\t\t\t});\n\t\t}catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\t\n\t\tif(discountResult != null){\n\t\t\tCommonUserDiscountDTO udDTO = new CommonUserDiscountDTO();\n\t\t\tudDTO.setCategoryId(discountResult.getCategoryId());\n\t\t\tudDTO.setUserId(discountResult.getUserId());\n\t\t\tudDTO.setDiscount(discountResult.getDiscount());\n\t\t\treturn udDTO;\t\t\t\t\t\t\t\t\t\n\t\t}\n\t\t\n\t\treturn null;\n\t}\n\n\t@Override\n\tpublic void updateSellingPriceProduct(final UserProductDTO producDTO)\n\t\t\tthrows ServiceException {\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tdaoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\n\t\t\t\t\t\t\tthrows DaoException {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\tProduct product = new Product();\n\t\t\t\t\t\tproduct.setUserId(producDTO.getUserId());\n\t\t\t\t\t\tproduct.setId(producDTO.getId());\n\t\t\t\t\t\tproduct.setUserPrice(producDTO.getUserPrice());\n\t\t\t\t\t\tproduct.setPriceType(PriceType.MANUEL_PRICE_SET.getValue());\n\t\t\t\t\t\t//update selling price by product\n\t\t\t\t\t\tdaoManager.getProductDao().updateSellingPriceProduct(product);\n\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\t\t\n\t}\n\t\n\t@Override\n\tpublic void updateUserProductStatus(final UserProductDTO producDTO)\n\t\t\tthrows ServiceException {\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tdaoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\n\t\t\t\t\t\t\tthrows DaoException {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\tProduct product = new Product();\n\t\t\t\t\t\tproduct.setUserId(producDTO.getUserId());\n\t\t\t\t\t\tproduct.setId(producDTO.getId());\n\t\t\t\t\t\tproduct.setUserProductStatus(producDTO.getUserProductStatus());\n\t\t\t\t\t\tdaoManager.getProductDao().updateUserProductStatus(product);\n\t\t\t\t\t\t\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\t\t\n\t}\n\t\n\t\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<CommonDTO> getAllMainSpecification(LoyaltyEnum language)\n\t\t\tthrows ServiceException {\n\t\tList<Specification> list = null;\n\t\ttry {\n\t\t\tlist = (List<Specification>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\n\t\t\t\t\treturn daoManager.getSpecificationDao().getAllMainSpecification();\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException e) {\n\t\t\tthrow (new ServiceException(e));\t\t\t\n\t\t} \n\t\t\n\t\treturn DTOFactory.getAllCommonDTOFromSpecification(list, language);\n\t}\n\t\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<ProductDTO> getAllProductQuery(final QueryDTO dto)\n\t\t\tthrows ServiceException {\n\t\tList <Product> productList = new ArrayList<Product>();\n\t\t\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tproductList = (List<Product>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\n\t\t\t\t\t\t\t\tthrows DaoException {\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tQuery qry = new Query();\n\t\t\t\t\t\t\tBrand brand = null;\n\t\t\t\t\t\t\tif(dto.getBrand().getId()>0){\n\t\t\t\t\t\t\t\tbrand = new Brand();\n\t\t\t\t\t\t\t\tbrand.setId(dto.getBrand().getId());\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tCategory cat = null;\n\t\t\t\t\t\t\tif(dto.getCategory().getId()>0){\n\t\t\t\t\t\t\t\tcat = new Category();\n\t\t\t\t\t\t\t\tcat.setId(dto.getCategory().getId());\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tqry.setBrand(brand);\n\t\t\t\t\t\t\tqry.setCategory(cat);\n\t\t\t\t\t\t\tqry.setTypeId(null);\n\t\t\t\t\t\t\tqry.setDiscontinued(dto.isDiscontinued());\n\t\t\t\t\t\t\tqry.setDisabled(dto.isDisabled());\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\treturn daoManager.getProductDao().getAllProductQuery(qry);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn(DTOFactory.getBasicProductDTOList(productList));\n\t}\n\n\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<ProductDTO> getProductList(final SearchRequestDTO searchRequest) throws ServiceException {\n\t\tList <Product> productList = new ArrayList<Product>();\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tproductList = (List <Product>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\n\t\t\t\t\t\t\t\tthrows DaoException {\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tSelect select = new Select();\n\t\t\t\t\t\t\tselect.setQuery(searchRequest.getQuery());\n\t\t\t\t\t\t\tselect.setUserId(searchRequest.getUserId());\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif(searchRequest.getSearchType() == SearchType.NAME.getValue()){\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\treturn daoManager.getProductDao().getProductByName(select);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(searchRequest.getSearchType() == SearchType.BRAND.getValue()){\n\t\t\t\t\t\t\t\treturn daoManager.getProductDao().getAllProdcutByBrand(select);\t\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(searchRequest.getSearchType() == SearchType.CATEGORY.getValue()){\n\t\t\t\t\t\t\t\treturn daoManager.getProductDao().getAllProdcutByCategory(select);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(searchRequest.getSearchType() == SearchType.MAIN_SPECIFICATION.getValue()){\n\t\t\t\t\t\t\t\treturn daoManager.getProductDao().getAllProdcutBySpecification(select);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(searchRequest.getSearchType() == SearchType.CATEGORY_GROUP.getValue()){\n\t\t\t\t\t\t\t\treturn daoManager.getProductDao().getAllProdcutByCategoryGroup(select);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn daoManager.getProductDao().getAllProdcut();\n\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\t\t\n\t\treturn DTOFactory.getProductDTOList(productList);\n \n\t}\n\t\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<UserDTO> getAllActiveClients(final Long productId) throws ServiceException {\n\n\t\tList<User> activeClientsList = new ArrayList<User>();\n\t\t\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tactiveClientsList = (List<User>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\n\t\t\t\t\t\tthrows DaoException {\n\t\t\t\t\tProduct product = new Product();\n\t\t\t\t\tSelect select = new Select();\n\t\t\t\t\tselect.setQuery(String.valueOf(productId));\n\t\t\t\t\tproduct = daoManager.getProductDao().getProduct(select);\n\t\t\t\t\treturn product.getActiveClientsList();\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn(DTOFactory.getActiveClients(activeClientsList));\n\t}\n\t\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<ProductDTO> getAllDiscontinuedProducts() throws ServiceException {\n\n\t\tList <Product> productList = new ArrayList<Product>();\n\t\t\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tproductList = (List <Product>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\n\t\t\t\t\t\t\t\tthrows DaoException {\n\t\t\t\t\t\t\treturn daoManager.getProductDao().getAllDiscontinuedProducts();\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn(DTOFactory.getProductDTOList(productList));\n\t}\n\t\n\t@Override\n\tpublic void updateStatusToDisabled(final ProductDTO productDTO) throws ServiceException {\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tdaoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\n\t\t\t\t\t\t\tthrows DaoException {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\tProduct product = new Product();\n\t\t\t\t\t\tproduct.setId(productDTO.getId());\n\t\t\t\t\t\tdaoManager.getProductDao().updateStatusToDisabled(product);\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\t\t\n\t}\n\t\n\t@Override\n\tpublic ProductDTO getProductIdFromLSProductId(final String lSProductId) throws ServiceException {\n\t\tProduct productResult = new Product();\n\t\t\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tproductResult = (Product) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\n\t\t\t\t\t\tthrows DaoException {\n\t\t\t\t\tProduct product = daoManager.getProductDao().getProductIdFromLSProductId(lSProductId);\n\t\t\t\t\treturn product;\n\t\t\t\t}\n\t\t\t});\t\t\t\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\t\t\n\t\tif(productResult == null) return (null);\n\t\treturn (DTOFactory.getProductDTO(productResult));\t\t\t\t\n\t}\n\t\n\t\n\t\n\t@Override\n\tpublic ProductDTO getProductByLsProductId(final String lSProductId) throws ServiceException {\n\t\tProduct productResult = new Product();\n\t\t\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tproductResult = (Product) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\n\t\t\t\t\t\tthrows DaoException {\n\t\t\t\t\tProduct product = daoManager.getProductDao().getProductByLsProductId(lSProductId);\n\t\t\t\t\treturn product;\n\t\t\t\t}\n\t\t\t});\t\t\t\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\t\t\n\t\tif(productResult == null) return (null);\n\t\treturn (DTOFactory.getProductDTO(productResult));\t\t\t\t\n\t}\n\t\n\t\n\t\n\t\n\t\n\t\n\t@Override \n\tpublic Long createUserProductPrice(final UserProductPriceDTO userProductPriceDTO) throws ServiceException {\n\t\tUserProductPrice userProductPriceResult = new UserProductPrice();\t\t\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tuserProductPriceResult = (UserProductPrice) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\t\t\t\t\t\n\t\t\t\t\tUserProductPrice userProductPrice = new UserProductPrice();\t\t\t\t\t\n\t\t\t\t\tuserProductPrice.setUserId(userProductPriceDTO.getUserId());\t\t\t\t\n\t\t\t\t\tuserProductPrice.setProductId(userProductPriceDTO.getProductId());\t\t\t\t\t\n\t\t\t\t\tuserProductPrice.setPrice(userProductPriceDTO.getPrice());\n\t\t\t\t\tuserProductPrice.setProfit(userProductPriceDTO.getProfit());\n\t\t\t\t\tuserProductPrice.setDiscount(userProductPriceDTO.getDiscount());\n\t\t\t\t\tuserProductPrice.setExcluded(userProductPriceDTO.getExcluded());\t\t\t\t\t\n\t\t\t\t\tuserProductPrice.setUserStatus(userProductPriceDTO.getUserStatus());\n\t\t\t\t\tuserProductPrice.setPriceType(userProductPriceDTO.getPriceType());\t\t\t\t\t\n\t\t\t\t\tdaoManager.getProductDao().insertUserProductPrice(userProductPrice);\t\t\t\t\t\n\t\t\t\t\treturn userProductPrice;\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn userProductPriceResult.getId();\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\t\t\n\t}\t\n\t\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<UserProductPriceDTO> getUserProductPriceList(final Long productId) throws ServiceException {\n\t\tList<UserProductPrice> userProductPriceList = new ArrayList<UserProductPrice>();\t\t\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tuserProductPriceList = (List<UserProductPrice>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\n\t\t\t\t\tList<UserProductPrice> userProductPriceListing = new ArrayList<UserProductPrice>();\n\t\t\t\t\tSelect select = new Select();\n\t\t\t\t\tselect.setProductId(productId);\n\t\t\t\t\tuserProductPriceListing = daoManager.getProductDao().getUserProductPriceList(select);\t\t\t\t\t\n\t\t\t\t\treturn userProductPriceListing;\n\t\t\t\t}\n\t\t\t});\t\t\t\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn(DTOFactory.getUserProductPriceDTOList(userProductPriceList));\n\t}\n\t\n\t@Override\n\tpublic void updateUserProductPrice(final UserProductPriceDTO userProductPriceDTO) throws ServiceException {\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tdaoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\t\n\t\t\t\t\t\tUserProductPrice userProductPrice = new UserProductPrice();\t\t\t\t\t\t\n\t\t\t\t\t\tuserProductPrice.setUserId(userProductPriceDTO.getUserId());\t\t\t\t\n\t\t\t\t\t\tuserProductPrice.setProductId(userProductPriceDTO.getProductId());\t\n\t\t\t\t\t\tuserProductPrice.setPrice(userProductPriceDTO.getPrice());\n\t\t\t\t\t\tuserProductPrice.setProfit(userProductPriceDTO.getProfit());\n\t\t\t\t\t\tuserProductPrice.setDiscount(userProductPriceDTO.getDiscount());\n\t\t\t\t\t\tuserProductPrice.setExcluded(userProductPriceDTO.getExcluded());\t\t\t\t\t\n\t\t\t\t\t\tuserProductPrice.setPriceType(userProductPriceDTO.getPriceType());\n\t\t\t\t\t\tdaoManager.getProductDao().updateUserProductPrice(userProductPrice);\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\t\t\n\t}\t\n\t\n\t@Override\n\tpublic UserProductPriceDTO getUserProductPriceInformation(final Long productId, final Long userId) throws ServiceException {\n\t\tUserProductPrice userProductPriceResult = new UserProductPrice();\t\t\n\t\ttry {\t\t\t\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tuserProductPriceResult = (UserProductPrice) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\n\t\t\t\t\t\tthrows DaoException {\n\t\t\t\t\tUserProductPrice userProductPrice = new UserProductPrice();\n\t\t\t\t\tSelect select = new Select();\n\t\t\t\t\tselect.setProductId(productId);\n\t\t\t\t\tselect.setUserId(userId);\n\t\t\t\t\tuserProductPrice = daoManager.getProductDao().getUserProductPrice(select);\n\t\t\t\t\treturn userProductPrice;\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn (DTOFactory.getUserProductPriceDTO(userProductPriceResult));\n\t}\n\t\n\t\n\t@Override\n\tpublic UserProductPriceDTO getUsrPPriceByLsproductId(final Long userId, final String lsProductId) throws ServiceException {\n\t\tUserProductPrice userProductPriceResult = null;\t\n\t\ttry {\t\t\t\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tuserProductPriceResult = (UserProductPrice) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\n\t\t\t\t\t\tthrows DaoException {\n\t\t\t\t\treturn daoManager.getProductDao().getUsrPPriceByLsproductId(userId,lsProductId);\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn (DTOFactory.getUserProductPriceDTO(userProductPriceResult));\n\t}\n\n\t\n\t\n\t@Override\n\tpublic UserProductPriceDTO getUsrPPriceByProductId(final Long userId, final Long productId) throws ServiceException {\n\t\tUserProductPrice userProductPriceResult = null;\t\n\t\ttry {\t\t\t\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tuserProductPriceResult = (UserProductPrice) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\n\t\t\t\t\t\tthrows DaoException {\n\t\t\t\t\treturn daoManager.getProductDao().getUsrPPriceByProductId(userId,productId);\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn (DTOFactory.getUserProductPriceDTO(userProductPriceResult));\n\t}\n\n\t\n\t\n\t\n\t\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<ProvinceDTO> getAllProvinces() throws ServiceException {\n\t\tList<Province> provinceList = new ArrayList<Province>();\t\t\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tprovinceList = (List<Province>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\n\t\t\t\t\treturn daoManager.getProductDao().getAllProvinces();\n\t\t\t\t}\n\t\t\t});\t\t\t\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn(DTOFactory.getProvinceDTOList(provinceList));\n\t}\n\t\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<CityDTO> getAllCities(final Long provinceId) throws ServiceException {\n\t\tList<City> cityList = new ArrayList<City>();\t\t\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tcityList = (List<City>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\n\t\t\t\t\tList<City> userProductPriceListing = new ArrayList<City>();\n\t\t\t\t\tSelect select = new Select();\n\t\t\t\t\tselect.setProvinceId(provinceId);\n\t\t\t\t\tuserProductPriceListing = daoManager.getProductDao().getAllCities(select);\t\t\t\n\t\t\t\t\treturn userProductPriceListing;\n\t\t\t\t}\n\t\t\t});\t\t\t\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn(DTOFactory.getCityDTOList(cityList));\n\t}\n\t\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic CityDTO getMostPopularCitie(final Long provinceId) throws ServiceException {\n\t\tCity city = new City();\t\t\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tcity = (City) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\n\t\t\t\t\tCity userProductPrice= new City();\n\t\t\t\t\tSelect select = new Select();\n\t\t\t\t\tselect.setProvinceId(provinceId);\n\t\t\t\t\tuserProductPrice = daoManager.getProductDao().getMostPopularCitie(select);\t\t\t\n\t\t\t\t\treturn userProductPrice;\n\t\t\t\t}\n\t\t\t});\t\t\t\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn(DTOFactory.getCityDTO(city));\n\t}\n\t\n\t\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<CityDTO> getCities() throws ServiceException {\n\t\tList<City> cityList = new ArrayList<City>();\t\t\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tcityList = (List<City>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\n\t\t\t\t\treturn daoManager.getProductDao().getCities();\n\t\t\t\t}\n\t\t\t});\t\t\t\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn(DTOFactory.getCityDTOList(cityList));\n\t}\n\t\n\t\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<CityDTO> getMostPopularCitiesList() throws ServiceException {\n\t\tList<City> cityList = new ArrayList<City>();\t\t\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tcityList = (List<City>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\n\t\t\t\t\treturn daoManager.getProductDao().getMostPopularCitiesList();\n\t\t\t\t}\n\t\t\t});\t\t\t\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn(DTOFactory.getCityDTOList(cityList));\n\t}\n\t\n\t\n\t\n\t@Override\n\tpublic Long createShippingCity(final ShippingCityDTO shippingCityDTO) throws ServiceException {\n\t\tShippingCity shippingCityResult = new ShippingCity();\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tshippingCityResult = (ShippingCity) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\t\t\t\t\n\t\t\t\t\tShippingCity shippingCity = new ShippingCity();\n\t\t\t\t\tshippingCity.setProductId(shippingCityDTO.getProductId());\n\t\t\t\t\tshippingCity.setCityId(shippingCityDTO.getCityId());\n\t\t\t\t\tshippingCity.setExpeditedParcelPrice(shippingCityDTO.getExpeditedParcelPrice());\n\t\t\t\t\tdaoManager.getProductDao().insertShippingCity(shippingCity);\n\t\t\t\t\treturn shippingCity;\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn shippingCityResult.getId();\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t}\n\t\n\t@Override\n\tpublic Long createShippingProvince(final ShippingProvinceDTO shippingProvinceDTO) throws ServiceException {\n\t\tShippingProvince shippingProvinceResult = new ShippingProvince();\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tshippingProvinceResult = (ShippingProvince) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\t\t\t\t\t\n\t\t\t\t\tShippingProvince shippingProvince = new ShippingProvince();\n\t\t\t\t\tshippingProvince.setProductId(shippingProvinceDTO.getProductId());\n\t\t\t\t\tshippingProvince.setProvinceId(shippingProvinceDTO.getProvinceId());\n\t\t\t\t\tshippingProvince.setWeightedTotalProvince(shippingProvinceDTO.getWeightedTotalProvince());\n\t\t\t\t\tdaoManager.getProductDao().insertShippingProvince(shippingProvince);\n\t\t\t\t\treturn shippingProvince;\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn shippingProvinceResult.getId();\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t}\n\t\n\t@Override\n\tpublic Long createShippingTotal(final ShippingTotalDTO shippingTotalDTO) throws ServiceException {\n\t\tShippingTotal shippingTotalResult = new ShippingTotal();\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tshippingTotalResult = (ShippingTotal) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\t\t\t\t\t\n\t\t\t\t\tShippingTotal shippingTotal = new ShippingTotal();\n\t\t\t\t\tshippingTotal.setProductId(shippingTotalDTO.getProductId());\n\t\t\t\t\tshippingTotal.setProvinceId(shippingTotalDTO.getProvinceId());\n\t\t\t\t\tshippingTotal.setUserId(shippingTotalDTO.getUserId());\n\t\t\t\t\tshippingTotal.setWeightedProvinceTotalWithCoverage(shippingTotalDTO.getWeightedProvinceTotalWithCoverage());\n\t\t\t\t\tshippingTotal.setAverageShippingTotal(shippingTotalDTO.getAverageShippingTotal());\n\t\t\t\t\tdaoManager.getProductDao().insertShippingTotal(shippingTotal);\n\t\t\t\t\treturn shippingTotal;\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn shippingTotalResult.getId();\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t}\n\t\n\t@Override\n\tpublic void updateUPPShippingCoverage(final UserProductPriceDTO userProductPriceDTO) throws ServiceException {\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tdaoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\t\n\t\t\t\t\t\tUserProductPrice userProductPrice = new UserProductPrice();\n\t\t\t\t\t\tuserProductPrice.setUserId(userProductPriceDTO.getUserId());\t\t\t\t\n\t\t\t\t\t\tuserProductPrice.setProductId(userProductPriceDTO.getProductId());\n\t\t\t\t\t\tuserProductPrice.setShippingCoverage(userProductPriceDTO.getShippingCoverage());\n\t\t\t\t\t\tdaoManager.getProductDao().updateUPPShippingCoverage(userProductPrice);\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t}\n\t\n\t@Override\n\tpublic void updateUPPShippingTotalCanada(final UserProductPriceDTO userProductPriceDTO) throws ServiceException {\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tdaoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\t\n\t\t\t\t\t\tUserProductPrice userProductPrice = new UserProductPrice();\n\t\t\t\t\t\tuserProductPrice.setUserId(userProductPriceDTO.getUserId());\t\t\t\t\n\t\t\t\t\t\tuserProductPrice.setProductId(userProductPriceDTO.getProductId());\n\t\t\t\t\t\tuserProductPrice.setShippingTotalCanada(userProductPriceDTO.getShippingTotalCanada());\n\t\t\t\t\t\tdaoManager.getProductDao().updateUPPShippingTotalCanada(userProductPrice);\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t}\n\t\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<ProductDTO> getProductListByCategoryGroupId(final Long categoryGroupId) throws ServiceException {\n\t\tList<Product> productList = new ArrayList<Product>();\t\t\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tproductList = (List<Product>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\n\t\t\t\t\tList<Product> productListing = new ArrayList<Product>();\n\t\t\t\t\tSelect select = new Select();\n\t\t\t\t\tselect.setCategoryGoupeId(categoryGroupId);\n\t\t\t\t\tproductListing = daoManager.getProductDao().getProductListByCategoryGroupId(select);\t\t\t\n\t\t\t\t\treturn productListing;\n\t\t\t\t}\n\t\t\t});\t\t\t\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn(DTOFactory.getProductDTOList(productList));\n\t}\n\t\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<ProductDTO> getAllValidStatusProducts(final Long userId) throws ServiceException {\n\t\tList<Product> productList = new ArrayList<Product>();\t\t\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tproductList = (List<Product>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\n\t\t\t\t\tList<Product> productListing = new ArrayList<Product>();\n\t\t\t\t\tSelect select = new Select();\n\t\t\t\t\tselect.setUserId(userId);\n\t\t\t\t\tproductListing = daoManager.getProductDao().getAllValidStatusProducts(select);\t\t\t\n\t\t\t\t\treturn productListing;\n\t\t\t\t}\n\t\t\t});\t\t\t\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn(DTOFactory.getProductDTOList(productList));\t\t\n\t}\n\t\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<ProductDTO> getAllValidStatusProductsForAllUsers() throws ServiceException {\n\t\tList<Product> productList = new ArrayList<Product>();\t\t\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tproductList = (List<Product>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\n\t\t\t\t\treturn daoManager.getProductDao().getAllValidStatusProductsForAllUsers();\t\t\t\n\n\t\t\t\t}\n\t\t\t});\t\t\t\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn(DTOFactory.getProductDTOList(productList));\t\t\n\t}\n\t\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<ProductDTO> getAllValidStatusProductsG(final Long userId, \n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfinal Long categoryGroupId) throws ServiceException {\n\t\tList<Product> productList = new ArrayList<Product>();\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tproductList = (List<Product>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\n\t\t\t\t\tList<Product> productListing = new ArrayList<Product>();\n\t\t\t\t\tSelect select = new Select();\n\t\t\t\t\tselect.setUserId(userId);\n\t\t\t\t\tselect.setCategoryGoupeId(categoryGroupId);\n\t\t\t\t\tproductListing = daoManager.getProductDao().getAllValidStatusProductsG(select);\t\t\t\n\t\t\t\t\treturn productListing;\n\t\t\t\t}\n\t\t\t});\t\t\t\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn(DTOFactory.getProductDTOList(productList));\t\t\n\t}\n\t\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<ProductDTO> getAllValidStatusProductsGC(final Long userId, \n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfinal Long categoryGroupId, \n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfinal Long categoryId) throws ServiceException {\n\t\tList<Product> productList = new ArrayList<Product>();\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tproductList = (List<Product>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\n\t\t\t\t\tList<Product> productListing = new ArrayList<Product>();\n\t\t\t\t\tSelect select = new Select();\n\t\t\t\t\tselect.setUserId(userId);\n\t\t\t\t\tselect.setCategoryGoupeId(categoryGroupId);\n\t\t\t\t\tselect.setCategoryId(categoryId);\n\t\t\t\t\tproductListing = daoManager.getProductDao().getAllValidStatusProductsGC(select);\t\t\t\n\t\t\t\t\treturn productListing;\n\t\t\t\t}\n\t\t\t});\t\t\t\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn(DTOFactory.getProductDTOList(productList));\t\t\n\t}\n\t\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<ProductDTO> getAllValidStatusProductsGCT(final Long userId, \n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfinal Long categoryGroupId, \n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfinal Long categoryId, \n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfinal Long typeId) throws ServiceException {\n\t\tList<Product> productList = new ArrayList<Product>();\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tproductList = (List<Product>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\n\t\t\t\t\tList<Product> productListing = new ArrayList<Product>();\n\t\t\t\t\tSelect select = new Select();\n\t\t\t\t\tselect.setUserId(userId);\n\t\t\t\t\tselect.setCategoryGoupeId(categoryGroupId);\n\t\t\t\t\tselect.setCategoryId(categoryId);\n\t\t\t\t\tselect.setTypeId(typeId);\n\t\t\t\t\tproductListing = daoManager.getProductDao().getAllValidStatusProductsGCT(select);\t\t\t\n\t\t\t\t\treturn productListing;\n\t\t\t\t}\n\t\t\t});\t\t\t\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn(DTOFactory.getProductDTOList(productList));\t\t\n\t}\n\t\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<ProductDTO> getAllValidStatusProductsGCTB(final Long userId, \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfinal Long categoryGroupId, \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfinal Long categoryId, \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfinal Long typeId,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfinal Long brandId) throws ServiceException {\n\t\tList<Product> productList = new ArrayList<Product>();\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tproductList = (List<Product>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\n\t\t\t\t\tList<Product> productListing = new ArrayList<Product>();\n\t\t\t\t\tSelect select = new Select();\n\t\t\t\t\tselect.setUserId(userId);\n\t\t\t\t\tselect.setCategoryGoupeId(categoryGroupId);\n\t\t\t\t\tselect.setCategoryId(categoryId);\n\t\t\t\t\tselect.setTypeId(typeId);\n\t\t\t\t\tselect.setBrandId(brandId);\n\t\t\t\t\tproductListing = daoManager.getProductDao().getAllValidStatusProductsGCTB(select);\t\t\n\t\t\t\t\treturn productListing;\n\t\t\t\t}\n\t\t\t});\t\t\t\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn(DTOFactory.getProductDTOList(productList));\t\t\n\t}\t\n\t\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<ProductDTO> getAllValidStatusProductsGCB(final Long userId, \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfinal Long categoryGroupId, \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfinal Long categoryId,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfinal Long brandId) throws ServiceException {\n\t\tList<Product> productList = new ArrayList<Product>();\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tproductList = (List<Product>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\n\t\t\t\t\tList<Product> productListing = new ArrayList<Product>();\n\t\t\t\t\tSelect select = new Select();\n\t\t\t\t\tselect.setUserId(userId);\n\t\t\t\t\tselect.setCategoryGoupeId(categoryGroupId);\n\t\t\t\t\tselect.setCategoryId(categoryId);\n\t\t\t\t\tselect.setBrandId(brandId);\n\t\t\t\t\tproductListing = daoManager.getProductDao().getAllValidStatusProductsGCB(select);\n\t\t\t\t\treturn productListing;\n\t\t\t\t}\n\t\t\t});\t\t\t\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn(DTOFactory.getProductDTOList(productList));\t\t\n\t}\n\t/*\n\t@Override\n\tpublic ProductDTO getProductById(final Long productId) throws ServiceException {\n\t\tProduct productResult = new Product();\n\t\t\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tproductResult = (Product) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\n\t\t\t\t\t\tthrows DaoException {\n\t\t\t\t\tSelect select = new Select();\n\t\t\t\t\tselect.setProductId(productId);\n\t\t\t\t\tProduct product = daoManager.getProductDao().getProductById(select);\n\t\t\t\t\treturn product;\n\t\t\t\t}\n\t\t\t});\t\t\t\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\t\t\n\t\tif(productResult == null) return (null);\n\t\t\treturn (DTOFactory.getProductDTO(productResult));\t\t\t\t\n\t}\n\t*/\n\t\n\t@Override\n\tpublic ProductDTO getProductById(final Long productId) throws ServiceException {\n\t\tProduct productResult = new Product();\n\t\t\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tproductResult = (Product) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\n\t\t\t\t\t\tthrows DaoException {\n\t\t\t\t\tSelect select = new Select();\n\t\t\t\t\tselect.setProductId(productId);\n\t\t\t\t\tProduct product = daoManager.getProductDao().getProductById(productId);\n\t\t\t\t\treturn product;\n\t\t\t\t}\n\t\t\t});\t\t\t\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\t\t\n\t\tif(productResult == null) return (null);\n\t\t\treturn (DTOFactory.getProductDTO(productResult));\t\t\t\t\n\t}\n\t\n\t\n\t@Override\n\tpublic void updateShippingCityToExpeditedParcelPrice(final ShippingCityDTO shippingCityDTO) throws ServiceException {\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tdaoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\t\n\t\t\t\t\t\tShippingCity shippingCity = new ShippingCity();\n\t\t\t\t\t\tshippingCity.setProductId(shippingCityDTO.getProductId());\n\t\t\t\t\t\tshippingCity.setCityId(shippingCityDTO.getCityId());\n\t\t\t\t\t\tshippingCity.setExpeditedParcelPrice(shippingCityDTO.getExpeditedParcelPrice());\n\t\t\t\t\t\tdaoManager.getProductDao().updateShippingCityToExpeditedParcelPrice(shippingCity);\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t}\n\t\n\t@Override\n\tpublic ShippingCityDTO getShippingCity(final Long productId, final Long cityId) throws ServiceException {\n\t\tShippingCity shippingCityResult = new ShippingCity();\t\t\n\t\ttry {\t\t\t\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tshippingCityResult = (ShippingCity) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\n\t\t\t\t\t\tthrows DaoException {\n\t\t\t\t\tShippingCity shippingCity = new ShippingCity();\n\t\t\t\t\tSelect select = new Select();\n\t\t\t\t\tselect.setProductId(productId);\n\t\t\t\t\tselect.setCityId(cityId);\n\t\t\t\t\tshippingCity = daoManager.getProductDao().getShippingCity(select);\n\t\t\t\t\treturn shippingCity;\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn(DTOFactory.getShippingCityDTO(shippingCityResult));\n\t}\n\t\n\t@Override\n\tpublic void updateShippingProvince(final ShippingProvinceDTO shippingProvinceDTO) throws ServiceException {\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tdaoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\t\n\t\t\t\t\t\tShippingProvince shippingProvince = new ShippingProvince();\n\t\t\t\t\t\tshippingProvince.setProductId(shippingProvinceDTO.getProductId());\n\t\t\t\t\t\tshippingProvince.setProvinceId(shippingProvinceDTO.getProvinceId());\n\t\t\t\t\t\tshippingProvince.setWeightedTotalProvince(shippingProvinceDTO.getWeightedTotalProvince());\n\t\t\t\t\t\tdaoManager.getProductDao().updateShippingProvince(shippingProvince);\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t}\n\t\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<ProductDTO> getValidProductIdByDim(final ProductDTO productDTO) throws ServiceException {\n\t\tList<Product> productList = new ArrayList<Product>();\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tproductList = (List<Product>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\n\t\t\t\t\tProduct product = new Product();\n\t\t\t\t\tproduct.setId(productDTO.getId());\n\t\t\t\t\tproduct.setWeight(productDTO.getWeight());\n\t\t\t\t\tproduct.setLength(productDTO.getLarge());\n\t\t\t\t\tproduct.setWidth(productDTO.getWidth());\n\t\t\t\t\tproduct.setHeight(productDTO.getHigh());\n\t\t\t\t\treturn daoManager.getProductDao().getValidProductIdByDim(product);\n\t\t\t\t}\n\t\t\t});\t\t\t\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn(DTOFactory.getProductDTOList(productList));\t\t\n\t}\t\n\t\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<ShippingCityDTO> getShippingCityListWithZeroParcelPriceByCityId(final Long cityId) throws ServiceException {\n\t\tList<ShippingCity> shippingCityList = new ArrayList<ShippingCity>();\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tshippingCityList = (List<ShippingCity>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\n\t\t\t\t\tList<ShippingCity> shippingCityListing = new ArrayList<ShippingCity>();\n\t\t\t\t\tSelect select = new Select();\n\t\t\t\t\tselect.setCityId(cityId);\n\t\t\t\t\tshippingCityListing = daoManager.getProductDao().getShippingCityListWithZeroParcelPriceByCityId(select);\n\t\t\t\t\treturn shippingCityListing;\n\t\t\t\t}\n\t\t\t});\t\t\t\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn(DTOFactory.getShippingCityDTOList(shippingCityList));\n\t}\n\t\n\t@Override\n\tpublic CityDTO getCity(final Long cityId) throws ServiceException {\n\t\tCity cityResult = new City();\t\t\n\t\ttry {\t\t\t\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tcityResult = (City) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\n\t\t\t\t\t\tthrows DaoException {\n\t\t\t\t\tCity city = new City();\n\t\t\t\t\tSelect select = new Select();\n\t\t\t\t\tselect.setCityId(cityId);\n\t\t\t\t\tcity = daoManager.getProductDao().getCity(select);\n\t\t\t\t\treturn city;\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn(DTOFactory.getCityDTO(cityResult));\n\t}\n\t\n\t\n\t@Override\n\tpublic CityDTO getCityByName(final String nameCity) throws ServiceException {\t\n\t\tCity city=null;\n\t\ttry {\t\t\t\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tcity = (City) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\n\t\t\t\t\t\tthrows DaoException {\n\t\t\t\t\treturn daoManager.getProductDao().getCityByName(nameCity);\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\tCityDTO cityDTO=null;\n\t\tif(city!=null)cityDTO=DTOFactory.getCityDTO(city);\n\t\treturn cityDTO;\n\t}\n\t\n\t\n\t\n\t\n\t\n\t@Override\n\tpublic ProvinceDTO getProvince(final Long provinceId) throws ServiceException {\n\t\tProvince provinceResult = new Province();\t\t\n\t\ttry {\t\t\t\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tprovinceResult = (Province) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\n\t\t\t\t\t\tthrows DaoException {\n\t\t\t\t\tProvince province = new Province();\n\t\t\t\t\tSelect select = new Select();\n\t\t\t\t\tselect.setProvinceId(provinceId);\n\t\t\t\t\tprovince = daoManager.getProductDao().getProvince(select);\n\t\t\t\t\treturn province;\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn(DTOFactory.getProvinceDTO(provinceResult));\n\t}\t\n\n\t\n\t\n\t@Override\n\tpublic ProvinceDTO getProvinceByCode(final String code) throws ServiceException {\n\t\tProvince provinceResult = new Province();\t\t\n\t\ttry {\t\t\t\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tprovinceResult = (Province) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\n\t\t\t\t\tthrows DaoException {\n\t\t\t\t\treturn daoManager.getProductDao().getProvinceByCode(code);\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn(DTOFactory.getProvinceDTO(provinceResult));\n\t}\n\t\n\t\n\t@Override\n\tpublic ShippingProvinceDTO getWeightedTotalProvinceFromShippingProvince(final Long productId, final Long provinceId) throws ServiceException {\n\t\tShippingProvince shippingProvinceResult = new ShippingProvince();\t\t\n\t\ttry {\t\t\t\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tshippingProvinceResult = (ShippingProvince) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\n\t\t\t\t\t\tthrows DaoException {\n\t\t\t\t\tShippingProvince shippingProvince = new ShippingProvince();\n\t\t\t\t\tSelect select = new Select();\n\t\t\t\t\tselect.setProductId(productId);\n\t\t\t\t\tselect.setProvinceId(provinceId);\n\t\t\t\t\tshippingProvince = daoManager.getProductDao().getWeightedTotalProvinceFromShippingProvince(select);\n\t\t\t\t\treturn shippingProvince;\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn(DTOFactory.getShippingProvinceDTO(shippingProvinceResult));\n\t}\n\t\n\t@Override\n\tpublic void updateShippingTotal(final ShippingTotalDTO shippingTotalDTO) throws ServiceException {\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tdaoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\t\n\t\t\t\t\t\tShippingTotal shippingTotal = new ShippingTotal();\n\t\t\t\t\t\tshippingTotal.setProductId(shippingTotalDTO.getProductId());\n\t\t\t\t\t\tshippingTotal.setProvinceId(shippingTotalDTO.getProvinceId());\n\t\t\t\t\t\tshippingTotal.setUserId(shippingTotalDTO.getUserId());\n\t\t\t\t\t\tshippingTotal.setWeightedProvinceTotalWithCoverage(shippingTotalDTO.getWeightedProvinceTotalWithCoverage());\n\t\t\t\t\t\tshippingTotal.setAverageShippingTotal(shippingTotalDTO.getAverageShippingTotal());\n\t\t\t\t\t\tdaoManager.getProductDao().updateShippingTotal(shippingTotal);\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t}\n\t\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<ShippingTotalDTO> getShippingTotalList(final Long productId, final Long userId) throws ServiceException {\n\t\tList<ShippingTotal> shippingTotalList = new ArrayList<ShippingTotal>();\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tshippingTotalList = (List<ShippingTotal>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\n\t\t\t\t\tList<ShippingTotal> shippingTotalListing = new ArrayList<ShippingTotal>();\n\t\t\t\t\tSelect select = new Select();\n\t\t\t\t\tselect.setProductId(productId);\n\t\t\t\t\tselect.setUserId(userId);\n\t\t\t\t\tshippingTotalListing = daoManager.getProductDao().getShippingTotalList(select);\n\t\t\t\t\treturn shippingTotalListing;\n\t\t\t\t}\n\t\t\t});\t\t\t\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn(DTOFactory.getShippingTotalDTOList(shippingTotalList));\n\t}\n\t\n\t@Override\n\tpublic Long createUserProvincePopulation(final UserProvincePopulationDTO userProvincePopulationDTO) throws ServiceException {\n\t\tUserProvincePopulation userProvincePopulationResult = new UserProvincePopulation();\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tuserProvincePopulationResult = (UserProvincePopulation) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\t\t\t\t\t\n\t\t\t\t\tUserProvincePopulation userProvincePopulation = new UserProvincePopulation();\n\t\t\t\t\tuserProvincePopulation.setProvinceId(userProvincePopulationDTO.getProvinceId());\n\t\t\t\t\tuserProvincePopulation.setUserId(userProvincePopulationDTO.getUserId());\n\t\t\t\t\tuserProvincePopulation.setPopulationPercent(userProvincePopulationDTO.getPopulationPercent());\n\t\t\t\t\tdaoManager.getProductDao().insertUserProvincePopulation(userProvincePopulation);\n\t\t\t\t\treturn userProvincePopulation;\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn userProvincePopulationResult.getId();\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t}\n\t\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<UserProvincePopulationDTO> getUserProvincePopulationList(final Long userId) throws ServiceException {\n\t\tList<UserProvincePopulation> userProvincePopulationList = new ArrayList<UserProvincePopulation>();\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tuserProvincePopulationList = (List<UserProvincePopulation>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\n\t\t\t\t\tList<UserProvincePopulation> userProvincePopulationListing = new ArrayList<UserProvincePopulation>();\n\t\t\t\t\tSelect select = new Select();\n\t\t\t\t\tselect.setUserId(userId);\n\t\t\t\t\tuserProvincePopulationListing = daoManager.getProductDao().getUserProvincePopulationList(select);\n\t\t\t\t\treturn userProvincePopulationListing;\n\t\t\t\t}\n\t\t\t});\t\t\t\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn(DTOFactory.getUserProvincePopulationDTOList(userProvincePopulationList));\t\t\n\t}\t\n\t\n\t@Override\n\tpublic void updateUserProvincePopulation(final UserProvincePopulationDTO userProvincePopulationDTO) throws ServiceException {\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tdaoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\t\n\t\t\t\t\t\tUserProvincePopulation userProvincePopulation = new UserProvincePopulation();\n\t\t\t\t\t\tuserProvincePopulation.setUserId(userProvincePopulationDTO.getUserId());\n\t\t\t\t\t\tuserProvincePopulation.setProvinceId(userProvincePopulationDTO.getProvinceId());\n\t\t\t\t\t\tuserProvincePopulation.setPopulationPercent(userProvincePopulationDTO.getPopulationPercent());\n\t\t\t\t\t\tdaoManager.getProductDao().updateUserProvincePopulation(userProvincePopulation);\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t}\n\t\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<ShippingCityDTO> getAllShippingCity() throws ServiceException {\n\t\tList<ShippingCity> shippingCityList = new ArrayList<ShippingCity>();\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tshippingCityList = (List<ShippingCity>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\n\t\t\t\t\treturn daoManager.getProductDao().getAllShippingCity();\n\t\t\t\t}\n\t\t\t});\t\t\t\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn(DTOFactory.getShippingCityDTOList(shippingCityList));\n\t}\t\n\t\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<ShippingProvinceDTO> getAllShippingProvince() throws ServiceException {\n\t\tList<ShippingProvince> shippingProvinceList = new ArrayList<ShippingProvince>();\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tshippingProvinceList = (List<ShippingProvince>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\n\t\t\t\t\treturn daoManager.getProductDao().getAllShippingProvince();\n\t\t\t\t}\n\t\t\t});\t\t\t\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn(DTOFactory.getShippingProvinceDTOList(shippingProvinceList));\n\t}\n\t\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<ShippingTotalDTO> getAllShippingTotal() throws ServiceException {\n\t\tList<ShippingTotal> shippingTotalList = new ArrayList<ShippingTotal>();\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tshippingTotalList = (List<ShippingTotal>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\n\t\t\t\t\treturn daoManager.getProductDao().getAllShippingTotal();\n\t\t\t\t}\n\t\t\t});\t\t\t\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn(DTOFactory.getShippingTotalDTOList(shippingTotalList));\n\t}\n\t\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<UserProvincePopulationDTO> getAllUserProvincePopulation() throws ServiceException {\n\t\tList<UserProvincePopulation> userProvincePopulationList = new ArrayList<UserProvincePopulation>();\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tuserProvincePopulationList = (List<UserProvincePopulation>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\n\t\t\t\t\treturn daoManager.getProductDao().getAllUserProvincePopulation();\n\t\t\t\t}\n\t\t\t});\t\t\t\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn(DTOFactory.getUserProvincePopulationDTOList(userProvincePopulationList));\n\t}\n\t\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<UserProductPriceDTO> getAllUserProductPrice() throws ServiceException {\n\t\tList<UserProductPrice> userProductPriceList = new ArrayList<UserProductPrice>();\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tuserProductPriceList = (List<UserProductPrice>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\n\t\t\t\t\treturn daoManager.getProductDao().getAllUserProductPrice();\n\t\t\t\t}\n\t\t\t});\t\t\t\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn(DTOFactory.getUserProductPriceDTOList(userProductPriceList));\n\t}\t\n\t\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<ShippingTotalDTO> getShippingTotalListByUserId(final Long userId) throws ServiceException {\n\t\tList<ShippingTotal> shippingTotalList = new ArrayList<ShippingTotal>();\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tshippingTotalList = (List<ShippingTotal>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\n\t\t\t\t\tList<ShippingTotal> shippingTotalListing = new ArrayList<ShippingTotal>();\n\t\t\t\t\tSelect select = new Select();\n\t\t\t\t\tselect.setUserId(userId);\n\t\t\t\t\tshippingTotalListing = daoManager.getProductDao().getShippingTotalListByUserId(select);\n\t\t\t\t\treturn shippingTotalListing;\n\t\t\t\t}\n\t\t\t});\t\t\t\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn(DTOFactory.getShippingTotalDTOList(shippingTotalList));\t\n\t\t\n\t}\n\t\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<UserProductPriceDTO> getUserProductPriceByUserId(final Long userId) throws ServiceException {\n\t\tList<UserProductPrice> userProductPriceList = new ArrayList<UserProductPrice>();\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tuserProductPriceList = (List<UserProductPrice>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\n\t\t\t\t\tList<UserProductPrice> userProductPriceListing = new ArrayList<UserProductPrice>();\n\t\t\t\t\tSelect select = new Select();\n\t\t\t\t\tselect.setUserId(userId);\n\t\t\t\t\tuserProductPriceListing = daoManager.getProductDao().getUserProductPriceByUserId(select);\n\t\t\t\t\treturn userProductPriceListing;\n\t\t\t\t}\n\t\t\t});\t\t\t\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn(DTOFactory.getUserProductPriceDTOList(userProductPriceList));\n\t}\t\n\t\n\t@Override\n\tpublic UserProvincePopulationDTO getUserProvincePopulation(final Long userId, final Long provinceId) throws ServiceException {\n\t\tUserProvincePopulation userProvincePopulationResult = new UserProvincePopulation();\n\t\ttry {\t\t\t\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tuserProvincePopulationResult = (UserProvincePopulation) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\n\t\t\t\t\t\tthrows DaoException {\n\t\t\t\t\tUserProvincePopulation userProvincePopulation = new UserProvincePopulation();\n\t\t\t\t\tSelect select = new Select();\n\t\t\t\t\tselect.setUserId(userId);\n\t\t\t\t\tselect.setProvinceId(provinceId);\n\t\t\t\t\tuserProvincePopulation = daoManager.getProductDao().getUserProvincePopulation(select);\n\t\t\t\t\treturn userProvincePopulation;\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn(DTOFactory.getUserProvincePopulation(userProvincePopulationResult));\n\t}\n\t\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<ShippingCityDTO> getShippingCityByIDGreaterThan(final Long id) throws ServiceException {\n\t\tList<ShippingCity> shippingCityList = new ArrayList<ShippingCity>();\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tshippingCityList = (List<ShippingCity>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\n\t\t\t\t\treturn daoManager.getProductDao().getShippingCityByIDGreaterThan(id);\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn(DTOFactory.getShippingCityDTOList(shippingCityList));\n\t}\n\t\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<ShippingProvinceDTO> getShippingProvinceByIDGreaterThan(final Long id) throws ServiceException {\n\t\tList<ShippingProvince> shippingProvinceList = new ArrayList<ShippingProvince>();\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tshippingProvinceList = (List<ShippingProvince>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\n\t\t\t\t\treturn daoManager.getProductDao().getShippingProvinceByIDGreaterThan(id);\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn(DTOFactory.getShippingProvinceDTOList(shippingProvinceList));\n\t}\n\t\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<ShippingTotalDTO> getShippingTotalByIDGreaterThan(final Long id) throws ServiceException {\n\t\tList<ShippingTotal> shippingTotalList = new ArrayList<ShippingTotal>();\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tshippingTotalList = (List<ShippingTotal>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\n\t\t\t\t\treturn daoManager.getProductDao().getShippingTotalByIDGreaterThan(id);\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn(DTOFactory.getShippingTotalDTOList(shippingTotalList));\n\t}\t\n\t\t\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<Long> getAllValidProductIds() throws ServiceException {\n\t\tList<Product> productList = new ArrayList<Product>();\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tproductList = (List<Product>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\n\t\t\t\t\treturn daoManager.getProductDao().getAllValidProductIds();\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn(DTOFactory.getProductDTOLightList(productList));\t\n\t}\n\t\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<ProductDTO> getValidProductsByUserIdAndExcluded(final Long userId) throws ServiceException {\n\t\tList<Product> productList = new ArrayList<Product>();\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tproductList = (List<Product>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\n\t\t\t\t\tList<Product> productListing = new ArrayList<Product>();\n\t\t\t\t\tSelect select = new Select();\n\t\t\t\t\tselect.setUserId(userId);\n\t\t\t\t\tproductListing = daoManager.getProductDao().getValidProductsByUserIdAndExcluded(select);\n\t\t\t\t\treturn productListing;\n\t\t\t\t}\n\t\t\t});\t\t\t\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn(DTOFactory.getProductDTOList(productList));\n\t}\n\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<ProductDTO> getProductsClassification(final Long userId) throws ServiceException {\n\t\tList<Product> productList = new ArrayList<Product>();\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tproductList = (List<Product>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\n\t\t\t\t\tList<Product> ProductsClassificationList = new ArrayList<Product>();\n\t\t\t\t\tProductsClassificationList = daoManager.getProductDao().getProductsClassification(userId);\n\t\t\t\t\treturn ProductsClassificationList;\n\t\t\t\t}\n\t\t\t});\t\t\t\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));  \n\t\t}\n\t\treturn(DTOFactory.getProductDTOClassification(productList)); \n\t}\n\t\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<ProductDTO> getValidProductsGreaterThanId(final Long productId) throws ServiceException {\n\t\tList<Product> productList = new ArrayList<Product>();\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tproductList = (List<Product>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\n\t\t\t\t\tList<Product> productListing = new ArrayList<Product>();\n\t\t\t\t\tSelect select = new Select();\n\t\t\t\t\tselect.setProductId(productId);\n\t\t\t\t\tproductListing = daoManager.getProductDao().getValidProductsGreaterThanId(select);\n\t\t\t\t\treturn productListing;\n\t\t\t\t}\n\t\t\t});\t\t\t\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn(DTOFactory.getProductDTOList(productList));\n\t}\n\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<ShippingTotalDTO> getShippingTotalListByProductId(final Long productId) throws ServiceException {\n\t\tList<ShippingTotal> shippingTotalList = new ArrayList<ShippingTotal>();\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tshippingTotalList = (List<ShippingTotal>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\n\t\t\t\t\tSelect select = new Select();\n\t\t\t\t\tselect.setProductId(productId);\n\t\t\t\t\treturn daoManager.getProductDao().getShippingTotalListByProductId(select);\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn(DTOFactory.getShippingTotalDTOList(shippingTotalList));\n\t}\n\t\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<UserProductPriceDTO> getNullsShippingTotalCanadaOnUserProductPrice(final Long productId) throws ServiceException {\n\t\tList<UserProductPrice> userProductPriceList = new ArrayList<UserProductPrice>();\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tuserProductPriceList = (List<UserProductPrice>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\n\t\t\t\t\tList<UserProductPrice> userProductPriceListing = new ArrayList<UserProductPrice>();\n\t\t\t\t\tSelect select = new Select();\n\t\t\t\t\tselect.setProductId(productId);\n\t\t\t\t\tuserProductPriceListing = daoManager.getProductDao().getNullsShippingTotalCanadaOnUserProductPrice(select);\n\t\t\t\t\treturn userProductPriceListing;\n\t\t\t\t}\n\t\t\t});\t\t\t\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn(DTOFactory.getUserProductPriceDTOList(userProductPriceList));\t\n\t}\n\t\n\t@Override\n\tpublic void updateAmendingProduct(final ProductDTO productDTO) throws ServiceException {\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t    daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\n\t\t\t\tthrows DaoException {\n\t\t\t\t\tProduct product = new Product();\n\t\t\t\t\tproduct.setId(productDTO.getId());\n\t\t\t\t\tdaoManager.getTranslationDao().updateEntry(new TranslationEntry(productDTO.getNameEng()));\n\t\t\t\t\tdaoManager.getTranslationDao().updateEntry(new TranslationEntry(productDTO.getNameFr()));\n\t\t\t\t\tdaoManager.getTranslationDao().updateEntry(new TranslationEntry(productDTO.getDescriptionEng()));\n\t\t\t\t\tdaoManager.getTranslationDao().updateEntry(new TranslationEntry(productDTO.getDescriptionFr()));\n\t\t\t\t\tdaoManager.getTranslationDao().updateEntry(new TranslationEntry(productDTO.getSpecificationEng()));\n\t\t\t\t\tdaoManager.getTranslationDao().updateEntry(new TranslationEntry(productDTO.getSpecificationFr()));\n\t\t\t\t\tif(productDTO.getOtherEng().getName() != null) {\n\t\t\t\t\t\tdaoManager.getTranslationDao().updateEntry(new TranslationEntry(productDTO.getOtherEng()));\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif(productDTO.getOtherFr().getName() != null) {\n\t\t\t\t\t\tdaoManager.getTranslationDao().updateEntry(new TranslationEntry(productDTO.getOtherFr()));\n\t\t\t\t\t}\t\t\t\t\t\n\t\t\t\t\tproduct.setNote(productDTO.getNote());\n\t\t\t\t\tdaoManager.getProductDao().updateAmendingProduct(product);\n\t\t\t\t\treturn product;\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException e) {\n\t\t\tthrow (new ServiceException(e));\n\t\t}\n\t}\n\t\n\t@Override\n\tpublic Boolean existsOnAlterProductXML(final Long productId) throws ServiceException {\n\t\tBoolean outcome = false;\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\toutcome = (Boolean) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\n\t\t\t\t\tSelect select = new Select();\n\t\t\t\t\tselect.setProductId(productId);\n\t\t\t\t\treturn (daoManager.getProductDao().getAlterProductXMLByProductId(select) != null);\n\t\t\t\t}\n\t\t\t});\t\t\t\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn outcome;\n\t}\n\t\n\t@Override\n\tpublic Boolean existsOnAlterUserProductXML(final Long productId, final Long userId) throws ServiceException {\n\t\tBoolean outcome = false;\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\toutcome = (Boolean) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\n\t\t\t\t\tSelect select = new Select();\n\t\t\t\t\tselect.setUserId(userId);\n\t\t\t\t\tselect.setProductId(productId);\n\t\t\t\t\treturn (daoManager.getProductDao().getAlterUserProductXMLByProductIdAndUserId(select) != null);\n\t\t\t\t}\n\t\t\t});\t\t\t\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn outcome;\n\t}\n\t\n\t@Override\n\tpublic void updateAlterUserProductXML(final AlterUserProductXMLDTO alterUserProductXMLDTO) throws ServiceException {\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tdaoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\t\n\t\t\t\t\t\tAlterUserProductXML alterUserProductXML = new AlterUserProductXML();\n\t\t\t\t\t\talterUserProductXML.setUserId(alterUserProductXMLDTO.getUserId());\n\t\t\t\t\t\talterUserProductXML.setProductId(alterUserProductXMLDTO.getProductId());\n\t\t\t\t\t\talterUserProductXML.setPriceDiscount(alterUserProductXMLDTO.getPriceDiscount());\n\t\t\t\t\t\talterUserProductXML.setExcluded(alterUserProductXMLDTO.getExcluded());\n\t\t\t\t\t\talterUserProductXML.setShipping(alterUserProductXMLDTO.getShipping());\n\t\t\t\t\t\talterUserProductXML.setUserProductToBeExecuted(alterUserProductXMLDTO.getUserProductToBeExecuted());\n\t\t\t\t\t\talterUserProductXML.setExcludedMeaning(alterUserProductXMLDTO.getExcludedMeaning());\n\t\t\t\t\t\tdaoManager.getProductDao().updateAlterUserProductXML(alterUserProductXML);\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t}\n\t\n\t@Override\n\tpublic void updateAlterProductXML(final AlterProductXMLDTO alterProductXMLDTO) throws ServiceException {\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tdaoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\t\n\t\t\t\t\t\tAlterProductXML alterProductXML = new AlterProductXML();\n\t\t\t\t\t\talterProductXML.setProductId(alterProductXMLDTO.getProductId());\n\t\t\t\t\t\talterProductXML.setBrandId(alterProductXMLDTO.getBrandId());\n\t\t\t\t\t\talterProductXML.setCategoryId(alterProductXMLDTO.getCategoryId());\n\t\t\t\t\t\talterProductXML.setTypeId(alterProductXMLDTO.getTypeId());\n\t\t\t\t\t\talterProductXML.setImageId(alterProductXMLDTO.getImageId());\n\t\t\t\t\t\talterProductXML.setStatusId(alterProductXMLDTO.getStatusId());\n\t\t\t\t\t\talterProductXML.setNameEn(alterProductXMLDTO.getNameEn());\n\t\t\t\t\t\talterProductXML.setNameFr(alterProductXMLDTO.getNameFr());\n\t\t\t\t\t\talterProductXML.setDescriptionEn(alterProductXMLDTO.getDescriptionEn());\n\t\t\t\t\t\talterProductXML.setDescriptionFr(alterProductXMLDTO.getDescriptionFr());\n\t\t\t\t\t\talterProductXML.setSpecificationEn(alterProductXMLDTO.getSpecificationEn());\n\t\t\t\t\t\talterProductXML.setSpecificationFr(alterProductXMLDTO.getSpecificationFr());\n\t\t\t\t\t\talterProductXML.setOtherEn(alterProductXMLDTO.getOtherEn());\n\t\t\t\t\t\talterProductXML.setOtherFr(alterProductXMLDTO.getOtherFr());\n\t\t\t\t\t\talterProductXML.setWarrantyEn(alterProductXMLDTO.getWarrantyEn());\n\t\t\t\t\t\talterProductXML.setWarrantyFr(alterProductXMLDTO.getWarrantyFr());\n\t\t\t\t\t\talterProductXML.setDimensions(alterProductXMLDTO.getDimensions());\n\t\t\t\t\t\talterProductXML.setWeight(alterProductXMLDTO.getWeight());\n\t\t\t\t\t\talterProductXML.setModelNumber(alterProductXMLDTO.getModelNumber());\n\t\t\t\t\t\talterProductXML.setMsrp(alterProductXMLDTO.getMsrp());\n\t\t\t\t\t\talterProductXML.setShipping(alterProductXMLDTO.getShipping());\n\t\t\t\t\t\talterProductXML.setProductToBeExecuted(alterProductXMLDTO.getProductToBeExecuted());\n\t\t\t\t\t\tdaoManager.getProductDao().updateAlterProductXML(alterProductXML);\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\t\t\n\t}\t\n\t\n\t@Override\n\tpublic Long createAlterUserProductXML(final AlterUserProductXMLDTO alterUserProductXMLDTO) throws ServiceException {\n\t\tAlterUserProductXML alterUserProductXMLResult = new AlterUserProductXML();\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\talterUserProductXMLResult = (AlterUserProductXML) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\t\t\t\t\t\n\t\t\t\t\tAlterUserProductXML alterUserProductXML = new AlterUserProductXML();\n\t\t\t\t\talterUserProductXML.setUserId(alterUserProductXMLDTO.getUserId());\n\t\t\t\t\talterUserProductXML.setProductId(alterUserProductXMLDTO.getProductId());\n\t\t\t\t\talterUserProductXML.setPriceDiscount(alterUserProductXMLDTO.getPriceDiscount());\n\t\t\t\t\talterUserProductXML.setExcluded(alterUserProductXMLDTO.getExcluded());\n\t\t\t\t\talterUserProductXML.setShipping(alterUserProductXMLDTO.getShipping());\n\t\t\t\t\talterUserProductXML.setUserProductToBeExecuted(alterUserProductXMLDTO.getUserProductToBeExecuted());\n\t\t\t\t\talterUserProductXML.setExcludedMeaning(alterUserProductXMLDTO.getExcludedMeaning());\n\t\t\t\t\tdaoManager.getProductDao().insertAlterUserProductXML(alterUserProductXML);\n\t\t\t\t\treturn alterUserProductXML;\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn alterUserProductXMLResult.getId();\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t}\n\n\t@Override\n\tpublic Long createAlterProductXML(final AlterProductXMLDTO alterProductXMLDTO) throws ServiceException {\n\t\tAlterProductXML alterProductXMLResult = new AlterProductXML();\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\talterProductXMLResult = (AlterProductXML) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\t\t\t\t\t\n\t\t\t\t\tAlterProductXML alterProductXML = new AlterProductXML();\n\t\t\t\t\talterProductXML.setProductId(alterProductXMLDTO.getProductId());\n\t\t\t\t\talterProductXML.setBrandId(alterProductXMLDTO.getBrandId());\n\t\t\t\t\talterProductXML.setCategoryId(alterProductXMLDTO.getCategoryId());\n\t\t\t\t\talterProductXML.setTypeId(alterProductXMLDTO.getTypeId());\n\t\t\t\t\talterProductXML.setImageId(alterProductXMLDTO.getImageId());\n\t\t\t\t\talterProductXML.setStatusId(alterProductXMLDTO.getStatusId());\n\t\t\t\t\talterProductXML.setNameEn(alterProductXMLDTO.getNameEn());\n\t\t\t\t\talterProductXML.setNameFr(alterProductXMLDTO.getNameFr());\n\t\t\t\t\talterProductXML.setDescriptionEn(alterProductXMLDTO.getDescriptionEn());\n\t\t\t\t\talterProductXML.setDescriptionFr(alterProductXMLDTO.getDescriptionFr());\n\t\t\t\t\talterProductXML.setSpecificationEn(alterProductXMLDTO.getSpecificationEn());\n\t\t\t\t\talterProductXML.setSpecificationFr(alterProductXMLDTO.getSpecificationFr());\n\t\t\t\t\talterProductXML.setOtherEn(alterProductXMLDTO.getOtherEn());\n\t\t\t\t\talterProductXML.setOtherFr(alterProductXMLDTO.getOtherFr());\n\t\t\t\t\talterProductXML.setWarrantyEn(alterProductXMLDTO.getWarrantyEn());\n\t\t\t\t\talterProductXML.setWarrantyFr(alterProductXMLDTO.getWarrantyFr());\n\t\t\t\t\talterProductXML.setDimensions(alterProductXMLDTO.getDimensions());\n\t\t\t\t\talterProductXML.setWeight(alterProductXMLDTO.getWeight());\n\t\t\t\t\talterProductXML.setModelNumber(alterProductXMLDTO.getModelNumber());\n\t\t\t\t\talterProductXML.setMsrp(alterProductXMLDTO.getMsrp());\n\t\t\t\t\talterProductXML.setShipping(alterProductXMLDTO.getShipping());\n\t\t\t\t\talterProductXML.setProductToBeExecuted(alterProductXMLDTO.getProductToBeExecuted());\n\t\t\t\t\tdaoManager.getProductDao().insertAlterProductXML(alterProductXML);\n\t\t\t\t\treturn alterProductXML;\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn alterProductXMLResult.getId();\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t}\n\t\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<ProductDTO> getProductsAsOfConsideredForXML() throws ServiceException {\n\t\tList<Product> productList = new ArrayList<Product>();\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tproductList = (List<Product>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\n\t\t\t\t\treturn daoManager.getProductDao().getProductsAsOfConsideredForXML();\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn(DTOFactory.getProductDTOList(productList));\n\t}\n\t\t\n\t@Override\n\tpublic AlterUserProductXMLDTO getAlterUserProductXML(final Long userId, final Long productId) throws ServiceException {\n\t\tAlterUserProductXML alterUserProductXMLResult = new AlterUserProductXML();\n\t\ttry {\t\t\t\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\talterUserProductXMLResult = (AlterUserProductXML) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\n\t\t\t\t\t\tthrows DaoException {\n\t\t\t\t\tSelect select = new Select();\n\t\t\t\t\tselect.setUserId(userId);\n\t\t\t\t\tselect.setProductId(productId);\n\t\t\t\t\treturn daoManager.getProductDao().getAlterUserProductXMLByProductIdAndUserId(select);\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn(DTOFactory.getAlterUserProductXML(alterUserProductXMLResult));\n\t}\n\t\n\t@Override\n\tpublic AlterProductXMLDTO getAlterProductXML(final Long productId) throws ServiceException {\n\t\tAlterProductXML alterProductXMLResult = new AlterProductXML();\n\t\ttry {\t\t\t\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\talterProductXMLResult = (AlterProductXML) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\n\t\t\t\t\t\tthrows DaoException {\n\t\t\t\t\tSelect select = new Select();\n\t\t\t\t\tselect.setProductId(productId);\n\t\t\t\t\treturn daoManager.getProductDao().getAlterProductXMLByProductId(select);\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn(DTOFactory.getAlterProductXML(alterProductXMLResult));\n\t}\n\t\n\t@Override\n\tpublic void closeProductConsideredForXML(final Long productId) throws ServiceException {\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tdaoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) \n\t\t\t\t\t\tthrows DaoException {\n\t\t\t\t\t\tSelect select = new Select();\n\t\t\t\t\t\tselect.setProductId(productId);\n\t\t\t\t\t\tdaoManager.getProductDao().closeProductConsideredForXML(select);\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t}\n\n\t@Override\n\tpublic void closeAlterProductXML(final Long productId) throws ServiceException {\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tdaoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) \n\t\t\t\t\t\tthrows DaoException {\n\t\t\t\t\t\tSelect select = new Select();\n\t\t\t\t\t\tselect.setProductId(productId);\n\t\t\t\t\t\tdaoManager.getProductDao().closeAlterProductXML(select);\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t}\n\n\t@Override\n\tpublic void closeAlterUserProductXML(final Long userId, final Long productId) throws ServiceException {\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tdaoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) \n\t\t\t\t\t\tthrows DaoException {\n\t\t\t\t\t\tSelect select = new Select();\n\t\t\t\t\t\tselect.setUserId(userId);\n\t\t\t\t\t\tselect.setProductId(productId);\n\t\t\t\t\t\tdaoManager.getProductDao().closeAlterUserProductXML(select);\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t}\n\t\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<ProductDTO> getWereWgtDimChangedFromProduct() throws ServiceException {\n\t\tList<Product> productList = new ArrayList<Product>();\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tproductList = (List<Product>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\n\t\t\t\t\treturn daoManager.getProductDao().getWereWgtDimChangedFromProduct();\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn(DTOFactory.getProductDTOList(productList));\n\t}\n\t\n\t@Override\n\tpublic void closeProductWereWgtDimChanged(final Long productId) throws ServiceException {\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tdaoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) \n\t\t\t\tthrows DaoException {\n\t\t\t\t\tSelect select = new Select();\n\t\t\t\t\tselect.setProductId(productId);\n\t\t\t\t\tdaoManager.getProductDao().closeProductWereWgtDimChanged(select);\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t}\n\t\n\t@Override\n\tpublic Boolean existsShippingCity(final Long productId, final Long cityId) throws ServiceException {\n\t\treturn (getShippingCity(productId, cityId) != null);\n\t}\n\t\n\t@Override\n\tpublic ShippingProvinceDTO getShippingProvince(final Long productId, final Long provinceId) throws ServiceException {\n\t\tShippingProvince shippingProvinceResult = new ShippingProvince();\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tshippingProvinceResult = (ShippingProvince) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\n\t\t\t\t\t\tthrows DaoException {\n\t\t\t\t\tSelect select = new Select();\n\t\t\t\t\tselect.setProductId(productId);\n\t\t\t\t\tselect.setProvinceId(provinceId);\n\t\t\t\t\treturn daoManager.getProductDao().getShippingProvince(select);\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn(DTOFactory.getShippingProvinceDTO(shippingProvinceResult));\n\t}\n\t\n\t@Override\n\tpublic Boolean existsShippingProvince(final Long productId, final Long provinceId) throws ServiceException {\n\t\tShippingProvinceDTO shippingProvinceDTO = getShippingProvince(productId, provinceId);\n\t\treturn (shippingProvinceDTO != null);\n\t}\n\n\t@Override\n\tpublic ShippingTotalDTO getShippingTotal(final Long productId, final Long provinceId, final Long userId) throws ServiceException {\n\t\tShippingTotal shippingTotalResult = new ShippingTotal();\n\t\ttry {\t\t\t\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tshippingTotalResult = (ShippingTotal) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\n\t\t\t\t\t\tthrows DaoException {\n\t\t\t\t\tSelect select = new Select();\n\t\t\t\t\tselect.setProductId(productId);\n\t\t\t\t\tselect.setProvinceId(provinceId);\n\t\t\t\t\tselect.setUserId(userId);\n\t\t\t\t\treturn daoManager.getProductDao().getShippingTotal(select);\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn(DTOFactory.getShippingTotalDTO(shippingTotalResult));\n\t}\n\t\n\t@Override\n\tpublic Boolean existsShippingTotal(final Long productId, final Long provinceId, final Long userId) throws ServiceException {\n\t\tShippingTotalDTO shippingTotalDTO = getShippingTotal(productId, provinceId, userId);\n\t\treturn (shippingTotalDTO != null);\n\t}\n\t\n\t@Override\n\tpublic void saveOldImageIdBeforeUpdate(final Long productId) throws ServiceException {\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tdaoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) \n\t\t\t\tthrows DaoException {\n\t\t\t\t\tSelect select = new Select();\n\t\t\t\t\tselect.setProductId(productId);\n\t\t\t\t\tdaoManager.getProductDao().saveOldImageIdBeforeUpdate(select);\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t}\n\t\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<ProductDTO> getProductBetween(final Long lower, final Long upper) throws ServiceException {\n\t\tList<Product> productList = new ArrayList<Product>();\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tproductList = (List<Product>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\n\t\t\t\t\tList<Product> productListing = new ArrayList<Product>();\t\t\t\t\t\n\t\t\t\t\tSelect select = new Select();\n\t\t\t\t\tselect.setLower(lower);\n\t\t\t\t\tselect.setUpper(upper);\t\t\t\t\n\t\t\t\t\tproductListing = daoManager.getProductDao().getProductBetween(select);\n\t\t\t\t\treturn productListing;\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn(DTOFactory.getProductDTOList(productList));\n\t}\n\t\n\t@SuppressWarnings(""unchecked"")\t\n\t@Override\t\n\tpublic List<Long> getShippingRepeats(final ProductDTO productDTO) throws ServiceException {\n\t\tList<Product> productList = new ArrayList<Product>();\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tproductList = (List<Product>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) \n\t\t\t\t\tthrows DaoException {\n\t\t\t\t\t\tProduct product = new Product();\n\t\t\t\t\t\tproduct.setId(productDTO.getId());\n\t\t\t\t\t\tproduct.setWeight(productDTO.getWeight());\n\t\t\t\t\t\tproduct.setLength(productDTO.getLarge());\n\t\t\t\t\t\tproduct.setWidth(productDTO.getWidth());\n\t\t\t\t\t\tproduct.setHeight(productDTO.getHigh());\n\t\t\t\t\t\treturn daoManager.getProductDao().getShippingRepeats(product);\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn (DTOFactory.getProductDTOLightList(productList));\t\t\t\n\t}\n\t\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<Long> getWereWgtDimChanged() throws ServiceException {\n\t\tList<Product> productList = new ArrayList<Product>();\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tproductList = (List<Product>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\n\t\t\t\t\treturn daoManager.getProductDao().getWereWgtDimChanged();\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn(DTOFactory.getProductDTOLightList(productList));\t\n\t}\n\n\t@Override\n\tpublic boolean excludeProductsByBrandAndUser(final Long brandId, final Long userId,final Boolean exclude)\n\t\t\t\t   throws ServiceException {\n\t\tboolean result=false;\t\t\n\t\ttry{\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tresult = (Boolean) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\n\t\t\t\t\treturn daoManager.getProductDao().excludeProductsByBrandAndUser(brandId, userId,exclude);\n\t\t\t\t}\n\t\t\t});\n\t\t}catch (DaoException de) {\n\t\t\ttry {\n\t\t\t\tthrow new ServiceException(de);\n\t\t\t} catch (ServiceException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\t@Override\n\tpublic boolean isUserBrandExcluded(final Long brandId, final Long userId)throws ServiceException {\n\t\t\n\t\tBoolean result=false;\t\t\n\t\ttry{\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tresult = (Boolean) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\n\t\t\t\t\treturn daoManager.getProductDao().isUserBrandExcluded(brandId, userId);\n\t\t\t\t}\n\t\t\t});\n\t\t}catch (DaoException de) {\n\t\t\ttry {\n\t\t\t\tthrow new ServiceException(de);\n\t\t\t} catch (ServiceException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\t\n\t@Override\n\tpublic boolean generatProfitByBrand(final Long brandId, final Long userId, final String percentProfit)\n\t\t\tthrows ServiceException {\n\t\tboolean result=false;\t\t\n\t\ttry{\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tresult = (Boolean) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\n\t\t\t\t\treturn daoManager.getProductDao().generatProfitByBrand(brandId, userId, percentProfit);\n\t\t\t\t}\n\t\t\t});\n\t\t}catch (DaoException de) {\n\t\t\ttry {\n\t\t\t\tthrow new ServiceException(de);\n\t\t\t} catch (ServiceException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\t\n\t@Override\n\tpublic boolean generatProfitByCategory(final Long categoryId, final Long userId, final String percentProfit)\n\t\t\tthrows ServiceException {\n\t\tboolean result=false;\t\t\n\t\ttry{\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tresult = (Boolean) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\n\t\t\t\t\treturn daoManager.getProductDao().generatProfitByCategory(categoryId, userId,percentProfit);\n\t\t\t\t}\n\t\t\t});\n\t\t}catch (DaoException de) {\n\t\t\ttry {\n\t\t\t\tthrow new ServiceException(de);\n\t\t\t} catch (ServiceException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\t\n\t@Override\n\tpublic Long nbProductActiveByBrand(final Long brandId, final Long userId)\n\t\t\tthrows ServiceException {\n\t\tLong result=1L;\t\t\n\t\ttry{\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tresult = (Long) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\n\t\t\t\t\treturn daoManager.getProductDao().nbProductActiveByBrand(brandId, userId);\n\t\t\t\t}\n\t\t\t});\n\t\t}catch (DaoException de) {\n\t\t\ttry {\n\t\t\t\tthrow new ServiceException(de);\n\t\t\t} catch (ServiceException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\t\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<ProductDTO> getAllProdcutAnyStatus() throws ServiceException{\n\t\t\n\t\tList <Product> productList = new ArrayList<Product>();\n\t\t\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tproductList = (List <Product>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\n\t\t\t\t\t\t\t\tthrows DaoException {\n\t\t\t\t\t\t\treturn daoManager.getProductDao().getAllProdcutAnyStatus();\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn(DTOFactory.getProductDTOList(productList));\n\t}\n\t\n\t@Override\n\tpublic void transferToUser(final Long from, final Long to) throws ServiceException {\t\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tdaoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\n\t\t\t\t\t\t\tthrows DaoException {\n\t\t\t\t\t\t\n\t\t\t\t\t\tSelect selectFrom = new Select();\n\t\t\t\t\t\tselectFrom.setFrom(from);\n\t\t\t\t\t\tselectFrom.setTo(to);\n\t\t\t\t\t\tselectFrom.setUserId(from);\t\t\t\t\t\n\t\t\t\t\t\tSelect selectToUserProvincePopulation = new Select();\n\t\t\t\t\t\tselectToUserProvincePopulation.setFrom(from);\n\t\t\t\t\t\tselectToUserProvincePopulation.setTo(to);\n\t\t\t\t\t\tselectToUserProvincePopulation.setUserId(to);\t\t\t\t\n\t\t\t\t\t\tList<UserProvincePopulation> userProvincePopulationListFrom = daoManager.getProductDao().getUserProvincePopulationByUserId(selectFrom);\n\t\t\t\t\t\tUserProvincePopulation userProvincePopulationTo = null;\n\t\t\t\t\t\tif (userProvincePopulationListFrom != null && userProvincePopulationListFrom.size() > 0) {\n\t\t\t\t\t\t\tfor (UserProvincePopulation userProvincePopulationFrom : userProvincePopulationListFrom) { \n\t\t\t\t\t\t\t\tif (userProvincePopulationFrom != null) {\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tselectToUserProvincePopulation.setProvinceId(userProvincePopulationFrom.getProvinceId());\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tuserProvincePopulationTo = daoManager.getProductDao().getUserProvincePopulation(selectToUserProvincePopulation);\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tuserProvincePopulationFrom.setUserId(to);\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tif (userProvincePopulationTo != null) {\n\t\t\t\t\t\t\t\t\t\tuserProvincePopulationFrom.setId(userProvincePopulationTo.getId());\n\t\t\t\t\t\t\t\t\t\tdaoManager.getProductDao().updateUserProvincePopulation(userProvincePopulationFrom);\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tdaoManager.getProductDao().insertUserProvincePopulation(userProvincePopulationFrom);\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tuserProvincePopulationListFrom = null;\n\t\t\t\t\t\tuserProvincePopulationTo = null;\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\tSelect selectToShippingTotal = new Select();\n\t\t\t\t\t\tselectToShippingTotal.setFrom(from);\n\t\t\t\t\t\tselectToShippingTotal.setTo(to);\n\t\t\t\t\t\tselectToShippingTotal.setUserId(to);\t\t\t\t\t\t\n\t\t\t\t\t\tList<ShippingTotal> shippingTotalListFrom = daoManager.getProductDao().getShippingTotalListByUserId(selectFrom);\t\t\t\t\t\t\n\t\t\t\t\t\tShippingTotal shippingTotalTo = null;\t\t\t\t\t\t\n\t\t\t\t\t\tif (shippingTotalListFrom != null && shippingTotalListFrom.size() > 0) {\n\t\t\t\t\t\t\tfor (ShippingTotal shippingTotalFrom : shippingTotalListFrom) {\n\t\t\t\t\t\t\t\tif (shippingTotalFrom != null) {\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tselectToShippingTotal.setProductId(shippingTotalFrom.getProductId());\n\t\t\t\t\t\t\t\t\tselectToShippingTotal.setProvinceId(shippingTotalFrom.getProvinceId());\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tshippingTotalTo = daoManager.getProductDao().getShippingTotal(selectToShippingTotal);\n\t\t\t\t\t\t\t\t\tshippingTotalFrom.setUserId(to);\n\t\t\t\t\t\t\t\t\tif (shippingTotalTo != null) {\n\t\t\t\t\t\t\t\t\t\tshippingTotalFrom.setId(shippingTotalTo.getId());\n\t\t\t\t\t\t\t\t\t\tdaoManager.getProductDao().updateShippingTotal(shippingTotalFrom);\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tdaoManager.getProductDao().insertShippingTotal(shippingTotalFrom);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tshippingTotalListFrom = null;\n\t\t\t\t\t\tshippingTotalTo = null;\n\t\t\t\t\t\tSelect selectToUserProductPrice = new Select();\n\t\t\t\t\t\tselectToUserProductPrice.setFrom(from);\n\t\t\t\t\t\tselectToUserProductPrice.setTo(to);\n\t\t\t\t\t\tselectToUserProductPrice.setUserId(to);\t\t\t\n\t\t\t\t\t\tList<UserProductPrice> userProductPriceListFrom = daoManager.getProductDao().getUserProductPriceByUserId(selectFrom);\n\t\t\t\t\t\tUserProductPrice userProductPriceTo = null;\t\t\t\t\t\t\n\t\t\t\t\t\tif (userProductPriceListFrom != null && userProductPriceListFrom.size() > 0) {\n\t\t\t\t\t\t\tfor (UserProductPrice userProductPriceFrom : userProductPriceListFrom) { \n\t\t\t\t\t\t\t\tif (userProductPriceFrom != null) {\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tselectToUserProductPrice.setProductId(userProductPriceFrom.getProductId());\n\t\t\t\t\t\t\t\t\tuserProductPriceTo = daoManager.getProductDao().getUserProductPrice(selectToUserProductPrice);\n\t\t\t\t\t\t\t\t\tuserProductPriceFrom.setUserId(to);\n\t\t\t\t\t\t\t\t\tif (userProductPriceTo != null) {\n\t\t\t\t\t\t\t\t\t\tuserProductPriceFrom.setId(userProductPriceTo.getId());\n\t\t\t\t\t\t\t\t\t\tdaoManager.getProductDao().updateUserProductPrice(userProductPriceFrom);\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tdaoManager.getProductDao().insertUserProductPriceShipping(userProductPriceFrom);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tuserProductPriceListFrom = null;\n\t\t\t\t\t\tuserProductPriceTo = null;\n\t\t\t\t\t\tselectFrom = null;\n\t\t\t\t\t\tselectToUserProvincePopulation = null;\n\t\t\t\t\t\tselectToShippingTotal = null;\n\t\t\t\t\t\tselectToUserProductPrice = null;\t\t\t\t\t\t\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\t\t\n\t}\n/*\n\t@Override\n\tpublic void transferToUserByCreationDate(final Long from, final Long to, final Date updateDate) throws ServiceException {\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tdaoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\n\t\t\t\t\t\t\tthrows DaoException {\n\t\t\t\t\t\t\n\t\t\t\t\t\tSelect selectFrom = new Select();\n\t\t\t\t\t\tselectFrom.setFrom(from);\n\t\t\t\t\t\tselectFrom.setTo(to);\n\t\t\t\t\t\tselectFrom.setUserId(from);\n\t\t\t\t\t\tselectFrom.setUpdateDate(updateDate);\n\t\t\t\t\t\t\n\t\t\t\t\t\tSelect selectToShippingTotal = new Select();\n\t\t\t\t\t\tselectToShippingTotal.setFrom(from);\n\t\t\t\t\t\tselectToShippingTotal.setTo(to);\n\t\t\t\t\t\tselectToShippingTotal.setUserId(to);\n\t\t\t\t\t\tList<ShippingTotal> shippingTotalListFrom = daoManager.getProductDao().getShippingTotalListByUserId(selectFrom);\t\t\t\t\t\n\t\t\t\t\t\tShippingTotal shippingTotalTo = null;\t\t\t\t\t\t\n\t\t\t\t\t\tif (shippingTotalListFrom != null && shippingTotalListFrom.size() > 0) {\n\t\t\t\t\t\t\tfor (ShippingTotal shippingTotalFrom : shippingTotalListFrom) {\n\t\t\t\t\t\t\t\tif (shippingTotalFrom != null) {\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tselectToShippingTotal.setProductId(shippingTotalFrom.getProductId());\n\t\t\t\t\t\t\t\t\tselectToShippingTotal.setProvinceId(shippingTotalFrom.getProvinceId());\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tshippingTotalTo = daoManager.getProductDao().getShippingTotal(selectToShippingTotal);\n\t\t\t\t\t\t\t\t\tshippingTotalFrom.setUserId(to);\n\t\t\t\t\t\t\t\t\tif (shippingTotalTo != null) {\n\t\t\t\t\t\t\t\t\t\tshippingTotalFrom.setId(shippingTotalTo.getId());\n\t\t\t\t\t\t\t\t\t\tdaoManager.getProductDao().updateShippingTotal(shippingTotalFrom);\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tdaoManager.getProductDao().insertShippingTotal(shippingTotalFrom);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tshippingTotalListFrom = null;\n\t\t\t\t\t\tshippingTotalTo = null;\n\t\t\t\t\t\tSelect selectToUserProductPrice = new Select();\n\t\t\t\t\t\tselectToUserProductPrice.setFrom(from);\n\t\t\t\t\t\tselectToUserProductPrice.setTo(to);\n\t\t\t\t\t\tselectToUserProductPrice.setUserId(to);\n\t\t\t\t\t\tList<UserProductPrice> userProductPriceListFrom = daoManager.getProductDao().getUserProductPriceByUserId(selectFrom);\n\t\t\t\t\t\tUserProductPrice userProductPriceTo = null;\t\t\t\t\t\t\n\t\t\t\t\t\tif (userProductPriceListFrom != null && userProductPriceListFrom.size() > 0) {\n\t\t\t\t\t\t\tfor (UserProductPrice userProductPriceFrom : userProductPriceListFrom) { \n\t\t\t\t\t\t\t\tif (userProductPriceFrom != null) {\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tselectToUserProductPrice.setProductId(userProductPriceFrom.getProductId());\n\t\t\t\t\t\t\t\t\tuserProductPriceTo = daoManager.getProductDao().getUserProductPrice(selectToUserProductPrice);\n\t\t\t\t\t\t\t\t\tuserProductPriceFrom.setUserId(to);\n\t\t\t\t\t\t\t\t\tif (userProductPriceTo != null) {\n\t\t\t\t\t\t\t\t\t\tuserProductPriceFrom.setId(userProductPriceTo.getId());\n\t\t\t\t\t\t\t\t\t\tdaoManager.getProductDao().updateUserProductPrice(userProductPriceFrom);\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tdaoManager.getProductDao().insertUserProductPriceShipping(userProductPriceFrom);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tuserProductPriceListFrom = null;\n\t\t\t\t\t\tuserProductPriceTo = null;\n\t\t\t\t\t\tselectFrom = null;\n\t\t\t\t\t\tselectToShippingTotal = null;\n\t\t\t\t\t\tselectToUserProductPrice = null;\t\t\t\t\t\t\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t}\n\t\n\t*/\n\n\t@Override\n\tpublic void transferToUserByCreationDate(final Long from, final Long to,final Long managerId,final Date updateDate) throws ServiceException {\n\n\t\tboolean result=false;\n\t\ttry{\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tresult = (Boolean) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\n\t\t\t\t\treturn daoManager.getProductDao().transferToUserByCreationDate(from,to,managerId,updateDate);\n\t\t\t\t}\n\t\t\t});\n\t\t}catch (DaoException de) {\n\t\t\ttry {\n\t\t\t\tthrow new ServiceException(de);\n\t\t\t} catch (ServiceException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\n\t}\n\t\n\n\t@Override\n\tpublic void transferSQLtheUserToNewTemplate(final Long from, final Long to) throws ServiceException {\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tdaoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\n\t\t\t\t\t\t\tthrows DaoException {\n\t\t\t\t\t\tSelect select = new Select();\n\t\t\t\t\t\tselect.setFrom(from);\n\t\t\t\t\t\tselect.setTo(to);\n\t\t\t\t\t\tdaoManager.getProductDao().transferUserOnProfile(select);\n\t\t\t\t\t\tdaoManager.getProductDao().transferUserOnUserProvincePopulation(select);\n\t\t\t\t\t\tdaoManager.getProductDao().transferUserOnShippingTotal(select);\n\t\t\t\t\t\tdaoManager.getProductDao().transferUserOnUserProductPrice(select);\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t}\n\n\n\t@Override\n\tpublic Long isGroupProductID(final Long productId) throws ServiceException {\n\t\tLong count= 0L; \n\t\ttry{\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tcount = (Long) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\n\t\t\t\t\treturn daoManager.getProductDao().isGroupProductID(productId);\n\t\t\t\t}\n\t\t\t});\n\t\t}catch (DaoException de) {\n\t\t\ttry {\n\t\t\t\tthrow new ServiceException(de);\n\t\t\t} catch (ServiceException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\t\t\n\t\n\t/**----------------------------------------------------------\n\t *CREATE XLS FILE FROM THE LIST PRODUCT CLASSIFICATION*\n\t  -----------------------------------------------------------*/\n\t@Override\n\tpublic void generateAdminXLS(List<ProductDTO> ProductListDTO,String productAdminDataFolder){\n\t\tfinal String sheetName = ""Sheet1"";\n\t\tfinal int ROW_TO_BEGIN=1;\n\t\t//COLUMNS NUMBER\n\t\tfinal int COL_PRODUCT_ID=1;\n\t\tfinal int COL_LS_PRODUCT_ID=2;\n\t\tfinal int COL_CATEGORY_NAME=3;\n\t\tfinal int COL_BRAND_NAME=4;\n\t\tfinal int COL_MSRP=5;\n\t\tfinal int COL_OUT_COST=6;\n\t\tfinal int COL_PRICE=7;\n\t\tfinal int COL_PROFIT=8;\n\t\tfinal int COL_DISCOUNT=9;\n\t\tfinal int COL_QT_3MONTHS=10;\n\t\tfinal int COL_CLASSIFICATION=11;\n\t\tfinal int COL_TITLE=12;\n\t\t//COLUMNS Data\n\t\tLong PRODUCT_ID=null;\n\t\tString LS_PRODUCT_ID;\n\t\tString CATEGORY_NAME;\n\t\tString BRAND_NAME;\n\t\tString MSRP;\n\t\tString OUT_COST;\n\t\tString PRICE;\n\t\tDouble PROFIT;\n\t\tDouble DISCOUNT;\n\t\tDouble QT_3MONTHS;\n\t\tDouble CLASSIFICATION;\n\t\tString TITLE="""";\n\t\tint row = 0;\n\t\ttry {\n\t\t\tFile OldProductClassificat=new File(productAdminDataFolder+""productClassificat.xls"");\n\t\t\tif(OldProductClassificat.exists())OldProductClassificat.delete();\n\t\t\tWorkbook existingWorkbook = Workbook.getWorkbook(new File(productAdminDataFolder+""productClassificatTemplate.xls""));\n\t\t\tWritableWorkbook workbookCopy = Workbook.createWorkbook(new File(productAdminDataFolder+""productClassificat.xls""), existingWorkbook);\n\t\t\tWritableSheet sheetToEdit = workbookCopy.getSheet(sheetName);\n\n\t\t\tint heightInPoints = 27*27;\n\n\t\t\t// Create cell font and format\n\t\t\tWritableFont cellFont = new WritableFont(WritableFont.TIMES, 12);\n\t\t\tcellFont.setColour(Colour.BLACK);\n\n\t\t\tWritableCellFormat cellFormatNormal = new WritableCellFormat(cellFont);\n\t\t\t//cellFormatOrange.setBackground(Colour.ORANGE);\n\t\t\tcellFormatNormal.setBackground(Colour.LIGHT_TURQUOISE);\n\t\t\tcellFormatNormal.setVerticalAlignment(VerticalAlignment.CENTRE);\n\t\t\tcellFormatNormal.setAlignment(Alignment.CENTRE);\n\t\t\tcellFormatNormal.setWrap(true);\n\t\t\tcellFormatNormal.setBorder(Border.ALL, BorderLineStyle.THIN);\n\n\t\t\t//WritableFont cellFont = new WritableFont(WritableFont.TIMES, 12);\n\t\t\tcellFont.setColour(Colour.BLACK);\n\t\t\tWritableCellFormat cellFormatWhite = new WritableCellFormat(cellFont);\n\t\t\tcellFormatWhite.setBackground(Colour.WHITE);\n\t\t\tcellFormatWhite.setVerticalAlignment(VerticalAlignment.CENTRE);\n\t\t\tcellFormatWhite.setAlignment(Alignment.CENTRE);\n\t\t\tcellFormatWhite.setWrap(true);\n\t\t\tcellFormatWhite.setBorder(Border.ALL, BorderLineStyle.THIN);\n\t\t\tWritableCellFormat cellFormat=null;\n\t\t\t\n\t\t\t//CellS\n\t\t\tWritableCell cellPRODUCT_ID=null;\n\t\t\tWritableCell cellLS_PRODUCT_ID=null;\n\t\t\tWritableCell cellCATEGORY_NAME=null;\n\t\t\tWritableCell cellBRAND_NAME=null;\n\t\t\tWritableCell cellMSRP=null;\n\t\t\tWritableCell cellOUT_COST=null;\n\t\t\tWritableCell cellPRICE=null;\n\t\t\tWritableCell cellPROFIT=null;\n\t\t\tWritableCell cellDISCOUNT=null;\n\t\t\tWritableCell cellCLASSIFICATION=null;\n\t\t\tWritableCell cellTITLE=null;\n\t\t\tWritableCell cellQT_3MONTHS=null;\n\t\t\t\n\t\t\t//LABELS\n\t\t\tLabel labelPRODUCT_ID=null;\n\t\t\tLabel labelLS_PRODUCT_ID=null;\n\t\t\tLabel labelCATEGORY_NAME=null;\n\t\t\tLabel labelBRAND_NAME=null;\n\t\t\tLabel labelMSRP=null;\n\t\t\tLabel labelOUT_COST=null;\n\t\t\tLabel labelPRICE=null;\n\t\t\tLabel labelPROFIT=null;\n\t\t\tLabel labelDISCOUNT=null;\n\t\t\tLabel labelQT_3MONTHS=null;\n\t\t\tLabel labelCLASSIFICATION=null;\n\t\t\tLabel labelTITLE=null;\n\n\t\t\t//START FROM ROW_TO_BEGIN\n\t\t\trow = ROW_TO_BEGIN;\n\t\t\tint orderIndex=0;\n\t\t\tint pair=0;\n\t\t\tfor (ProductDTO productDTO : ProductListDTO) {\n\n\t\t\t\torderIndex++;\n\t\t\t\tpair=orderIndex%2;\n\t\t\t\tswitch (pair) {\n\t\t\t\tcase 0:\n\t\t\t\t\tcellFormat=cellFormatWhite;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 1:\n\t\t\t\t\tcellFormat=cellFormatNormal;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tPRODUCT_ID=null;\n\t\t\t\tLS_PRODUCT_ID="""";\n\t\t\t\tCATEGORY_NAME="""";\n\t\t\t\tBRAND_NAME="""";\n\t\t\t\tMSRP="""";\n\t\t\t\tOUT_COST="""";\n\t\t\t\tPRICE="""";\n\t\t\t\tPROFIT=0D;\n\t\t\t\tDISCOUNT=0D;\n\t\t\t\tQT_3MONTHS=0D;\n\t\t\t\tCLASSIFICATION=0D;\n\t\t\t\tTITLE="""";\n\n\t\t\t\t//1:  COL_PRODUCT_ID\n\t\t\t\tPRODUCT_ID = productDTO.getId();\n\t\t\t\tlabelPRODUCT_ID = new Label(COL_PRODUCT_ID-1, row, PRODUCT_ID.toString(),cellFormat);\n\t\t\t\tcellPRODUCT_ID = (WritableCell) labelPRODUCT_ID;\n\t\t\t\tsheetToEdit.addCell(cellPRODUCT_ID);\n\t\t\t\t\n\t\t\t\t//2:  COL_LS_PRODUCT_ID\n\t\t\t\tif (productDTO.getLoyaltyProductId() != null)LS_PRODUCT_ID = productDTO.getLoyaltyProductId();\n\t\t\t\tlabelLS_PRODUCT_ID = new Label(COL_LS_PRODUCT_ID-1, row, LS_PRODUCT_ID,cellFormat);\n\t\t\t\tcellLS_PRODUCT_ID = (WritableCell) labelLS_PRODUCT_ID;\n\t\t\t\tsheetToEdit.addCell(cellLS_PRODUCT_ID);\n\t\t\t\t\n\t\t\t\t//3:  COL_CATEGORY_NAME\n\t\t\t\tif (productDTO.getCategory()!=null && productDTO.getCategory().getName() != null)CATEGORY_NAME = productDTO.getCategory().getName();\n\t\t\t\tlabelCATEGORY_NAME = new Label(COL_CATEGORY_NAME-1, row, CATEGORY_NAME,cellFormat);\n\t\t\t\tcellCATEGORY_NAME = (WritableCell) labelCATEGORY_NAME;\n\t\t\t\tsheetToEdit.addCell(cellCATEGORY_NAME);\n\n\t\t\t\t//4:  COL_BRAND_NAME\n\t\t\t\tif (productDTO.getBrand()!=null && productDTO.getBrand().getName() != null)BRAND_NAME = productDTO.getBrand().getName();\n\t\t\t\tlabelBRAND_NAME = new Label(COL_BRAND_NAME-1, row, BRAND_NAME,cellFormat);\n\t\t\t\tcellBRAND_NAME = (WritableCell) labelBRAND_NAME;\n\t\t\t\tsheetToEdit.addCell(cellBRAND_NAME);\n\n\t\t\t\t//5:  COL_MSRP\n\t\t\t\tif (productDTO.getMsrp() != null)MSRP = productDTO.getMsrp();\n\t\t\t\tlabelMSRP= new Label(COL_MSRP-1, row, MSRP,cellFormat);\n\t\t\t\tcellMSRP = (WritableCell) labelMSRP;\n\t\t\t\tsheetToEdit.addCell(cellMSRP);\n\n\t\t\t\t//6:  COL_OUT_COST\n\t\t\t\tif (productDTO.getCost() != null)OUT_COST = productDTO.getCost();\n\t\t\t\tlabelOUT_COST= new Label(COL_OUT_COST-1, row, OUT_COST,cellFormat);\n\t\t\t\tcellOUT_COST = (WritableCell) labelOUT_COST;\n\t\t\t\tsheetToEdit.addCell(cellOUT_COST);\n\t\t\t\t\n\t\t\t\t//7:  COL_PRICE\n\t\t\t\tif (productDTO.getPriceProduct() != null)PRICE = productDTO.getPriceProduct();\n\t\t\t\tlabelPRICE= new Label(COL_PRICE-1, row, PRICE,cellFormat);\n\t\t\t\tcellPRICE = (WritableCell) labelPRICE;\n\t\t\t\tsheetToEdit.addCell(cellPRICE);\n\t\t\t\t\n\t\t\t\t//8:  COL_PROFIT\n\t\t\t\tif (productDTO.getProfit() != null)PROFIT = productDTO.getProfit();\n\t\t\t\tlabelPROFIT= new Label(COL_PROFIT-1, row, PROFIT.toString()+""%"",cellFormat);\n\t\t\t\tcellPROFIT = (WritableCell) labelPROFIT;\n\t\t\t\tsheetToEdit.addCell(cellPROFIT);\n\n\t\t\t\t//9:  COL_DISCOUNT\n\t\t\t\tif (productDTO.getDiscount() != null)DISCOUNT = productDTO.getDiscount();\n\t\t\t\tlabelDISCOUNT= new Label(COL_DISCOUNT-1, row, DISCOUNT.toString(),cellFormat);\n\t\t\t\tcellDISCOUNT = (WritableCell) labelDISCOUNT;\n\t\t\t\tsheetToEdit.addCell(cellDISCOUNT);\n\t\t\t\t\n\t\t\t\t//10:COL_QT_3MONTHS\n\t\t\t\tif (productDTO.getQtSold() != null)QT_3MONTHS = (double) Math.round(productDTO.getQtSold() * 100) / 100;;\n\t\t\t\tlabelQT_3MONTHS= new Label(COL_QT_3MONTHS-1, row, QT_3MONTHS.toString(),cellFormat);\n\t\t\t\tcellQT_3MONTHS = (WritableCell) labelQT_3MONTHS;\n\t\t\t\tsheetToEdit.addCell(cellQT_3MONTHS);\n\t\t\t\t\n\t\t\t\t//11:  COL_CLASSIFICATION\n\t\t\t\tif (productDTO.getClassification() != null)CLASSIFICATION = (double) Math.round(productDTO.getClassification() * 100) / 100;;\n\t\t\t\tlabelCLASSIFICATION= new Label(COL_CLASSIFICATION-1, row, CLASSIFICATION.toString(),cellFormat);\n\t\t\t\tcellCLASSIFICATION = (WritableCell) labelCLASSIFICATION;\n\t\t\t\tsheetToEdit.addCell(cellCLASSIFICATION);\n\t\t\t\t\n\t\t\t\t//12: COL_TITLE\n\t\t\t\tif (productDTO.getDescriptiProduct()!= null)TITLE = productDTO.getDescriptiProduct();\n\t\t\t\tlabelTITLE= new Label(COL_TITLE-1, row, TITLE,cellFormat);\n\t\t\t\tcellTITLE = (WritableCell) labelTITLE;\n\t\t\t\tsheetToEdit.addCell(cellTITLE);\n\t\t\t\t//change height row 32px\n\t\t\t\tsheetToEdit.setRowView(row,heightInPoints);\n\t\t\t\t++row;\n\t\t\t}\n\t\t\tworkbookCopy.write();\n\t\t\tworkbookCopy.close();\n\t\t\texistingWorkbook.close();\n\n\t\t} catch (Exception x) {\n\t\t\tx.printStackTrace();\n\t\t}\n\t}\n\t\n\t\n\t/**----------------------------------------------------------\n\t * getBoxByProductId*\n\t  -----------------------------------------------------------*/\n\t@Override\n\tpublic BoxDTO getBoxByProductId(final Long productId)\n\t\t\tthrows ServiceException {\n\t\tBox boxResult = new Box();\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tboxResult = (Box) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\n\t\t\t\t\t\tthrows DaoException {\n\t\t\t\t\tBox box = new Box();\n\t\t\t\t\tbox = daoManager.getProductDao().getBoxByProductId(productId);\n\t\t\t\t\treturn box;\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn (DTOFactory.getBoxDTO(boxResult));\n\t}\n\t\n\n\t\n\t/**----------------------------------------------------------\n\t * insertBoxAndProductBox*\n\t  -----------------------------------------------------------*/\t\n\t\t@Override\n\tpublic Long insertBoxAndProductBox(final BoxDTO boxDTO)\n\t\t\tthrows ServiceException {\n\t\tBox boxResult = new Box();\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tboxResult = (Box) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\n\t\t\t\t\t\tthrows DaoException {\n\n\t\t\t\t\tBox box = new Box();\n\t\t\t\t\tbox.setProductId(boxDTO.getProductId());\n\t\t\t\t\tbox.setLength(boxDTO.getLength());\n\t\t\t\t\tbox.setWidth(boxDTO.getWidth());\n\t\t\t\t\tbox.setHeight(boxDTO.getHeight());\n\t\t\t\t\tbox.setTotalWeight(boxDTO.getTotalWeight());\n\t\t\t\t\tbox.setStatusId(boxDTO.getStatusId());\n\n\t\t\t\t\tdaoManager.getProductDao().insertBoxAndProductBox(box);\n\n\t\t\t\t\treturn box;\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn (boxResult.getId());\n\n\t\t} catch (DaoException e) {\n\t\t\tthrow (new ServiceException(e));\n\t\t}\n\t}\n\t\n\t\t\n\t/**----------------------------------------------------------\n\t *updateProductBox*\n\t  -----------------------------------------------------------*/\t\n\t\t@Override\n\tpublic void updateProductBox(final BoxDTO boxDTO)\n\t\t\tthrows ServiceException {\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tdaoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\n\t\t\t\t\t\tthrows DaoException {\n\n\t\t\t\t\tBox box = new Box();\n\t\t\t\t\tbox.setId(boxDTO.getId());\n\t\t\t\t\tbox.setProductId(boxDTO.getProductId());\n\t\t\t\t\tbox.setLength(boxDTO.getLength());\n\t\t\t\t\tbox.setWidth(boxDTO.getWidth());\n\t\t\t\t\tbox.setHeight(boxDTO.getHeight());\n\t\t\t\t\tbox.setTotalWeight(boxDTO.getTotalWeight());\n\t\t\t\t\tbox.setCreationDate(boxDTO.getCreationDate());\n\t\t\t\t\tbox.setStatusId(boxDTO.getStatusId());\n\n\t\t\t\t\tdaoManager.getProductDao().updateProductBox(box);\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t}\n\t\t\t\n\t/**----------------------------------------------------------\n\t *updateProductBoxIfCpNotVerified*\n\t  -----------------------------------------------------------*/\t\n\t@Override\n\tpublic void updateProductBoxIfCpNotVerified(final BoxDTO boxDTO)\n\t\t\tthrows ServiceException {\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tdaoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\n\t\t\t\t\t\tthrows DaoException {\n\n\t\t\t\t\tBox box = new Box();\n\t\t\t\t\tbox.setId(boxDTO.getId());\n\t\t\t\t\tbox.setProductId(boxDTO.getProductId());\n\t\t\t\t\tbox.setLength(boxDTO.getLength());\n\t\t\t\t\tbox.setWidth(boxDTO.getWidth());\n\t\t\t\t\tbox.setHeight(boxDTO.getHeight());\n\t\t\t\t\tbox.setTotalWeight(boxDTO.getTotalWeight());\n\t\t\t\t\tbox.setCreationDate(boxDTO.getCreationDate());\n\t\t\t\t\tbox.setStatusId(boxDTO.getStatusId());\n\n\t\t\t\t\tdaoManager.getProductDao().updateProductBoxIfCpNotVerified(box);\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t}\n\t\n\t\n\t/**----------------------------------------------------------\n\t *UPDATE TABLE STOCK IN DATABASES FROM XLS FILE*\n\t  -----------------------------------------------------------*/\n\t@Override\n\tpublic List<ProductDTO> listStockFromXLS(String userAdminLogin,String destFileStockXLS)throws Exception{\n\t\tString errorReport="""";\n\t\t//variable indicating the numbers of columns in the XLS file\n\t\tint ROW_TO_START = 1;\n\t\tfinal int COL_LS_PRODUCT_ID=1;\n\t\tfinal int COL_STOCK=2;\n\n\t\tString  strSTOCK="""";\n\n\t\t//Values of cells\n\t\tString  LS_PRODUCT_ID="""";\n\t\tDouble STOCK = null;\n\n\t\t//Cells\n\t\tCell cellLS_PRODUCT_ID= null;\n\t\tCell cellSTOCK= null;\n\t\tWorkbook existingWorkbook = Workbook.getWorkbook(new File(destFileStockXLS+""stock.xls""));\n\t\tSheet sheetToRead=existingWorkbook.getSheet(0);\n\t\tint ROW_MAX = sheetToRead.getRows();\n\t\tList<ProductDTO> listStock = new ArrayList<ProductDTO>() ;\n\t\tProductDTO productDTO;\n\t\tfor(int row=ROW_TO_START; row< ROW_MAX;row++) {\n\n\t\t\t//--------------- 1: LS_PRODUCT_ID\n\t\t\tcellLS_PRODUCT_ID = sheetToRead.getCell(COL_LS_PRODUCT_ID-1, row);\t\t\t\n\t\t\tif(cellLS_PRODUCT_ID!=null)LS_PRODUCT_ID = cellLS_PRODUCT_ID.getContents();\n\t\t\tif(LS_PRODUCT_ID==null || LS_PRODUCT_ID.equals("""")){\n\t\t\t\terrorReport+="" ""+(row+1)+"" ,LS_PRODUCT_ID:""+LS_PRODUCT_ID+"" ,|---->dosen't exist \\n"";\n\t\t\t}else{\n\t\t\t\tint index=LS_PRODUCT_ID.indexOf(""/"");\n\t\t\t\tif(index>0)LS_PRODUCT_ID=LS_PRODUCT_ID.substring(0, index);\n\n\t\t\t}\n\t\t\t//--------------- 2:STOCK\n\t\t\tcellSTOCK = sheetToRead.getCell(COL_STOCK-1, row);\t\t\t\n\t\t\tif(cellSTOCK!=null){\n\t\t\t\tstrSTOCK = cellSTOCK.getContents();\n\t\t\t\tstrSTOCK=strSTOCK.replaceAll("" "", """");\n\t\t\t\tif(strSTOCK!=null && !strSTOCK.equals("""")){\n\t\t\t\t\tint index=strSTOCK.indexOf("","");\n\t\t\t\t\tif(index>=0){\n\t\t\t\t\t\tString strSTOCK1=strSTOCK.substring(0, index);\n\t\t\t\t\t\tString strSTOCK2= strSTOCK.substring(index+1, strSTOCK.length());\n\t\t\t\t\t\tstrSTOCK=strSTOCK1+"".""+strSTOCK2;\n\t\t\t\t\t}\n\t\t\t\t}else errorReport+="" ""+(row+1)+"" ,STOCK:""+strSTOCK+"" ,|---->is null \\n"";\n\t\t\t\tSTOCK=null;\n\t\t\t\ttry {\n\t\t\t\t\tSTOCK = Double.parseDouble(strSTOCK);\n\t\t\t\t}\n\t\t\t\tcatch (Exception pe) {\n\t\t\t\t\tSTOCK=null;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif((LS_PRODUCT_ID==null ||LS_PRODUCT_ID.equals("""")&&(strSTOCK==null ||strSTOCK.equals("""")))){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif(LS_PRODUCT_ID!=null){\n\t\t\t\t// Clean LS_PRODUCT_ID\n\t\t\t\tLS_PRODUCT_ID = LS_PRODUCT_ID.replaceAll("" SELECT "",""""); \n\t\t\t\tLS_PRODUCT_ID = LS_PRODUCT_ID.replaceAll(""\\\\s"","""");\n\t\t\t\tLS_PRODUCT_ID=LS_PRODUCT_ID.replaceAll(""\\'"","""");\n\t\t\t\tLS_PRODUCT_ID=LS_PRODUCT_ID.replaceAll(""\\"""","""");\n\t\t\t\tLS_PRODUCT_ID=LS_PRODUCT_ID.replaceAll("";"","""");\n\t\t\t\tLS_PRODUCT_ID=LS_PRODUCT_ID.replaceAll("","","""");\n\t\t\t}\n\t\t\tproductDTO = new ProductDTO();\n\t\t\tproductDTO.setLoyaltyProductId(LS_PRODUCT_ID);\n\t\t\tproductDTO.setStock(STOCK);\n\t\t\tlistStock.add(productDTO);\n\n\t\t}\n\t\treturn listStock;\n\n\t}\n\n\t// Update Stock\n\t@Override\n\tpublic boolean updateStock(final List<ProductDTO> listStock) throws ServiceException {\n\t\tboolean result=false;\n\t\tfinal List<Product>listProduct=DTOFactory.getProductListFromProductListDTO(listStock);\n\t\ttry{\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tresult = (Boolean) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\n\t\t\t\t\treturn daoManager.getProductDao().updateStock(listProduct);\n\t\t\t\t}\n\t\t\t});\n\t\t}catch (DaoException de) {\n\t\t\ttry {\n\t\t\t\tthrow new ServiceException(de);\n\t\t\t} catch (ServiceException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\t// calculate Shipping Rate using shipping_city\t\n\t@Override\n\tpublic boolean calculateShippingRate(final Long userId,final Long productId) throws ServiceException {\n\t\tboolean result=false;\n\t\ttry{\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tresult = (Boolean) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\n\t\t\t\t\treturn daoManager.getProductDao().calculateShippingRate(userId,productId) ; \n\t\t\t\t}\n\t\t\t});\n\t\t}catch (DaoException de) {\n\t\t\ttry {\n\t\t\t\tthrow new ServiceException(de);\n\t\t\t} catch (ServiceException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\t\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<ProductDTO> getProductNotFound(List<ProductDTO>listProductDTO) throws ServiceException{\n\t\tfinal List <Product> productList = DTOFactory.getProductListFromProductListDTO(listProductDTO);\n\t\tList <Product> productListResult;\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tproductListResult = (List <Product>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\n\t\t\t\t\t\t\t\tthrows DaoException {\n\t\t\t\t\t\t\treturn daoManager.getProductDao().getProductNotFound(productList);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn(DTOFactory.getProductListDTOFromProductList(productListResult));\n\t}\n\t\n\n\t/**----------------------------------------------------------\n\t *UPDATE STOCK IN TABLE STOCK BY LSPRODUCT*\n\t  -----------------------------------------------------------*/\n\t@Override\n\tpublic boolean updateStockByLsProductId(final ProductDTO productDTO){\n\t\tboolean result=false;\n\t\tfinal Product product=new Product();\n\t\tproduct.setLoyaltySourceProductId(productDTO.getLoyaltyProductId());\n\t\tproduct.setStock(productDTO.getStock());\n\t\ttry{\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tresult = (Boolean) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\n\t\t\t\t\treturn daoManager.getProductDao().updateStockByLsProductId(product);\n\t\t\t\t}\n\t\t\t});\n\t\t}catch (DaoException de) {\n\t\t\ttry { \n\t\t\t\tthrow new ServiceException(de);\n\t\t\t} catch (ServiceException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\treturn result;\t\n\t}\n\n\t/**----------------------------------------------------------\n\t * getCurrencySymbols*\n\t  -----------------------------------------------------------*/\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<CurrencyDTO> getCurrencySymbols() throws ServiceException{\n\t\tList <Currency> currencyList = new ArrayList<Currency>();\n\t\t\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tcurrencyList = (List <Currency>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\n\t\t\t\t\t\t\t\tthrows DaoException {\n\t\t\t\t\t\t\treturn daoManager.getProductDao().getCurrencySymbols();\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn(DTOFactory.getCurrencySymbolsDTO(currencyList));\n\t}\n\t\n\t/**----------------------------------------------------------\n\t * getCurrenciesButNotCAD*\n\t  -----------------------------------------------------------*/\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<CurrencyDTO> getCurrenciesButNotCAD() throws ServiceException{\n\t\tList <Currency> currencyList = new ArrayList<Currency>();\n\t\t\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tcurrencyList = (List <Currency>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\n\t\t\t\t\t\t\t\tthrows DaoException {\n\t\t\t\t\t\t\treturn daoManager.getProductDao().getCurrenciesButNotCAD();\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn(DTOFactory.getCurrencySymbolsDTO(currencyList));\n\t}\n\t\n\t/**----------------------------------------------------------\n\t * getCurrencyBySymbol*\n\t  -----------------------------------------------------------*/\n\t@Override\n\tpublic CurrencyDTO getCurrencyBySymbol(final CurrencyDTO currencyDTO) throws ServiceException {\n\t\tCurrency currencyResult = new Currency();\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tcurrencyResult = (Currency) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\n\t\t\t\t\t\tthrows DaoException {\n\t\t\t\t\tCurrency currency = new Currency();\n\t\t\t\t\tif(currencyDTO!=null && currencyDTO.getSymbol()!=null)\n\t\t\t\t\t\tcurrency.setSymbol(currencyDTO.getSymbol());\n\t\t\t\t\tcurrency = daoManager.getProductDao().getCurrencyBySymbol(currency);\n\t\t\t\t\treturn currency;\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn (DTOFactory.getCurrencyDTOBySymbol(currencyResult));\n\t}\n\n\t/**----------------------------------------------------------\n\t *updateCurrency*\n\t  -----------------------------------------------------------*/\t\n\t@Override\n\tpublic void updateCurrency(final CurrencyDTO currencyDTO) throws ServiceException {\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tdaoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\n\t\t\t\t\t\tthrows DaoException {\n\n\t\t\t\t\tCurrency currency = new Currency();\n\t\t\t\t\tcurrency.setId(currencyDTO.getId());\n\t\t\t\t\tcurrency.setRate(currencyDTO.getRate());\n\t\t\t\t\tcurrency.setSymbol(currencyDTO.getSymbol());\n\t\t\t\t\t//currency.setCreationDate(currencyDTO.getCreationDate());\n\t\t\t\t\t\n\t\t\t\t\tdaoManager.getProductDao().updateCurrency(currency);\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t}\n\t\n\t\n\t/**----------------------------------------------------------\n\t * calculateShippingRateForAllProducts*\n\t  -----------------------------------------------------------*/\n\t@Override\n\tpublic boolean calculateShippingRateForAllProducts(final Long userId) throws ServiceException{\n\t\tboolean result=false;\n\t\ttry{\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tresult = (Boolean) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\n\t\t\t\t\treturn daoManager.getProductDao().calculateShippingRateForAllProducts(userId) ; \n\t\t\t\t}\n\t\t\t});\n\t\t}catch (DaoException de) {\n\t\t\ttry {\n\t\t\t\tthrow new ServiceException(de);\n\t\t\t} catch (ServiceException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\t\n\t\n\t\n\t/**----------------------------------------------------------\n\t * isCurrencyExists*\n\t  -----------------------------------------------------------*/\n\t@Override\n\tpublic CurrencyDTO isCurrencyExists(final CurrencyDTO currencyDTO) throws ServiceException {\n\t\tCurrency currencyResult = new Currency();\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tcurrencyResult = (Currency) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\n\t\t\t\t\t\tthrows DaoException {\n\t\t\t\t\tCurrency currency = new Currency();\n\t\t\t\t\tif(currencyDTO!=null && currencyDTO.getSymbol()!=null)\n\t\t\t\t\t\tcurrency.setSymbol(currencyDTO.getSymbol());\n\t\t\t\t\tcurrency = daoManager.getProductDao().getCurrencyBySymbol(currency);\n\t\t\t\t\treturn currency;\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn (DTOFactory.getCurrencyDTOBySymbol(currencyResult));\n\t}\n\n\t/**----------------------------------------------------------\n\t * insertNewCurrency*\n\t  -----------------------------------------------------------*/\n\t@Override \n\tpublic Long insertNewCurrency(final CurrencyDTO currencyDTO) throws ServiceException {\n\t\tCurrency currencyResult = new Currency();\n\t\t//Long currencyId = 0L;\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tcurrencyResult = (Currency) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\t\t\t\t\t\n\t\t\t\t\tCurrency currency = new Currency();\n\t\t\t\t\tif(currencyDTO!=null && currencyDTO.getSymbol()!=null)\n\t\t\t\t\t\tcurrency.setSymbol(currencyDTO.getSymbol());\n\t\t\t\t\tif(currencyDTO!=null && currencyDTO.getRate()!=null)\n\t\t\t\t\t\tcurrency.setRate(currencyDTO.getRate());\n\t\t\t\t\t\n\t\t\t\t\tdaoManager.getProductDao().insertNewCurrency(currency);\t\t\t\t\t\n\t\t\t\t\treturn currency;\n\t\t\t\t}\n\t\t\t});\n\t\t\t//return currencyResult.getId();\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn currencyResult.getId();\n\t}\n\t\n}\n\n----------------------------------- SOURCE END -------------------------------------",1420673690096
error,log,,,"Problems occurred when invoking code from plug-in: ""org.eclipse.jdt.ui"".",1420673690097
