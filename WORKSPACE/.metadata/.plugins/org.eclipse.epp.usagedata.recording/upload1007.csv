what,kind,bundleId,bundleVersion,description,time
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.copy",1404407833491
started,bundle,org.eclipse.mylyn.java.tasks,3.4.0.v20100608-0100-e3x,"org.eclipse.mylyn.java.tasks",1404407833584
activated,editor,org.eclipse.jdt.ui,3.6.2.r362_v20110203,"org.eclipse.jdt.ui.CompilationUnitEditor",1404407834724
activated,editor,org.eclipse.jdt.ui,3.6.2.r362_v20110203,"org.eclipse.jdt.ui.CompilationUnitEditor",1404407847305
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.copy",1404407864753
activated,editor,org.eclipse.jdt.ui,3.6.2.r362_v20110203,"org.eclipse.jdt.ui.CompilationUnitEditor",1404407866315
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.paste",1404407882340
activated,editor,org.eclipse.jdt.ui,3.6.2.r362_v20110203,"org.eclipse.jdt.ui.CompilationUnitEditor",1404407889290
activated,editor,org.eclipse.jdt.ui,3.6.2.r362_v20110203,"org.eclipse.jdt.ui.CompilationUnitEditor",1404407902670
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.copy",1404407914332
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.paste",1404407916095
started,bundle,org.eclipse.pde.launching,3.6.0.v20100601,"org.eclipse.pde.launching",1404407920645
started,bundle,org.eclipse.ui.views.log,1.0.100.v20110210_r362,"org.eclipse.ui.views.log",1404407920647
started,bundle,org.eclipse.pde.ui,3.6.1.v20110210_r362,"org.eclipse.pde.ui",1404407920648
activated,editor,org.eclipse.jdt.ui,3.6.2.r362_v20110203,"org.eclipse.jdt.ui.CompilationUnitEditor",1404407930537
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.copy",1404407948854
activated,editor,org.eclipse.jdt.ui,3.6.2.r362_v20110203,"org.eclipse.jdt.ui.CompilationUnitEditor",1404407950430
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.paste",1404407954776
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.delete",1404407964236
started,bundle,org.eclipse.mylyn.ide.ui,3.4.0.v20100608-0100-e3x,"org.eclipse.mylyn.ide.ui",1404407971348
started,bundle,org.eclipse.jst.ws.jaxws.ui,1.0.1.v201008232129,"org.eclipse.jst.ws.jaxws.ui",1404407971359
started,bundle,org.eclipse.mylyn.java.ui,3.4.0.v20100608-0100-e3x,"org.eclipse.mylyn.java.ui",1404407971363
started,bundle,org.eclipse.pde.api.tools,1.0.202.v20100820_r361,"org.eclipse.pde.api.tools",1404407971391
started,bundle,org.eclipse.pde.api.tools.ui,1.0.201.v20100820_r361,"org.eclipse.pde.api.tools.ui",1404407971392
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.text.contentAssist.proposals",1404407972416
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.cut",1404407976925
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.delete",1404407978832
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.paste",1404407982309
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.file.save",1404407985449
started,bundle,org.eclipse.jdt.junit.core,3.6.1.r361_v20100825-0800,"org.eclipse.jdt.junit.core",1404407989387
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1404407991365
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1404407991409
executed,command,org.eclipse.jdt.debug.ui,3.5.2.v20100928a_r362,"org.eclipse.jdt.debug.ui.localJavaShortcut.run",1404407991416
activated,view,org.eclipse.ui.console,3.5.0.v20100526,"org.eclipse.ui.console.ConsoleView",1404407992452
activated,editor,org.eclipse.jdt.ui,3.6.2.r362_v20110203,"org.eclipse.jdt.ui.CompilationUnitEditor",1404408012506
activated,editor,org.eclipse.wst.xml.ui,1.1.103.v201101122108,"org.eclipse.wst.xml.ui.internal.tabletree.XMLMultiPageEditorPart",1404408020903
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1404408025093
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1404408042129
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1404408089866
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1404408090384
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1404408096319
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1404408097816
activated,editor,org.eclipse.jdt.ui,3.6.2.r362_v20110203,"org.eclipse.jdt.ui.CompilationUnitEditor",1404408098581
closed,editor,org.eclipse.wst.xml.ui,1.1.103.v201101122108,"org.eclipse.wst.xml.ui.internal.tabletree.XMLMultiPageEditorPart",1404408098582
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1404408101157
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1404408112376
opened,editor,org.eclipse.wst.xml.ui,1.1.103.v201101122108,"org.eclipse.wst.xml.ui.internal.tabletree.XMLMultiPageEditorPart",1404408112497
activated,editor,org.eclipse.wst.xml.ui,1.1.103.v201101122108,"org.eclipse.wst.xml.ui.internal.tabletree.XMLMultiPageEditorPart",1404408112588
executed,command,org.eclipse.ui.ide,3.6.2.M20101201-0800,"org.eclipse.ui.navigate.openResource",1404408112590
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1404408114693
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1404408115793
activated,editor,org.eclipse.jdt.ui,3.6.2.r362_v20110203,"org.eclipse.jdt.ui.CompilationUnitEditor",1404408117316
closed,editor,org.eclipse.wst.xml.ui,1.1.103.v201101122108,"org.eclipse.wst.xml.ui.internal.tabletree.XMLMultiPageEditorPart",1404408117316
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1404408119563
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1404408126580
opened,editor,org.eclipse.wst.xml.ui,1.1.103.v201101122108,"org.eclipse.wst.xml.ui.internal.tabletree.XMLMultiPageEditorPart",1404408126667
activated,editor,org.eclipse.wst.xml.ui,1.1.103.v201101122108,"org.eclipse.wst.xml.ui.internal.tabletree.XMLMultiPageEditorPart",1404408126747
executed,command,org.eclipse.ui.ide,3.6.2.M20101201-0800,"org.eclipse.ui.navigate.openResource",1404408126749
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.paste",1404408152517
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.copy",1404408164468
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.copy",1404408164899
started,bundle,org.eclipse.wst.css.ui,1.0.502.v201101122002,"org.eclipse.wst.css.ui",1404408179263
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.copy",1404408192020
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.copy",1404408192284
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.paste",1404408194388
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.cut",1404408200778
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.paste",1404408204260
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1404408223122
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1404408306752
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.paste",1404408347724
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.undo",1404408350090
activated,editor,org.eclipse.jdt.ui,3.6.2.r362_v20110203,"org.eclipse.jdt.ui.CompilationUnitEditor",1404408373031
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.copy",1404408380828
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.copy",1404408381773
activated,editor,org.eclipse.wst.xml.ui,1.1.103.v201101122108,"org.eclipse.wst.xml.ui.internal.tabletree.XMLMultiPageEditorPart",1404408382498
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1404408385764
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.findReplace",1404408385779
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.paste",1404408386924
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1404408391758
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1404408394601
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1404408396943
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.copy",1404408399228
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.copy",1404408399500
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1404408400433
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1404408400580
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.paste",1404408438763
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.delete",1404408443853
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1404408454518
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1404408463816
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.copy",1404408467644
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.paste",1404408471141
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.delete",1404408484672
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.delete",1404408493960
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.copy",1404408510220
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.paste",1404408526279
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.delete",1404408537547
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.delete",1404408541611
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.copy",1404408548708
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.copy",1404408549098
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.copy",1404408549311
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.file.save",1404408552642
activated,editor,org.eclipse.jdt.ui,3.6.2.r362_v20110203,"org.eclipse.jdt.ui.CompilationUnitEditor",1404408555163
activated,editor,org.eclipse.wst.xml.ui,1.1.103.v201101122108,"org.eclipse.wst.xml.ui.internal.tabletree.XMLMultiPageEditorPart",1404408560992
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1404408643498
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1404408827912
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.copy",1404408841720
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.copy",1404408854891
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.copy",1404408855139
activated,editor,org.eclipse.jdt.ui,3.6.2.r362_v20110203,"org.eclipse.jdt.ui.CompilationUnitEditor",1404408857203
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1404408867446
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1404408878691
opened,editor,org.eclipse.jdt.ui,3.6.2.r362_v20110203,"org.eclipse.jdt.ui.CompilationUnitEditor",1404408879778
activated,editor,org.eclipse.jdt.ui,3.6.2.r362_v20110203,"org.eclipse.jdt.ui.CompilationUnitEditor",1404408879799
executed,command,org.eclipse.ui.ide,3.6.2.M20101201-0800,"org.eclipse.ui.navigate.openResource",1404408879799
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.paste",1404408892672
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.copy",1404408895999
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.paste",1404408897772
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.cut",1404408900252
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.paste",1404408902791
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.paste",1404408906069
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.copy",1404408920396
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.paste",1404408923489
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.copy",1404408934604
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.copy",1404408934845
started,bundle,org.eclipse.wst.jsdt.debug.ui,1.0.3.v201011040143,"org.eclipse.wst.jsdt.debug.ui",1404408938234
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.file.save",1404408939114
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1404408941053
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1404408948564
opened,editor,org.eclipse.jdt.ui,3.6.2.r362_v20110203,"org.eclipse.jdt.ui.CompilationUnitEditor",1404408948634
activated,editor,org.eclipse.jdt.ui,3.6.2.r362_v20110203,"org.eclipse.jdt.ui.CompilationUnitEditor",1404408948657
executed,command,org.eclipse.ui.ide,3.6.2.M20101201-0800,"org.eclipse.ui.navigate.openResource",1404408948657
activated,editor,org.eclipse.jdt.ui,3.6.2.r362_v20110203,"org.eclipse.jdt.ui.CompilationUnitEditor",1404408967578
activated,editor,org.eclipse.jdt.ui,3.6.2.r362_v20110203,"org.eclipse.jdt.ui.CompilationUnitEditor",1404408970399
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.paste",1404408992209
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.file.saveAll",1404409006172
activated,editor,org.eclipse.jdt.ui,3.6.2.r362_v20110203,"org.eclipse.jdt.ui.CompilationUnitEditor",1404409009218
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.copy",1404409017159
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.copy",1404409017407
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1404409024040
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1404409031722
opened,editor,org.eclipse.jdt.ui,3.6.2.r362_v20110203,"org.eclipse.jdt.ui.CompilationUnitEditor",1404409032700
activated,editor,org.eclipse.jdt.ui,3.6.2.r362_v20110203,"org.eclipse.jdt.ui.CompilationUnitEditor",1404409032724
executed,command,org.eclipse.ui.ide,3.6.2.M20101201-0800,"org.eclipse.ui.navigate.openResource",1404409032725
activated,editor,org.eclipse.jdt.ui,3.6.2.r362_v20110203,"org.eclipse.jdt.ui.CompilationUnitEditor",1404409035164
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1404409038359
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.findReplace",1404409038376
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1404409040254
activated,editor,org.eclipse.jdt.ui,3.6.2.r362_v20110203,"org.eclipse.jdt.ui.CompilationUnitEditor",1404409040364
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1404409041854
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1404409043778
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.paste",1404409051079
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.copy",1404409059537
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.copy",1404409059879
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.copy",1404409060015
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.paste",1404409063218
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.copy",1404409068636
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.paste",1404409073856
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.delete",1404409083932
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.delete",1404409084392
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.delete",1404409084599
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.delete",1404409084776
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.delete",1404409087076
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.delete",1404409088211
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.copy",1404409095419
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.copy",1404409095421
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.delete",1404409106380
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.delete",1404409106784
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.paste",1404409115214
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.copy",1404409122288
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.paste",1404409124619
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.copy",1404409139964
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.paste",1404409143444
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.copy",1404409149620
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.paste",1404409151885
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.paste",1404409154196
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.copy",1404409884310
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.copy",1404409884565
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.copy",1404409884861
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1404409896139
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1404409904357
opened,editor,org.eclipse.jdt.ui,3.6.2.r362_v20110203,"org.eclipse.jdt.ui.CompilationUnitEditor",1404409904439
activated,editor,org.eclipse.jdt.ui,3.6.2.r362_v20110203,"org.eclipse.jdt.ui.CompilationUnitEditor",1404409904460
executed,command,org.eclipse.ui.ide,3.6.2.M20101201-0800,"org.eclipse.ui.navigate.openResource",1404409904461
activated,editor,org.eclipse.jdt.ui,3.6.2.r362_v20110203,"org.eclipse.jdt.ui.CompilationUnitEditor",1404409911711
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1404409919057
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.findReplace",1404409919075
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1404409923040
activated,editor,org.eclipse.jdt.ui,3.6.2.r362_v20110203,"org.eclipse.jdt.ui.CompilationUnitEditor",1404409923140
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1404409924753
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1404409926913
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.paste",1404409929211
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1404409930794
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1404409930910
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.delete",1404409934267
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.delete",1404409934768
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.copy",1404409942919
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.copy",1404409943739
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.paste",1404409947746
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.file.save",1404409953609
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1404409956117
error,log,,,"Problems occurred when invoking code from plug-in: ""org.eclipse.core.resources"".",1404409959812
error,log,,,"Problems occurred when invoking code from plug-in: ""org.eclipse.core.resources"".",1404409959988
error,log,,,"Errors occurred during the build.",1404409959998
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1404409960647
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.file.saveAll",1404409960684
activated,editor,org.eclipse.jdt.ui,3.6.2.r362_v20110203,"org.eclipse.jdt.ui.CompilationUnitEditor",1404409963059
error,log,,,"Problems occurred when invoking code from plug-in: ""org.eclipse.core.resources"".",1404409969247
error,log,,,"Errors occurred during the build.",1404409969912
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1404409969933
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1404409973414
activated,view,org.eclipse.wst.server.ui,1.1.207.v20110119,"org.eclipse.wst.server.ui.ServersView",1404409976272
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1404409980042
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1404409981116
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1404409985447
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1404409986587
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1404409986910
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1404409995715
activated,view,org.eclipse.ui.ide,3.6.2.M20101201-0800,"org.eclipse.ui.views.ResourceNavigator",1404409995724
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1404410001214
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1404410003447
executed,command,org.eclipse.ui.ide,3.6.2.M20101201-0800,"org.eclipse.ui.project.cleanAction",1404410003452
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1404410003720
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1404410004043
error,log,,,"Exception occurred during problem detection:\r\n----------------------------------- SOURCE BEGIN -------------------------------------\r\npackage com.loyauty.service.product;\r\n\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.util.ArrayList;\r\nimport java.util.Date;\r\nimport java.util.Iterator;\r\nimport java.util.List;\r\n\r\nimport lombok.Getter;\r\nimport lombok.Setter;\r\n\r\nimport org.apache.log4j.Logger;\r\n\r\nimport com.loyauty.dao.core.DaoCommand;\r\nimport com.loyauty.dao.core.DaoManager;\r\nimport com.loyauty.dao.core.DaoManagerFactory;\r\nimport com.loyauty.enums.Language;\r\nimport com.loyauty.enums.PriceType;\r\nimport com.loyauty.enums.ProductStatus;\r\nimport com.loyauty.enums.Type;\r\nimport com.loyauty.exception.DaoException;\r\nimport com.loyauty.exception.ServiceException;\r\nimport com.loyauty.model.AlterProductXML;\r\nimport com.loyauty.model.AlterUserProductXML;\r\nimport com.loyauty.model.Brand;\r\nimport com.loyauty.model.Category;\r\nimport com.loyauty.model.City;\r\nimport com.loyauty.model.Image;\r\nimport com.loyauty.model.LoyaltyEnum;\r\nimport com.loyauty.model.Product;\r\nimport com.loyauty.model.Province;\r\nimport com.loyauty.model.Query;\r\nimport com.loyauty.model.ProductLink;\r\nimport com.loyauty.model.ProductModelNumber;\r\nimport com.loyauty.model.Select;\r\nimport com.loyauty.model.ShippingCity;\r\nimport com.loyauty.model.ShippingProvince;\r\nimport com.loyauty.model.ShippingTotal;\r\nimport com.loyauty.model.Specification;\r\nimport com.loyauty.model.Translation;\r\nimport com.loyauty.model.TranslationEntry;\r\nimport com.loyauty.model.User;\r\nimport com.loyauty.model.UserBrandDiscount;\r\nimport com.loyauty.model.UserCategoryDiscount;\r\nimport com.loyauty.model.UserProductPrice;\r\nimport com.loyauty.model.UserProvincePopulation;\r\nimport com.loyauty.service.ServiceImpl;\r\nimport com.loyauty.service.core.DTOFactory;\r\nimport com.loyauty.service.core.dto.AlterProductXMLDTO;\r\nimport com.loyauty.service.core.dto.AlterUserProductXMLDTO;\r\nimport com.loyauty.service.core.dto.CityDTO;\r\nimport com.loyauty.service.core.dto.CommonDTO;\r\nimport com.loyauty.service.core.dto.CommonUserDiscountDTO;\r\nimport com.loyauty.service.core.dto.ImageDTO;\r\nimport com.loyauty.service.core.dto.ProductDTO;\r\nimport com.loyauty.service.core.dto.ProvinceDTO;\r\nimport com.loyauty.service.core.dto.QueryDTO;\r\nimport com.loyauty.service.core.dto.ProductModelDTO;\r\nimport com.loyauty.service.core.dto.SearchRequestDTO;\r\nimport com.loyauty.service.core.dto.SearchRequestDTO.SearchType;\r\nimport com.loyauty.service.core.dto.ShippingCityDTO;\r\nimport com.loyauty.service.core.dto.ShippingProvinceDTO;\r\nimport com.loyauty.service.core.dto.ShippingTotalDTO;\r\nimport com.loyauty.service.core.dto.SpecificationDTO;\r\nimport com.loyauty.service.core.dto.UserDTO;\r\nimport com.loyauty.service.core.dto.UserProductDTO;\r\nimport com.loyauty.service.core.dto.UserProductPriceDTO;\r\nimport com.loyauty.service.core.dto.UserProvincePopulationDTO;\r\nimport com.loyauty.service.image.ImageService;\r\nimport com.loyauty.service.image.ImageServiceImpl;\r\nimport com.loyauty.util.CommonUtils;\r\n\r\npublic class ProductServiceImpl extends ServiceImpl implements ProductService {\r\n\t\r\n\tprivate static final Logger log = Logger.getLogger(ProductServiceImpl.class);\r\n\t\r\n\t@Setter @Getter\r\n\r\n\tprotected DaoManager daoManager;\r\n\t\r\n\tpublic ProductServiceImpl() {\r\n\t\tsetDaoManager(DaoManagerFactory.getDaoManager());\r\n\t}\r\n\t\r\n\t@SuppressWarnings(""unchecked"")\r\n\t@Override\r\n\tpublic List<SpecificationDTO> getMainSpecificationByCategory(final long categoryId)\r\n\t\t\tthrows ServiceException {\r\n\t\tList<Specification> list = null;\r\n\t\ttry {\r\n\t\t\tlist = (List<Specification>) daoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\r\n\t\t\t\t\treturn daoManager.getSpecificationDao().getMainSpecificationByCategory(categoryId);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t} catch (DaoException e) {\r\n\t\t\tthrow (new ServiceException(e));\r\n\t\t}\r\n\t\treturn DTOFactory.getSpecificationListDTO(list);\r\n\t}\r\n\t\r\n \t@Override\r\n\tpublic Long createProduct(final ProductDTO productDTO) throws ServiceException {\r\n\t\tProduct productResult = new Product();\r\n\t\t\r\n\t\ttry {\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\tproductResult = (Product) daoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t/* (non-Javadoc)\r\n\t\t\t\t * @see com.loyauty.dao.core.DaoCommand#execute(com.loyauty.dao.core.DaoManager)\r\n\t\t\t\t */\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\r\n\t\t\t\tthrows DaoException {\r\n\t\t\t\t\t\r\n\t\t\t\t\tProduct product = new Product();\r\n\t\t\t\t\t\r\n\t\t\t\t\t//Name\r\n\t\t\t\t\tTranslation translationName = new Translation();\r\n\t\t\t\t\tdaoManager.getTranslationDao().insertTranslation(translationName);\t\r\n\t\t\t\t\t//Eng Name\r\n\t\t\t\t\tTranslationEntry entryNameEng = new TranslationEntry(translationName.getId(), productDTO.getNameEng().getName() );\r\n\t\t\t\t\tentryNameEng.setLanguage(Language.ENGLISH);\r\n\t\t\t\t\tdaoManager.getTranslationDao().insertEntry(entryNameEng);\r\n\t\t\t\t\t//Fr Name\r\n\t\t\t\t\tTranslationEntry entryNameFr = new TranslationEntry(translationName.getId(), productDTO.getNameFr().getName());\r\n\t\t\t\t\tentryNameFr.setLanguage(Language.FRENCH);\r\n\t\t\t\t\tdaoManager.getTranslationDao().insertEntry(entryNameFr);\r\n\t\t\t\t\t\r\n\t\t\t\t\t//Description\r\n\t\t\t\t\tTranslation translationDescription = new Translation();\r\n\t\t\t\t\tdaoManager.getTranslationDao().insertTranslation(translationDescription);\r\n\t\t\t\t\t//Eng Description\r\n\t\t\t\t\tTranslationEntry entryDescriptionEng = new TranslationEntry(translationDescription.getId(), productDTO.getDescriptionEng().getName());\r\n\t\t\t\t\tentryDescriptionEng.setLanguage(Language.ENGLISH);\r\n\t\t\t\t\tdaoManager.getTranslationDao().insertEntry(entryDescriptionEng);\r\n\t\t\t\t\t//Fr Description\r\n\t\t\t\t\tTranslationEntry entryDescriptionFr = new TranslationEntry(translationDescription.getId(), productDTO.getDescriptionFr().getName());\r\n\t\t\t\t\tentryDescriptionFr.setLanguage(Language.FRENCH);\r\n\t\t\t\t\tdaoManager.getTranslationDao().insertEntry(entryDescriptionFr);\r\n\t\t\t\t\t\r\n\t\t\t\t\t//Specification\r\n\t\t\t\t\tTranslation translationSpecification = new Translation();\t\t\t\r\n\t\t\t\t\tdaoManager.getTranslationDao().insertTranslation(translationSpecification);\t\r\n\t\t\t\t\t//Eng Name\r\n\t\t\t\t\tTranslationEntry entrySpecificationEng = new TranslationEntry(translationSpecification.getId(), productDTO.getSpecificationEng().getName() );\r\n\t\t\t\t\tentrySpecificationEng.setLanguage(Language.ENGLISH);\r\n\t\t\t\t\tdaoManager.getTranslationDao().insertEntry(entrySpecificationEng);\r\n\t\t\t\t\t//Fr Name\r\n\t\t\t\t\tTranslationEntry entrySpecificationFr = new TranslationEntry(translationSpecification.getId(), productDTO.getSpecificationFr().getName());\r\n\t\t\t\t\tentrySpecificationFr.setLanguage(Language.FRENCH);\r\n\t\t\t\t\tdaoManager.getTranslationDao().insertEntry(entrySpecificationFr);\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t\t// Others\r\n\t\t\t\t\tTranslation translationOther = new Translation();\t\t\t\t\t\r\n\t\t\t\t\tdaoManager.getTranslationDao().insertTranslation(translationOther);\r\n\t\t\t\t\t// Eng Others\r\n\t\t\t\t\tTranslationEntry entryOtherEng = new TranslationEntry(translationOther.getId(), productDTO.getOtherEng().getName());\r\n\t\t\t\t\tentryOtherEng.setLanguage(Language.ENGLISH);\r\n\t\t\t\t\tdaoManager.getTranslationDao().insertEntry(entryOtherEng);\r\n\t\t\t\t\t// Fr Name\r\n\t\t\t\t\tTranslationEntry entryOtherFr = new TranslationEntry(translationOther.getId(), productDTO.getOtherFr().getName());\r\n\t\t\t\t\tentryOtherFr.setLanguage(Language.FRENCH);\r\n\t\t\t\t\tdaoManager.getTranslationDao().insertEntry(entryOtherFr);\r\n\t\t\t\t\t\r\n\t\t\t\t\t// Warranty\r\n\t\t\t\t\tTranslation translationWarranty = new Translation();\r\n\t\t\t\t\tdaoManager.getTranslationDao().insertTranslation(translationWarranty);\r\n\t\t\t\t\t// Eng Others\r\n\t\t\t\t\tTranslationEntry entryWarrantyEng = new TranslationEntry(translationWarranty.getId(), productDTO.getWarrantyEng().getName());\r\n\t\t\t\t\tentryWarrantyEng.setLanguage(Language.ENGLISH);\r\n\t\t\t\t\tdaoManager.getTranslationDao().insertEntry(entryWarrantyEng);\r\n\t\t\t\t\t// Fr Name\r\n\t\t\t\t\tTranslationEntry entryWarrantyFr = new TranslationEntry(translationWarranty.getId(), productDTO.getWarrantyFr().getName());\r\n\t\t\t\t\tentryWarrantyFr.setLanguage(Language.FRENCH);\r\n\t\t\t\t\tdaoManager.getTranslationDao().insertEntry(entryWarrantyFr);\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t//Insert Image product\r\n\t\t\t\t\tImage imageProduct = new Image();\r\n\t\t\t\t\tif(productDTO.getImage() != null) {\r\n\t\t\t\t\t\timageProduct.setName(productDTO.getImage().getName());\r\n\t\t\t\t\t\timageProduct.setRealNameImg(productDTO.getImage().getRealName());\r\n\t\t\t\t\t\timageProduct.setType(Type.PRODUCT);\r\n\t\t\t\t\t\timageProduct.setSize(productDTO.getImage().getSize());\r\n\t\t\t\t\t\timageProduct.setHeight(productDTO.getImage().getHeight());\r\n\t\t\t\t\t\timageProduct.setWidth(productDTO.getImage().getWidth());\r\n\t\t\t\t\t\timageProduct.setLarge(productDTO.getImage().isLarge());\r\n\t\t\t\t\t\timageProduct.setResolution(productDTO.getImage().getResolution());\r\n\t\t\t\t\t\timageProduct.setScore(productDTO.getImage().getScore());\r\n\t\t\t\t\t\tdaoManager.getImageDao().insertEntity(imageProduct);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\t//Brand \r\n\t\t\t\t\tBrand brand = new Brand();\r\n\t\t\t\t\tbrand.setId(productDTO.getBrand().getId());\r\n\t\t\t\t\t//Category\r\n\t\t\t\t\tCategory category = new Category();\r\n\t\t\t\t\tcategory.setId(productDTO.getCategory().getId());\r\n\t\t\t\t\t\r\n\t\t\t\t\tproduct.setName(translationName);\r\n\t\t\t\t\tproduct.setDescription(translationDescription);\r\n\t\t\t\t\tproduct.setImage(imageProduct);\r\n\t\t\t\t\tproduct.setStatus(ProductStatus.AVAILABLE);\r\n\t\t\t\t\tproduct.setMsrp(productDTO.getMsrp());\r\n\t\t\t\t\tproduct.setCost(productDTO.getCost());\r\n\t\t\t\t\tproduct.setBrand(brand);\r\n\t\t\t\t\tproduct.setLoyaltySourceProductId(productDTO.getLoyaltyProductId());\r\n\t\t\t\t\tproduct.setProductHigh(productDTO.getHigh());\r\n\t\t\t\t\tproduct.setProductLong(productDTO.getLarge());\r\n\t\t\t\t\tproduct.setProductWidth(productDTO.getWidth());\r\n\t\t\t\t\tproduct.setWeight(productDTO.getWeight());\r\n\t\t\t\t\tproduct.setActualHeight(productDTO.getActualHeight());\r\n\t\t\t\t\tproduct.setActualLength(productDTO.getActualLength());\r\n\t\t\t\t\tproduct.setActualWidth(productDTO.getActualWidth());\r\n\t\t\t\t\tproduct.setActualWeight(productDTO.getActualWeight());\r\n\t\t\t\t\tproduct.setCategory(category);\r\n\t\t\t\t\tproduct.setSpecification(translationSpecification);\r\n\t\t\t\t\tproduct.setOther(translationOther);\r\n\t\t\t\t\tproduct.setNote(productDTO.getNote());\r\n\t\t\t\t\tproduct.setWereWgtDimChanged(productDTO.getWereWgtDimChanged());\r\n\t\t\t\t\tproduct.setConsideredForXML(productDTO.getConsideredForXML());\r\n\t\t\t\t\tproduct.setWarranty(translationWarranty);\r\n\t\t\t\t\tproduct.setUpc(productDTO.getUpc());\r\n\t\t\t\t\t//51 is N/A. To allow don't pick any option in edit product page in Admin\r\n\t\t\t\t\t//I do this trick\r\n\t\t\t\t\tif(productDTO.getMainFilterTypeId() != -1) {\r\n\t\t\t\t\t\tproduct.setTypeId(productDTO.getMainFilterTypeId());\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tproduct.setTypeId(new Long(51));\r\n\t\t\t\t\t}\r\n\t\t\t\t\tdaoManager.getProductDao().insertProduct(product);\r\n\t\t\t\t\t\r\n\t\t\t\t\t//Manufacture Product Id\r\n\t\t\t\t\tIterator<ProductModelDTO> stringIterator = productDTO.getManufactureProductList().iterator();\r\n\t\t\t\t\tProductModelNumber productModelNumber;\r\n\t\t\t\t\tProductModelDTO productModelDTO;\r\n\t\t\t\t\twhile(stringIterator.hasNext()) {\r\n\t\t\t\t\t\tproductModelNumber = new ProductModelNumber();\r\n\t\t\t\t\t\tproductModelDTO = (ProductModelDTO)stringIterator.next();\r\n\t\t\t\t\t\tproductModelNumber.setModelNumber(productModelDTO.getName());\r\n\t\t\t\t\t\tproductModelNumber.setQuantity(productModelDTO.getQuantity());\r\n\t\t\t\t\t\tproductModelNumber.setProductId(product.getId());\r\n\t\t\t\t\t\tproductModelNumber.setSupplier(productModelDTO.getSupplier());\r\n\t\t\t\t\t\tproductModelNumber.setPrice(productModelDTO.getPrice());\r\n\t\t\t\t\t\tproductModelNumber.setMsrp(productModelDTO.getMsrp());\r\n\t\t\t\t\t\tdaoManager.getProductDao().insertProductModelNumber(productModelNumber);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\t//insert url link\r\n\t\t\t\t\tif(productDTO.getLinkList().size() > 0)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tProductLink productLink = new ProductLink();\r\n\t\t\t\t\t\tproductLink.setProductId(product.getId());\r\n\t\t\t\t\t\tproductLink.setLink(productDTO.getLinkList().get(0).getLink());\r\n\t\t\t\t\t\tdaoManager.getProductDao().insertProductLink(productLink);\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn product;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\treturn(productResult.getId());\r\n\t\t} catch (DaoException e) {\r\n\t\t\tthrow (new ServiceException(e));\r\n\t\t}\r\n\t}\r\n\t\r\n\t@Override\r\n\tpublic ProductDTO getProductInformation(final Long productId, final Long userId) throws ServiceException {\r\n\r\n\t\tProduct productResult = new Product();\r\n\t\t\r\n\t\ttry {\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\tproductResult = (Product) daoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\r\n\t\t\t\t\t\tthrows DaoException {\r\n\t\t\t\t\tProduct product = new Product();\r\n\t\t\t\t\tSelect select = new Select();\r\n\t\t\t\t\tselect.setQuery(String.valueOf(productId));\r\n\t\t\t\t\tselect.setUserId(userId);\r\n\t\t\t\t\tproduct = daoManager.getProductDao().getProduct(select);\r\n\t\t\t\t\treturn product;\r\n\t\t\t\t}\r\n\t\t\t});\t\t\t\r\n\t\t} catch (DaoException de) {\r\n\t\t\tthrow (new ServiceException(de));\r\n\t\t}\r\n\t\treturn(DTOFactory.getProductDTO(productResult));\r\n\t}\r\n\t\r\n\t@SuppressWarnings(""unchecked"")\r\n\t@Override\r\n\tpublic List<UserProductDTO> getAllProdcutForProfit(final UserProductDTO userProducDTO) throws ServiceException{\r\n\r\n\t\tList <Product> productList = new ArrayList<Product>();\r\n\t\t\r\n\t\ttry {\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\tproductList = (List <Product>) daoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t\t\t@Override\r\n\t\t\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\r\n\t\t\t\t\t\t\t\tthrows DaoException {\r\n\t\t\t\t\t\t\t//Brand\r\n\t\t\t\t\t\t\tBrand brand = null;\r\n\t\t\t\t\t\t\tif(userProducDTO.getBrandId() != null){\r\n\t\t\t\t\t\t\t\tbrand = new Brand();\r\n\t\t\t\t\t\t\t\tbrand.setId(userProducDTO.getBrandId());\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t//Category\r\n\t\t\t\t\t\t\tCategory category = null;\r\n\t\t\t\t\t\t\tif(userProducDTO.getCategoryId() != null){\r\n\t\t\t\t\t\t\t\tcategory = new Category();\r\n\t\t\t\t\t\t\t\tcategory.setId(userProducDTO.getCategoryId());\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tProduct product = new Product();\r\n\t\t\t\t\t\t\tproduct.setBrand(brand);\r\n\t\t\t\t\t\t\tproduct.setCategory(category);\t\r\n\t\t\t\t\t\t\tproduct.setUserProductStatus(userProducDTO.getUserProductStatus());\r\n\t\t\t\t\t\t\tproduct.setUserId(userProducDTO.getUserId());\r\n\t\t\t\t\t\t\tproduct.setLoyaltySourceProductId(userProducDTO.getLsProductId());\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\treturn daoManager.getProductDao().getAllProdcutForProfit(product);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t} catch (DaoException de) {\r\n\t\t\tthrow (new ServiceException(de));\r\n\t\t}\r\n\t\t\r\n\t\treturn(DTOFactory.getUserProductDTOList(productList));\r\n\t}\t\r\n\t\r\n\t@Override\r\n\tpublic ImageDTO addProductImage(File file, String fileName, String applicationPath, long uploaderId,\r\n\t\t\t int width, int height, int miniCoverWidth, boolean large) throws ServiceException, IOException {\r\n\t\r\n\t\tImageService ish = new ImageServiceImpl();\r\n\t\tLong tempId = new Long(0);\r\n\t\tImage image = new Image();\r\n\t\timage.setId(tempId);\r\n\t\timage.setUploaderId(uploaderId);\r\n\t\t\r\n\t\t// Validate if the name is already present in the DB\r\n\t\tString normalizedName= CommonUtils.getNormalizedProductImage(fileName);\r\n\t\t//TODO: we must create a validation in action //Validate if the image extension is JPEG or PNG\r\n\t\tint i = ish.isJPEGPNGImage(file);\r\n\t\tif (i==1) {\r\n\t\t\timage.addImageJps(file,normalizedName,fileName);\r\n\t\t}else if (i==2) {\r\n\t\t\timage.addImagePNG(file,normalizedName,fileName);\r\n\t\t}else{\r\n\t\t\tthrow new ServiceException(""Game Logo Image Format not supported "" + file.getName() );\r\n\t\t}\r\n\t\timage.setName(normalizedName);\r\n\t\timage.setRealNameImg(fileName);\r\n\t\t//Variables Initialization \r\n\t\timage.setType(Type.PRODUCT);\r\n\t\timage.setLarge(large);\r\n\t\t\r\n\t\t// Transfer the cover to the server cover/large/ directory\t\t\t\r\n\t\tif (!ish.transferProductImage(file, normalizedName, applicationPath, width, height, miniCoverWidth, large)){\r\n\t\t\tthrow new ServiceException(""Could not transfer the image"" + \r\n\t\t\t\t\t""\\nimageName:"" + file.getName() \r\n\t\t\t\t\t+ ""\\nNormalized image:"" + normalizedName);\r\n\t\t}\r\n\t\t\r\n\t\treturn DTOFactory.getImageDTO(image); \r\n\t}\t\t\r\n\t\r\n\t@Override\r\n\tpublic void updateProduct(final ProductDTO productDTO) throws ServiceException {\r\n\t\ttry {\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t    daoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\r\n\t\t\t\tthrows DaoException {\r\n\t\t\t\t\tProduct product = new Product();\r\n\t\t\t\t\tproduct.setUpc(productDTO.getUpc());\r\n\t\t\t\t\t//Eng Name\r\n\t\t\t\t\tdaoManager.getTranslationDao().updateEntry(new TranslationEntry(productDTO.getNameEng()));\r\n\t\t\t\t\t//Fr Name\r\n\t\t\t\t\tdaoManager.getTranslationDao().updateEntry(new TranslationEntry(productDTO.getNameFr()));\r\n\t\t\t\t\t\r\n\t\t\t\t\t//Eng Description\r\n\t\t\t\t\tdaoManager.getTranslationDao().updateEntry(new TranslationEntry(productDTO.getDescriptionEng()));\r\n\t\t\t\t\t//Fr Description\r\n\t\t\t\t\tdaoManager.getTranslationDao().updateEntry(new TranslationEntry(productDTO.getDescriptionFr()));\r\n\t\t\t\t\t\r\n\t\t\t\t\t//Eng Specification\r\n\t\t\t\t\tdaoManager.getTranslationDao().updateEntry(new TranslationEntry(productDTO.getSpecificationEng()));\r\n\t\t\t\t\t//Fr Specification\r\n\t\t\t\t\tdaoManager.getTranslationDao().updateEntry(new TranslationEntry(productDTO.getSpecificationFr()));\r\n\t\t\t\t\t\r\n\t\t\t\t\t//Eng Others\r\n\t\t\t\t\tif(productDTO.getOtherEng().getName() != null)\r\n\t\t\t\t\t\tdaoManager.getTranslationDao().updateEntry(new TranslationEntry(productDTO.getOtherEng()));\r\n\t\t\t\t\t//Fr Others\r\n\t\t\t\t\tif(productDTO.getOtherFr().getName() != null)\r\n\t\t\t\t\t\tdaoManager.getTranslationDao().updateEntry(new TranslationEntry(productDTO.getOtherFr()));\r\n\t\t\t\t\t\r\n\t\t\t\t\t//If the productDTO.getWarrantyEng is null that means that bothe warranty are null\r\n\t\t\t\t\t//So I have to insert the warranty instead of update them.\r\n\t\t\t\t\t// Warranty\r\n\t\t\t\t\tTranslation translationWarranty = new Translation();\r\n\t\t\t\t\tif(productDTO.getWarrantyEng().getId() != 0){\r\n\t\t\t\t\t\t//Eng Warranty\r\n\t\t\t\t\t\tdaoManager.getTranslationDao().updateEntry(new TranslationEntry(productDTO.getWarrantyEng()));\r\n\t\t\t\t\t\t//Fr Warranty\r\n\t\t\t\t\t\tdaoManager.getTranslationDao().updateEntry(new TranslationEntry(productDTO.getWarrantyFr()));\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\ttranslationWarranty.setId(productDTO.getWarrantyTranslationId());\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse{\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif(productDTO.getWarrantyEng() != null)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tdaoManager.getTranslationDao().insertTranslation(translationWarranty);\r\n\t\t\t\t\t\t\t// Eng Others\r\n\t\t\t\t\t\t\tTranslationEntry entryWarrantyEng = new TranslationEntry(translationWarranty.getId(), productDTO.getWarrantyEng().getName());\r\n\t\t\t\t\t\t\tentryWarrantyEng.setLanguage(Language.ENGLISH);\r\n\t\t\t\t\t\t\tdaoManager.getTranslationDao().insertEntry(entryWarrantyEng);\r\n\t\t\t\t\t\t\t// Fr Name\r\n\t\t\t\t\t\t\tTranslationEntry entryWarrantyFr = new TranslationEntry(translationWarranty.getId(), productDTO.getWarrantyFr().getName());\r\n\t\t\t\t\t\t\tentryWarrantyFr.setLanguage(Language.FRENCH);\r\n\t\t\t\t\t\t\tdaoManager.getTranslationDao().insertEntry(entryWarrantyFr);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tproduct.setWarranty(translationWarranty);\t\r\n\t\t\t\t\t\r\n\t\t\t\t\t//Insert Image product\r\n\t\t\t\t\tImage imageProduct = new Image();\r\n\t\t\t\t\t//If the id image is null that means that the image is new.\r\n\t\t\t\t\t//So, Insert the image and update the product.\r\n\t\t\t\t\tif(productDTO.getImage() != null) {\r\n\t\t\t\t\t\tif (productDTO.getImage().getId() > 0L) {\t\t\t\t\t\t\r\n\t\t\t\t\t\t\timageProduct.setId(productDTO.getImage().getId());\r\n\t\t\t\t\t\t\timageProduct.setName(productDTO.getImage().getName());\r\n\t\t\t\t\t\t\timageProduct.setRealNameImg(productDTO.getImage().getRealName());\r\n\t\t\t\t\t\t\timageProduct.setType(Type.PRODUCT);\r\n\t\t\t\t\t\t\timageProduct.setSize(productDTO.getImage().getSize());\r\n\t\t\t\t\t\t\timageProduct.setHeight(productDTO.getImage().getHeight());\r\n\t\t\t\t\t\t\timageProduct.setWidth(productDTO.getImage().getWidth());\r\n\t\t\t\t\t\t\timageProduct.setLarge(productDTO.getImage().isLarge());\r\n\t\t\t\t\t\t\timageProduct.setResolution(productDTO.getImage().getResolution());\r\n\t\t\t\t\t\t\timageProduct.setScore(productDTO.getImage().getScore());\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t//For the image, I use the plugin and the insert or update of \r\n\t\t\t\t\t\t\t//the image is done in AjaxUploadFile So if I insert here the \r\n\t\t\t\t\t\t\t//image again, I'll get a duplicate key exception. \r\n\t\t\t\t\t\t\t//I update all the time.\r\n\t\t\t\t\t\t\t//daoManager.getImageDao().updateEntity(imageProduct);\t\t\r\n\t\t\t\t\t\t\t//I do nothing.\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\t//Brand \r\n\t\t\t\t\tBrand brand = new Brand();\r\n\t\t\t\t\tbrand.setId(productDTO.getBrand().getId());\r\n\t\t\t\t\t\r\n\t\t\t\t\t//Category\r\n\t\t\t\t\tCategory category = new Category();\r\n\t\t\t\t\tcategory.setId(productDTO.getCategory().getId());\r\n\t\t\t\t\tproduct.setId(productDTO.getId());\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t if (imageProduct != null) {\r\n\t\t\t\t\t\tproduct.setImage(imageProduct);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tproduct.setMsrp(productDTO.getMsrp());\r\n\t\t\t\t\tproduct.setCost(productDTO.getCost());\r\n\t\t\t\t\tproduct.setBrand(brand);\r\n\t\t\t\t\tproduct.setLoyaltySourceProductId(productDTO.getLoyaltyProductId());\r\n\t\t\t\t\tproduct.setProductHigh(productDTO.getHigh());\r\n\t\t\t\t\tproduct.setProductLong(productDTO.getLarge());\r\n\t\t\t\t\tproduct.setProductWidth(productDTO.getWidth());\r\n\t\t\t\t\tproduct.setWeight(productDTO.getWeight());\r\n\t\t\t\t\tproduct.setActualHeight(productDTO.getActualHeight());\r\n\t\t\t\t\tproduct.setActualLength(productDTO.getActualLength());\r\n\t\t\t\t\tproduct.setActualWidth(productDTO.getActualWidth());\r\n\t\t\t\t\tproduct.setActualWeight(productDTO.getActualWeight());\r\n\t\t\t\t\tproduct.setCategory(category);\r\n\t\t\t\t\tproduct.setStatus(productDTO.getStatus());\r\n\t\t\t\t\tproduct.setNote(productDTO.getNote());\r\n\t\t\t\t\tproduct.setWereWgtDimChanged(productDTO.getWereWgtDimChanged());\r\n\t\t\t\t\tproduct.setConsideredForXML(productDTO.getConsideredForXML());\r\n\r\n\t\t\t\t\tif (productDTO.getStatus() == ProductStatus.DISCONTINUED) {\r\n\t\t\t\t\t\tproduct.setDiscontinuedStartDate(productDTO.getDiscontinuedStartDate());\r\n\t\t\t\t\t\tString productSubstitute = productDTO.getLoyaltyProductIdSub();\r\n\t\t\t\t\t\tif (productSubstitute != null) {\r\n\t\t\t\t\t\t\tif (productSubstitute.length() > 0 && !productSubstitute.matches(""^\\\\s*$"")) {\r\n\t\t\t\t\t\t\t\tproduct.setLoyaltyProductIdSub(productDTO.getLoyaltyProductIdSub());\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else if (productDTO.getStatus() == ProductStatus.DISABLED) {\t\t\t\t\t\t\r\n\t\t\t\t\t\tDate discontinuedStartDate = productDTO.getDiscontinuedStartDate();\r\n\t\t\t\t\t\tif (discontinuedStartDate != null) {\r\n\t\t\t\t\t\t\tproduct.setDiscontinuedStartDate(discontinuedStartDate);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tString productSubstitute = productDTO.getLoyaltyProductIdSub();\r\n\t\t\t\t\t\tif (productSubstitute != null) {\r\n\t\t\t\t\t\t\tproduct.setLoyaltyProductIdSub(productDTO.getLoyaltyProductIdSub());\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//51 is N/A. To allow don't pick any option in edit product page in Admin\r\n\t\t\t\t\t//I do this trick\r\n\t\t\t\t\tif(productDTO.getMainFilterTypeId() != -1)\r\n\t\t\t\t\t\tproduct.setTypeId(productDTO.getMainFilterTypeId());\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tproduct.setTypeId(new Long(51));\r\n\t\t\t\t\t\r\n\t\t\t\t\tdaoManager.getProductDao().updateProduct(product);\r\n\t\t\t\t\t\r\n\t\t\t\t\t//Manufacture Product Id\r\n\t\t\t\t\tIterator<ProductModelDTO> stringIterator = productDTO.getManufactureProductList().iterator();\r\n\t\t\t\t\tProductModelNumber productModelNumber;\r\n\t\t\t\t\tProductModelDTO productModelDTO;\r\n\t\t\t\t\twhile(stringIterator.hasNext()) {\r\n\t\t\t\t\t\tproductModelNumber = new ProductModelNumber();\r\n\t\t\t\t\t\tproductModelDTO = (ProductModelDTO)stringIterator.next();\r\n\t\t\t\t\t\tproductModelNumber.setModelNumber(productModelDTO.getName());\r\n\t\t\t\t\t\tproductModelNumber.setQuantity(productModelDTO.getQuantity());\r\n\t\t\t\t\t\tproductModelNumber.setSupplier(productModelDTO.getSupplier());\r\n\t\t\t\t\t\tproductModelNumber.setPrice(productModelDTO.getPrice());\r\n\t\t\t\t\t\tproductModelNumber.setMsrp(productModelDTO.getMsrp());\r\n\t\t\t\t\t\tproductModelNumber.setId(productModelDTO.getId());\r\n\t\t\t\t\t\tproductModelNumber.setProductId(product.getId());\r\n\t\t\t\t\t\tif(productModelNumber.getId() != 0) {\r\n\t\t\t\t\t\t    if(!productModelDTO.getName().trim().equals(""""))\r\n\t\t\t\t\t\t    \tdaoManager.getProductDao().updateProductModelNumber(productModelNumber);\r\n\t\t\t\t\t\t    else\r\n\t\t\t\t\t\t    \tdaoManager.getProductDao().deleteProductModelNumber(productModelNumber);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t    if(!productModelDTO.getName().trim().equals("""") )\r\n\t\t\t\t\t\t\t daoManager.getProductDao().insertProductModelNumber(productModelNumber);\r\n\t\t\t\t\t\t} \r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\t//link url\r\n\t\t\t\t\tif(productDTO.getLinkList() != null)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tProductLink productLink = new ProductLink();\r\n\t\t\t\t\t\tproductLink.setId(productDTO.getLinkList().get(0).getId());\r\n\t\t\t\t\t\tproductLink.setLink(productDTO.getLinkList().get(0).getLink());\r\n\t\t\t\t\t\tproductLink.setProductId(productDTO.getLinkList().get(0).getProductId());\r\n\t\t\t\t\t\tif(productLink.getId() !=0 )\r\n\t\t\t\t\t\t\tdaoManager.getProductDao().updateProductLink(productLink);\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tdaoManager.getProductDao().insertProductLink(productLink);\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn product;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t} catch (DaoException e) {\r\n\t\t\tthrow (new ServiceException(e));\r\n\t\t}\r\n\t}\r\n\t\r\n\t\r\n\t@SuppressWarnings(""unchecked"")\r\n\t@Override\r\n\tpublic List<ProductDTO> getAllProdcut() throws ServiceException{\r\n\r\n\t\tList <Product> productList = new ArrayList<Product>();\r\n\t\t\r\n\t\ttry {\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\tproductList = (List <Product>) daoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t\t\t@Override\r\n\t\t\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\r\n\t\t\t\t\t\t\t\tthrows DaoException {\r\n\t\t\t\t\t\t\treturn daoManager.getProductDao().getAllProdcut();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t} catch (DaoException de) {\r\n\t\t\tthrow (new ServiceException(de));\r\n\t\t}\r\n\t\treturn(DTOFactory.getProductDTOList(productList));\r\n\t}\t\r\n\r\n\t@Override\r\n\tpublic void updateSellingPriceBrand(final UserProductDTO userProductDTO)\r\n\t\t\tthrows ServiceException {\r\n\r\n\t\ttry {\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\tdaoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t\t@Override\r\n\t\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\r\n\t\t\t\t\t\t\tthrows DaoException {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\tUserBrandDiscount userBrandDiscount = new UserBrandDiscount();\r\n\t\t\t\t\t\tuserBrandDiscount.setBrandId(userProductDTO.getBrandId());\r\n\t\t\t\t\t\tuserBrandDiscount.setDiscount(userProductDTO.getBrandDiscount());\r\n\t\t\t\t\t\tuserBrandDiscount.setUserId(userProductDTO.getUserId());\r\n\t\t\t\t\t\t//update selling price by brand\r\n\t\t\t\t\t\tdaoManager.getProductDao().updateSellingPriceBrand(userBrandDiscount);\r\n\t\t\t\t\t\t// insert user brand discount or category\r\n\t\t\t\t\t\tUserBrandDiscount ubd = daoManager.getUserBrandDiscountDao().getUserBrandDiscount(userBrandDiscount);\r\n\t\t\t\t\t\tif( ubd == null)\r\n\t\t\t\t\t\t\tdaoManager.getUserBrandDiscountDao().insertEntity(userBrandDiscount);\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tubd.setDiscount(userBrandDiscount.getDiscount());\r\n\t\t\t\t\t\t\tdaoManager.getUserBrandDiscountDao().updateEntity(ubd);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn null;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t});\r\n\t\t} catch (DaoException de) {\r\n\t\t\tthrow (new ServiceException(de));\r\n\t\t}\r\n\t}\r\n\t\r\n\t@Override\r\n\tpublic void updateSellingPriceCategory(final UserProductDTO userProductDTO)\r\n\t\t\tthrows ServiceException {\r\n\r\n\t\ttry {\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\tdaoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t\t@Override\r\n\t\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\r\n\t\t\t\t\t\t\tthrows DaoException {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\tUserCategoryDiscount userCatDiscount = new UserCategoryDiscount();\r\n\t\t\t\t\t\tuserCatDiscount.setCategoryId(userProductDTO.getCategoryId());\r\n\t\t\t\t\t\tuserCatDiscount.setDiscount(userProductDTO.getCategoryDiscount());\r\n\t\t\t\t\t\tuserCatDiscount.setUserId(userProductDTO.getUserId());\r\n\t\t\t\t\t\t//update selling price by brand\r\n\t\t\t\t\t\tdaoManager.getProductDao().updateSellingPriceCategory(userCatDiscount);\r\n\t\t\t\t\t\t// insert user brand discount or category\r\n\t\t\t\t\t\tUserCategoryDiscount  ucd = daoManager.getUserCategoryDiscountDao().getUserCategoryDiscount(userCatDiscount);\r\n\t\t\t\t\t\tif( ucd == null)\r\n\t\t\t\t\t\t\tdaoManager.getUserCategoryDiscountDao().insertEntity(userCatDiscount);\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tucd.setDiscount(userCatDiscount.getDiscount());\r\n\t\t\t\t\t\t\tdaoManager.getUserCategoryDiscountDao().updateEntity(ucd);\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn null;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t});\r\n\t\t} catch (DaoException de) {\r\n\t\t\tthrow (new ServiceException(de));\r\n\t\t}\r\n\t}\r\n\t\r\n\t@Override\r\n\tpublic CommonUserDiscountDTO getUserBrandDiscount(final CommonUserDiscountDTO userBrandDiscountDTO)\r\n\t\t\tthrows ServiceException {\r\n\t\tUserBrandDiscount discountResult = null;\r\n\t\ttry {\r\n\t\t\tdiscountResult = (UserBrandDiscount) daoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\r\n\t\t\t\t\t\r\n\t\t\t\t\tUserBrandDiscount userBrandDiscount = new UserBrandDiscount();\r\n\t\t\t\t\tuserBrandDiscount.setBrandId(userBrandDiscountDTO.getBrandId());\t\t\t\t\r\n\t\t\t\t\tuserBrandDiscount.setUserId(userBrandDiscountDTO.getUserId());\r\n\r\n\t\t\t\t\treturn daoManager.getUserBrandDiscountDao().getUserBrandDiscount(userBrandDiscount);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}catch (DaoException de) {\r\n\t\t\tthrow (new ServiceException(de));\r\n\t\t}\r\n\t\t\r\n\t\tif(discountResult != null){\r\n\t\t\tCommonUserDiscountDTO udDTO = new CommonUserDiscountDTO();\r\n\t\t\tudDTO.setCategoryId(discountResult.getBrandId());\r\n\t\t\tudDTO.setUserId(discountResult.getUserId());\r\n\t\t\tudDTO.setDiscount(discountResult.getDiscount());\r\n\t\t\treturn udDTO;\t\t\t\t\t\t\t\t\t\r\n\t\t}\t\t\r\n\t\treturn null;\r\n\t}\r\n\r\n\t@Override\r\n\tpublic CommonUserDiscountDTO getUserCategoryDiscount(final CommonUserDiscountDTO userDiscountDTO) \r\n\t\t\tthrows ServiceException {\r\n\t\tUserCategoryDiscount discountResult = null;\r\n\t\ttry {\r\n\t\t\tdiscountResult = (UserCategoryDiscount) daoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\r\n\t\t\t\t\t\r\n\t\t\t\t\tUserCategoryDiscount userCatDiscount = new UserCategoryDiscount();\r\n\t\t\t\t\tuserCatDiscount.setCategoryId(userDiscountDTO.getCategoryId());\t\t\t\t\r\n\t\t\t\t\tuserCatDiscount.setUserId(userDiscountDTO.getUserId());\r\n\r\n\t\t\t\t\treturn daoManager.getUserCategoryDiscountDao().getUserCategoryDiscount(userCatDiscount);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}catch (DaoException de) {\r\n\t\t\tthrow (new ServiceException(de));\r\n\t\t}\r\n\t\t\r\n\t\tif(discountResult != null){\r\n\t\t\tCommonUserDiscountDTO udDTO = new CommonUserDiscountDTO();\r\n\t\t\tudDTO.setCategoryId(discountResult.getCategoryId());\r\n\t\t\tudDTO.setUserId(discountResult.getUserId());\r\n\t\t\tudDTO.setDiscount(discountResult.getDiscount());\r\n\t\t\treturn udDTO;\t\t\t\t\t\t\t\t\t\r\n\t\t}\r\n\t\t\r\n\t\treturn null;\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void updateSellingPriceProduct(final UserProductDTO producDTO)\r\n\t\t\tthrows ServiceException {\r\n\t\ttry {\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\tdaoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t\t@Override\r\n\t\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\r\n\t\t\t\t\t\t\tthrows DaoException {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\tProduct product = new Product();\r\n\t\t\t\t\t\tproduct.setUserId(producDTO.getUserId());\r\n\t\t\t\t\t\tproduct.setId(producDTO.getId());\r\n\t\t\t\t\t\tproduct.setUserPrice(producDTO.getUserPrice());\r\n\t\t\t\t\t\tproduct.setPriceType(PriceType.MANUEL_PRICE_SET.getValue());\r\n\t\t\t\t\t\t//update selling price by product\r\n\t\t\t\t\t\tdaoManager.getProductDao().updateSellingPriceProduct(product);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\treturn null;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t});\r\n\t\t} catch (DaoException de) {\r\n\t\t\tthrow (new ServiceException(de));\r\n\t\t}\t\t\r\n\t}\r\n\t\r\n\t@Override\r\n\tpublic void updateUserProductStatus(final UserProductDTO producDTO)\r\n\t\t\tthrows ServiceException {\r\n\t\ttry {\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\tdaoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t\t@Override\r\n\t\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\r\n\t\t\t\t\t\t\tthrows DaoException {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\tProduct product = new Product();\r\n\t\t\t\t\t\tproduct.setUserId(producDTO.getUserId());\r\n\t\t\t\t\t\tproduct.setId(producDTO.getId());\r\n\t\t\t\t\t\tproduct.setUserProductStatus(producDTO.getUserProductStatus());\r\n\t\t\t\t\t\tdaoManager.getProductDao().updateUserProductStatus(product);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\treturn null;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t});\r\n\t\t} catch (DaoException de) {\r\n\t\t\tthrow (new ServiceException(de));\r\n\t\t}\t\t\r\n\t}\r\n\t\r\n\t\r\n\t@SuppressWarnings(""unchecked"")\r\n\t@Override\r\n\tpublic List<CommonDTO> getAllMainSpecification(LoyaltyEnum language)\r\n\t\t\tthrows ServiceException {\r\n\t\tList<Specification> list = null;\r\n\t\ttry {\r\n\t\t\tlist = (List<Specification>) daoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\r\n\t\t\t\t\treturn daoManager.getSpecificationDao().getAllMainSpecification();\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t} catch (DaoException e) {\r\n\t\t\tthrow (new ServiceException(e));\t\t\t\r\n\t\t} \r\n\t\t\r\n\t\treturn DTOFactory.getAllCommonDTOFromSpecification(list, language);\r\n\t}\r\n\t\r\n\t@SuppressWarnings(""unchecked"")\r\n\t@Override\r\n\tpublic List<ProductDTO> getAllProductQuery(final QueryDTO dto)\r\n\t\t\tthrows ServiceException {\r\n\t\tList <Product> productList = new ArrayList<Product>();\r\n\t\t\r\n\t\ttry {\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\tproductList = (List<Product>) daoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t\t\t@Override\r\n\t\t\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\r\n\t\t\t\t\t\t\t\tthrows DaoException {\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tQuery qry = new Query();\r\n\t\t\t\t\t\t\tBrand brand = null;\r\n\t\t\t\t\t\t\tif(dto.getBrand().getId()>0){\r\n\t\t\t\t\t\t\t\tbrand = new Brand();\r\n\t\t\t\t\t\t\t\tbrand.setId(dto.getBrand().getId());\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tCategory cat = null;\r\n\t\t\t\t\t\t\tif(dto.getCategory().getId()>0){\r\n\t\t\t\t\t\t\t\tcat = new Category();\r\n\t\t\t\t\t\t\t\tcat.setId(dto.getCategory().getId());\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tqry.setBrand(brand);\r\n\t\t\t\t\t\t\tqry.setCategory(cat);\r\n\t\t\t\t\t\t\tqry.setTypeId(null);\r\n\t\t\t\t\t\t\tqry.setDiscontinued(dto.isDiscontinued());\r\n\t\t\t\t\t\t\tqry.setDisabled(dto.isDisabled());\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\treturn daoManager.getProductDao().getAllProductQuery(qry);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t} catch (DaoException de) {\r\n\t\t\tthrow (new ServiceException(de));\r\n\t\t}\r\n\t\treturn(DTOFactory.getBasicProductDTOList(productList));\r\n\t}\r\n\r\n\r\n\t@SuppressWarnings(""unchecked"")\r\n\t@Override\r\n\tpublic List<ProductDTO> getProductList(final SearchRequestDTO searchRequest) throws ServiceException {\r\n\t\tList <Product> productList = new ArrayList<Product>();\r\n\t\ttry {\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\tproductList = (List <Product>) daoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t\t\t@Override\r\n\t\t\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\r\n\t\t\t\t\t\t\t\tthrows DaoException {\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tSelect select = new Select();\r\n\t\t\t\t\t\t\tselect.setQuery(searchRequest.getQuery());\r\n\t\t\t\t\t\t\tselect.setUserId(searchRequest.getUserId());\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tif(searchRequest.getSearchType() == SearchType.NAME.getValue()){\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\treturn daoManager.getProductDao().getProductByName(select);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(searchRequest.getSearchType() == SearchType.BRAND.getValue()){\r\n\t\t\t\t\t\t\t\treturn daoManager.getProductDao().getAllProdcutByBrand(select);\t\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(searchRequest.getSearchType() == SearchType.CATEGORY.getValue()){\r\n\t\t\t\t\t\t\t\treturn daoManager.getProductDao().getAllProdcutByCategory(select);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(searchRequest.getSearchType() == SearchType.MAIN_SPECIFICATION.getValue()){\r\n\t\t\t\t\t\t\t\treturn daoManager.getProductDao().getAllProdcutBySpecification(select);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(searchRequest.getSearchType() == SearchType.CATEGORY_GROUP.getValue()){\r\n\t\t\t\t\t\t\t\treturn daoManager.getProductDao().getAllProdcutByCategoryGroup(select);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\treturn daoManager.getProductDao().getAllProdcut();\r\n\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t} catch (DaoException de) {\r\n\t\t\tthrow (new ServiceException(de));\r\n\t\t}\t\t\r\n\t\treturn DTOFactory.getProductDTOList(productList);\r\n \r\n\t}\r\n\t\r\n\t@SuppressWarnings(""unchecked"")\r\n\t@Override\r\n\tpublic List<UserDTO> getAllActiveClients(final Long productId) throws ServiceException {\r\n\r\n\t\tList<User> activeClientsList = new ArrayList<User>();\r\n\t\t\r\n\t\ttry {\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\tactiveClientsList = (List<User>) daoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\r\n\t\t\t\t\t\tthrows DaoException {\r\n\t\t\t\t\tProduct product = new Product();\r\n\t\t\t\t\tSelect select = new Select();\r\n\t\t\t\t\tselect.setQuery(String.valueOf(productId));\r\n\t\t\t\t\tproduct = daoManager.getProductDao().getProduct(select);\r\n\t\t\t\t\treturn product.getActiveClientsList();\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t} catch (DaoException de) {\r\n\t\t\tthrow (new ServiceException(de));\r\n\t\t}\r\n\t\treturn(DTOFactory.getActiveClients(activeClientsList));\r\n\t}\r\n\t\r\n\t@SuppressWarnings(""unchecked"")\r\n\t@Override\r\n\tpublic List<ProductDTO> getAllDiscontinuedProducts() throws ServiceException {\r\n\r\n\t\tList <Product> productList = new ArrayList<Product>();\r\n\t\t\r\n\t\ttry {\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\tproductList = (List <Product>) daoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t\t\t@Override\r\n\t\t\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\r\n\t\t\t\t\t\t\t\tthrows DaoException {\r\n\t\t\t\t\t\t\treturn daoManager.getProductDao().getAllDiscontinuedProducts();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t} catch (DaoException de) {\r\n\t\t\tthrow (new ServiceException(de));\r\n\t\t}\r\n\t\treturn(DTOFactory.getProductDTOList(productList));\r\n\t}\r\n\t\r\n\t@Override\r\n\tpublic void updateStatusToDisabled(final ProductDTO productDTO) throws ServiceException {\r\n\t\ttry {\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\tdaoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t\t@Override\r\n\t\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\r\n\t\t\t\t\t\t\tthrows DaoException {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\tProduct product = new Product();\r\n\t\t\t\t\t\tproduct.setId(productDTO.getId());\r\n\t\t\t\t\t\tdaoManager.getProductDao().updateStatusToDisabled(product);\r\n\t\t\t\t\t\treturn null;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t});\r\n\t\t} catch (DaoException de) {\r\n\t\t\tthrow (new ServiceException(de));\r\n\t\t}\t\t\r\n\t}\r\n\t\r\n\t@Override\r\n\tpublic ProductDTO getProductIdFromLSProductId(final String lSProductId) throws ServiceException {\r\n\t\tProduct productResult = new Product();\r\n\t\t\r\n\t\ttry {\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\tproductResult = (Product) daoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\r\n\t\t\t\t\t\tthrows DaoException {\r\n\t\t\t\t\tProduct product = daoManager.getProductDao().getProductIdFromLSProductId(lSProductId);\r\n\t\t\t\t\treturn product;\r\n\t\t\t\t}\r\n\t\t\t});\t\t\t\r\n\t\t} catch (DaoException de) {\r\n\t\t\tthrow (new ServiceException(de));\r\n\t\t}\t\t\r\n\t\tif(productResult == null) return (null);\r\n\t\treturn (DTOFactory.getProductDTO(productResult));\t\t\t\t\r\n\t}\r\n\t\r\n\t\r\n\t\r\n\t@Override\r\n\tpublic ProductDTO getProductByLsProductId(final String lSProductId) throws ServiceException {\r\n\t\tProduct productResult = new Product();\r\n\t\t\r\n\t\ttry {\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\tproductResult = (Product) daoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\r\n\t\t\t\t\t\tthrows DaoException {\r\n\t\t\t\t\tProduct product = daoManager.getProductDao().getProductByLsProductId(lSProductId);\r\n\t\t\t\t\treturn product;\r\n\t\t\t\t}\r\n\t\t\t});\t\t\t\r\n\t\t} catch (DaoException de) {\r\n\t\t\tthrow (new ServiceException(de));\r\n\t\t}\t\t\r\n\t\tif(productResult == null) return (null);\r\n\t\treturn (DTOFactory.getProductDTO(productResult));\t\t\t\t\r\n\t}\r\n\t\r\n\t\r\n\t\r\n\t\r\n\t\r\n\t\r\n\t@Override \r\n\tpublic Long createUserProductPrice(final UserProductPriceDTO userProductPriceDTO) throws ServiceException {\r\n\t\tUserProductPrice userProductPriceResult = new UserProductPrice();\t\t\r\n\t\ttry {\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\tuserProductPriceResult = (UserProductPrice) daoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\t\t\t\t\t\r\n\t\t\t\t\tUserProductPrice userProductPrice = new UserProductPrice();\t\t\t\t\t\r\n\t\t\t\t\tuserProductPrice.setUserId(userProductPriceDTO.getUserId());\t\t\t\t\r\n\t\t\t\t\tuserProductPrice.setProductId(userProductPriceDTO.getProductId());\t\t\t\t\t\r\n\t\t\t\t\tuserProductPrice.setPrice(userProductPriceDTO.getPrice());\r\n\t\t\t\t\tuserProductPrice.setProfit(userProductPriceDTO.getProfit());\r\n\t\t\t\t\tuserProductPrice.setDiscount(userProductPriceDTO.getDiscount());\r\n\t\t\t\t\tuserProductPrice.setExcluded(userProductPriceDTO.getExcluded());\t\t\t\t\t\r\n\t\t\t\t\tuserProductPrice.setUserStatus(userProductPriceDTO.getUserStatus());\r\n\t\t\t\t\tuserProductPrice.setPriceType(userProductPriceDTO.getPriceType());\t\t\t\t\t\r\n\t\t\t\t\tdaoManager.getProductDao().insertUserProductPrice(userProductPrice);\t\t\t\t\t\r\n\t\t\t\t\treturn userProductPrice;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\treturn userProductPriceResult.getId();\r\n\t\t} catch (DaoException de) {\r\n\t\t\tthrow (new ServiceException(de));\r\n\t\t}\t\t\r\n\t}\t\r\n\t\r\n\t@SuppressWarnings(""unchecked"")\r\n\t@Override\r\n\tpublic List<UserProductPriceDTO> getUserProductPriceList(final Long productId) throws ServiceException {\r\n\t\tList<UserProductPrice> userProductPriceList = new ArrayList<UserProductPrice>();\t\t\r\n\t\ttry {\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\tuserProductPriceList = (List<UserProductPrice>) daoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\r\n\t\t\t\t\tList<UserProductPrice> userProductPriceListing = new ArrayList<UserProductPrice>();\r\n\t\t\t\t\tSelect select = new Select();\r\n\t\t\t\t\tselect.setProductId(productId);\r\n\t\t\t\t\tuserProductPriceListing = daoManager.getProductDao().getUserProductPriceList(select);\t\t\t\t\t\r\n\t\t\t\t\treturn userProductPriceListing;\r\n\t\t\t\t}\r\n\t\t\t});\t\t\t\r\n\t\t} catch (DaoException de) {\r\n\t\t\tthrow (new ServiceException(de));\r\n\t\t}\r\n\t\treturn(DTOFactory.getUserProductPriceDTOList(userProductPriceList));\r\n\t}\r\n\t\r\n\t@Override\r\n\tpublic void updateUserProductPrice(final UserProductPriceDTO userProductPriceDTO) throws ServiceException {\r\n\t\ttry {\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\tdaoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t\t@Override\r\n\t\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\t\r\n\t\t\t\t\t\tUserProductPrice userProductPrice = new UserProductPrice();\t\t\t\t\t\t\r\n\t\t\t\t\t\tuserProductPrice.setUserId(userProductPriceDTO.getUserId());\t\t\t\t\r\n\t\t\t\t\t\tuserProductPrice.setProductId(userProductPriceDTO.getProductId());\t\r\n\t\t\t\t\t\tuserProductPrice.setPrice(userProductPriceDTO.getPrice());\r\n\t\t\t\t\t\tuserProductPrice.setProfit(userProductPriceDTO.getProfit());\r\n\t\t\t\t\t\tuserProductPrice.setDiscount(userProductPriceDTO.getDiscount());\r\n\t\t\t\t\t\tuserProductPrice.setExcluded(userProductPriceDTO.getExcluded());\t\t\t\t\t\r\n\t\t\t\t\t\tuserProductPrice.setPriceType(userProductPriceDTO.getPriceType());\r\n\t\t\t\t\t\tdaoManager.getProductDao().updateUserProductPrice(userProductPrice);\r\n\t\t\t\t\t\treturn null;\r\n\t\t\t\t\t}\r\n\t\t\t});\r\n\t\t} catch (DaoException de) {\r\n\t\t\tthrow (new ServiceException(de));\r\n\t\t}\t\t\r\n\t}\t\r\n\t\r\n\t@Override\r\n\tpublic UserProductPriceDTO getUserProductPriceInformation(final Long productId, final Long userId) throws ServiceException {\r\n\t\tUserProductPrice userProductPriceResult = new UserProductPrice();\t\t\r\n\t\ttry {\t\t\t\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\tuserProductPriceResult = (UserProductPrice) daoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\r\n\t\t\t\t\t\tthrows DaoException {\r\n\t\t\t\t\tUserProductPrice userProductPrice = new UserProductPrice();\r\n\t\t\t\t\tSelect select = new Select();\r\n\t\t\t\t\tselect.setProductId(productId);\r\n\t\t\t\t\tselect.setUserId(userId);\r\n\t\t\t\t\tuserProductPrice = daoManager.getProductDao().getUserProductPrice(select);\r\n\t\t\t\t\treturn userProductPrice;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t} catch (DaoException de) {\r\n\t\t\tthrow (new ServiceException(de));\r\n\t\t}\r\n\t\treturn (DTOFactory.getUserProductPriceDTO(userProductPriceResult));\r\n\t}\r\n\t\r\n\t\r\n\t@Override\r\n\tpublic UserProductPriceDTO getUsrPPriceByLsproductId(final Long userId, final String lsProductId) throws ServiceException {\r\n\t\tUserProductPrice userProductPriceResult = null;\t\r\n\t\ttry {\t\t\t\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\tuserProductPriceResult = (UserProductPrice) daoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\r\n\t\t\t\t\t\tthrows DaoException {\r\n\t\t\t\t\treturn daoManager.getProductDao().getUsrPPriceByLsproductId(userId,lsProductId);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t} catch (DaoException de) {\r\n\t\t\tthrow (new ServiceException(de));\r\n\t\t}\r\n\t\treturn (DTOFactory.getUserProductPriceDTO(userProductPriceResult));\r\n\t}\r\n\r\n\t\r\n\t\r\n\t@Override\r\n\tpublic UserProductPriceDTO getUsrPPriceByProductId(final Long userId, final Long productId) throws ServiceException {\r\n\t\tUserProductPrice userProductPriceResult = null;\t\r\n\t\ttry {\t\t\t\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\tuserProductPriceResult = (UserProductPrice) daoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\r\n\t\t\t\t\t\tthrows DaoException {\r\n\t\t\t\t\treturn daoManager.getProductDao().getUsrPPriceByProductId(userId,productId);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t} catch (DaoException de) {\r\n\t\t\tthrow (new ServiceException(de));\r\n\t\t}\r\n\t\treturn (DTOFactory.getUserProductPriceDTO(userProductPriceResult));\r\n\t}\r\n\r\n\t\r\n\t\r\n\t\r\n\t\r\n\t@SuppressWarnings(""unchecked"")\r\n\t@Override\r\n\tpublic List<ProvinceDTO> getAllProvinces() throws ServiceException {\r\n\t\tList<Province> provinceList = new ArrayList<Province>();\t\t\r\n\t\ttry {\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\tprovinceList = (List<Province>) daoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\r\n\t\t\t\t\treturn daoManager.getProductDao().getAllProvinces();\r\n\t\t\t\t}\r\n\t\t\t});\t\t\t\r\n\t\t} catch (DaoException de) {\r\n\t\t\tthrow (new ServiceException(de));\r\n\t\t}\r\n\t\treturn(DTOFactory.getProvinceDTOList(provinceList));\r\n\t}\r\n\t\r\n\t@SuppressWarnings(""unchecked"")\r\n\t@Override\r\n\tpublic List<CityDTO> getAllCities(final Long provinceId) throws ServiceException {\r\n\t\tList<City> cityList = new ArrayList<City>();\t\t\r\n\t\ttry {\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\tcityList = (List<City>) daoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\r\n\t\t\t\t\tList<City> userProductPriceListing = new ArrayList<City>();\r\n\t\t\t\t\tSelect select = new Select();\r\n\t\t\t\t\tselect.setProvinceId(provinceId);\r\n\t\t\t\t\tuserProductPriceListing = daoManager.getProductDao().getAllCities(select);\t\t\t\r\n\t\t\t\t\treturn userProductPriceListing;\r\n\t\t\t\t}\r\n\t\t\t});\t\t\t\r\n\t\t} catch (DaoException de) {\r\n\t\t\tthrow (new ServiceException(de));\r\n\t\t}\r\n\t\treturn(DTOFactory.getCityDTOList(cityList));\r\n\t}\r\n\t\r\n\t@SuppressWarnings(""unchecked"")\r\n\t@Override\r\n\tpublic List<CityDTO> getCities() throws ServiceException {\r\n\t\tList<City> cityList = new ArrayList<City>();\t\t\r\n\t\ttry {\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\tcityList = (List<City>) daoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\r\n\t\t\t\t\treturn daoManager.getProductDao().getCities();\r\n\t\t\t\t}\r\n\t\t\t});\t\t\t\r\n\t\t} catch (DaoException de) {\r\n\t\t\tthrow (new ServiceException(de));\r\n\t\t}\r\n\t\treturn(DTOFactory.getCityDTOList(cityList));\r\n\t}\r\n\t\r\n\t@Override\r\n\tpublic Long createShippingCity(final ShippingCityDTO shippingCityDTO) throws ServiceException {\r\n\t\tShippingCity shippingCityResult = new ShippingCity();\r\n\t\ttry {\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\tshippingCityResult = (ShippingCity) daoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\t\t\t\t\r\n\t\t\t\t\tShippingCity shippingCity = new ShippingCity();\r\n\t\t\t\t\tshippingCity.setProductId(shippingCityDTO.getProductId());\r\n\t\t\t\t\tshippingCity.setCityId(shippingCityDTO.getCityId());\r\n\t\t\t\t\tshippingCity.setExpeditedParcelPrice(shippingCityDTO.getExpeditedParcelPrice());\r\n\t\t\t\t\tdaoManager.getProductDao().insertShippingCity(shippingCity);\r\n\t\t\t\t\treturn shippingCity;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\treturn shippingCityResult.getId();\r\n\t\t} catch (DaoException de) {\r\n\t\t\tthrow (new ServiceException(de));\r\n\t\t}\r\n\t}\r\n\t\r\n\t@Override\r\n\tpublic Long createShippingProvince(final ShippingProvinceDTO shippingProvinceDTO) throws ServiceException {\r\n\t\tShippingProvince shippingProvinceResult = new ShippingProvince();\r\n\t\ttry {\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\tshippingProvinceResult = (ShippingProvince) daoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\t\t\t\t\t\r\n\t\t\t\t\tShippingProvince shippingProvince = new ShippingProvince();\r\n\t\t\t\t\tshippingProvince.setProductId(shippingProvinceDTO.getProductId());\r\n\t\t\t\t\tshippingProvince.setProvinceId(shippingProvinceDTO.getProvinceId());\r\n\t\t\t\t\tshippingProvince.setWeightedTotalProvince(shippingProvinceDTO.getWeightedTotalProvince());\r\n\t\t\t\t\tdaoManager.getProductDao().insertShippingProvince(shippingProvince);\r\n\t\t\t\t\treturn shippingProvince;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\treturn shippingProvinceResult.getId();\r\n\t\t} catch (DaoException de) {\r\n\t\t\tthrow (new ServiceException(de));\r\n\t\t}\r\n\t}\r\n\t\r\n\t@Override\r\n\tpublic Long createShippingTotal(final ShippingTotalDTO shippingTotalDTO) throws ServiceException {\r\n\t\tShippingTotal shippingTotalResult = new ShippingTotal();\r\n\t\ttry {\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\tshippingTotalResult = (ShippingTotal) daoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\t\t\t\t\t\r\n\t\t\t\t\tShippingTotal shippingTotal = new ShippingTotal();\r\n\t\t\t\t\tshippingTotal.setProductId(shippingTotalDTO.getProductId());\r\n\t\t\t\t\tshippingTotal.setProvinceId(shippingTotalDTO.getProvinceId());\r\n\t\t\t\t\tshippingTotal.setUserId(shippingTotalDTO.getUserId());\r\n\t\t\t\t\tshippingTotal.setWeightedProvinceTotalWithCoverage(shippingTotalDTO.getWeightedProvinceTotalWithCoverage());\r\n\t\t\t\t\tshippingTotal.setAverageShippingTotal(shippingTotalDTO.getAverageShippingTotal());\r\n\t\t\t\t\tdaoManager.getProductDao().insertShippingTotal(shippingTotal);\r\n\t\t\t\t\treturn shippingTotal;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\treturn shippingTotalResult.getId();\r\n\t\t} catch (DaoException de) {\r\n\t\t\tthrow (new ServiceException(de));\r\n\t\t}\r\n\t}\r\n\t\r\n\t@Override\r\n\tpublic void updateUPPShippingCoverage(final UserProductPriceDTO userProductPriceDTO) throws ServiceException {\r\n\t\ttry {\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\tdaoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t\t@Override\r\n\t\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\t\r\n\t\t\t\t\t\tUserProductPrice userProductPrice = new UserProductPrice();\r\n\t\t\t\t\t\tuserProductPrice.setUserId(userProductPriceDTO.getUserId());\t\t\t\t\r\n\t\t\t\t\t\tuserProductPrice.setProductId(userProductPriceDTO.getProductId());\r\n\t\t\t\t\t\tuserProductPrice.setShippingCoverage(userProductPriceDTO.getShippingCoverage());\r\n\t\t\t\t\t\tdaoManager.getProductDao().updateUPPShippingCoverage(userProductPrice);\r\n\t\t\t\t\t\treturn null;\r\n\t\t\t\t\t}\r\n\t\t\t});\r\n\t\t} catch (DaoException de) {\r\n\t\t\tthrow (new ServiceException(de));\r\n\t\t}\r\n\t}\r\n\t\r\n\t@Override\r\n\tpublic void updateUPPShippingTotalCanada(final UserProductPriceDTO userProductPriceDTO) throws ServiceException {\r\n\t\ttry {\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\tdaoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t\t@Override\r\n\t\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\t\r\n\t\t\t\t\t\tUserProductPrice userProductPrice = new UserProductPrice();\r\n\t\t\t\t\t\tuserProductPrice.setUserId(userProductPriceDTO.getUserId());\t\t\t\t\r\n\t\t\t\t\t\tuserProductPrice.setProductId(userProductPriceDTO.getProductId());\r\n\t\t\t\t\t\tuserProductPrice.setShippingTotalCanada(userProductPriceDTO.getShippingTotalCanada());\r\n\t\t\t\t\t\tdaoManager.getProductDao().updateUPPShippingTotalCanada(userProductPrice);\r\n\t\t\t\t\t\treturn null;\r\n\t\t\t\t\t}\r\n\t\t\t});\r\n\t\t} catch (DaoException de) {\r\n\t\t\tthrow (new ServiceException(de));\r\n\t\t}\r\n\t}\r\n\t\r\n\t@SuppressWarnings(""unchecked"")\r\n\t@Override\r\n\tpublic List<ProductDTO> getProductListByCategoryGroupId(final Long categoryGroupId) throws ServiceException {\r\n\t\tList<Product> productList = new ArrayList<Product>();\t\t\r\n\t\ttry {\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\tproductList = (List<Product>) daoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\r\n\t\t\t\t\tList<Product> productListing = new ArrayList<Product>();\r\n\t\t\t\t\tSelect select = new Select();\r\n\t\t\t\t\tselect.setCategoryGoupeId(categoryGroupId);\r\n\t\t\t\t\tproductListing = daoManager.getProductDao().getProductListByCategoryGroupId(select);\t\t\t\r\n\t\t\t\t\treturn productListing;\r\n\t\t\t\t}\r\n\t\t\t});\t\t\t\r\n\t\t} catch (DaoException de) {\r\n\t\t\tthrow (new ServiceException(de));\r\n\t\t}\r\n\t\treturn(DTOFactory.getProductDTOList(productList));\r\n\t}\r\n\t\r\n\t@SuppressWarnings(""unchecked"")\r\n\t@Override\r\n\tpublic List<ProductDTO> getAllValidStatusProducts(final Long userId) throws ServiceException {\r\n\t\tList<Product> productList = new ArrayList<Product>();\t\t\r\n\t\ttry {\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\tproductList = (List<Product>) daoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\r\n\t\t\t\t\tList<Product> productListing = new ArrayList<Product>();\r\n\t\t\t\t\tSelect select = new Select();\r\n\t\t\t\t\tselect.setUserId(userId);\r\n\t\t\t\t\tproductListing = daoManager.getProductDao().getAllValidStatusProducts(select);\t\t\t\r\n\t\t\t\t\treturn productListing;\r\n\t\t\t\t}\r\n\t\t\t});\t\t\t\r\n\t\t} catch (DaoException de) {\r\n\t\t\tthrow (new ServiceException(de));\r\n\t\t}\r\n\t\treturn(DTOFactory.getProductDTOList(productList));\t\t\r\n\t}\r\n\t\r\n\t@SuppressWarnings(""unchecked"")\r\n\t@Override\r\n\tpublic List<ProductDTO> getAllValidStatusProductsForAllUsers() throws ServiceException {\r\n\t\tList<Product> productList = new ArrayList<Product>();\t\t\r\n\t\ttry {\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\tproductList = (List<Product>) daoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\r\n\t\t\t\t\treturn daoManager.getProductDao().getAllValidStatusProductsForAllUsers();\t\t\t\r\n\r\n\t\t\t\t}\r\n\t\t\t});\t\t\t\r\n\t\t} catch (DaoException de) {\r\n\t\t\tthrow (new ServiceException(de));\r\n\t\t}\r\n\t\treturn(DTOFactory.getProductDTOList(productList));\t\t\r\n\t}\r\n\t\r\n\t@SuppressWarnings(""unchecked"")\r\n\t@Override\r\n\tpublic List<ProductDTO> getAllValidStatusProductsG(final Long userId, \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfinal Long categoryGroupId) throws ServiceException {\r\n\t\tList<Product> productList = new ArrayList<Product>();\r\n\t\ttry {\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\tproductList = (List<Product>) daoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\r\n\t\t\t\t\tList<Product> productListing = new ArrayList<Product>();\r\n\t\t\t\t\tSelect select = new Select();\r\n\t\t\t\t\tselect.setUserId(userId);\r\n\t\t\t\t\tselect.setCategoryGoupeId(categoryGroupId);\r\n\t\t\t\t\tproductListing = daoManager.getProductDao().getAllValidStatusProductsG(select);\t\t\t\r\n\t\t\t\t\treturn productListing;\r\n\t\t\t\t}\r\n\t\t\t});\t\t\t\r\n\t\t} catch (DaoException de) {\r\n\t\t\tthrow (new ServiceException(de));\r\n\t\t}\r\n\t\treturn(DTOFactory.getProductDTOList(productList));\t\t\r\n\t}\r\n\t\r\n\t@SuppressWarnings(""unchecked"")\r\n\t@Override\r\n\tpublic List<ProductDTO> getAllValidStatusProductsGC(final Long userId, \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfinal Long categoryGroupId, \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfinal Long categoryId) throws ServiceException {\r\n\t\tList<Product> productList = new ArrayList<Product>();\r\n\t\ttry {\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\tproductList = (List<Product>) daoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\r\n\t\t\t\t\tList<Product> productListing = new ArrayList<Product>();\r\n\t\t\t\t\tSelect select = new Select();\r\n\t\t\t\t\tselect.setUserId(userId);\r\n\t\t\t\t\tselect.setCategoryGoupeId(categoryGroupId);\r\n\t\t\t\t\tselect.setCategoryId(categoryId);\r\n\t\t\t\t\tproductListing = daoManager.getProductDao().getAllValidStatusProductsGC(select);\t\t\t\r\n\t\t\t\t\treturn productListing;\r\n\t\t\t\t}\r\n\t\t\t});\t\t\t\r\n\t\t} catch (DaoException de) {\r\n\t\t\tthrow (new ServiceException(de));\r\n\t\t}\r\n\t\treturn(DTOFactory.getProductDTOList(productList));\t\t\r\n\t}\r\n\t\r\n\t@SuppressWarnings(""unchecked"")\r\n\t@Override\r\n\tpublic List<ProductDTO> getAllValidStatusProductsGCT(final Long userId, \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfinal Long categoryGroupId, \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfinal Long categoryId, \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfinal Long typeId) throws ServiceException {\r\n\t\tList<Product> productList = new ArrayList<Product>();\r\n\t\ttry {\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\tproductList = (List<Product>) daoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\r\n\t\t\t\t\tList<Product> productListing = new ArrayList<Product>();\r\n\t\t\t\t\tSelect select = new Select();\r\n\t\t\t\t\tselect.setUserId(userId);\r\n\t\t\t\t\tselect.setCategoryGoupeId(categoryGroupId);\r\n\t\t\t\t\tselect.setCategoryId(categoryId);\r\n\t\t\t\t\tselect.setTypeId(typeId);\r\n\t\t\t\t\tproductListing = daoManager.getProductDao().getAllValidStatusProductsGCT(select);\t\t\t\r\n\t\t\t\t\treturn productListing;\r\n\t\t\t\t}\r\n\t\t\t});\t\t\t\r\n\t\t} catch (DaoException de) {\r\n\t\t\tthrow (new ServiceException(de));\r\n\t\t}\r\n\t\treturn(DTOFactory.getProductDTOList(productList));\t\t\r\n\t}\r\n\t\r\n\t@SuppressWarnings(""unchecked"")\r\n\t@Override\r\n\tpublic List<ProductDTO> getAllValidStatusProductsGCTB(final Long userId, \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfinal Long categoryGroupId, \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfinal Long categoryId, \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfinal Long typeId,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfinal Long brandId) throws ServiceException {\r\n\t\tList<Product> productList = new ArrayList<Product>();\r\n\t\ttry {\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\tproductList = (List<Product>) daoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\r\n\t\t\t\t\tList<Product> productListing = new ArrayList<Product>();\r\n\t\t\t\t\tSelect select = new Select();\r\n\t\t\t\t\tselect.setUserId(userId);\r\n\t\t\t\t\tselect.setCategoryGoupeId(categoryGroupId);\r\n\t\t\t\t\tselect.setCategoryId(categoryId);\r\n\t\t\t\t\tselect.setTypeId(typeId);\r\n\t\t\t\t\tselect.setBrandId(brandId);\r\n\t\t\t\t\tproductListing = daoManager.getProductDao().getAllValidStatusProductsGCTB(select);\t\t\r\n\t\t\t\t\treturn productListing;\r\n\t\t\t\t}\r\n\t\t\t});\t\t\t\r\n\t\t} catch (DaoException de) {\r\n\t\t\tthrow (new ServiceException(de));\r\n\t\t}\r\n\t\treturn(DTOFactory.getProductDTOList(productList));\t\t\r\n\t}\t\r\n\t\r\n\t@SuppressWarnings(""unchecked"")\r\n\t@Override\r\n\tpublic List<ProductDTO> getAllValidStatusProductsGCB(final Long userId, \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfinal Long categoryGroupId, \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfinal Long categoryId,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfinal Long brandId) throws ServiceException {\r\n\t\tList<Product> productList = new ArrayList<Product>();\r\n\t\ttry {\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\tproductList = (List<Product>) daoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\r\n\t\t\t\t\tList<Product> productListing = new ArrayList<Product>();\r\n\t\t\t\t\tSelect select = new Select();\r\n\t\t\t\t\tselect.setUserId(userId);\r\n\t\t\t\t\tselect.setCategoryGoupeId(categoryGroupId);\r\n\t\t\t\t\tselect.setCategoryId(categoryId);\r\n\t\t\t\t\tselect.setBrandId(brandId);\r\n\t\t\t\t\tproductListing = daoManager.getProductDao().getAllValidStatusProductsGCB(select);\r\n\t\t\t\t\treturn productListing;\r\n\t\t\t\t}\r\n\t\t\t});\t\t\t\r\n\t\t} catch (DaoException de) {\r\n\t\t\tthrow (new ServiceException(de));\r\n\t\t}\r\n\t\treturn(DTOFactory.getProductDTOList(productList));\t\t\r\n\t}\r\n\t/*\r\n\t@Override\r\n\tpublic ProductDTO getProductById(final Long productId) throws ServiceException {\r\n\t\tProduct productResult = new Product();\r\n\t\t\r\n\t\ttry {\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\tproductResult = (Product) daoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\r\n\t\t\t\t\t\tthrows DaoException {\r\n\t\t\t\t\tSelect select = new Select();\r\n\t\t\t\t\tselect.setProductId(productId);\r\n\t\t\t\t\tProduct product = daoManager.getProductDao().getProductById(select);\r\n\t\t\t\t\treturn product;\r\n\t\t\t\t}\r\n\t\t\t});\t\t\t\r\n\t\t} catch (DaoException de) {\r\n\t\t\tthrow (new ServiceException(de));\r\n\t\t}\t\t\r\n\t\tif(productResult == null) return (null);\r\n\t\t\treturn (DTOFactory.getProductDTO(productResult));\t\t\t\t\r\n\t}\r\n\t*/\r\n\t\r\n\t@Override\r\n\tpublic ProductDTO getProductById(final Long productId) throws ServiceException {\r\n\t\tProduct productResult = new Product();\r\n\t\t\r\n\t\ttry {\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\tproductResult = (Product) daoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\r\n\t\t\t\t\t\tthrows DaoException {\r\n\t\t\t\t\tSelect select = new Select();\r\n\t\t\t\t\tselect.setProductId(productId);\r\n\t\t\t\t\tProduct product = daoManager.getProductDao().getProductById(productId);\r\n\t\t\t\t\treturn product;\r\n\t\t\t\t}\r\n\t\t\t});\t\t\t\r\n\t\t} catch (DaoException de) {\r\n\t\t\tthrow (new ServiceException(de));\r\n\t\t}\t\t\r\n\t\tif(productResult == null) return (null);\r\n\t\t\treturn (DTOFactory.getProductDTO(productResult));\t\t\t\t\r\n\t}\r\n\t\r\n\t\r\n\t@Override\r\n\tpublic void updateShippingCityToExpeditedParcelPrice(final ShippingCityDTO shippingCityDTO) throws ServiceException {\r\n\t\ttry {\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\tdaoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t\t@Override\r\n\t\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\t\r\n\t\t\t\t\t\tShippingCity shippingCity = new ShippingCity();\r\n\t\t\t\t\t\tshippingCity.setProductId(shippingCityDTO.getProductId());\r\n\t\t\t\t\t\tshippingCity.setCityId(shippingCityDTO.getCityId());\r\n\t\t\t\t\t\tshippingCity.setExpeditedParcelPrice(shippingCityDTO.getExpeditedParcelPrice());\r\n\t\t\t\t\t\tdaoManager.getProductDao().updateShippingCityToExpeditedParcelPrice(shippingCity);\r\n\t\t\t\t\t\treturn null;\r\n\t\t\t\t\t}\r\n\t\t\t});\r\n\t\t} catch (DaoException de) {\r\n\t\t\tthrow (new ServiceException(de));\r\n\t\t}\r\n\t}\r\n\t\r\n\t@Override\r\n\tpublic ShippingCityDTO getShippingCity(final Long productId, final Long cityId) throws ServiceException {\r\n\t\tShippingCity shippingCityResult = new ShippingCity();\t\t\r\n\t\ttry {\t\t\t\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\tshippingCityResult = (ShippingCity) daoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\r\n\t\t\t\t\t\tthrows DaoException {\r\n\t\t\t\t\tShippingCity shippingCity = new ShippingCity();\r\n\t\t\t\t\tSelect select = new Select();\r\n\t\t\t\t\tselect.setProductId(productId);\r\n\t\t\t\t\tselect.setCityId(cityId);\r\n\t\t\t\t\tshippingCity = daoManager.getProductDao().getShippingCity(select);\r\n\t\t\t\t\treturn shippingCity;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t} catch (DaoException de) {\r\n\t\t\tthrow (new ServiceException(de));\r\n\t\t}\r\n\t\treturn(DTOFactory.getShippingCityDTO(shippingCityResult));\r\n\t}\r\n\t\r\n\t@Override\r\n\tpublic void updateShippingProvince(final ShippingProvinceDTO shippingProvinceDTO) throws ServiceException {\r\n\t\ttry {\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\tdaoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t\t@Override\r\n\t\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\t\r\n\t\t\t\t\t\tShippingProvince shippingProvince = new ShippingProvince();\r\n\t\t\t\t\t\tshippingProvince.setProductId(shippingProvinceDTO.getProductId());\r\n\t\t\t\t\t\tshippingProvince.setProvinceId(shippingProvinceDTO.getProvinceId());\r\n\t\t\t\t\t\tshippingProvince.setWeightedTotalProvince(shippingProvinceDTO.getWeightedTotalProvince());\r\n\t\t\t\t\t\tdaoManager.getProductDao().updateShippingProvince(shippingProvince);\r\n\t\t\t\t\t\treturn null;\r\n\t\t\t\t\t}\r\n\t\t\t});\r\n\t\t} catch (DaoException de) {\r\n\t\t\tthrow (new ServiceException(de));\r\n\t\t}\r\n\t}\r\n\t\r\n\t@SuppressWarnings(""unchecked"")\r\n\t@Override\r\n\tpublic List<ProductDTO> getValidProductIdByDim(final ProductDTO productDTO) throws ServiceException {\r\n\t\tList<Product> productList = new ArrayList<Product>();\r\n\t\ttry {\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\tproductList = (List<Product>) daoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\r\n\t\t\t\t\tProduct product = new Product();\r\n\t\t\t\t\tproduct.setId(productDTO.getId());\r\n\t\t\t\t\tproduct.setWeight(productDTO.getWeight());\r\n\t\t\t\t\tproduct.setLength(productDTO.getLarge());\r\n\t\t\t\t\tproduct.setWidth(productDTO.getWidth());\r\n\t\t\t\t\tproduct.setHeight(productDTO.getHigh());\r\n\t\t\t\t\treturn daoManager.getProductDao().getValidProductIdByDim(product);\r\n\t\t\t\t}\r\n\t\t\t});\t\t\t\r\n\t\t} catch (DaoException de) {\r\n\t\t\tthrow (new ServiceException(de));\r\n\t\t}\r\n\t\treturn(DTOFactory.getProductDTOList(productList));\t\t\r\n\t}\t\r\n\t\r\n\t@SuppressWarnings(""unchecked"")\r\n\t@Override\r\n\tpublic List<ShippingCityDTO> getShippingCityListWithZeroParcelPriceByCityId(final Long cityId) throws ServiceException {\r\n\t\tList<ShippingCity> shippingCityList = new ArrayList<ShippingCity>();\r\n\t\ttry {\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\tshippingCityList = (List<ShippingCity>) daoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\r\n\t\t\t\t\tList<ShippingCity> shippingCityListing = new ArrayList<ShippingCity>();\r\n\t\t\t\t\tSelect select = new Select();\r\n\t\t\t\t\tselect.setCityId(cityId);\r\n\t\t\t\t\tshippingCityListing = daoManager.getProductDao().getShippingCityListWithZeroParcelPriceByCityId(select);\r\n\t\t\t\t\treturn shippingCityListing;\r\n\t\t\t\t}\r\n\t\t\t});\t\t\t\r\n\t\t} catch (DaoException de) {\r\n\t\t\tthrow (new ServiceException(de));\r\n\t\t}\r\n\t\treturn(DTOFactory.getShippingCityDTOList(shippingCityList));\r\n\t}\r\n\t\r\n\t@Override\r\n\tpublic CityDTO getCity(final Long cityId) throws ServiceException {\r\n\t\tCity cityResult = new City();\t\t\r\n\t\ttry {\t\t\t\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\tcityResult = (City) daoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\r\n\t\t\t\t\t\tthrows DaoException {\r\n\t\t\t\t\tCity city = new City();\r\n\t\t\t\t\tSelect select = new Select();\r\n\t\t\t\t\tselect.setCityId(cityId);\r\n\t\t\t\t\tcity = daoManager.getProductDao().getCity(select);\r\n\t\t\t\t\treturn city;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t} catch (DaoException de) {\r\n\t\t\tthrow (new ServiceException(de));\r\n\t\t}\r\n\t\treturn(DTOFactory.getCityDTO(cityResult));\r\n\t}\r\n\t\r\n\t\r\n\t@Override\r\n\tpublic CityDTO getCityByName(final String nameCity) throws ServiceException {\t\r\n\t\tCity city=null;\r\n\t\ttry {\t\t\t\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\tcity = (City) daoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\r\n\t\t\t\t\t\tthrows DaoException {\r\n\t\t\t\t\treturn daoManager.getProductDao().getCityByName(nameCity);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t} catch (DaoException de) {\r\n\t\t\tthrow (new ServiceException(de));\r\n\t\t}\r\n\t\tCityDTO cityDTO=null;\r\n\t\tif(city!=null)cityDTO=DTOFactory.getCityDTO(city);\r\n\t\treturn cityDTO;\r\n\t}\r\n\t\r\n\t\r\n\t\r\n\t\r\n\t\r\n\t@Override\r\n\tpublic ProvinceDTO getProvince(final Long provinceId) throws ServiceException {\r\n\t\tProvince provinceResult = new Province();\t\t\r\n\t\ttry {\t\t\t\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\tprovinceResult = (Province) daoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\r\n\t\t\t\t\t\tthrows DaoException {\r\n\t\t\t\t\tProvince province = new Province();\r\n\t\t\t\t\tSelect select = new Select();\r\n\t\t\t\t\tselect.setProvinceId(provinceId);\r\n\t\t\t\t\tprovince = daoManager.getProductDao().getProvince(select);\r\n\t\t\t\t\treturn province;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t} catch (DaoException de) {\r\n\t\t\tthrow (new ServiceException(de));\r\n\t\t}\r\n\t\treturn(DTOFactory.getProvinceDTO(provinceResult));\r\n\t}\t\r\n\r\n\t\r\n\t\r\n\t@Override\r\n\tpublic ProvinceDTO getProvinceByCode(final String code) throws ServiceException {\r\n\t\tProvince provinceResult = new Province();\t\t\r\n\t\ttry {\t\t\t\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\tprovinceResult = (Province) daoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\r\n\t\t\t\t\tthrows DaoException {\r\n\t\t\t\t\treturn daoManager.getProductDao().getProvinceByCode(code);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t} catch (DaoException de) {\r\n\t\t\tthrow (new ServiceException(de));\r\n\t\t}\r\n\t\treturn(DTOFactory.getProvinceDTO(provinceResult));\r\n\t}\r\n\t\r\n\t\r\n\t@Override\r\n\tpublic ShippingProvinceDTO getWeightedTotalProvinceFromShippingProvince(final Long productId, final Long provinceId) throws ServiceException {\r\n\t\tShippingProvince shippingProvinceResult = new ShippingProvince();\t\t\r\n\t\ttry {\t\t\t\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\tshippingProvinceResult = (ShippingProvince) daoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\r\n\t\t\t\t\t\tthrows DaoException {\r\n\t\t\t\t\tShippingProvince shippingProvince = new ShippingProvince();\r\n\t\t\t\t\tSelect select = new Select();\r\n\t\t\t\t\tselect.setProductId(productId);\r\n\t\t\t\t\tselect.setProvinceId(provinceId);\r\n\t\t\t\t\tshippingProvince = daoManager.getProductDao().getWeightedTotalProvinceFromShippingProvince(select);\r\n\t\t\t\t\treturn shippingProvince;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t} catch (DaoException de) {\r\n\t\t\tthrow (new ServiceException(de));\r\n\t\t}\r\n\t\treturn(DTOFactory.getShippingProvinceDTO(shippingProvinceResult));\r\n\t}\r\n\t\r\n\t@Override\r\n\tpublic void updateShippingTotal(final ShippingTotalDTO shippingTotalDTO) throws ServiceException {\r\n\t\ttry {\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\tdaoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t\t@Override\r\n\t\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\t\r\n\t\t\t\t\t\tShippingTotal shippingTotal = new ShippingTotal();\r\n\t\t\t\t\t\tshippingTotal.setProductId(shippingTotalDTO.getProductId());\r\n\t\t\t\t\t\tshippingTotal.setProvinceId(shippingTotalDTO.getProvinceId());\r\n\t\t\t\t\t\tshippingTotal.setUserId(shippingTotalDTO.getUserId());\r\n\t\t\t\t\t\tshippingTotal.setWeightedProvinceTotalWithCoverage(shippingTotalDTO.getWeightedProvinceTotalWithCoverage());\r\n\t\t\t\t\t\tshippingTotal.setAverageShippingTotal(shippingTotalDTO.getAverageShippingTotal());\r\n\t\t\t\t\t\tdaoManager.getProductDao().updateShippingTotal(shippingTotal);\r\n\t\t\t\t\t\treturn null;\r\n\t\t\t\t\t}\r\n\t\t\t});\r\n\t\t} catch (DaoException de) {\r\n\t\t\tthrow (new ServiceException(de));\r\n\t\t}\r\n\t}\r\n\t\r\n\t@SuppressWarnings(""unchecked"")\r\n\t@Override\r\n\tpublic List<ShippingTotalDTO> getShippingTotalList(final Long productId, final Long userId) throws ServiceException {\r\n\t\tList<ShippingTotal> shippingTotalList = new ArrayList<ShippingTotal>();\r\n\t\ttry {\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\tshippingTotalList = (List<ShippingTotal>) daoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\r\n\t\t\t\t\tList<ShippingTotal> shippingTotalListing = new ArrayList<ShippingTotal>();\r\n\t\t\t\t\tSelect select = new Select();\r\n\t\t\t\t\tselect.setProductId(productId);\r\n\t\t\t\t\tselect.setUserId(userId);\r\n\t\t\t\t\tshippingTotalListing = daoManager.getProductDao().getShippingTotalList(select);\r\n\t\t\t\t\treturn shippingTotalListing;\r\n\t\t\t\t}\r\n\t\t\t});\t\t\t\r\n\t\t} catch (DaoException de) {\r\n\t\t\tthrow (new ServiceException(de));\r\n\t\t}\r\n\t\treturn(DTOFactory.getShippingTotalDTOList(shippingTotalList));\r\n\t}\r\n\t\r\n\t@Override\r\n\tpublic Long createUserProvincePopulation(final UserProvincePopulationDTO userProvincePopulationDTO) throws ServiceException {\r\n\t\tUserProvincePopulation userProvincePopulationResult = new UserProvincePopulation();\r\n\t\ttry {\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\tuserProvincePopulationResult = (UserProvincePopulation) daoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\t\t\t\t\t\r\n\t\t\t\t\tUserProvincePopulation userProvincePopulation = new UserProvincePopulation();\r\n\t\t\t\t\tuserProvincePopulation.setProvinceId(userProvincePopulationDTO.getProvinceId());\r\n\t\t\t\t\tuserProvincePopulation.setUserId(userProvincePopulationDTO.getUserId());\r\n\t\t\t\t\tuserProvincePopulation.setPopulationPercent(userProvincePopulationDTO.getPopulationPercent());\r\n\t\t\t\t\tdaoManager.getProductDao().insertUserProvincePopulation(userProvincePopulation);\r\n\t\t\t\t\treturn userProvincePopulation;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\treturn userProvincePopulationResult.getId();\r\n\t\t} catch (DaoException de) {\r\n\t\t\tthrow (new ServiceException(de));\r\n\t\t}\r\n\t}\r\n\t\r\n\t@SuppressWarnings(""unchecked"")\r\n\t@Override\r\n\tpublic List<UserProvincePopulationDTO> getUserProvincePopulationList(final Long userId) throws ServiceException {\r\n\t\tList<UserProvincePopulation> userProvincePopulationList = new ArrayList<UserProvincePopulation>();\r\n\t\ttry {\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\tuserProvincePopulationList = (List<UserProvincePopulation>) daoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\r\n\t\t\t\t\tList<UserProvincePopulation> userProvincePopulationListing = new ArrayList<UserProvincePopulation>();\r\n\t\t\t\t\tSelect select = new Select();\r\n\t\t\t\t\tselect.setUserId(userId);\r\n\t\t\t\t\tuserProvincePopulationListing = daoManager.getProductDao().getUserProvincePopulationList(select);\r\n\t\t\t\t\treturn userProvincePopulationListing;\r\n\t\t\t\t}\r\n\t\t\t});\t\t\t\r\n\t\t} catch (DaoException de) {\r\n\t\t\tthrow (new ServiceException(de));\r\n\t\t}\r\n\t\treturn(DTOFactory.getUserProvincePopulationDTOList(userProvincePopulationList));\t\t\r\n\t}\t\r\n\t\r\n\t@Override\r\n\tpublic void updateUserProvincePopulation(final UserProvincePopulationDTO userProvincePopulationDTO) throws ServiceException {\r\n\t\ttry {\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\tdaoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t\t@Override\r\n\t\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\t\r\n\t\t\t\t\t\tUserProvincePopulation userProvincePopulation = new UserProvincePopulation();\r\n\t\t\t\t\t\tuserProvincePopulation.setUserId(userProvincePopulationDTO.getUserId());\r\n\t\t\t\t\t\tuserProvincePopulation.setProvinceId(userProvincePopulationDTO.getProvinceId());\r\n\t\t\t\t\t\tuserProvincePopulation.setPopulationPercent(userProvincePopulationDTO.getPopulationPercent());\r\n\t\t\t\t\t\tdaoManager.getProductDao().updateUserProvincePopulation(userProvincePopulation);\r\n\t\t\t\t\t\treturn null;\r\n\t\t\t\t\t}\r\n\t\t\t});\r\n\t\t} catch (DaoException de) {\r\n\t\t\tthrow (new ServiceException(de));\r\n\t\t}\r\n\t}\r\n\t\r\n\t@SuppressWarnings(""unchecked"")\r\n\t@Override\r\n\tpublic List<ShippingCityDTO> getAllShippingCity() throws ServiceException {\r\n\t\tList<ShippingCity> shippingCityList = new ArrayList<ShippingCity>();\r\n\t\ttry {\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\tshippingCityList = (List<ShippingCity>) daoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\r\n\t\t\t\t\treturn daoManager.getProductDao().getAllShippingCity();\r\n\t\t\t\t}\r\n\t\t\t});\t\t\t\r\n\t\t} catch (DaoException de) {\r\n\t\t\tthrow (new ServiceException(de));\r\n\t\t}\r\n\t\treturn(DTOFactory.getShippingCityDTOList(shippingCityList));\r\n\t}\t\r\n\t\r\n\t@SuppressWarnings(""unchecked"")\r\n\t@Override\r\n\tpublic List<ShippingProvinceDTO> getAllShippingProvince() throws ServiceException {\r\n\t\tList<ShippingProvince> shippingProvinceList = new ArrayList<ShippingProvince>();\r\n\t\ttry {\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\tshippingProvinceList = (List<ShippingProvince>) daoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\r\n\t\t\t\t\treturn daoManager.getProductDao().getAllShippingProvince();\r\n\t\t\t\t}\r\n\t\t\t});\t\t\t\r\n\t\t} catch (DaoException de) {\r\n\t\t\tthrow (new ServiceException(de));\r\n\t\t}\r\n\t\treturn(DTOFactory.getShippingProvinceDTOList(shippingProvinceList));\r\n\t}\r\n\t\r\n\t@SuppressWarnings(""unchecked"")\r\n\t@Override\r\n\tpublic List<ShippingTotalDTO> getAllShippingTotal() throws ServiceException {\r\n\t\tList<ShippingTotal> shippingTotalList = new ArrayList<ShippingTotal>();\r\n\t\ttry {\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\tshippingTotalList = (List<ShippingTotal>) daoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\r\n\t\t\t\t\treturn daoManager.getProductDao().getAllShippingTotal();\r\n\t\t\t\t}\r\n\t\t\t});\t\t\t\r\n\t\t} catch (DaoException de) {\r\n\t\t\tthrow (new ServiceException(de));\r\n\t\t}\r\n\t\treturn(DTOFactory.getShippingTotalDTOList(shippingTotalList));\r\n\t}\r\n\t\r\n\t@SuppressWarnings(""unchecked"")\r\n\t@Override\r\n\tpublic List<UserProvincePopulationDTO> getAllUserProvincePopulation() throws ServiceException {\r\n\t\tList<UserProvincePopulation> userProvincePopulationList = new ArrayList<UserProvincePopulation>();\r\n\t\ttry {\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\tuserProvincePopulationList = (List<UserProvincePopulation>) daoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\r\n\t\t\t\t\treturn daoManager.getProductDao().getAllUserProvincePopulation();\r\n\t\t\t\t}\r\n\t\t\t});\t\t\t\r\n\t\t} catch (DaoException de) {\r\n\t\t\tthrow (new ServiceException(de));\r\n\t\t}\r\n\t\treturn(DTOFactory.getUserProvincePopulationDTOList(userProvincePopulationList));\r\n\t}\r\n\t\r\n\t@SuppressWarnings(""unchecked"")\r\n\t@Override\r\n\tpublic List<UserProductPriceDTO> getAllUserProductPrice() throws ServiceException {\r\n\t\tList<UserProductPrice> userProductPriceList = new ArrayList<UserProductPrice>();\r\n\t\ttry {\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\tuserProductPriceList = (List<UserProductPrice>) daoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\r\n\t\t\t\t\treturn daoManager.getProductDao().getAllUserProductPrice();\r\n\t\t\t\t}\r\n\t\t\t});\t\t\t\r\n\t\t} catch (DaoException de) {\r\n\t\t\tthrow (new ServiceException(de));\r\n\t\t}\r\n\t\treturn(DTOFactory.getUserProductPriceDTOList(userProductPriceList));\r\n\t}\t\r\n\t\r\n\t@SuppressWarnings(""unchecked"")\r\n\t@Override\r\n\tpublic List<ShippingTotalDTO> getShippingTotalListByUserId(final Long userId) throws ServiceException {\r\n\t\tList<ShippingTotal> shippingTotalList = new ArrayList<ShippingTotal>();\r\n\t\ttry {\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\tshippingTotalList = (List<ShippingTotal>) daoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\r\n\t\t\t\t\tList<ShippingTotal> shippingTotalListing = new ArrayList<ShippingTotal>();\r\n\t\t\t\t\tSelect select = new Select();\r\n\t\t\t\t\tselect.setUserId(userId);\r\n\t\t\t\t\tshippingTotalListing = daoManager.getProductDao().getShippingTotalListByUserId(select);\r\n\t\t\t\t\treturn shippingTotalListing;\r\n\t\t\t\t}\r\n\t\t\t});\t\t\t\r\n\t\t} catch (DaoException de) {\r\n\t\t\tthrow (new ServiceException(de));\r\n\t\t}\r\n\t\treturn(DTOFactory.getShippingTotalDTOList(shippingTotalList));\t\r\n\t\t\r\n\t}\r\n\t\r\n\t@SuppressWarnings(""unchecked"")\r\n\t@Override\r\n\tpublic List<UserProductPriceDTO> getUserProductPriceByUserId(final Long userId) throws ServiceException {\r\n\t\tList<UserProductPrice> userProductPriceList = new ArrayList<UserProductPrice>();\r\n\t\ttry {\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\tuserProductPriceList = (List<UserProductPrice>) daoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\r\n\t\t\t\t\tList<UserProductPrice> userProductPriceListing = new ArrayList<UserProductPrice>();\r\n\t\t\t\t\tSelect select = new Select();\r\n\t\t\t\t\tselect.setUserId(userId);\r\n\t\t\t\t\tuserProductPriceListing = daoManager.getProductDao().getUserProductPriceByUserId(select);\r\n\t\t\t\t\treturn userProductPriceListing;\r\n\t\t\t\t}\r\n\t\t\t});\t\t\t\r\n\t\t} catch (DaoException de) {\r\n\t\t\tthrow (new ServiceException(de));\r\n\t\t}\r\n\t\treturn(DTOFactory.getUserProductPriceDTOList(userProductPriceList));\r\n\t}\t\r\n\t\r\n\t@Override\r\n\tpublic UserProvincePopulationDTO getUserProvincePopulation(final Long userId, final Long provinceId) throws ServiceException {\r\n\t\tUserProvincePopulation userProvincePopulationResult = new UserProvincePopulation();\r\n\t\ttry {\t\t\t\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\tuserProvincePopulationResult = (UserProvincePopulation) daoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\r\n\t\t\t\t\t\tthrows DaoException {\r\n\t\t\t\t\tUserProvincePopulation userProvincePopulation = new UserProvincePopulation();\r\n\t\t\t\t\tSelect select = new Select();\r\n\t\t\t\t\tselect.setUserId(userId);\r\n\t\t\t\t\tselect.setProvinceId(provinceId);\r\n\t\t\t\t\tuserProvincePopulation = daoManager.getProductDao().getUserProvincePopulation(select);\r\n\t\t\t\t\treturn userProvincePopulation;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t} catch (DaoException de) {\r\n\t\t\tthrow (new ServiceException(de));\r\n\t\t}\r\n\t\treturn(DTOFactory.getUserProvincePopulation(userProvincePopulationResult));\r\n\t}\r\n\t\r\n\t@SuppressWarnings(""unchecked"")\r\n\t@Override\r\n\tpublic List<ShippingCityDTO> getShippingCityByIDGreaterThan(final Long id) throws ServiceException {\r\n\t\tList<ShippingCity> shippingCityList = new ArrayList<ShippingCity>();\r\n\t\ttry {\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\tshippingCityList = (List<ShippingCity>) daoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\r\n\t\t\t\t\treturn daoManager.getProductDao().getShippingCityByIDGreaterThan(id);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t} catch (DaoException de) {\r\n\t\t\tthrow (new ServiceException(de));\r\n\t\t}\r\n\t\treturn(DTOFactory.getShippingCityDTOList(shippingCityList));\r\n\t}\r\n\t\r\n\t@SuppressWarnings(""unchecked"")\r\n\t@Override\r\n\tpublic List<ShippingProvinceDTO> getShippingProvinceByIDGreaterThan(final Long id) throws ServiceException {\r\n\t\tList<ShippingProvince> shippingProvinceList = new ArrayList<ShippingProvince>();\r\n\t\ttry {\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\tshippingProvinceList = (List<ShippingProvince>) daoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\r\n\t\t\t\t\treturn daoManager.getProductDao().getShippingProvinceByIDGreaterThan(id);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t} catch (DaoException de) {\r\n\t\t\tthrow (new ServiceException(de));\r\n\t\t}\r\n\t\treturn(DTOFactory.getShippingProvinceDTOList(shippingProvinceList));\r\n\t}\r\n\t\r\n\t@SuppressWarnings(""unchecked"")\r\n\t@Override\r\n\tpublic List<ShippingTotalDTO> getShippingTotalByIDGreaterThan(final Long id) throws ServiceException {\r\n\t\tList<ShippingTotal> shippingTotalList = new ArrayList<ShippingTotal>();\r\n\t\ttry {\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\tshippingTotalList = (List<ShippingTotal>) daoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\r\n\t\t\t\t\treturn daoManager.getProductDao().getShippingTotalByIDGreaterThan(id);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t} catch (DaoException de) {\r\n\t\t\tthrow (new ServiceException(de));\r\n\t\t}\r\n\t\treturn(DTOFactory.getShippingTotalDTOList(shippingTotalList));\r\n\t}\t\r\n\t\t\r\n\t@SuppressWarnings(""unchecked"")\r\n\t@Override\r\n\tpublic List<Long> getAllValidProductIds() throws ServiceException {\r\n\t\tList<Product> productList = new ArrayList<Product>();\r\n\t\ttry {\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\tproductList = (List<Product>) daoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\r\n\t\t\t\t\treturn daoManager.getProductDao().getAllValidProductIds();\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t} catch (DaoException de) {\r\n\t\t\tthrow (new ServiceException(de));\r\n\t\t}\r\n\t\treturn(DTOFactory.getProductDTOLightList(productList));\t\r\n\t}\r\n\t\r\n\t@SuppressWarnings(""unchecked"")\r\n\t@Override\r\n\tpublic List<ProductDTO> getValidProductsByUserIdAndExcluded(final Long userId) throws ServiceException {\r\n\t\tList<Product> productList = new ArrayList<Product>();\r\n\t\ttry {\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\tproductList = (List<Product>) daoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\r\n\t\t\t\t\tList<Product> productListing = new ArrayList<Product>();\r\n\t\t\t\t\tSelect select = new Select();\r\n\t\t\t\t\tselect.setUserId(userId);\r\n\t\t\t\t\tproductListing = daoManager.getProductDao().getValidProductsByUserIdAndExcluded(select);\r\n\t\t\t\t\treturn productListing;\r\n\t\t\t\t}\r\n\t\t\t});\t\t\t\r\n\t\t} catch (DaoException de) {\r\n\t\t\tthrow (new ServiceException(de));\r\n\t\t}\r\n\t\treturn(DTOFactory.getProductDTOList(productList));\r\n\t}\r\n\r\n\t\r\n\t\r\n\t@SuppressWarnings(""unchecked"")\r\n\t@Override\r\n\tpublic List<ProductDTO> getProductsClassification(final Long userId) throws ServiceException {\r\n\t\tList<Product> productList = new ArrayList<Product>();\r\n\t\ttry {\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\tproductList = (List<Product>) daoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\r\n\t\t\t\t\tList<Product> ProductsClassificationList = new ArrayList<Product>();\r\n\t\t\t\t\tProductsClassificationList = daoManager.getProductDao().getProductsClassification(userId);\r\n\t\t\t\t\treturn ProductsClassificationList;\r\n\t\t\t\t}\r\n\t\t\t});\t\t\t\r\n\t\t} catch (DaoException de) {\r\n\t\t\tthrow (new ServiceException(de));\r\n\t\t}\r\n\t\treturn(DTOFactory.getProductDTOList(productList));\r\n\t}\r\n\t\r\n\t@SuppressWarnings(""unchecked"")\r\n\t@Override\r\n\tpublic List<ProductDTO> getValidProductsGreaterThanId(final Long productId) throws ServiceException {\r\n\t\tList<Product> productList = new ArrayList<Product>();\r\n\t\ttry {\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\tproductList = (List<Product>) daoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\r\n\t\t\t\t\tList<Product> productListing = new ArrayList<Product>();\r\n\t\t\t\t\tSelect select = new Select();\r\n\t\t\t\t\tselect.setProductId(productId);\r\n\t\t\t\t\tproductListing = daoManager.getProductDao().getValidProductsGreaterThanId(select);\r\n\t\t\t\t\treturn productListing;\r\n\t\t\t\t}\r\n\t\t\t});\t\t\t\r\n\t\t} catch (DaoException de) {\r\n\t\t\tthrow (new ServiceException(de));\r\n\t\t}\r\n\t\treturn(DTOFactory.getProductDTOList(productList));\r\n\t}\r\n\t\r\n\t\r\n\t@SuppressWarnings(""unchecked"")\r\n\t@Override\r\n\tpublic List<ShippingTotalDTO> getShippingTotalListByProductId(final Long productId) throws ServiceException {\r\n\t\tList<ShippingTotal> shippingTotalList = new ArrayList<ShippingTotal>();\r\n\t\ttry {\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\tshippingTotalList = (List<ShippingTotal>) daoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\r\n\t\t\t\t\tSelect select = new Select();\r\n\t\t\t\t\tselect.setProductId(productId);\r\n\t\t\t\t\treturn daoManager.getProductDao().getShippingTotalListByProductId(select);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t} catch (DaoException de) {\r\n\t\t\tthrow (new ServiceException(de));\r\n\t\t}\r\n\t\treturn(DTOFactory.getShippingTotalDTOList(shippingTotalList));\r\n\t}\r\n\t\r\n\t@SuppressWarnings(""unchecked"")\r\n\t@Override\r\n\tpublic List<UserProductPriceDTO> getNullsShippingTotalCanadaOnUserProductPrice(final Long productId) throws ServiceException {\r\n\t\tList<UserProductPrice> userProductPriceList = new ArrayList<UserProductPrice>();\r\n\t\ttry {\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\tuserProductPriceList = (List<UserProductPrice>) daoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\r\n\t\t\t\t\tList<UserProductPrice> userProductPriceListing = new ArrayList<UserProductPrice>();\r\n\t\t\t\t\tSelect select = new Select();\r\n\t\t\t\t\tselect.setProductId(productId);\r\n\t\t\t\t\tuserProductPriceListing = daoManager.getProductDao().getNullsShippingTotalCanadaOnUserProductPrice(select);\r\n\t\t\t\t\treturn userProductPriceListing;\r\n\t\t\t\t}\r\n\t\t\t});\t\t\t\r\n\t\t} catch (DaoException de) {\r\n\t\t\tthrow (new ServiceException(de));\r\n\t\t}\r\n\t\treturn(DTOFactory.getUserProductPriceDTOList(userProductPriceList));\t\r\n\t}\r\n\t\r\n\t@Override\r\n\tpublic void updateAmendingProduct(final ProductDTO productDTO) throws ServiceException {\r\n\t\ttry {\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t    daoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\r\n\t\t\t\tthrows DaoException {\r\n\t\t\t\t\tProduct product = new Product();\r\n\t\t\t\t\tproduct.setId(productDTO.getId());\r\n\t\t\t\t\tdaoManager.getTranslationDao().updateEntry(new TranslationEntry(productDTO.getNameEng()));\r\n\t\t\t\t\tdaoManager.getTranslationDao().updateEntry(new TranslationEntry(productDTO.getNameFr()));\r\n\t\t\t\t\tdaoManager.getTranslationDao().updateEntry(new TranslationEntry(productDTO.getDescriptionEng()));\r\n\t\t\t\t\tdaoManager.getTranslationDao().updateEntry(new TranslationEntry(productDTO.getDescriptionFr()));\r\n\t\t\t\t\tdaoManager.getTranslationDao().updateEntry(new TranslationEntry(productDTO.getSpecificationEng()));\r\n\t\t\t\t\tdaoManager.getTranslationDao().updateEntry(new TranslationEntry(productDTO.getSpecificationFr()));\r\n\t\t\t\t\tif(productDTO.getOtherEng().getName() != null) {\r\n\t\t\t\t\t\tdaoManager.getTranslationDao().updateEntry(new TranslationEntry(productDTO.getOtherEng()));\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(productDTO.getOtherFr().getName() != null) {\r\n\t\t\t\t\t\tdaoManager.getTranslationDao().updateEntry(new TranslationEntry(productDTO.getOtherFr()));\r\n\t\t\t\t\t}\t\t\t\t\t\r\n\t\t\t\t\tproduct.setNote(productDTO.getNote());\r\n\t\t\t\t\tdaoManager.getProductDao().updateAmendingProduct(product);\r\n\t\t\t\t\treturn product;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t} catch (DaoException e) {\r\n\t\t\tthrow (new ServiceException(e));\r\n\t\t}\r\n\t}\r\n\t\r\n\t@Override\r\n\tpublic Boolean existsOnAlterProductXML(final Long productId) throws ServiceException {\r\n\t\tBoolean outcome = false;\r\n\t\ttry {\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\toutcome = (Boolean) daoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\r\n\t\t\t\t\tSelect select = new Select();\r\n\t\t\t\t\tselect.setProductId(productId);\r\n\t\t\t\t\treturn (daoManager.getProductDao().getAlterProductXMLByProductId(select) != null);\r\n\t\t\t\t}\r\n\t\t\t});\t\t\t\r\n\t\t} catch (DaoException de) {\r\n\t\t\tthrow (new ServiceException(de));\r\n\t\t}\r\n\t\treturn outcome;\r\n\t}\r\n\t\r\n\t@Override\r\n\tpublic Boolean existsOnAlterUserProductXML(final Long productId, final Long userId) throws ServiceException {\r\n\t\tBoolean outcome = false;\r\n\t\ttry {\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\toutcome = (Boolean) daoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\r\n\t\t\t\t\tSelect select = new Select();\r\n\t\t\t\t\tselect.setUserId(userId);\r\n\t\t\t\t\tselect.setProductId(productId);\r\n\t\t\t\t\treturn (daoManager.getProductDao().getAlterUserProductXMLByProductIdAndUserId(select) != null);\r\n\t\t\t\t}\r\n\t\t\t});\t\t\t\r\n\t\t} catch (DaoException de) {\r\n\t\t\tthrow (new ServiceException(de));\r\n\t\t}\r\n\t\treturn outcome;\r\n\t}\r\n\t\r\n\t@Override\r\n\tpublic void updateAlterUserProductXML(final AlterUserProductXMLDTO alterUserProductXMLDTO) throws ServiceException {\r\n\t\ttry {\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\tdaoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t\t@Override\r\n\t\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\t\r\n\t\t\t\t\t\tAlterUserProductXML alterUserProductXML = new AlterUserProductXML();\r\n\t\t\t\t\t\talterUserProductXML.setUserId(alterUserProductXMLDTO.getUserId());\r\n\t\t\t\t\t\talterUserProductXML.setProductId(alterUserProductXMLDTO.getProductId());\r\n\t\t\t\t\t\talterUserProductXML.setPriceDiscount(alterUserProductXMLDTO.getPriceDiscount());\r\n\t\t\t\t\t\talterUserProductXML.setExcluded(alterUserProductXMLDTO.getExcluded());\r\n\t\t\t\t\t\talterUserProductXML.setShipping(alterUserProductXMLDTO.getShipping());\r\n\t\t\t\t\t\talterUserProductXML.setUserProductToBeExecuted(alterUserProductXMLDTO.getUserProductToBeExecuted());\r\n\t\t\t\t\t\talterUserProductXML.setExcludedMeaning(alterUserProductXMLDTO.getExcludedMeaning());\r\n\t\t\t\t\t\tdaoManager.getProductDao().updateAlterUserProductXML(alterUserProductXML);\r\n\t\t\t\t\t\treturn null;\r\n\t\t\t\t\t}\r\n\t\t\t});\r\n\t\t} catch (DaoException de) {\r\n\t\t\tthrow (new ServiceException(de));\r\n\t\t}\r\n\t}\r\n\t\r\n\t@Override\r\n\tpublic void updateAlterProductXML(final AlterProductXMLDTO alterProductXMLDTO) throws ServiceException {\r\n\t\ttry {\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\tdaoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t\t@Override\r\n\t\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\t\r\n\t\t\t\t\t\tAlterProductXML alterProductXML = new AlterProductXML();\r\n\t\t\t\t\t\talterProductXML.setProductId(alterProductXMLDTO.getProductId());\r\n\t\t\t\t\t\talterProductXML.setBrandId(alterProductXMLDTO.getBrandId());\r\n\t\t\t\t\t\talterProductXML.setCategoryId(alterProductXMLDTO.getCategoryId());\r\n\t\t\t\t\t\talterProductXML.setTypeId(alterProductXMLDTO.getTypeId());\r\n\t\t\t\t\t\talterProductXML.setImageId(alterProductXMLDTO.getImageId());\r\n\t\t\t\t\t\talterProductXML.setStatusId(alterProductXMLDTO.getStatusId());\r\n\t\t\t\t\t\talterProductXML.setNameEn(alterProductXMLDTO.getNameEn());\r\n\t\t\t\t\t\talterProductXML.setNameFr(alterProductXMLDTO.getNameFr());\r\n\t\t\t\t\t\talterProductXML.setDescriptionEn(alterProductXMLDTO.getDescriptionEn());\r\n\t\t\t\t\t\talterProductXML.setDescriptionFr(alterProductXMLDTO.getDescriptionFr());\r\n\t\t\t\t\t\talterProductXML.setSpecificationEn(alterProductXMLDTO.getSpecificationEn());\r\n\t\t\t\t\t\talterProductXML.setSpecificationFr(alterProductXMLDTO.getSpecificationFr());\r\n\t\t\t\t\t\talterProductXML.setOtherEn(alterProductXMLDTO.getOtherEn());\r\n\t\t\t\t\t\talterProductXML.setOtherFr(alterProductXMLDTO.getOtherFr());\r\n\t\t\t\t\t\talterProductXML.setWarrantyEn(alterProductXMLDTO.getWarrantyEn());\r\n\t\t\t\t\t\talterProductXML.setWarrantyFr(alterProductXMLDTO.getWarrantyFr());\r\n\t\t\t\t\t\talterProductXML.setDimensions(alterProductXMLDTO.getDimensions());\r\n\t\t\t\t\t\talterProductXML.setWeight(alterProductXMLDTO.getWeight());\r\n\t\t\t\t\t\talterProductXML.setModelNumber(alterProductXMLDTO.getModelNumber());\r\n\t\t\t\t\t\talterProductXML.setMsrp(alterProductXMLDTO.getMsrp());\r\n\t\t\t\t\t\talterProductXML.setShipping(alterProductXMLDTO.getShipping());\r\n\t\t\t\t\t\talterProductXML.setProductToBeExecuted(alterProductXMLDTO.getProductToBeExecuted());\r\n\t\t\t\t\t\tdaoManager.getProductDao().updateAlterProductXML(alterProductXML);\r\n\t\t\t\t\t\treturn null;\r\n\t\t\t\t\t}\r\n\t\t\t});\r\n\t\t} catch (DaoException de) {\r\n\t\t\tthrow (new ServiceException(de));\r\n\t\t}\t\t\r\n\t}\t\r\n\t\r\n\t@Override\r\n\tpublic Long createAlterUserProductXML(final AlterUserProductXMLDTO alterUserProductXMLDTO) throws ServiceException {\r\n\t\tAlterUserProductXML alterUserProductXMLResult = new AlterUserProductXML();\r\n\t\ttry {\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\talterUserProductXMLResult = (AlterUserProductXML) daoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\t\t\t\t\t\r\n\t\t\t\t\tAlterUserProductXML alterUserProductXML = new AlterUserProductXML();\r\n\t\t\t\t\talterUserProductXML.setUserId(alterUserProductXMLDTO.getUserId());\r\n\t\t\t\t\talterUserProductXML.setProductId(alterUserProductXMLDTO.getProductId());\r\n\t\t\t\t\talterUserProductXML.setPriceDiscount(alterUserProductXMLDTO.getPriceDiscount());\r\n\t\t\t\t\talterUserProductXML.setExcluded(alterUserProductXMLDTO.getExcluded());\r\n\t\t\t\t\talterUserProductXML.setShipping(alterUserProductXMLDTO.getShipping());\r\n\t\t\t\t\talterUserProductXML.setUserProductToBeExecuted(alterUserProductXMLDTO.getUserProductToBeExecuted());\r\n\t\t\t\t\talterUserProductXML.setExcludedMeaning(alterUserProductXMLDTO.getExcludedMeaning());\r\n\t\t\t\t\tdaoManager.getProductDao().insertAlterUserProductXML(alterUserProductXML);\r\n\t\t\t\t\treturn alterUserProductXML;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\treturn alterUserProductXMLResult.getId();\r\n\t\t} catch (DaoException de) {\r\n\t\t\tthrow (new ServiceException(de));\r\n\t\t}\r\n\t}\r\n\r\n\t@Override\r\n\tpublic Long createAlterProductXML(final AlterProductXMLDTO alterProductXMLDTO) throws ServiceException {\r\n\t\tAlterProductXML alterProductXMLResult = new AlterProductXML();\r\n\t\ttry {\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\talterProductXMLResult = (AlterProductXML) daoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\t\t\t\t\t\r\n\t\t\t\t\tAlterProductXML alterProductXML = new AlterProductXML();\r\n\t\t\t\t\talterProductXML.setProductId(alterProductXMLDTO.getProductId());\r\n\t\t\t\t\talterProductXML.setBrandId(alterProductXMLDTO.getBrandId());\r\n\t\t\t\t\talterProductXML.setCategoryId(alterProductXMLDTO.getCategoryId());\r\n\t\t\t\t\talterProductXML.setTypeId(alterProductXMLDTO.getTypeId());\r\n\t\t\t\t\talterProductXML.setImageId(alterProductXMLDTO.getImageId());\r\n\t\t\t\t\talterProductXML.setStatusId(alterProductXMLDTO.getStatusId());\r\n\t\t\t\t\talterProductXML.setNameEn(alterProductXMLDTO.getNameEn());\r\n\t\t\t\t\talterProductXML.setNameFr(alterProductXMLDTO.getNameFr());\r\n\t\t\t\t\talterProductXML.setDescriptionEn(alterProductXMLDTO.getDescriptionEn());\r\n\t\t\t\t\talterProductXML.setDescriptionFr(alterProductXMLDTO.getDescriptionFr());\r\n\t\t\t\t\talterProductXML.setSpecificationEn(alterProductXMLDTO.getSpecificationEn());\r\n\t\t\t\t\talterProductXML.setSpecificationFr(alterProductXMLDTO.getSpecificationFr());\r\n\t\t\t\t\talterProductXML.setOtherEn(alterProductXMLDTO.getOtherEn());\r\n\t\t\t\t\talterProductXML.setOtherFr(alterProductXMLDTO.getOtherFr());\r\n\t\t\t\t\talterProductXML.setWarrantyEn(alterProductXMLDTO.getWarrantyEn());\r\n\t\t\t\t\talterProductXML.setWarrantyFr(alterProductXMLDTO.getWarrantyFr());\r\n\t\t\t\t\talterProductXML.setDimensions(alterProductXMLDTO.getDimensions());\r\n\t\t\t\t\talterProductXML.setWeight(alterProductXMLDTO.getWeight());\r\n\t\t\t\t\talterProductXML.setModelNumber(alterProductXMLDTO.getModelNumber());\r\n\t\t\t\t\talterProductXML.setMsrp(alterProductXMLDTO.getMsrp());\r\n\t\t\t\t\talterProductXML.setShipping(alterProductXMLDTO.getShipping());\r\n\t\t\t\t\talterProductXML.setProductToBeExecuted(alterProductXMLDTO.getProductToBeExecuted());\r\n\t\t\t\t\tdaoManager.getProductDao().insertAlterProductXML(alterProductXML);\r\n\t\t\t\t\treturn alterProductXML;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\treturn alterProductXMLResult.getId();\r\n\t\t} catch (DaoException de) {\r\n\t\t\tthrow (new ServiceException(de));\r\n\t\t}\r\n\t}\r\n\t\r\n\t@SuppressWarnings(""unchecked"")\r\n\t@Override\r\n\tpublic List<ProductDTO> getProductsAsOfConsideredForXML() throws ServiceException {\r\n\t\tList<Product> productList = new ArrayList<Product>();\r\n\t\ttry {\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\tproductList = (List<Product>) daoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\r\n\t\t\t\t\treturn daoManager.getProductDao().getProductsAsOfConsideredForXML();\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t} catch (DaoException de) {\r\n\t\t\tthrow (new ServiceException(de));\r\n\t\t}\r\n\t\treturn(DTOFactory.getProductDTOList(productList));\r\n\t}\r\n\t\t\r\n\t@Override\r\n\tpublic AlterUserProductXMLDTO getAlterUserProductXML(final Long userId, final Long productId) throws ServiceException {\r\n\t\tAlterUserProductXML alterUserProductXMLResult = new AlterUserProductXML();\r\n\t\ttry {\t\t\t\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\talterUserProductXMLResult = (AlterUserProductXML) daoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\r\n\t\t\t\t\t\tthrows DaoException {\r\n\t\t\t\t\tSelect select = new Select();\r\n\t\t\t\t\tselect.setUserId(userId);\r\n\t\t\t\t\tselect.setProductId(productId);\r\n\t\t\t\t\treturn daoManager.getProductDao().getAlterUserProductXMLByProductIdAndUserId(select);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t} catch (DaoException de) {\r\n\t\t\tthrow (new ServiceException(de));\r\n\t\t}\r\n\t\treturn(DTOFactory.getAlterUserProductXML(alterUserProductXMLResult));\r\n\t}\r\n\t\r\n\t@Override\r\n\tpublic AlterProductXMLDTO getAlterProductXML(final Long productId) throws ServiceException {\r\n\t\tAlterProductXML alterProductXMLResult = new AlterProductXML();\r\n\t\ttry {\t\t\t\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\talterProductXMLResult = (AlterProductXML) daoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\r\n\t\t\t\t\t\tthrows DaoException {\r\n\t\t\t\t\tSelect select = new Select();\r\n\t\t\t\t\tselect.setProductId(productId);\r\n\t\t\t\t\treturn daoManager.getProductDao().getAlterProductXMLByProductId(select);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t} catch (DaoException de) {\r\n\t\t\tthrow (new ServiceException(de));\r\n\t\t}\r\n\t\treturn(DTOFactory.getAlterProductXML(alterProductXMLResult));\r\n\t}\r\n\t\r\n\t@Override\r\n\tpublic void closeProductConsideredForXML(final Long productId) throws ServiceException {\r\n\t\ttry {\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\tdaoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t\t@Override\r\n\t\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) \r\n\t\t\t\t\t\tthrows DaoException {\r\n\t\t\t\t\t\tSelect select = new Select();\r\n\t\t\t\t\t\tselect.setProductId(productId);\r\n\t\t\t\t\t\tdaoManager.getProductDao().closeProductConsideredForXML(select);\r\n\t\t\t\t\t\treturn null;\r\n\t\t\t\t\t}\r\n\t\t\t});\r\n\t\t} catch (DaoException de) {\r\n\t\t\tthrow (new ServiceException(de));\r\n\t\t}\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void closeAlterProductXML(final Long productId) throws ServiceException {\r\n\t\ttry {\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\tdaoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t\t@Override\r\n\t\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) \r\n\t\t\t\t\t\tthrows DaoException {\r\n\t\t\t\t\t\tSelect select = new Select();\r\n\t\t\t\t\t\tselect.setProductId(productId);\r\n\t\t\t\t\t\tdaoManager.getProductDao().closeAlterProductXML(select);\r\n\t\t\t\t\t\treturn null;\r\n\t\t\t\t\t}\r\n\t\t\t});\r\n\t\t} catch (DaoException de) {\r\n\t\t\tthrow (new ServiceException(de));\r\n\t\t}\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void closeAlterUserProductXML(final Long userId, final Long productId) throws ServiceException {\r\n\t\ttry {\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\tdaoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t\t@Override\r\n\t\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) \r\n\t\t\t\t\t\tthrows DaoException {\r\n\t\t\t\t\t\tSelect select = new Select();\r\n\t\t\t\t\t\tselect.setUserId(userId);\r\n\t\t\t\t\t\tselect.setProductId(productId);\r\n\t\t\t\t\t\tdaoManager.getProductDao().closeAlterUserProductXML(select);\r\n\t\t\t\t\t\treturn null;\r\n\t\t\t\t\t}\r\n\t\t\t});\r\n\t\t} catch (DaoException de) {\r\n\t\t\tthrow (new ServiceException(de));\r\n\t\t}\r\n\t}\r\n\t\r\n\t@SuppressWarnings(""unchecked"")\r\n\t@Override\r\n\tpublic List<ProductDTO> getWereWgtDimChangedFromProduct() throws ServiceException {\r\n\t\tList<Product> productList = new ArrayList<Product>();\r\n\t\ttry {\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\tproductList = (List<Product>) daoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\r\n\t\t\t\t\treturn daoManager.getProductDao().getWereWgtDimChangedFromProduct();\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t} catch (DaoException de) {\r\n\t\t\tthrow (new ServiceException(de));\r\n\t\t}\r\n\t\treturn(DTOFactory.getProductDTOList(productList));\r\n\t}\r\n\t\r\n\t@Override\r\n\tpublic void closeProductWereWgtDimChanged(final Long productId) throws ServiceException {\r\n\t\ttry {\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\tdaoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) \r\n\t\t\t\tthrows DaoException {\r\n\t\t\t\t\tSelect select = new Select();\r\n\t\t\t\t\tselect.setProductId(productId);\r\n\t\t\t\t\tdaoManager.getProductDao().closeProductWereWgtDimChanged(select);\r\n\t\t\t\t\treturn null;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t} catch (DaoException de) {\r\n\t\t\tthrow (new ServiceException(de));\r\n\t\t}\r\n\t}\r\n\t\r\n\t@Override\r\n\tpublic Boolean existsShippingCity(final Long productId, final Long cityId) throws ServiceException {\r\n\t\treturn (getShippingCity(productId, cityId) != null);\r\n\t}\r\n\t\r\n\t@Override\r\n\tpublic ShippingProvinceDTO getShippingProvince(final Long productId, final Long provinceId) throws ServiceException {\r\n\t\tShippingProvince shippingProvinceResult = new ShippingProvince();\r\n\t\ttry {\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\tshippingProvinceResult = (ShippingProvince) daoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\r\n\t\t\t\t\t\tthrows DaoException {\r\n\t\t\t\t\tSelect select = new Select();\r\n\t\t\t\t\tselect.setProductId(productId);\r\n\t\t\t\t\tselect.setProvinceId(provinceId);\r\n\t\t\t\t\treturn daoManager.getProductDao().getShippingProvince(select);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t} catch (DaoException de) {\r\n\t\t\tthrow (new ServiceException(de));\r\n\t\t}\r\n\t\treturn(DTOFactory.getShippingProvinceDTO(shippingProvinceResult));\r\n\t}\r\n\t\r\n\t@Override\r\n\tpublic Boolean existsShippingProvince(final Long productId, final Long provinceId) throws ServiceException {\r\n\t\tShippingProvinceDTO shippingProvinceDTO = getShippingProvince(productId, provinceId);\r\n\t\treturn (shippingProvinceDTO != null);\r\n\t}\r\n\r\n\t@Override\r\n\tpublic ShippingTotalDTO getShippingTotal(final Long productId, final Long provinceId, final Long userId) throws ServiceException {\r\n\t\tShippingTotal shippingTotalResult = new ShippingTotal();\r\n\t\ttry {\t\t\t\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\tshippingTotalResult = (ShippingTotal) daoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\r\n\t\t\t\t\t\tthrows DaoException {\r\n\t\t\t\t\tSelect select = new Select();\r\n\t\t\t\t\tselect.setProductId(productId);\r\n\t\t\t\t\tselect.setProvinceId(provinceId);\r\n\t\t\t\t\tselect.setUserId(userId);\r\n\t\t\t\t\treturn daoManager.getProductDao().getShippingTotal(select);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t} catch (DaoException de) {\r\n\t\t\tthrow (new ServiceException(de));\r\n\t\t}\r\n\t\treturn(DTOFactory.getShippingTotalDTO(shippingTotalResult));\r\n\t}\r\n\t\r\n\t@Override\r\n\tpublic Boolean existsShippingTotal(final Long productId, final Long provinceId, final Long userId) throws ServiceException {\r\n\t\tShippingTotalDTO shippingTotalDTO = getShippingTotal(productId, provinceId, userId);\r\n\t\treturn (shippingTotalDTO != null);\r\n\t}\r\n\t\r\n\t@Override\r\n\tpublic void saveOldImageIdBeforeUpdate(final Long productId) throws ServiceException {\r\n\t\ttry {\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\tdaoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) \r\n\t\t\t\tthrows DaoException {\r\n\t\t\t\t\tSelect select = new Select();\r\n\t\t\t\t\tselect.setProductId(productId);\r\n\t\t\t\t\tdaoManager.getProductDao().saveOldImageIdBeforeUpdate(select);\r\n\t\t\t\t\treturn null;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t} catch (DaoException de) {\r\n\t\t\tthrow (new ServiceException(de));\r\n\t\t}\r\n\t}\r\n\t\r\n\t@SuppressWarnings(""unchecked"")\r\n\t@Override\r\n\tpublic List<ProductDTO> getProductBetween(final Long lower, final Long upper) throws ServiceException {\r\n\t\tList<Product> productList = new ArrayList<Product>();\r\n\t\ttry {\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\tproductList = (List<Product>) daoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\r\n\t\t\t\t\tList<Product> productListing = new ArrayList<Product>();\t\t\t\t\t\r\n\t\t\t\t\tSelect select = new Select();\r\n\t\t\t\t\tselect.setLower(lower);\r\n\t\t\t\t\tselect.setUpper(upper);\t\t\t\t\r\n\t\t\t\t\tproductListing = daoManager.getProductDao().getProductBetween(select);\r\n\t\t\t\t\treturn productListing;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t} catch (DaoException de) {\r\n\t\t\tthrow (new ServiceException(de));\r\n\t\t}\r\n\t\treturn(DTOFactory.getProductDTOList(productList));\r\n\t}\r\n\t\r\n\t@SuppressWarnings(""unchecked"")\t\r\n\t@Override\t\r\n\tpublic List<Long> getShippingRepeats(final ProductDTO productDTO) throws ServiceException {\r\n\t\tList<Product> productList = new ArrayList<Product>();\r\n\t\ttry {\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\tproductList = (List<Product>) daoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) \r\n\t\t\t\t\tthrows DaoException {\r\n\t\t\t\t\t\tProduct product = new Product();\r\n\t\t\t\t\t\tproduct.setId(productDTO.getId());\r\n\t\t\t\t\t\tproduct.setWeight(productDTO.getWeight());\r\n\t\t\t\t\t\tproduct.setLength(productDTO.getLarge());\r\n\t\t\t\t\t\tproduct.setWidth(productDTO.getWidth());\r\n\t\t\t\t\t\tproduct.setHeight(productDTO.getHigh());\r\n\t\t\t\t\t\treturn daoManager.getProductDao().getShippingRepeats(product);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t} catch (DaoException de) {\r\n\t\t\tthrow (new ServiceException(de));\r\n\t\t}\r\n\t\treturn (DTOFactory.getProductDTOLightList(productList));\t\t\t\r\n\t}\r\n\t\r\n\t@SuppressWarnings(""unchecked"")\r\n\t@Override\r\n\tpublic List<Long> getWereWgtDimChanged() throws ServiceException {\r\n\t\tList<Product> productList = new ArrayList<Product>();\r\n\t\ttry {\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\tproductList = (List<Product>) daoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\r\n\t\t\t\t\treturn daoManager.getProductDao().getWereWgtDimChanged();\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t} catch (DaoException de) {\r\n\t\t\tthrow (new ServiceException(de));\r\n\t\t}\r\n\t\treturn(DTOFactory.getProductDTOLightList(productList));\t\r\n\t}\r\n\r\n\t@Override\r\n\tpublic boolean excludeProductsByBrandAndUser(final Long brandId, final Long userId,final Boolean exclude)\r\n\t\t\t\t   throws ServiceException {\r\n\t\tboolean result=false;\t\t\r\n\t\ttry{\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\tresult = (Boolean) daoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\r\n\t\t\t\t\treturn daoManager.getProductDao().excludeProductsByBrandAndUser(brandId, userId,exclude);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}catch (DaoException de) {\r\n\t\t\ttry {\r\n\t\t\t\tthrow new ServiceException(de);\r\n\t\t\t} catch (ServiceException e) {\r\n\t\t\t\te.printStackTrace();\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n\t@Override\r\n\tpublic boolean isUserBrandExcluded(final Long brandId, final Long userId)throws ServiceException {\r\n\t\t\r\n\t\tBoolean result=false;\t\t\r\n\t\ttry{\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\tresult = (Boolean) daoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\r\n\t\t\t\t\treturn daoManager.getProductDao().isUserBrandExcluded(brandId, userId);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}catch (DaoException de) {\r\n\t\t\ttry {\r\n\t\t\t\tthrow new ServiceException(de);\r\n\t\t\t} catch (ServiceException e) {\r\n\t\t\t\t// TODO Auto-generated catch block\r\n\t\t\t\te.printStackTrace();\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\t\r\n\t@Override\r\n\tpublic boolean generatProfitByBrand(final Long brandId, final Long userId, final String percentProfit)\r\n\t\t\tthrows ServiceException {\r\n\t\tboolean result=false;\t\t\r\n\t\ttry{\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\tresult = (Boolean) daoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\r\n\t\t\t\t\treturn daoManager.getProductDao().generatProfitByBrand(brandId, userId, percentProfit);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}catch (DaoException de) {\r\n\t\t\ttry {\r\n\t\t\t\tthrow new ServiceException(de);\r\n\t\t\t} catch (ServiceException e) {\r\n\t\t\t\te.printStackTrace();\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\t\r\n\t@Override\r\n\tpublic boolean generatProfitByCategory(final Long categoryId, final Long userId, final String percentProfit)\r\n\t\t\tthrows ServiceException {\r\n\t\tboolean result=false;\t\t\r\n\t\ttry{\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\tresult = (Boolean) daoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\r\n\t\t\t\t\treturn daoManager.getProductDao().generatProfitByCategory(categoryId, userId,percentProfit);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}catch (DaoException de) {\r\n\t\t\ttry {\r\n\t\t\t\tthrow new ServiceException(de);\r\n\t\t\t} catch (ServiceException e) {\r\n\t\t\t\te.printStackTrace();\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\t\r\n\t@Override\r\n\tpublic Long nbProductActiveByBrand(final Long brandId, final Long userId)\r\n\t\t\tthrows ServiceException {\r\n\t\tLong result=1L;\t\t\r\n\t\ttry{\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\tresult = (Long) daoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\r\n\t\t\t\t\treturn daoManager.getProductDao().nbProductActiveByBrand(brandId, userId);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}catch (DaoException de) {\r\n\t\t\ttry {\r\n\t\t\t\tthrow new ServiceException(de);\r\n\t\t\t} catch (ServiceException e) {\r\n\t\t\t\t// TODO Auto-generated catch block\r\n\t\t\t\te.printStackTrace();\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\t\r\n\t@SuppressWarnings(""unchecked"")\r\n\t@Override\r\n\tpublic List<ProductDTO> getAllProdcutAnyStatus() throws ServiceException{\r\n\t\t\r\n\t\tList <Product> productList = new ArrayList<Product>();\r\n\t\t\r\n\t\ttry {\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\tproductList = (List <Product>) daoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t\t\t@Override\r\n\t\t\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\r\n\t\t\t\t\t\t\t\tthrows DaoException {\r\n\t\t\t\t\t\t\treturn daoManager.getProductDao().getAllProdcutAnyStatus();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t} catch (DaoException de) {\r\n\t\t\tthrow (new ServiceException(de));\r\n\t\t}\r\n\t\treturn(DTOFactory.getProductDTOList(productList));\r\n\t}\r\n\t\r\n\t@Override\r\n\tpublic void transferToUser(final Long from, final Long to) throws ServiceException {\t\r\n\t\ttry {\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\tdaoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t\t@Override\r\n\t\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\r\n\t\t\t\t\t\t\tthrows DaoException {\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tSelect selectFrom = new Select();\r\n\t\t\t\t\t\tselectFrom.setFrom(from);\r\n\t\t\t\t\t\tselectFrom.setTo(to);\r\n\t\t\t\t\t\tselectFrom.setUserId(from);\t\t\t\t\t\r\n\t\t\t\t\t\tSelect selectToUserProvincePopulation = new Select();\r\n\t\t\t\t\t\tselectToUserProvincePopulation.setFrom(from);\r\n\t\t\t\t\t\tselectToUserProvincePopulation.setTo(to);\r\n\t\t\t\t\t\tselectToUserProvincePopulation.setUserId(to);\t\t\t\t\r\n\t\t\t\t\t\tList<UserProvincePopulation> userProvincePopulationListFrom = daoManager.getProductDao().getUserProvincePopulationByUserId(selectFrom);\r\n\t\t\t\t\t\tUserProvincePopulation userProvincePopulationTo = null;\r\n\t\t\t\t\t\tif (userProvincePopulationListFrom != null && userProvincePopulationListFrom.size() > 0) {\r\n\t\t\t\t\t\t\tfor (UserProvincePopulation userProvincePopulationFrom : userProvincePopulationListFrom) { \r\n\t\t\t\t\t\t\t\tif (userProvincePopulationFrom != null) {\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tselectToUserProvincePopulation.setProvinceId(userProvincePopulationFrom.getProvinceId());\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tuserProvincePopulationTo = daoManager.getProductDao().getUserProvincePopulation(selectToUserProvincePopulation);\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tuserProvincePopulationFrom.setUserId(to);\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tif (userProvincePopulationTo != null) {\r\n\t\t\t\t\t\t\t\t\t\tuserProvincePopulationFrom.setId(userProvincePopulationTo.getId());\r\n\t\t\t\t\t\t\t\t\t\tdaoManager.getProductDao().updateUserProvincePopulation(userProvincePopulationFrom);\r\n\t\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\t\tdaoManager.getProductDao().insertUserProvincePopulation(userProvincePopulationFrom);\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tuserProvincePopulationListFrom = null;\r\n\t\t\t\t\t\tuserProvincePopulationTo = null;\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\tSelect selectToShippingTotal = new Select();\r\n\t\t\t\t\t\tselectToShippingTotal.setFrom(from);\r\n\t\t\t\t\t\tselectToShippingTotal.setTo(to);\r\n\t\t\t\t\t\tselectToShippingTotal.setUserId(to);\t\t\t\t\t\t\r\n\t\t\t\t\t\tList<ShippingTotal> shippingTotalListFrom = daoManager.getProductDao().getShippingTotalListByUserId(selectFrom);\t\t\t\t\t\t\r\n\t\t\t\t\t\tShippingTotal shippingTotalTo = null;\t\t\t\t\t\t\r\n\t\t\t\t\t\tif (shippingTotalListFrom != null && shippingTotalListFrom.size() > 0) {\r\n\t\t\t\t\t\t\tfor (ShippingTotal shippingTotalFrom : shippingTotalListFrom) {\r\n\t\t\t\t\t\t\t\tif (shippingTotalFrom != null) {\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tselectToShippingTotal.setProductId(shippingTotalFrom.getProductId());\r\n\t\t\t\t\t\t\t\t\tselectToShippingTotal.setProvinceId(shippingTotalFrom.getProvinceId());\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tshippingTotalTo = daoManager.getProductDao().getShippingTotal(selectToShippingTotal);\r\n\t\t\t\t\t\t\t\t\tshippingTotalFrom.setUserId(to);\r\n\t\t\t\t\t\t\t\t\tif (shippingTotalTo != null) {\r\n\t\t\t\t\t\t\t\t\t\tshippingTotalFrom.setId(shippingTotalTo.getId());\r\n\t\t\t\t\t\t\t\t\t\tdaoManager.getProductDao().updateShippingTotal(shippingTotalFrom);\r\n\t\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\t\tdaoManager.getProductDao().insertShippingTotal(shippingTotalFrom);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tshippingTotalListFrom = null;\r\n\t\t\t\t\t\tshippingTotalTo = null;\r\n\t\t\t\t\t\tSelect selectToUserProductPrice = new Select();\r\n\t\t\t\t\t\tselectToUserProductPrice.setFrom(from);\r\n\t\t\t\t\t\tselectToUserProductPrice.setTo(to);\r\n\t\t\t\t\t\tselectToUserProductPrice.setUserId(to);\t\t\t\r\n\t\t\t\t\t\tList<UserProductPrice> userProductPriceListFrom = daoManager.getProductDao().getUserProductPriceByUserId(selectFrom);\r\n\t\t\t\t\t\tUserProductPrice userProductPriceTo = null;\t\t\t\t\t\t\r\n\t\t\t\t\t\tif (userProductPriceListFrom != null && userProductPriceListFrom.size() > 0) {\r\n\t\t\t\t\t\t\tfor (UserProductPrice userProductPriceFrom : userProductPriceListFrom) { \r\n\t\t\t\t\t\t\t\tif (userProductPriceFrom != null) {\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tselectToUserProductPrice.setProductId(userProductPriceFrom.getProductId());\r\n\t\t\t\t\t\t\t\t\tuserProductPriceTo = daoManager.getProductDao().getUserProductPrice(selectToUserProductPrice);\r\n\t\t\t\t\t\t\t\t\tuserProductPriceFrom.setUserId(to);\r\n\t\t\t\t\t\t\t\t\tif (userProductPriceTo != null) {\r\n\t\t\t\t\t\t\t\t\t\tuserProductPriceFrom.setId(userProductPriceTo.getId());\r\n\t\t\t\t\t\t\t\t\t\tdaoManager.getProductDao().updateUserProductPrice(userProductPriceFrom);\r\n\t\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\t\tdaoManager.getProductDao().insertUserProductPriceShipping(userProductPriceFrom);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tuserProductPriceListFrom = null;\r\n\t\t\t\t\t\tuserProductPriceTo = null;\r\n\t\t\t\t\t\tselectFrom = null;\r\n\t\t\t\t\t\tselectToUserProvincePopulation = null;\r\n\t\t\t\t\t\tselectToShippingTotal = null;\r\n\t\t\t\t\t\tselectToUserProductPrice = null;\t\t\t\t\t\t\r\n\t\t\t\t\t\treturn null;\r\n\t\t\t\t\t}\r\n\t\t\t});\r\n\t\t} catch (DaoException de) {\r\n\t\t\tthrow (new ServiceException(de));\r\n\t\t}\t\t\r\n\t}\r\n\t\r\n\t@Override\r\n\tpublic void transferToUserByCreationDate(final Long from, final Long to, final Date updateDate) throws ServiceException {\r\n\t\ttry {\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\tdaoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t\t@Override\r\n\t\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\r\n\t\t\t\t\t\t\tthrows DaoException {\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tSelect selectFrom = new Select();\r\n\t\t\t\t\t\tselectFrom.setFrom(from);\r\n\t\t\t\t\t\tselectFrom.setTo(to);\r\n\t\t\t\t\t\tselectFrom.setUserId(from);\r\n\t\t\t\t\t\tselectFrom.setUpdateDate(updateDate);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tSelect selectToShippingTotal = new Select();\r\n\t\t\t\t\t\tselectToShippingTotal.setFrom(from);\r\n\t\t\t\t\t\tselectToShippingTotal.setTo(to);\r\n\t\t\t\t\t\tselectToShippingTotal.setUserId(to);\r\n\t\t\t\t\t\tList<ShippingTotal> shippingTotalListFrom = daoManager.getProductDao().getShippingTotalListByUserId(selectFrom);\t\t\t\t\t\r\n\t\t\t\t\t\tShippingTotal shippingTotalTo = null;\t\t\t\t\t\t\r\n\t\t\t\t\t\tif (shippingTotalListFrom != null && shippingTotalListFrom.size() > 0) {\r\n\t\t\t\t\t\t\tfor (ShippingTotal shippingTotalFrom : shippingTotalListFrom) {\r\n\t\t\t\t\t\t\t\tif (shippingTotalFrom != null) {\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tselectToShippingTotal.setProductId(shippingTotalFrom.getProductId());\r\n\t\t\t\t\t\t\t\t\tselectToShippingTotal.setProvinceId(shippingTotalFrom.getProvinceId());\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tshippingTotalTo = daoManager.getProductDao().getShippingTotal(selectToShippingTotal);\r\n\t\t\t\t\t\t\t\t\tshippingTotalFrom.setUserId(to);\r\n\t\t\t\t\t\t\t\t\tif (shippingTotalTo != null) {\r\n\t\t\t\t\t\t\t\t\t\tshippingTotalFrom.setId(shippingTotalTo.getId());\r\n\t\t\t\t\t\t\t\t\t\tdaoManager.getProductDao().updateShippingTotal(shippingTotalFrom);\r\n\t\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\t\tdaoManager.getProductDao().insertShippingTotal(shippingTotalFrom);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tshippingTotalListFrom = null;\r\n\t\t\t\t\t\tshippingTotalTo = null;\r\n\t\t\t\t\t\tSelect selectToUserProductPrice = new Select();\r\n\t\t\t\t\t\tselectToUserProductPrice.setFrom(from);\r\n\t\t\t\t\t\tselectToUserProductPrice.setTo(to);\r\n\t\t\t\t\t\tselectToUserProductPrice.setUserId(to);\r\n\t\t\t\t\t\tList<UserProductPrice> userProductPriceListFrom = daoManager.getProductDao().getUserProductPriceByUserId(selectFrom);\r\n\t\t\t\t\t\tUserProductPrice userProductPriceTo = null;\t\t\t\t\t\t\r\n\t\t\t\t\t\tif (userProductPriceListFrom != null && userProductPriceListFrom.size() > 0) {\r\n\t\t\t\t\t\t\tfor (UserProductPrice userProductPriceFrom : userProductPriceListFrom) { \r\n\t\t\t\t\t\t\t\tif (userProductPriceFrom != null) {\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tselectToUserProductPrice.setProductId(userProductPriceFrom.getProductId());\r\n\t\t\t\t\t\t\t\t\tuserProductPriceTo = daoManager.getProductDao().getUserProductPrice(selectToUserProductPrice);\r\n\t\t\t\t\t\t\t\t\tuserProductPriceFrom.setUserId(to);\r\n\t\t\t\t\t\t\t\t\tif (userProductPriceTo != null) {\r\n\t\t\t\t\t\t\t\t\t\tuserProductPriceFrom.setId(userProductPriceTo.getId());\r\n\t\t\t\t\t\t\t\t\t\tdaoManager.getProductDao().updateUserProductPrice(userProductPriceFrom);\r\n\t\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\t\tdaoManager.getProductDao().insertUserProductPriceShipping(userProductPriceFrom);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tuserProductPriceListFrom = null;\r\n\t\t\t\t\t\tuserProductPriceTo = null;\r\n\t\t\t\t\t\tselectFrom = null;\r\n\t\t\t\t\t\tselectToShippingTotal = null;\r\n\t\t\t\t\t\tselectToUserProductPrice = null;\t\t\t\t\t\t\r\n\t\t\t\t\t\treturn null;\r\n\t\t\t\t\t}\r\n\t\t\t});\r\n\t\t} catch (DaoException de) {\r\n\t\t\tthrow (new ServiceException(de));\r\n\t\t}\r\n\t}\r\n\t\t\r\n\t@Override\r\n\tpublic void transferSQLtheUserToNewTemplate(final Long from, final Long to) throws ServiceException {\r\n\t\ttry {\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\tdaoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t\t@Override\r\n\t\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\r\n\t\t\t\t\t\t\tthrows DaoException {\r\n\t\t\t\t\t\tSelect select = new Select();\r\n\t\t\t\t\t\tselect.setFrom(from);\r\n\t\t\t\t\t\tselect.setTo(to);\r\n\t\t\t\t\t\tdaoManager.getProductDao().transferUserOnUserProvincePopulation(select);\r\n\t\t\t\t\t\tdaoManager.getProductDao().transferUserOnShippingTotal(select);\r\n\t\t\t\t\t\tdaoManager.getProductDao().transferUserOnUserProductPrice(select);\r\n\t\t\t\t\t\treturn null;\r\n\t\t\t\t\t}\r\n\t\t\t});\r\n\t\t} catch (DaoException de) {\r\n\t\t\tthrow (new ServiceException(de));\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t@Override\r\n\tpublic Long isGroupProductID(final Long productId) throws ServiceException {\r\n\t\tLong count= 0L; \r\n\t\ttry{\r\n\t\t\tdaoManager.setCommitTransaction(true);\r\n\t\t\tcount = (Long) daoManager.executeAndHandle(new DaoCommand() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\r\n\t\t\t\t\treturn daoManager.getProductDao().isGroupProductID(productId);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}catch (DaoException de) {\r\n\t\t\ttry {\r\n\t\t\t\tthrow new ServiceException(de);\r\n\t\t\t} catch (ServiceException e) {\r\n\t\t\t\te.printStackTrace();\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn count;\r\n\t}\t\t\r\n\r\n\t// transferSQLtheUserToNewTemplate(\r\n\t\r\n/*\r\n\t@Override\r\n\tpublic Boolean existsUserProductPrice(final Long productId, final Long userId) throws ServiceException {\r\n\t\tUserProductPriceDTO userProductPriceDTO = getUserProductPriceInformation(productId, userId);\r\n\t\treturn (userProductPriceDTO != null);\r\n\t}\r\n*/\r\n\t\r\n}\r\n\r\n----------------------------------- SOURCE END -------------------------------------",1404410010047
error,log,,,"Problems occurred when invoking code from plug-in: ""org.eclipse.jdt.ui"".",1404410010049
