what,kind,bundleId,bundleVersion,description,time
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.file.save",1426027070870
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.copy",1426027125945
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.paste",1426027129016
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.copy",1426027135554
activated,editor,org.eclipse.jdt.ui,3.6.2.r362_v20110203,"org.eclipse.jdt.ui.CompilationUnitEditor",1426027139368
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.paste",1426027141654
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.copy",1426027145091
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.paste",1426027146182
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.copy",1426027148585
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.paste",1426027150150
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.delete",1426027168023
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.file.save",1426027174558
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1426027176667
error,log,,,"Problems occurred when invoking code from plug-in: ""org.eclipse.core.resources"".",1426027177258
error,log,,,"Errors occurred during the build.",1426027177369
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1426027177378
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1426027177410
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1426027177439
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.file.saveAll",1426027177443
error,log,,,"Problems occurred when invoking code from plug-in: ""org.eclipse.core.resources"".",1426027178264
error,log,,,"Errors occurred during the build.",1426027178534
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1426027178781
error,log,,,"Exception occurred during problem detection:\n----------------------------------- SOURCE BEGIN -------------------------------------\npackage com.loyauty.web.struts.action.product;\n\nimport java.io.File;\nimport java.text.SimpleDateFormat;\nimport java.util.ArrayList;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Set;\n\nimport javax.servlet.http.HttpSession;\n\nimport org.jsoup.Jsoup;\n\nimport lombok.Getter;\nimport lombok.Setter;\n\nimport com.loyauty.enums.Language;\nimport com.loyauty.enums.PriceType;\nimport com.loyauty.enums.ProductStatus;\nimport com.loyauty.enums.UserProductStatus;\nimport com.loyauty.enums.UserType;\nimport com.loyauty.exception.ServiceException;\nimport com.loyauty.exception.ServiceLocatorException;\nimport com.loyauty.model.User;\nimport com.loyauty.service.brand.BrandService;\nimport com.loyauty.service.common.CommonService;\nimport com.loyauty.service.core.DTOFactory;\nimport com.loyauty.service.core.dto.AlterProductXMLDTO;\nimport com.loyauty.service.core.dto.AlterUserProductXMLDTO;\nimport com.loyauty.service.core.dto.BasicUserDTO;\nimport com.loyauty.service.core.dto.BoxDTO;\nimport com.loyauty.service.core.dto.CategoryDTO;\nimport com.loyauty.service.core.dto.ClientCategoryDTO;\nimport com.loyauty.service.core.dto.CommonDTO;\nimport com.loyauty.service.core.dto.ImageDTO;\nimport com.loyauty.service.core.dto.OperationsDTO;\nimport com.loyauty.service.core.dto.OrdersDTO;\nimport com.loyauty.service.core.dto.ProductDTO;\nimport com.loyauty.service.core.dto.ProductLinkDTO;\nimport com.loyauty.service.core.dto.ProductModelDTO;\nimport com.loyauty.service.core.dto.SpecificationDTO;\nimport com.loyauty.service.core.dto.UserDTO;\nimport com.loyauty.service.core.dto.UserProductPriceDTO;\nimport com.loyauty.service.core.dto.UserSessionDTO;\nimport com.loyauty.service.image.ImageService;\nimport com.loyauty.service.operations.OperationsService;\nimport com.loyauty.service.product.ProductService;\nimport com.loyauty.service.user.UserService;\nimport com.loyauty.util.CommonUtils;\nimport com.loyauty.web.WebConstants;\nimport com.loyauty.web.struts.action.LoyautyAction;\n\npublic class EditSaleProduct extends LoyautyAction{\n\tprivate static final long serialVersionUID = -5162061504759408826L;\n\n\t\n\n\tprivate ProductService productService;\n\tprivate ImageService imageService;\n\tprivate CommonService commonService;\n\tprivate BrandService brandService;\n\tprivate UserService userService;\n\tprivate OperationsService operationsService;\n\t\n\tprivate UserSessionDTO userSession;\n\t@Getter @Setter\n\tprivate long productId;\n\t@Getter @Setter\n\tprivate long imageId;\n\t@Getter @Setter\n\tprivate long brand;\n\t@Getter @Setter\n\tprivate String brandName;\n\t@Getter @Setter\n\tprivate long category;\n\t@Getter @Setter\n\tprivate String categoryName;\n\t@Getter @Setter\n\tprivate long mainSpecification; \n\t@Getter @Setter\n\tprivate String mainSpecificationName;\n\t@Getter @Setter\n\tprivate String manufProductID;\n\t@Getter @Setter\n\tprivate String manufProductID1;\n\t@Getter @Setter\n\tprivate String manufProductID2;\n\t@Getter @Setter\n\tprivate String manufProductID3;\n\t@Getter @Setter\n\tprivate String manufProductID4;\n\t\n\t@Getter @Setter\n\tprivate Integer manufProductQuantity = 0;\n\t@Getter @Setter\n\tprivate Integer manufProductQuantity1 = 0;\n\t@Getter @Setter\n\tprivate Integer manufProductQuantity2 = 0;\n\t@Getter @Setter\n\tprivate Integer manufProductQuantity3 = 0;\n\t@Getter @Setter\n\tprivate Integer manufProductQuantity4 = 0;\n\t\n\t@Getter @Setter\n\tprivate String supplier;\n\t@Getter @Setter\n\tprivate String supplier1;\n\t@Getter @Setter\n\tprivate String supplier2;\n\t@Getter @Setter\n\tprivate String supplier3;\n\t@Getter @Setter\n\tprivate String supplier4;\n\t\n\t@Getter @Setter\n\tprivate String price;\n\t@Getter @Setter\n\tprivate String price1;\n\t@Getter @Setter\n\tprivate String price2;\n\t@Getter @Setter\n\tprivate String price3;\n\t@Getter @Setter\n\tprivate String price4;\t\n\n\t@Getter @Setter\n\tprivate String msrp0;\n\t@Getter @Setter\n\tprivate String msrp1;\n\t@Getter @Setter\n\tprivate String msrp2;\n\t@Getter @Setter\n\tprivate String msrp3;\n\t@Getter @Setter\n\tprivate String msrp4;\n\t\n\t@Getter @Setter\n\tprivate String upc;\n\t@Getter @Setter\n\tprivate String loyaltyProductId;\n\t@Getter @Setter\n\tprivate String nameEn;\n\t@Getter @Setter\n\tprivate String nameFr;\n\t@Getter @Setter\n\tprivate String msrp;\n\t@Getter @Setter\n\tprivate String cost;\n\t@Getter @Setter\n\tprivate String large;\n\t@Getter @Setter\n\tprivate String width;\n\t@Getter @Setter\n\tprivate String high;\n\t@Getter @Setter\n\tprivate String weight;\n\t@Getter @Setter\n\tprivate Double boxLength;\n\t@Getter @Setter\n\tprivate Double boxWidth;\n\t@Getter @Setter\n\tprivate Double boxHeight;\n\t/*\n\t@Getter @Setter\n\tprivate Double boxWeight;\n\t*/\n\t@Getter @Setter\n\tprivate Double boxTotalWeight;\n\t@Getter @Setter\n\tprivate String largeCm;\n\t@Getter @Setter\n\tprivate String widthCm;\n\t@Getter @Setter\n\tprivate String highCm;\n\t@Getter @Setter\n\tprivate String weightKg;\n\t@Getter @Setter\n\tprivate String boxLengthCm;\n\t@Getter @Setter\n\tprivate String boxWidthCm;\n\t@Getter @Setter\n\tprivate String boxHeightCm;\n\t@Getter @Setter\n\tprivate String boxWeightKg;\n\t@Getter @Setter\n\tprivate Integer statusProductBox;\n\t@Getter @Setter\n\tprivate Boolean canadaPostSizesVerified;\n\t@Getter @Setter\n\tprivate BoxDTO boxDTO;\n\t\n\t@Getter @Setter\n\tprivate String descriptionEn;\n\t@Getter @Setter\n\tprivate String descriptionFr;\n\t@Getter @Setter\n\tprivate String specificationEn;\n\t@Getter @Setter\n\tprivate String specificationFr;\n\t@Getter @Setter\n\tprivate String otherEng;\n\t@Getter @Setter\n\tprivate String otherFr;\n\t\n\t//uploading files\n\t@Getter @Setter\t\n\tprivate File productImage; \n\t@Getter @Setter\n\tprivate String productImageContentType;\n\t@Getter @Setter\n\tprivate String productImageFileName;\n\t@Getter @Setter\n\tprivate ImageDTO imgDTO;\n\t@Getter @Setter\n\tprivate List<CommonDTO> categoryList;\n\t@Getter @Setter\n\tprivate List<SpecificationDTO> mainSpecificationList;\n\t@Getter @Setter\n\tprivate boolean update = false;\n\t@Getter @Setter\n\tprivate ProductDTO productDTO;\n\t@Getter @Setter\n\tprivate UserProductPriceDTO userProductPriceDTO;\t\n\t\n\t@Getter @Setter\n\tprivate List<CommonDTO> brandList;\n\t@Getter @Setter\n\tprivate List<CommonDTO> statusList;\n\n\t@Getter @Setter\n\tprivate String linkUrl;\n\t@Getter @Setter\n\tprivate String note;\n\t@Getter @Setter\n\tprivate String statusName;\t\n\t@Getter @Setter\n\tprivate Integer statusId;\n\t@Getter @Setter\n\tprivate List<UserDTO> activeClientsList;\n\t@Getter @Setter\n\tprivate int activeClientsSize;\n\t@Getter @Setter\n\tprivate int activeClientsTFSize;\t\n\t@Getter @Setter\n\tprivate String loyaltyProductIdSub;\n\t\n\t@Getter @Setter\n\tprivate String periodTime;\n\t@Getter @Setter\n\tprivate String warrantyQuantity;\n\t@Getter @Setter\n\tprivate Boolean defectFree;\n\t\n\t@Getter @Setter\n\tprivate List<UserSessionDTO> userNameList;\n\t@Getter @Setter\n\tprivate String[] userPrice;\n\t@Getter @Setter\n\tprivate String[] percentageProfit;\n\t@Getter @Setter\n\tprivate String[] percentageDiscount;\n\t@Getter @Setter\n\tprivate String[] isExcluded;\n\t@Getter @Setter\n\tprivate String[] excluded;\n\t\n\t@Getter @Setter\n\tprivate Double[] currencyRate;\n\t@Getter @Setter\n\tprivate String[] currencySymbol;\n\t@Getter @Setter\n\tprivate String[] currencyPrice;\t//CURRENCY_LS_PRICE\n\t@Getter @Setter\n\tprivate List<ClientCategoryDTO> listClientCategory;\n\t@Getter @Setter\n\tprivate OperationsDTO operationDTO;\n\t@Getter @Setter\n\tprivate Integer thisProductForSale;\n\t@Getter @Setter\n\tprivate Boolean salesByDate;\n\t@Getter @Setter\n\tprivate Boolean saleForAllCleint;\n\t@Getter @Setter\n\tprivate String strUsersId;\n\t\n\t@Getter @Setter\n\tprivate Boolean futurSUB;\n\t@Getter @Setter\n\tprivate Date startDate=new Date();\n\t@Getter @Setter\n\tprivate Date endDate=new Date();\n\t\n\t@Getter @Setter\n\tprivate String strStartDate="""";\n\t@Getter @Setter\n\tprivate String strEndDate="""";\n\t\n\t@Getter @Setter\n\tprivate ProductDTO saleProdctDTO;\n\t\n\t@Getter @Setter\n\tprivate Long saveSaleSignal;\n\t\n\t\n\t@Getter @Setter\n\tprivate Long salesByDateCheckbox;\n\t\n\t\n\tpublic  EditSaleProduct() throws ServiceLocatorException {\n\t\tsuper();\t\n\t\tproductService = getServiceLocator().getProductService();\n\t\tcommonService = getServiceLocator().getCommonService();\n\t\timageService = getServiceLocator().getImageService();\n\t\tbrandService = getServiceLocator().getBrandService();\n\t\tuserService = getServiceLocator().getUserService();\n\t\toperationsService = getServiceLocator().getOperationsService();\n\t}\n\n\t\n\t\n\t@Override\n\tpublic void prepare() {\n\t\ttry {\n\t\t\t\n\t\t\t\t\t\t\n\t\t\t\n\t\t} catch(Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tlog.debug(""Error when getting product in method prepare()"");\n\t\t}\n\t}\n\t\n\t\n\t\n\t\n\t\n\t\n    \n\t/**========================================================================\n\t\t\t\t\t\t\t\texecute\n\t   ========================================================================*/\n\t@SuppressWarnings(""unchecked"")\n\t@Override  \n\tpublic String execute() throws Exception {\n\t\ttry {\n\t\t\tHttpSession session = request.getSession(true);\n\t\t\tSimpleDateFormat frmDate = new SimpleDateFormat(""dd/MM/yyyy"");\n\t\t\tbrandList = commonService.getBrands();\n\t\t\tstatusList = commonService.getAllProductStatuses();\n\t\t\tcategoryList  = internationalizeName(commonService.getCategoriesByBrand(brand));\n\t\t\tmainSpecificationList = productService.getMainSpecificationByCategory(category);\n\t\t\t\n\t\t\t//productId = (Long) request.getSession(true).getAttribute(""productId"");\n\t\t\tproductDTO = productService.getProductInformation(productId, null);\n\t\t\tboxDTO = productService.getBoxByProductId(productId);\n\t\t\tif(boxDTO==null)boxDTO=new BoxDTO();\n\t\t\timgDTO = productDTO.getImage();\n\t\t\tactiveClientsList = productService.getAllActiveClients(productId);\n\t\t\tactiveClientsTFSize = activeClientsSize = activeClientsList.size();\n\t\t\tactiveClientsTFSize = activeClientsList.isEmpty() ? 1 : activeClientsTFSize;\n\t\t\tBasicUserDTO basicUserDTO = new BasicUserDTO();\n\t\t\tbasicUserDTO.setTypeId(UserType.USER.getValue());\n\t\t\tbasicUserDTO.setActive(true);\n\t\t\tuserNameList = userService.getAllUserAccounts(basicUserDTO);\n\t\t\t//listClientCategory = userService.getAllClientCategory();\n\t\t\tfor (UserSessionDTO usrDTO : userNameList) {\n\t\t\t\tProductDTO pDTO=productService.getSaleActiveByProductIdAndUserId(productId, usrDTO.getId());\n\t\t\t\tif(pDTO!=null)usrDTO.setSelected(true);\n\t\t\t\t//usrDTO.setSelected(true);\n\t\t\t}\t\t\t\n\t\t\tupc=productDTO.getUpc();\n\t\t\tloyaltyProductId=productDTO.getLoyaltyProductId();\n\t\t\tmsrp=productDTO.getMsrp();\n\t\t\tcost=productDTO.getCost();\n\t\t\tmainSpecificationName=productDTO.getSpecificationProduct();\n\t\t\t\n\t\t\t/*------------------------------------------\n\t\t\t \t\t\t\t\tSale\n\t\t\t  ------------------------------------------*/\n\n\t\t\tif(saveSaleSignal!=null && saveSaleSignal!=0L){\n\t\t\t\tProductDTO pDTO=new ProductDTO(); \n\t\t\t\t//Update product_sale if exist else insert it\n\t\t\t\t//product_id,qt_max,sale_qt,start_date,end_date,active,message_for_client,\n\t\t\t\t//sale_price,sale_percent_profit,sale_percent_discount,sale_note\n\t\t\t\tSystem.out.println(""productId:""+productId);\n\t\t\t\tSystem.out.println(""salesByDate:""+salesByDate);\n\t\t\t\tSystem.out.println(""saleProdctDTO.getSalePrice():""+saleProdctDTO.getSalePrice());\n\t\t\t\tSystem.out.println(""strStartDate:""+strStartDate);\n\t\t\t\tSystem.out.println(""strEndDate:""+strEndDate);\n\t\t\t\tSystem.out.println(""saleProdctDTO.getQtMax():""+saleProdctDTO.getQtMax());\n\t\t\t\tSystem.out.println(""saleProdctDTO.getSaleQt():""+saleProdctDTO.getSaleQt());\n\t\t\t\tSystem.out.println(""saleProdctDTO.getLoyaltyProductIdSub():""+saleProdctDTO.getLoyaltyProductIdSub());\n\t\t\t\tSystem.out.println(""saleProdctDTO.getMessageForClient():""+saleProdctDTO.getMessageForClient());\n\t\t\t\tSystem.out.println(""strUsersId:""+strUsersId);\n\t\t\t\tSystem.out.println(""futurSUB:""+futurSUB);\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tsaleProdctDTO.setId(productId);\n\t\t\t\tDate startDate=frmDate.parse(strStartDate);\n\t\t\t\tDate endDate=frmDate.parse(strEndDate);\n\t\t\t\tsaleProdctDTO.setStartDate(startDate);\n\t\t\t\tsaleProdctDTO.setEndDate(endDate);\n\t\t\t\t//save sale price\n\t\t\t\t\n\t\t\t\tDouble vaCost=TryParseDouble(productDTO.getCost());\n\t\t\t\tDouble valMsrp=TryParseDouble(productDTO.getMsrp());\n\t\t\t\tDouble salePrice=TryParseDouble(saleProdctDTO.getSalePrice()+"""");\n\t\t\t\tDouble salePercentProfit=((salePrice/vaCost)-1)*100;\n\t\t\t\tDouble salePercentDiscount=((valMsrp-salePrice)/valMsrp)*100;\n\t\t\t\tsaleProdctDTO.setSalePercentProfit(salePercentProfit);\n\t\t\t\tsaleProdctDTO.setSalePercentDiscount(salePercentDiscount);\n\t\t\t\tSystem.out.println(""salePercentProfit:""+salePercentProfit);\n\t\t\t\tSystem.out.println(""salePercentDiscount:""+salePercentDiscount);\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t//\n\t\t\t\tproductService.addSale(saleProdctDTO);\n\t\t\t\t\n\t\t\t\t//user_id,regular_price,regular_percent_profit,regular_percent_discount,active,product_sale_id\n\t\t\t\tList<Long> usersIdList =getTabUsersIdFromStrUserId(strUsersId);\n\t\t\t\tfor(int i=0;i<usersIdList.size();i++){\n\t\t\t\t\tUserProductPriceDTO userPPDTO=productService.getUserProductPriceInformation(productId, usersIdList.get(i));\t\t\n\t\t\t\t\tif(userPPDTO!=null){\n\n\t\t\t\t\t\t//save regular price\n\t\t\t\t\t\tDouble regularPrice=TryParseDouble(userPPDTO.getPrice());\n\t\t\t\t\t\tDouble regularPercentProfit=TryParseDouble(userPPDTO.getProfit());\n\t\t\t\t\t\tDouble regularPercentDiscount=TryParseDouble(userPPDTO.getDiscount());\n\t\t\t\t\t\tsaleProdctDTO.setRegularPrice(regularPrice);\n\t\t\t\t\t\tsaleProdctDTO.setRegularPercentProfit(regularPercentProfit);\n\t\t\t\t\t\tsaleProdctDTO.setRegularPercentDiscount(regularPercentDiscount);\n\t\t\t\t\t\t//insert userSale if not exist else update it\n\t\t\t\t\t\tSystem.out.println(""regularPrice:""+regularPrice);\n\t\t\t\t\t\tSystem.out.println(""regularPercentProfit:""+regularPercentProfit);\n\t\t\t\t\t\tSystem.out.println(""regularPercentDiscount:""+regularPercentDiscount);\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn SUCCESS;\n\n\t\t\t}else{\n\t\t\t\tsaleProdctDTO=productService.getSaleByProductId(productId);\t\n\t\t\t}\n\n\t\t\t\t\n\t\t\tif(saleProdctDTO==null){\n\t\t\t\tsaleProdctDTO=new ProductDTO();\n\t\t\t\tstrStartDate=frmDate.format(new Date());\n\t\t\t\tstrEndDate=frmDate.format(new Date());\n\t\t\t}else{\n\t\t\t\tif(saleProdctDTO.getStartDate()!=null)strStartDate=frmDate.format(saleProdctDTO.getStartDate());\n\t\t\t\tif(saleProdctDTO.getEndDate()!=null)strEndDate=frmDate.format(saleProdctDTO.getEndDate());\n\t\t\t}\n\n\t\t\tif(salesByDate==null)salesByDate=true;\n\t\t\tif(saleForAllCleint==null)saleForAllCleint=true;\n\t\t\t//clean loyaltyProductIdSub\n\t\t\tloyaltyProductIdSub=saleProdctDTO.getLoyaltyProductIdSub();\n\t\t\tif(loyaltyProductIdSub!=null){\n\t\t\t\tloyaltyProductIdSub=getStrCleaned(loyaltyProductIdSub);\n\t\t\t\tsaleProdctDTO.setLoyaltyProductIdSub(loyaltyProductIdSub);\n\t\t\t\tfuturSUB=true;\n\t\t\t\tif(loyaltyProductIdSub.equals(""""))futurSUB=false;\n\t\t\t}\n\n\t\t\tif(futurSUB==null)futurSUB=false;\n\t\t\t\n\t\t\t/*if(strUsersId==null)strUsersId="""";\n\t\t\tString[] strTabUsersId=strUsersId.split("",""); \n\t\t\tList<Long> tabUsersId=new ArrayList<Long>();\n\t\t\t\n\t\t\tfor(int i=0;i<strTabUsersId.length;i++){\n\t\t\t\tif(!strTabUsersId[i].equals("""")){\n\t\t\t\t\tLong item=Long.parseLong(strTabUsersId[i]);\n\t\t\t\t\ttabUsersId.add(item);\n\t\t\t\t}\n\t\t\t}*/\n\n\t\t\treturn SUCCESS;\n\t\t} catch(ServiceException e) {\n\t\t\tlog.debug(""Service Error when loading file"");\n\t\t\taddActionError(getText(""loyauty.error.common.service""));\n\t\t} catch (Exception e) {\n\t\t\taddActionError(getText(""loyauty.error.common.service""));\n\t\t}\n\t\treturn INPUT;\n\t}\n\n    \n\t/**========================================================================\n\t\t\t\t\t\t\t\tinternationalizeName\n\t   ========================================================================*/\n\tprivate List<CommonDTO> internationalizeName(List<CategoryDTO> list){\n\t\tList<CommonDTO> commonListDTO = new ArrayList<CommonDTO>();\n\t\tCommonDTO commonDTO;\n\t\tfor(CategoryDTO cat : list){\n\t\t\tcommonDTO = CommonDTO.valueOf(cat.getId(), getText(cat.getCode()));\t\t\t\n\t\t\tcommonListDTO.add(commonDTO);\n\t\t}\t\t\n\t\treturn commonListDTO;\n\t}\n    \n\t/**========================================================================\n\t\t\t\t\t\t\t\tgetUserSessionDTO\n\t   ========================================================================*/\n\tpublic static UserSessionDTO getUserSessionDTO(ClientCategoryDTO clDTO){\n\t\tLong userId=clDTO.getClientCategoryId();\n\t\tString login=clDTO.getClientCategoryName();\n\t\tInteger TypeId=2;\n\t\tInteger userLangId = 2;\n\t\tInteger RESULTS_PER_PAGE=10;\n\t\tString email="""";\n\t\tString code="""";\n\t\tBoolean isActive=true;\n\t\tLong template =1L;\n\t\tUserSessionDTO sessionDTO =new UserSessionDTO(userId, login, TypeId, userLangId, Language.ENGLISH.getValue(),\n\t\t\t\t\t\t\t\t\t\t\t\t\t  RESULTS_PER_PAGE, email, code, isActive,template);\n\t\t\n\t\treturn sessionDTO;\n\t}\n\t\n\t/**========================================================================\n \t\t\t\t\t\t\tgetTabUsersIdFromStrUserId\n\t   ========================================================================*/\n\tList<Long> getTabUsersIdFromStrUserId(String strUsersId){\n\t\tList<Long> resultList=new ArrayList<Long>();\n\t\tif(strUsersId==null)strUsersId="""";\n\t\tString[] strTabUsersId=strUsersId.split("",""); \n\t\tfor(int i=0;i<strTabUsersId.length;i++){\n\t\t\tif(!strTabUsersId[i].equals("""")){\n\t\t\t\tLong item=Long.parseLong(strTabUsersId[i]);\n\t\t\t\tresultList.add(item);\n\t\t\t}\n\t\t}\n\t\treturn resultList;\n\t}\n\t\n\t\n\t/**========================================================================\n \t\t\t\t\t\t\tgetStrCleaned\n\t   ========================================================================*/\n\tString getStrCleaned(String str){\n\t\tif(str==null)str="""";\n\t\tstr = str.replaceAll(""\\\\s"","""");\n\t\tstr=str.replaceAll(""\\'"","""");\n\t\tstr=str.replaceAll(""\\"""","""");\n\t\tstr=str.replaceAll("";"","""");\n\t\tstr=str.replaceAll("","","""");\n\t\treturn str;\n\t}\n\t\n\t\n\t/**========================================================================\n \t\t\t\t\t\t\tget numeric from string\n\t   ========================================================================*/\n\tpublic Double TryParseDouble(String str){\n\t\tstr=getStrCleaned(str);\n\t\tDouble result=null;\n\t    try {\n\t    \tresult = Double.parseDouble(str);\n\t        return result;\n\t    } catch(NumberFormatException e) {\n\t        return -1d;\n\t    }\n\t}\n\n\t\n\n\n\t\n\n}\n\n----------------------------------- SOURCE END -------------------------------------",1426027179362
error,log,,,"Problems occurred when invoking code from plug-in: ""org.eclipse.jdt.ui"".",1426027179362
error,log,,,"Error in JDT Core during reconcile",1426027179363
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1426027180258
activated,editor,org.eclipse.jdt.ui,3.6.2.r362_v20110203,"org.eclipse.jdt.ui.CompilationUnitEditor",1426027183122
activated,editor,org.eclipse.jdt.ui,3.6.2.r362_v20110203,"org.eclipse.jdt.ui.CompilationUnitEditor",1426027214963
activated,view,org.eclipse.wst.server.ui,1.1.207.v20110119,"org.eclipse.wst.server.ui.ServersView",1426027228075
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1426027229502
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1426027230429
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1426027236260
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1426027237309
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1426027237616
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1426027258466
activated,editor,org.eclipse.jdt.ui,3.6.2.r362_v20110203,"org.eclipse.jdt.ui.CompilationUnitEditor",1426027258481
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1426027286866
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1426027288044
executed,command,org.eclipse.ui.ide,3.6.2.M20101201-0800,"org.eclipse.ui.project.cleanAction",1426027288049
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1426027288326
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1426027288424
error,log,,,"Exception occurred during problem detection:\n----------------------------------- SOURCE BEGIN -------------------------------------\npackage com.loyauty.web.struts.action.product;\n\nimport java.io.File;\nimport java.text.SimpleDateFormat;\nimport java.util.ArrayList;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Set;\n\nimport javax.servlet.http.HttpSession;\n\nimport org.jsoup.Jsoup;\n\nimport lombok.Getter;\nimport lombok.Setter;\n\nimport com.loyauty.enums.Language;\nimport com.loyauty.enums.PriceType;\nimport com.loyauty.enums.ProductStatus;\nimport com.loyauty.enums.UserProductStatus;\nimport com.loyauty.enums.UserType;\nimport com.loyauty.exception.ServiceException;\nimport com.loyauty.exception.ServiceLocatorException;\nimport com.loyauty.model.User;\nimport com.loyauty.service.brand.BrandService;\nimport com.loyauty.service.common.CommonService;\nimport com.loyauty.service.core.DTOFactory;\nimport com.loyauty.service.core.dto.AlterProductXMLDTO;\nimport com.loyauty.service.core.dto.AlterUserProductXMLDTO;\nimport com.loyauty.service.core.dto.BasicUserDTO;\nimport com.loyauty.service.core.dto.BoxDTO;\nimport com.loyauty.service.core.dto.CategoryDTO;\nimport com.loyauty.service.core.dto.ClientCategoryDTO;\nimport com.loyauty.service.core.dto.CommonDTO;\nimport com.loyauty.service.core.dto.ImageDTO;\nimport com.loyauty.service.core.dto.OperationsDTO;\nimport com.loyauty.service.core.dto.OrdersDTO;\nimport com.loyauty.service.core.dto.ProductDTO;\nimport com.loyauty.service.core.dto.ProductLinkDTO;\nimport com.loyauty.service.core.dto.ProductModelDTO;\nimport com.loyauty.service.core.dto.SpecificationDTO;\nimport com.loyauty.service.core.dto.UserDTO;\nimport com.loyauty.service.core.dto.UserProductPriceDTO;\nimport com.loyauty.service.core.dto.UserSessionDTO;\nimport com.loyauty.service.image.ImageService;\nimport com.loyauty.service.operations.OperationsService;\nimport com.loyauty.service.product.ProductService;\nimport com.loyauty.service.user.UserService;\nimport com.loyauty.util.CommonUtils;\nimport com.loyauty.web.WebConstants;\nimport com.loyauty.web.struts.action.LoyautyAction;\n\npublic class EditSaleProduct extends LoyautyAction{\n\tprivate static final long serialVersionUID = -5162061504759408826L;\n\n\t\n\n\tprivate ProductService productService;\n\tprivate ImageService imageService;\n\tprivate CommonService commonService;\n\tprivate BrandService brandService;\n\tprivate UserService userService;\n\tprivate OperationsService operationsService;\n\t\n\tprivate UserSessionDTO userSession;\n\t@Getter @Setter\n\tprivate long productId;\n\t@Getter @Setter\n\tprivate long imageId;\n\t@Getter @Setter\n\tprivate long brand;\n\t@Getter @Setter\n\tprivate String brandName;\n\t@Getter @Setter\n\tprivate long category;\n\t@Getter @Setter\n\tprivate String categoryName;\n\t@Getter @Setter\n\tprivate long mainSpecification; \n\t@Getter @Setter\n\tprivate String mainSpecificationName;\n\t@Getter @Setter\n\tprivate String manufProductID;\n\t@Getter @Setter\n\tprivate String manufProductID1;\n\t@Getter @Setter\n\tprivate String manufProductID2;\n\t@Getter @Setter\n\tprivate String manufProductID3;\n\t@Getter @Setter\n\tprivate String manufProductID4;\n\t\n\t@Getter @Setter\n\tprivate Integer manufProductQuantity = 0;\n\t@Getter @Setter\n\tprivate Integer manufProductQuantity1 = 0;\n\t@Getter @Setter\n\tprivate Integer manufProductQuantity2 = 0;\n\t@Getter @Setter\n\tprivate Integer manufProductQuantity3 = 0;\n\t@Getter @Setter\n\tprivate Integer manufProductQuantity4 = 0;\n\t\n\t@Getter @Setter\n\tprivate String supplier;\n\t@Getter @Setter\n\tprivate String supplier1;\n\t@Getter @Setter\n\tprivate String supplier2;\n\t@Getter @Setter\n\tprivate String supplier3;\n\t@Getter @Setter\n\tprivate String supplier4;\n\t\n\t@Getter @Setter\n\tprivate String price;\n\t@Getter @Setter\n\tprivate String price1;\n\t@Getter @Setter\n\tprivate String price2;\n\t@Getter @Setter\n\tprivate String price3;\n\t@Getter @Setter\n\tprivate String price4;\t\n\n\t@Getter @Setter\n\tprivate String msrp0;\n\t@Getter @Setter\n\tprivate String msrp1;\n\t@Getter @Setter\n\tprivate String msrp2;\n\t@Getter @Setter\n\tprivate String msrp3;\n\t@Getter @Setter\n\tprivate String msrp4;\n\t\n\t@Getter @Setter\n\tprivate String upc;\n\t@Getter @Setter\n\tprivate String loyaltyProductId;\n\t@Getter @Setter\n\tprivate String nameEn;\n\t@Getter @Setter\n\tprivate String nameFr;\n\t@Getter @Setter\n\tprivate String msrp;\n\t@Getter @Setter\n\tprivate String cost;\n\t@Getter @Setter\n\tprivate String large;\n\t@Getter @Setter\n\tprivate String width;\n\t@Getter @Setter\n\tprivate String high;\n\t@Getter @Setter\n\tprivate String weight;\n\t@Getter @Setter\n\tprivate Double boxLength;\n\t@Getter @Setter\n\tprivate Double boxWidth;\n\t@Getter @Setter\n\tprivate Double boxHeight;\n\t/*\n\t@Getter @Setter\n\tprivate Double boxWeight;\n\t*/\n\t@Getter @Setter\n\tprivate Double boxTotalWeight;\n\t@Getter @Setter\n\tprivate String largeCm;\n\t@Getter @Setter\n\tprivate String widthCm;\n\t@Getter @Setter\n\tprivate String highCm;\n\t@Getter @Setter\n\tprivate String weightKg;\n\t@Getter @Setter\n\tprivate String boxLengthCm;\n\t@Getter @Setter\n\tprivate String boxWidthCm;\n\t@Getter @Setter\n\tprivate String boxHeightCm;\n\t@Getter @Setter\n\tprivate String boxWeightKg;\n\t@Getter @Setter\n\tprivate Integer statusProductBox;\n\t@Getter @Setter\n\tprivate Boolean canadaPostSizesVerified;\n\t@Getter @Setter\n\tprivate BoxDTO boxDTO;\n\t\n\t@Getter @Setter\n\tprivate String descriptionEn;\n\t@Getter @Setter\n\tprivate String descriptionFr;\n\t@Getter @Setter\n\tprivate String specificationEn;\n\t@Getter @Setter\n\tprivate String specificationFr;\n\t@Getter @Setter\n\tprivate String otherEng;\n\t@Getter @Setter\n\tprivate String otherFr;\n\t\n\t//uploading files\n\t@Getter @Setter\t\n\tprivate File productImage; \n\t@Getter @Setter\n\tprivate String productImageContentType;\n\t@Getter @Setter\n\tprivate String productImageFileName;\n\t@Getter @Setter\n\tprivate ImageDTO imgDTO;\n\t@Getter @Setter\n\tprivate List<CommonDTO> categoryList;\n\t@Getter @Setter\n\tprivate List<SpecificationDTO> mainSpecificationList;\n\t@Getter @Setter\n\tprivate boolean update = false;\n\t@Getter @Setter\n\tprivate ProductDTO productDTO;\n\t@Getter @Setter\n\tprivate UserProductPriceDTO userProductPriceDTO;\t\n\t\n\t@Getter @Setter\n\tprivate List<CommonDTO> brandList;\n\t@Getter @Setter\n\tprivate List<CommonDTO> statusList;\n\n\t@Getter @Setter\n\tprivate String linkUrl;\n\t@Getter @Setter\n\tprivate String note;\n\t@Getter @Setter\n\tprivate String statusName;\t\n\t@Getter @Setter\n\tprivate Integer statusId;\n\t@Getter @Setter\n\tprivate List<UserDTO> activeClientsList;\n\t@Getter @Setter\n\tprivate int activeClientsSize;\n\t@Getter @Setter\n\tprivate int activeClientsTFSize;\t\n\t@Getter @Setter\n\tprivate String loyaltyProductIdSub;\n\t\n\t@Getter @Setter\n\tprivate String periodTime;\n\t@Getter @Setter\n\tprivate String warrantyQuantity;\n\t@Getter @Setter\n\tprivate Boolean defectFree;\n\t\n\t@Getter @Setter\n\tprivate List<UserSessionDTO> userNameList;\n\t@Getter @Setter\n\tprivate String[] userPrice;\n\t@Getter @Setter\n\tprivate String[] percentageProfit;\n\t@Getter @Setter\n\tprivate String[] percentageDiscount;\n\t@Getter @Setter\n\tprivate String[] isExcluded;\n\t@Getter @Setter\n\tprivate String[] excluded;\n\t\n\t@Getter @Setter\n\tprivate Double[] currencyRate;\n\t@Getter @Setter\n\tprivate String[] currencySymbol;\n\t@Getter @Setter\n\tprivate String[] currencyPrice;\t//CURRENCY_LS_PRICE\n\t@Getter @Setter\n\tprivate List<ClientCategoryDTO> listClientCategory;\n\t@Getter @Setter\n\tprivate OperationsDTO operationDTO;\n\t@Getter @Setter\n\tprivate Integer thisProductForSale;\n\t@Getter @Setter\n\tprivate Boolean salesByDate;\n\t@Getter @Setter\n\tprivate Boolean saleForAllCleint;\n\t@Getter @Setter\n\tprivate String strUsersId;\n\t\n\t@Getter @Setter\n\tprivate Boolean futurSUB;\n\t@Getter @Setter\n\tprivate Date startDate=new Date();\n\t@Getter @Setter\n\tprivate Date endDate=new Date();\n\t\n\t@Getter @Setter\n\tprivate String strStartDate="""";\n\t@Getter @Setter\n\tprivate String strEndDate="""";\n\t\n\t@Getter @Setter\n\tprivate ProductDTO saleProdctDTO;\n\t\n\t@Getter @Setter\n\tprivate Long saveSaleSignal;\n\t\n\t\n\t@Getter @Setter\n\tprivate Long salesByDateCheckbox;\n\t\n\t\n\tpublic  EditSaleProduct() throws ServiceLocatorException {\n\t\tsuper();\t\n\t\tproductService = getServiceLocator().getProductService();\n\t\tcommonService = getServiceLocator().getCommonService();\n\t\timageService = getServiceLocator().getImageService();\n\t\tbrandService = getServiceLocator().getBrandService();\n\t\tuserService = getServiceLocator().getUserService();\n\t\toperationsService = getServiceLocator().getOperationsService();\n\t}\n\n\t\n\t\n\t@Override\n\tpublic void prepare() {\n\t\ttry {\n\t\t\t\n\t\t\t\t\t\t\n\t\t\t\n\t\t} catch(Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tlog.debug(""Error when getting product in method prepare()"");\n\t\t}\n\t}\n\t\n\t\n\t\n\t\n\t\n\t\n    \n\t/**========================================================================\n\t\t\t\t\t\t\t\texecute\n\t   ========================================================================*/\n\t@SuppressWarnings(""unchecked"")\n\t@Override  \n\tpublic String execute() throws Exception {\n\t\ttry {\n\t\t\tHttpSession session = request.getSession(true);\n\t\t\tSimpleDateFormat frmDate = new SimpleDateFormat(""dd/MM/yyyy"");\n\t\t\tbrandList = commonService.getBrands();\n\t\t\tstatusList = commonService.getAllProductStatuses();\n\t\t\tcategoryList  = internationalizeName(commonService.getCategoriesByBrand(brand));\n\t\t\tmainSpecificationList = productService.getMainSpecificationByCategory(category);\n\t\t\t\n\t\t\t//productId = (Long) request.getSession(true).getAttribute(""productId"");\n\t\t\tproductDTO = productService.getProductInformation(productId, null);\n\t\t\tboxDTO = productService.getBoxByProductId(productId);\n\t\t\tif(boxDTO==null)boxDTO=new BoxDTO();\n\t\t\timgDTO = productDTO.getImage();\n\t\t\tactiveClientsList = productService.getAllActiveClients(productId);\n\t\t\tactiveClientsTFSize = activeClientsSize = activeClientsList.size();\n\t\t\tactiveClientsTFSize = activeClientsList.isEmpty() ? 1 : activeClientsTFSize;\n\t\t\tBasicUserDTO basicUserDTO = new BasicUserDTO();\n\t\t\tbasicUserDTO.setTypeId(UserType.USER.getValue());\n\t\t\tbasicUserDTO.setActive(true);\n\t\t\tuserNameList = userService.getAllUserAccounts(basicUserDTO);\n\t\t\t//listClientCategory = userService.getAllClientCategory();\n\t\t\tfor (UserSessionDTO usrDTO : userNameList) {\n\t\t\t\tProductDTO pDTO=productService.getSaleActiveByProductIdAndUserId(productId, usrDTO.getId());\n\t\t\t\tif(pDTO!=null)usrDTO.setSelected(true);\n\t\t\t\t//usrDTO.setSelected(true);\n\t\t\t}\t\t\t\n\t\t\tupc=productDTO.getUpc();\n\t\t\tloyaltyProductId=productDTO.getLoyaltyProductId();\n\t\t\tmsrp=productDTO.getMsrp();\n\t\t\tcost=productDTO.getCost();\n\t\t\tmainSpecificationName=productDTO.getSpecificationProduct();\n\t\t\t\n\t\t\t/*------------------------------------------\n\t\t\t \t\t\t\t\tSale\n\t\t\t  ------------------------------------------*/\n\n\t\t\tif(saveSaleSignal!=null && saveSaleSignal!=0L){\n\t\t\t\tProductDTO pDTO=new ProductDTO(); \n\t\t\t\t//Update product_sale if exist else insert it\n\t\t\t\t//product_id,qt_max,sale_qt,start_date,end_date,active,message_for_client,\n\t\t\t\t//sale_price,sale_percent_profit,sale_percent_discount,sale_note\n\t\t\t\tSystem.out.println(""productId:""+productId);\n\t\t\t\tSystem.out.println(""salesByDate:""+salesByDate);\n\t\t\t\tSystem.out.println(""saleProdctDTO.getSalePrice():""+saleProdctDTO.getSalePrice());\n\t\t\t\tSystem.out.println(""strStartDate:""+strStartDate);\n\t\t\t\tSystem.out.println(""strEndDate:""+strEndDate);\n\t\t\t\tSystem.out.println(""saleProdctDTO.getQtMax():""+saleProdctDTO.getQtMax());\n\t\t\t\tSystem.out.println(""saleProdctDTO.getSaleQt():""+saleProdctDTO.getSaleQt());\n\t\t\t\tSystem.out.println(""saleProdctDTO.getLoyaltyProductIdSub():""+saleProdctDTO.getLoyaltyProductIdSub());\n\t\t\t\tSystem.out.println(""saleProdctDTO.getMessageForClient():""+saleProdctDTO.getMessageForClient());\n\t\t\t\tSystem.out.println(""strUsersId:""+strUsersId);\n\t\t\t\tSystem.out.println(""futurSUB:""+futurSUB);\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tsaleProdctDTO.setId(productId);\n\t\t\t\tDate startDate=frmDate.parse(strStartDate);\n\t\t\t\tDate endDate=frmDate.parse(strEndDate);\n\t\t\t\tsaleProdctDTO.setStartDate(startDate);\n\t\t\t\tsaleProdctDTO.setEndDate(endDate);\n\t\t\t\t//save sale price\n\t\t\t\t\n\t\t\t\tDouble vaCost=TryParseDouble(productDTO.getCost());\n\t\t\t\tDouble valMsrp=TryParseDouble(productDTO.getMsrp());\n\t\t\t\tDouble salePrice=TryParseDouble(saleProdctDTO.getSalePrice()+"""");\n\t\t\t\tDouble salePercentProfit=((salePrice/vaCost)-1)*100;\n\t\t\t\tDouble salePercentDiscount=((valMsrp-salePrice)/valMsrp)*100;\n\t\t\t\tsaleProdctDTO.setSalePercentProfit(salePercentProfit);\n\t\t\t\tsaleProdctDTO.setSalePercentDiscount(salePercentDiscount);\n\t\t\t\tSystem.out.println(""salePercentProfit:""+salePercentProfit);\n\t\t\t\tSystem.out.println(""salePercentDiscount:""+salePercentDiscount);\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t//\n\t\t\t\tproductService.addProductSale(saleProdctDTO);\n\t\t\t\t\n\t\t\t\t//user_id,regular_price,regular_percent_profit,regular_percent_discount,active,product_sale_id\n\t\t\t\tList<Long> usersIdList =getTabUsersIdFromStrUserId(strUsersId);\n\t\t\t\tfor(int i=0;i<usersIdList.size();i++){\n\t\t\t\t\tUserProductPriceDTO userPPDTO=productService.getUserProductPriceInformation(productId, usersIdList.get(i));\t\t\n\t\t\t\t\tif(userPPDTO!=null){\n\n\t\t\t\t\t\t//save regular price\n\t\t\t\t\t\tDouble regularPrice=TryParseDouble(userPPDTO.getPrice());\n\t\t\t\t\t\tDouble regularPercentProfit=TryParseDouble(userPPDTO.getProfit());\n\t\t\t\t\t\tDouble regularPercentDiscount=TryParseDouble(userPPDTO.getDiscount());\n\t\t\t\t\t\tsaleProdctDTO.setRegularPrice(regularPrice);\n\t\t\t\t\t\tsaleProdctDTO.setRegularPercentProfit(regularPercentProfit);\n\t\t\t\t\t\tsaleProdctDTO.setRegularPercentDiscount(regularPercentDiscount);\n\t\t\t\t\t\t//insert userSale if not exist else update it\n\t\t\t\t\t\tSystem.out.println(""regularPrice:""+regularPrice);\n\t\t\t\t\t\tSystem.out.println(""regularPercentProfit:""+regularPercentProfit);\n\t\t\t\t\t\tSystem.out.println(""regularPercentDiscount:""+regularPercentDiscount);\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn SUCCESS;\n\n\t\t\t}else{\n\t\t\t\tsaleProdctDTO=productService.getSaleByProductId(productId);\t\n\t\t\t}\n\n\t\t\t\t\n\t\t\tif(saleProdctDTO==null){\n\t\t\t\tsaleProdctDTO=new ProductDTO();\n\t\t\t\tstrStartDate=frmDate.format(new Date());\n\t\t\t\tstrEndDate=frmDate.format(new Date());\n\t\t\t}else{\n\t\t\t\tif(saleProdctDTO.getStartDate()!=null)strStartDate=frmDate.format(saleProdctDTO.getStartDate());\n\t\t\t\tif(saleProdctDTO.getEndDate()!=null)strEndDate=frmDate.format(saleProdctDTO.getEndDate());\n\t\t\t}\n\n\t\t\tif(salesByDate==null)salesByDate=true;\n\t\t\tif(saleForAllCleint==null)saleForAllCleint=true;\n\t\t\t//clean loyaltyProductIdSub\n\t\t\tloyaltyProductIdSub=saleProdctDTO.getLoyaltyProductIdSub();\n\t\t\tif(loyaltyProductIdSub!=null){\n\t\t\t\tloyaltyProductIdSub=getStrCleaned(loyaltyProductIdSub);\n\t\t\t\tsaleProdctDTO.setLoyaltyProductIdSub(loyaltyProductIdSub);\n\t\t\t\tfuturSUB=true;\n\t\t\t\tif(loyaltyProductIdSub.equals(""""))futurSUB=false;\n\t\t\t}\n\n\t\t\tif(futurSUB==null)futurSUB=false;\n\t\t\t\n\t\t\t/*if(strUsersId==null)strUsersId="""";\n\t\t\tString[] strTabUsersId=strUsersId.split("",""); \n\t\t\tList<Long> tabUsersId=new ArrayList<Long>();\n\t\t\t\n\t\t\tfor(int i=0;i<strTabUsersId.length;i++){\n\t\t\t\tif(!strTabUsersId[i].equals("""")){\n\t\t\t\t\tLong item=Long.parseLong(strTabUsersId[i]);\n\t\t\t\t\ttabUsersId.add(item);\n\t\t\t\t}\n\t\t\t}*/\n\n\t\t\treturn SUCCESS;\n\t\t} catch(ServiceException e) {\n\t\t\tlog.debug(""Service Error when loading file"");\n\t\t\taddActionError(getText(""loyauty.error.common.service""));\n\t\t} catch (Exception e) {\n\t\t\taddActionError(getText(""loyauty.error.common.service""));\n\t\t}\n\t\treturn INPUT;\n\t}\n\n    \n\t/**========================================================================\n\t\t\t\t\t\t\t\tinternationalizeName\n\t   ========================================================================*/\n\tprivate List<CommonDTO> internationalizeName(List<CategoryDTO> list){\n\t\tList<CommonDTO> commonListDTO = new ArrayList<CommonDTO>();\n\t\tCommonDTO commonDTO;\n\t\tfor(CategoryDTO cat : list){\n\t\t\tcommonDTO = CommonDTO.valueOf(cat.getId(), getText(cat.getCode()));\t\t\t\n\t\t\tcommonListDTO.add(commonDTO);\n\t\t}\t\t\n\t\treturn commonListDTO;\n\t}\n    \n\t/**========================================================================\n\t\t\t\t\t\t\t\tgetUserSessionDTO\n\t   ========================================================================*/\n\tpublic static UserSessionDTO getUserSessionDTO(ClientCategoryDTO clDTO){\n\t\tLong userId=clDTO.getClientCategoryId();\n\t\tString login=clDTO.getClientCategoryName();\n\t\tInteger TypeId=2;\n\t\tInteger userLangId = 2;\n\t\tInteger RESULTS_PER_PAGE=10;\n\t\tString email="""";\n\t\tString code="""";\n\t\tBoolean isActive=true;\n\t\tLong template =1L;\n\t\tUserSessionDTO sessionDTO =new UserSessionDTO(userId, login, TypeId, userLangId, Language.ENGLISH.getValue(),\n\t\t\t\t\t\t\t\t\t\t\t\t\t  RESULTS_PER_PAGE, email, code, isActive,template);\n\t\t\n\t\treturn sessionDTO;\n\t}\n\t\n\t/**========================================================================\n \t\t\t\t\t\t\tgetTabUsersIdFromStrUserId\n\t   ========================================================================*/\n\tList<Long> getTabUsersIdFromStrUserId(String strUsersId){\n\t\tList<Long> resultList=new ArrayList<Long>();\n\t\tif(strUsersId==null)strUsersId="""";\n\t\tString[] strTabUsersId=strUsersId.split("",""); \n\t\tfor(int i=0;i<strTabUsersId.length;i++){\n\t\t\tif(!strTabUsersId[i].equals("""")){\n\t\t\t\tLong item=Long.parseLong(strTabUsersId[i]);\n\t\t\t\tresultList.add(item);\n\t\t\t}\n\t\t}\n\t\treturn resultList;\n\t}\n\t\n\t\n\t/**========================================================================\n \t\t\t\t\t\t\tgetStrCleaned\n\t   ========================================================================*/\n\tString getStrCleaned(String str){\n\t\tif(str==null)str="""";\n\t\tstr = str.replaceAll(""\\\\s"","""");\n\t\tstr=str.replaceAll(""\\'"","""");\n\t\tstr=str.replaceAll(""\\"""","""");\n\t\tstr=str.replaceAll("";"","""");\n\t\tstr=str.replaceAll("","","""");\n\t\treturn str;\n\t}\n\t\n\t\n\t/**========================================================================\n \t\t\t\t\t\t\tget numeric from string\n\t   ========================================================================*/\n\tpublic Double TryParseDouble(String str){\n\t\tstr=getStrCleaned(str);\n\t\tDouble result=null;\n\t    try {\n\t    \tresult = Double.parseDouble(str);\n\t        return result;\n\t    } catch(NumberFormatException e) {\n\t        return -1d;\n\t    }\n\t}\n\n\t\n\n\n\t\n\n}\n\n----------------------------------- SOURCE END -------------------------------------",1426027289023
error,log,,,"Problems occurred when invoking code from plug-in: ""org.eclipse.jdt.ui"".",1426027289024
error,log,,,"Error in JDT Core during reconcile",1426027289024
error,log,,,"Exception occurred during problem detection:\n----------------------------------- SOURCE BEGIN -------------------------------------\npackage com.loyauty.service.core.dto;\n\nimport java.util.Comparator;\nimport java.util.Date;\nimport java.util.List;\n\nimport lombok.Data;\nimport lombok.ToString;\n\nimport com.loyauty.enums.ProductStatus;\n\n/**\n * Contains data for the product.\n */\n@Data @ToString(callSuper=true)\npublic class ProductDTO extends BasicDTO{\n\t\t\n\tprivate static final long serialVersionUID = 1L;\n\t\n\tprivate Long selected;\n\tprivate String upc;\n\tprivate BrandDTO brand;\n\tprivate CategoryDTO category;\n\tprivate Long mainFilterTypeId;\n\tprivate String manufacturerProductId;\n\tprivate String loyaltyProductId;\n\tprivate CommonDTO nameEng;\n\tprivate CommonDTO nameFr;\n\tprivate ImageDTO image;\n\tprivate CommonDTO descriptionEng;\n\tprivate CommonDTO descriptionFr;\n\tprivate CommonDTO specificationEng;\n\tprivate CommonDTO specificationFr;\n\tprivate CommonDTO otherEng;\n\tprivate CommonDTO otherFr;\n\tprivate String msrp;\n\tprivate String cost;\n\tprivate String width;\n\tprivate String high;\n\tprivate String large;\n\tprivate String weight;\n\tprivate List<ProductModelDTO> manufactureProductList;\n\tprivate Date creationDate;\n\tprivate ProductStatus status;\n\tprivate String statusName;\n\tprivate String nameProduc;\n\tprivate String descriptiProduct;\n\tprivate String specificationProduct;\n\tprivate String otherProduct;\n\tprivate String priceProduct;  \n\tprivate String hrefName;\n\tprivate String localizedPriceProduct;\n\tprivate String note;\t\n\tprivate List<ProductLinkDTO> linkList;\t\n\tprivate Date discontinuedStartDate;\n\tprivate String loyaltyProductIdSub;\n\tprivate CommonDTO warrantyEng;\n\tprivate CommonDTO warrantyFr;\n\tprivate Long warrantyTranslationId;\n\tprivate Double discount;\n\tprivate Boolean wereWgtDimChanged;\n\tprivate Boolean consideredForXML;\n\tprivate String oldImageRealName;\n\tprivate Double stock;\n\tprivate String actualWidth;\n\tprivate String actualLength;\n\tprivate String actualHeight;\n\tprivate String actualWeight;\n\tprivate Long userId;\n\tprivate String css;\n\t\n\tprivate Double boxLength;\n\tprivate Double boxWidth;\n\tprivate Double boxHeight;\n\tprivate Double boxTotalWeight;\n\t\n\tprivate Double classification;\n\tprivate Double profit;\n\tprivate Double qtSold;\n\n\t//sale attributes\n\tprivate Double  qtMax;\n\tprivate Double  saleQt=0d;\n\tprivate Date    startDate;\n\tprivate Date    endDate;\n\tprivate Double  regularPrice;\n\tprivate Double  regularPercentProfit;\n\tprivate Double  regularPercentDiscount;\n\tprivate Boolean active=true;\n\tprivate String  messageForClient="""";\n\tprivate String  saleNote="""";\n\tprivate Long  \tproductSaleId;\n\t\n\t\n\tprivate Double salePrice; \n\tprivate Double salePercentProfit;\n\tprivate Double salePercentDiscount;\n\t\n\t\n\t\n\tpublic ProductDTO(){}\n        public static class Builder {\n         \n\t\t\t// Required parameters\n            private final Long id;\n            private final BrandDTO brand;\n            private final CategoryDTO categoryId;\n            \n            // Optional parameters - initialized to default values\n            private Long mainFilterTypeId = new Long(0);\n            private String manufacturerProductId = """";\n            private String loyaltyProductId = """";\n            private CommonDTO nameEng = null;\n            private CommonDTO nameFr = null;\n            private ImageDTO image = null;\n            private CommonDTO descriptionEng = null;\n            private CommonDTO descriptionFr = null;\n            private CommonDTO specificationEng = null;\n            private CommonDTO specificationFr = null;\n        \tprivate CommonDTO otherEng = null;\n        \tprivate CommonDTO otherFr = null;\n            private String msrp = """";\n            private String cost = """";\n            private String width = ""0"";\n            private String high = ""0"";\n            private String large = ""0"";\n            private String weight = """";\n            private String actualWidth = ""0"";\n        \tprivate String actualHeight= ""0"";\n        \tprivate String actualLength = ""0"";\n        \tprivate String actualWeight = """";           \n            private List<ProductModelDTO> manufactureProductList = null;\n            private Date creationDate = null;\n            private String nameProduc;\n        \tprivate String descriptiProduct;\n        \tprivate String specificationProduct;\n        \tprivate String otherProduct;    \n        \tprivate String priceProduct;\n        \tprivate String localizedPriceProduct;\n        \tprivate ProductStatus status;\n        \tprivate String statusName;        \t\n        \tprivate String note;        \t\n        \tprivate List<ProductLinkDTO> linkList;\n        \tprivate Date discontinuedStartDate = null;\n        \tprivate String loyaltyProductIdSub;\n        \tprivate CommonDTO warrantyEng;\n        \tprivate CommonDTO warrantyFr;\n        \tprivate Long warrantyTranslationId;\n        \tprivate Double discount;\n        \tprivate Boolean wereWgtDimChanged;\n        \tprivate Boolean consideredForXML;\t\n        \tprivate String oldImageRealName;\n            public Builder(Long Id, BrandDTO brand, CategoryDTO categoryId) {\n        \tthis.id = Id;\n        \tthis.brand = brand;\n        \tthis.categoryId = categoryId;\n            }\n            \n            public Builder mainFilterTypeId(Long val) { \n                mainFilterTypeId = val; \n                return this; \n            }\n            public Builder manufacturerProductId(String val) { \n\t        \tmanufacturerProductId = val; \n\t        \treturn this; \n            }\n            public Builder loyaltyProductId(String val) { \n\t        \tloyaltyProductId = val; \n\t        \treturn this; \n            }\n            public Builder nameEng(CommonDTO val) { \n\t        \tnameEng = val; \n\t        \treturn this; \n            }\n            public Builder nameFr(CommonDTO val) { \n\t        \tnameFr = val; \n\t        \treturn this; \n            }\n            public Builder descriptionEng(CommonDTO val) { \n\t        \tdescriptionEng = val; \n\t        \treturn this; \n            }\n            public Builder descriptionFr(CommonDTO val) { \n\t        \tdescriptionFr = val; \n\t        \treturn this; \n            }\n            public Builder specificationEng(CommonDTO val) { \n\t        \tspecificationEng = val; \n\t        \treturn this; \n            }\n            public Builder specificationFr(CommonDTO val) { \n\t        \tspecificationFr = val; \n\t        \treturn this; \n            }\n            public Builder otherEng(CommonDTO val) {\n            \totherEng = val;\n            \treturn this;\n            }\n            public Builder otherFr(CommonDTO val) {\n            \totherFr = val;\n            \treturn this;\n            }\n            public Builder image(ImageDTO val) { \n\t        \timage = val; \n\t        \treturn this; \n            }\n            public Builder msrp(String val) { \n\t        \tmsrp = val; \n\t        \treturn this; \n            }\n            public Builder cost(String val) { \n\t        \tcost = val; \n\t        \treturn this; \n            }\n            public Builder weight(String val) { \n\t        \tweight = val; \n\t        \treturn this; \n            }\n            public Builder width(String val) { \n\t        \twidth = val; \n\t        \treturn this; \n            }\n            public Builder high(String val) { \n\t        \thigh = val; \n\t        \treturn this; \n            }\n            public Builder large(String val) { \n\t        \tlarge = val; \n\t        \treturn this; \n            }\n            public Builder actualWeight(String val) { \n            \tactualWeight = val; \n\t        \treturn this; \n            }\n            public Builder actualWidth(String val) { \n            \tactualWidth = val; \n\t        \treturn this; \n            }\n            public Builder actualHeight(String val) { \n            \tactualHeight = val; \n\t        \treturn this; \n            }\n            public Builder actualLength(String val) { \n            \tactualLength = val; \n\t        \treturn this; \n            }\n            public Builder manufactureProductList(List<ProductModelDTO> val) { \n\t        \tmanufactureProductList = val; \n\t        \treturn this; \n            }\n            public Builder nameProduc(String val) {\n            \tnameProduc = val;\n\t            return this;\n            }\n            public Builder descriptiProduct(String val) {\n            \tdescriptiProduct = val;\n\t            return this;\n            }\n            public Builder specificationProduct(String val) {\n            \tspecificationProduct = val;\n\t            return this;\n            }\n            public Builder otherProduct(String val) {\n            \totherProduct = val;\n\t            return this;\n            }\n            public Builder creationDate(Date val) {\n\t            creationDate = val;\n\t            return this;\n            }            \n            public Builder priceProduct(String val) {\n            \tpriceProduct = val;\n\t            return this;\n            }            \n            public Builder localizedPriceProduct(String val) {\n            \tlocalizedPriceProduct = val;\n\t            return this;\n            }            \n            public Builder status(ProductStatus val) { \n\t        \tstatus = val; \n\t        \treturn this; \n            }\n            public Builder statusName(String val) { \n\t        \tstatusName = val; \n\t        \treturn this; \n            }            \n            public Builder linkList(List<ProductLinkDTO> val) {\n            \tlinkList = val;\n            \treturn this;\n            }            \n            public Builder note(String val) {\n            \tnote = val;\n            \treturn this;\n            }\n            public Builder discontinuedStartDate(Date val) { \n            \tdiscontinuedStartDate = val; \n\t        \treturn this; \n            }\n            public Builder loyaltyProductIdSub(String val) { \n            \tloyaltyProductIdSub = val; \n\t        \treturn this; \n            }\n            public Builder warantyEng(CommonDTO val) {\n            \twarrantyEng = val;\n            \treturn this;\n            }            \n            public Builder warantyFr(CommonDTO val) {\n            \twarrantyFr = val;\n            \treturn this;\n            }            \n            public Builder warrantyTranslationId(Long val) {\n            \twarrantyTranslationId = val;\n            \treturn this;\n            }\n            public Builder discount(Double val) {\n            \tdiscount = val;\n            \treturn this;\n            }\n            public Builder wereWgtDimChanged(Boolean val) {\n            \twereWgtDimChanged = val;\n            \treturn this;\n            }\n            public Builder consideredForXML(Boolean val) {\n            \tconsideredForXML = val;\n            \treturn this;\n            }\n            public Builder oldImageIdBeforeUpdate(String val) {\n            \toldImageRealName = val;\n            \treturn this;\n            }\n            \n            public ProductDTO build() {\n            \treturn new ProductDTO(this);\n            }\n         }\n\t\n        private ProductDTO(Builder builder) {\n            setId(builder.id);\n            brand = builder.brand;\n            category = builder.categoryId;\n            mainFilterTypeId = builder.mainFilterTypeId;\n            manufacturerProductId = builder.manufacturerProductId;\n            loyaltyProductId = builder.loyaltyProductId;\n            nameEng = builder.nameEng;\n            nameFr = builder.nameFr;\n            image = builder.image;\n            descriptionEng = builder.descriptionEng;\n            descriptionFr = builder.descriptionFr;\n            specificationEng = builder.specificationEng;\n            specificationFr = builder.specificationFr;\n            otherEng = builder.otherEng;\n            otherFr = builder.otherFr;\n            msrp = builder.msrp;\n            cost = builder.cost;\n            width = builder.width;\n            high = builder.high;\n            large = builder.large;\n            weight = builder.weight;\n            actualWeight =builder.actualWeight;\n            actualLength=builder.actualLength;\n            actualHeight=builder.actualHeight;\n            actualWidth=builder.actualWidth;\n            manufactureProductList = builder.manufactureProductList;\n            creationDate = builder.creationDate;\n            nameProduc = builder.nameProduc;\n            descriptiProduct = builder.descriptiProduct;\n            specificationProduct = builder.specificationProduct;\n            otherProduct = builder.otherProduct;\n            priceProduct = builder.priceProduct;\n            localizedPriceProduct = builder.localizedPriceProduct;\n            status = builder.status;\n            statusName = builder.statusName;\n            linkList = builder.linkList;\n            note = builder.note;\n        \tdiscontinuedStartDate = builder.discontinuedStartDate;\n        \tloyaltyProductIdSub = builder.loyaltyProductIdSub; \n        \twarrantyEng = builder.warrantyEng;\n        \twarrantyFr = builder.warrantyFr;       \t\n        \twarrantyTranslationId = builder.warrantyTranslationId;\n        \tdiscount = builder.discount;\n        \twereWgtDimChanged = builder.wereWgtDimChanged;\n        \tconsideredForXML = builder.consideredForXML;\n        \toldImageRealName = builder.oldImageRealName;\n        }\n        \n        public static Comparator<ProductDTO> getComparator(int id){\n    \t\tComparator<ProductDTO> comparator = CREATION_DATE_DESC;\n    \t\tswitch (id) {\n    \t\tcase 1:\n    \t\t\tcomparator = ALPHABITICALLY_ENG_AZ;\n    \t\t\tbreak;\n    \t\tcase 2:\n    \t\t\tcomparator = ALPHABITICALLY_ENG_ZA;\n    \t\t\tbreak;\n    \t\tcase 3:\n    \t\t\tcomparator = ALPHABITICALLY_FR_AZ;\n    \t\t\tbreak;\n    \t\tcase 4:\n    \t\t\tcomparator = ALPHABITICALLY_FR_ZA;\n    \t\t\tbreak;\n    \t\tcase 5:\n    \t\t\tcomparator = CREATION_DATE_DESC;\n    \t\t\tbreak;\t\n    \t\tcase 6:\n    \t\t\tcomparator = CREATION_DATE_ASC;\n    \t\t\tbreak;\n    \t\tcase 7:\n    \t\t\tcomparator = MSRP_DESC;\n    \t\t\tbreak;\n    \t\tcase 8:\n    \t\t\tcomparator = MSRP_ASC;\n    \t\t\tbreak;\n    \t\tcase 9:\n    \t\t\tcomparator = COST_DESC;\n    \t\t\tbreak;\n    \t\tcase 10:\n    \t\t\tcomparator = COST_ASC;\n    \t\t\tbreak;\n    \t\tcase 11:\n    \t\t\tcomparator = ALPHABITICALLY_BRAND_AZ;\n    \t\t\tbreak;\n    \t\tcase 12:\n    \t\t\tcomparator = DISCOUNT_DESC;\n    \t\t\tbreak;    \n    \t\tdefault:\n    \t\t\tbreak;\n    \t\t}    \t\t\n    \t\treturn comparator;\n    \t}\n        \n    \t/**\n    \t * The following are the comparators we use to sort game search results.\n    \t */\n    \tpublic static final Comparator<ProductDTO> ALPHABITICALLY_ENG_AZ = new Comparator<ProductDTO>() {\n\n    \t\t@Override\n    \t\tpublic int compare(ProductDTO o1, ProductDTO o2) {\t\t\t\n    \t\t\treturn o1.getNameEng().compareTo(o2.getNameEng());\n    \t\t}\n    \t\t\n    \t};\n    \t\n    \t/**\n    \t * The following are the comparators we use to sort game search results.\n    \t */\n    \tpublic static final Comparator<ProductDTO> ALPHABITICALLY_ENG_ZA = new Comparator<ProductDTO>() {\n\n    \t\t@Override\n    \t\tpublic int compare(ProductDTO o1, ProductDTO o2) {\t\t\t\n    \t\t\treturn o2.getNameEng().compareTo(o1.getNameEng());\n    \t\t}\n    \t\t\n    \t};\n    \t\n    \t/**\n    \t * The following are the comparators we use to sort game search results.\n    \t */\n    \tpublic static final Comparator<ProductDTO> ALPHABITICALLY_FR_AZ = new Comparator<ProductDTO>() {\n\n    \t\t@Override\n    \t\tpublic int compare(ProductDTO o1, ProductDTO o2) {\t\t\t\n    \t\t\treturn o1.getNameFr().compareTo(o2.getNameFr());\n    \t\t}\n    \t\t\n    \t};\n    \t\n    \t/**\n    \t * The following are the comparators we use to sort game search results.\n    \t */\n    \tpublic static final Comparator<ProductDTO> ALPHABITICALLY_FR_ZA = new Comparator<ProductDTO>() {\n\n    \t\t@Override\n    \t\tpublic int compare(ProductDTO o1, ProductDTO o2) {\t\t\t\n    \t\t\treturn o2.getNameFr().compareTo(o1.getNameFr());\n    \t\t}\n    \t};\n    \t\n    \t/**\n    \t * The following are the comparators we use to sort game search results.\n    \t */\n    \tpublic static final Comparator<ProductDTO> CREATION_DATE_DESC = new Comparator<ProductDTO>() {\n\n    \t\t@Override\n    \t\tpublic int compare(ProductDTO o1, ProductDTO o2) {\t\t\t\n    \t\t\treturn o2.getCreationDate().compareTo(o1.getCreationDate());\n    \t\t}\n    \t};\n    \t\n    \t/**\n    \t * The following are the comparators we use to sort game search results.\n    \t */\n    \tpublic static final Comparator<ProductDTO> CREATION_DATE_ASC = new Comparator<ProductDTO>() {\n\n    \t\t@Override\n    \t\tpublic int compare(ProductDTO o1, ProductDTO o2) {\t\t\t\n    \t\t\treturn o1.getCreationDate().compareTo(o2.getCreationDate());\n    \t\t}\n    \t\t\n    \t};\n    \t\n    \t/**\n    \t * The following are the comparators we use to sort game search results.\n    \t */\n    \tpublic static final Comparator<ProductDTO> MSRP_DESC = new Comparator<ProductDTO>() {\n\n    \t\t@Override\n    \t\tpublic int compare(ProductDTO o1, ProductDTO o2) {\t\t\t    \t\t\t\n    \t\t\tDouble msrp1 = Double.parseDouble(o1.getMsrp());\n    \t\t\tDouble msrp2 = Double.parseDouble(o2.getMsrp());    \t\t\t\n    \t\t\treturn msrp2.compareTo(msrp1);\n    \t\t}\n    \t\t\n    \t};\n    \t\n    \t/**\n    \t * The following are the comparators we use to sort game search results.\n    \t */\n    \tpublic static final Comparator<ProductDTO> MSRP_ASC = new Comparator<ProductDTO>() {\n\n    \t\t@Override\n    \t\tpublic int compare(ProductDTO o1, ProductDTO o2) {\t\t\t    \t\t\t\n    \t\t\tDouble msrp1 = Double.parseDouble(o1.getMsrp());\n    \t\t\tDouble msrp2 = Double.parseDouble(o2.getMsrp());    \t\t\t\n    \t\t\treturn msrp1.compareTo(msrp2);\n    \t\t}\n    \t\t\n    \t};\n\n    \t/**\n    \t * The following are the comparators we use to sort products by price, highest first\n    \t */\n    \tpublic static final Comparator<ProductDTO> COST_DESC = new Comparator<ProductDTO>() {\n    \t\t@Override\n    \t\tpublic int compare(ProductDTO o1, ProductDTO o2) {\t\t\t    \t\t\t\n\t\t\t\tString o1Price = o1.getPriceProduct();\n\t\t\t\tString o2Price = o2.getPriceProduct();\n\t\t\t\tint outcome = 0;\n\t\t\t\tif (o1Price != null && !o1Price.matches(""^\\\\s*$"")) {\n\t\t\t\t\tDouble cost1 = Double.parseDouble(o1Price);\n\t\t\t\t\tif (o2Price != null && !o2Price.matches(""^\\\\s*$"")) {\n\t\t\t\t\t\tDouble cost2 = Double.parseDouble(o2Price);\n\t\t\t\t\t\tint costCompare = cost2.compareTo(cost1);\n\t\t\t\t\t\tif (costCompare == 0) {\n\t\t\t\t\t\t\toutcome = ALPHABITICALLY_BRAND_AZ.compare(o1, o2);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\toutcome = costCompare;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\toutcome = -1;\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\toutcome = 1;\n\t\t\t\t}\n\t\t\t\treturn outcome;\n    \t\t}\n    \t};\n    \t\n    \t/**\n    \t * The following are the comparators we use to sort products by price, lowest first\n    \t */\n    \tpublic static final Comparator<ProductDTO> COST_ASC = new Comparator<ProductDTO>() {\n    \t\t@Override\n    \t\tpublic int compare(ProductDTO o1, ProductDTO o2) {\t\t\t    \t\t\t\n    \t\t\tString o1Price = o1.getPriceProduct();\n\t\t\t\tString o2Price = o2.getPriceProduct();\n\t\t\t\tint outcome = 0;\n\t\t\t\tif (o1Price != null && !o1Price.matches(""^\\\\s*$"")) {\n\t\t\t\t\tDouble cost1 = Double.parseDouble(o1Price);\n\t\t\t\t\tif (o2Price != null && !o2Price.matches(""^\\\\s*$"")) {\n\t\t\t\t\t\tDouble cost2 = Double.parseDouble(o2Price);\n\t\t\t\t\t\tint costCompare = cost1.compareTo(cost2);\n\t\t\t\t\t\tif (costCompare == 0) {\n\t\t\t\t\t\t\toutcome = ALPHABITICALLY_BRAND_AZ.compare(o1, o2);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\toutcome = costCompare;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\toutcome = -1;\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\toutcome = 1;\n\t\t\t\t}\n\t\t\t\treturn outcome;\n    \t\t}\n    \t};    \t\n    \t\n    \t/*\n    \t * The following is the comparator we use to sort products by brand, alphabetically, with numbers first then letters.\n\t\t * Leading numbers are compared naturally.\n    \t */\n    \tpublic static final Comparator<ProductDTO> ALPHABITICALLY_BRAND_AZ = new Comparator<ProductDTO>() {\n       \t\t@Override\n    \t\tpublic int compare(ProductDTO o1, ProductDTO o2) {\t\t\t\n    \t\t\tString o1BrandName = o1.getBrand().getName();\n    \t\t\tString o2BrandName = o2.getBrand().getName();\n    \t\t\tint brandCompare = o1BrandName.compareTo(o2BrandName);\n    \t\t\tif(brandCompare == 0) {\n    \t\t\t\tString o1ProdName = o1.getNameProduc().toLowerCase();\n    \t\t\t\tString o2ProdName = o2.getNameProduc().toLowerCase();\n    \t\t\t\tif (Character.isDigit(o1ProdName.charAt(0)) && Character.isDigit(o2ProdName.charAt(0))) {\n    \t\t\t\t\tInteger o1Number = Integer.parseInt(o1ProdName.split(""\\\\D+"")[0]);\n    \t\t\t\t\tInteger o2Number = Integer.parseInt(o2ProdName.split(""\\\\D+"")[0]);\n    \t\t\t\t\tif (o1Number != o2Number) {\n    \t\t\t\t\t\treturn o1Number.compareTo(o2Number);\n    \t\t\t\t\t}\n    \t\t\t\t}\n    \t\t\t\treturn (o1ProdName.compareTo(o2ProdName));\n    \t\t\t}\n    \t\t\treturn brandCompare;\n    \t\t}\n    \t};\n    \t\n    \t/**\n    \t * The following are the comparators we use to sort game search results.\n    \t */\n    \tpublic static final Comparator<ProductDTO> DISCOUNT_DESC = new Comparator<ProductDTO>() {    \t\t\n    \t\t@Override\n    \t\tpublic int compare(ProductDTO o1, ProductDTO o2) {\n    \t\t\tDouble discount1 = o1.getDiscount();\n    \t\t\tDouble discount2 = o2.getDiscount();\n    \t\t\tint compareToDiscountPct = discount2.compareTo(discount1);\n    \t\t\tint outcome = compareToDiscountPct;\n    \t\t\tif (compareToDiscountPct == 0) {\n    \t\t\t\tString price1 = o1.getPriceProduct();\n    \t\t\t\tString price2 = o2.getPriceProduct();\n    \t\t\t\tString msrp1 = o1.getMsrp();\n    \t\t\t\tString msrp2 = o2.getMsrp();\n    \t\t\t\tDouble discount$1 = getDiscount$(price1, msrp1);\n    \t\t\t\tDouble discount$2 = getDiscount$(price2, msrp2);\n    \t\t\t\tint compareToDiscount$ = discount$2.compareTo(discount$1);\n    \t\t\t\toutcome = compareToDiscount$;\n    \t\t\t\tif (compareToDiscount$ == 0) {\n    \t\t\t\t\tString name1 = o1.getNameProduc();\n    \t\t\t\t\tString name2 = o2.getNameProduc();\t\t\t\t\t\n    \t\t\t\t\tint compareToName = name1.compareTo(name2);\n    \t\t\t\t\toutcome = compareToName;\n    \t\t\t\t\tif (compareToName == 0) {\n    \t\t\t\t\t\tLong id1 = o1.getId();\n    \t\t\t\t\t\tLong id2 = o2.getId();\n    \t\t\t\t\t\toutcome = id1.compareTo(id2);\n    \t\t\t\t\t}\n    \t\t\t\t}\n    \t\t\t}\n    \t\t\treturn outcome;\n    \t\t}\n    \t\t\n    \t\tprivate Double getDiscount$(String price, String msrp) {\n\t\t\t\tdouble priceVal = 0d;\n\t\t\t\tdouble msrpVal = 0d;\n\t\t\t\tdouble discountVal = 0d;\n\t\t\t\tif (price != null) {\n\t\t\t\t\tif (!price.matches(""^\\\\s*$"") && !price.equalsIgnoreCase("""")) {\n\t\t\t\t\t\tpriceVal = Double.parseDouble(price);\t\t\n\t\t\t\t\t} else {\n\t\t\t\t\t\tpriceVal = 0d;\n\t\t\t\t\t}\n\t\t\t\t}\t\t\t\t\n\t\t\t\tif (msrp != null) {\t\t\t\t\t\n\t\t\t\t\tif (!msrp.matches(""^\\\\s*$"") && !msrp.equalsIgnoreCase("""")) {\t\n\t\t\t\t\t\tmsrpVal = Double.parseDouble(msrp);\t\n\t\t\t\t\t\tdiscountVal = msrpVal - priceVal;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn discountVal;\n    \t\t}\n    \t};\n}\n----------------------------------- SOURCE END -------------------------------------",1426027289489
error,log,,,"Problems occurred when invoking code from plug-in: ""org.eclipse.jdt.ui"".",1426027289490
error,log,,,"Error in JDT Core during reconcile",1426027289491
error,log,,,"Exception occurred during problem detection:\n----------------------------------- SOURCE BEGIN -------------------------------------\npackage com.loyauty.service.product;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.Iterator;\nimport java.util.List;\n\nimport jxl.Cell;\nimport jxl.Sheet;\nimport jxl.Workbook;\nimport jxl.format.Alignment;\nimport jxl.format.Border;\nimport jxl.format.BorderLineStyle;\nimport jxl.format.Colour;\nimport jxl.format.VerticalAlignment;\nimport jxl.write.Label;\nimport jxl.write.WritableCell;\nimport jxl.write.WritableCellFormat;\nimport jxl.write.WritableFont;\nimport jxl.write.WritableSheet;\nimport jxl.write.WritableWorkbook;\n\nimport lombok.Getter;\nimport lombok.Setter;\n\nimport org.apache.log4j.Logger;\n\nimport com.loyauty.dao.core.DaoCommand;\nimport com.loyauty.dao.core.DaoManager;\nimport com.loyauty.dao.core.DaoManagerFactory;\nimport com.loyauty.enums.Language;\nimport com.loyauty.enums.PriceType;\nimport com.loyauty.enums.ProductStatus;\nimport com.loyauty.enums.Type;\nimport com.loyauty.exception.DaoException;\nimport com.loyauty.exception.ServiceException;\nimport com.loyauty.model.AlterProductXML;\nimport com.loyauty.model.AlterUserProductXML;\nimport com.loyauty.model.Box;\nimport com.loyauty.model.Brand;\nimport com.loyauty.model.Category;\nimport com.loyauty.model.City;\nimport com.loyauty.model.Currency;\nimport com.loyauty.model.Image;\nimport com.loyauty.model.LoyaltyEnum;\nimport com.loyauty.model.Orders;\nimport com.loyauty.model.Product;\nimport com.loyauty.model.Province;\nimport com.loyauty.model.Query;\nimport com.loyauty.model.ProductLink;\nimport com.loyauty.model.ProductModelNumber;\nimport com.loyauty.model.Select;\nimport com.loyauty.model.ShippingCity;\nimport com.loyauty.model.ShippingProvince;\nimport com.loyauty.model.ShippingTotal;\nimport com.loyauty.model.Specification;\nimport com.loyauty.model.Translation;\nimport com.loyauty.model.TranslationEntry;\nimport com.loyauty.model.User;\nimport com.loyauty.model.UserBrandDiscount;\nimport com.loyauty.model.UserCategoryDiscount;\nimport com.loyauty.model.UserProductPrice;\nimport com.loyauty.model.UserProvincePopulation;\nimport com.loyauty.service.ServiceImpl;\nimport com.loyauty.service.core.DTOFactory;\nimport com.loyauty.service.core.dto.AlterProductXMLDTO;\nimport com.loyauty.service.core.dto.AlterUserProductXMLDTO;\nimport com.loyauty.service.core.dto.BoxDTO;\nimport com.loyauty.service.core.dto.CityDTO;\nimport com.loyauty.service.core.dto.CommonDTO;\nimport com.loyauty.service.core.dto.CommonUserDiscountDTO;\nimport com.loyauty.service.core.dto.CurrencyDTO;\nimport com.loyauty.service.core.dto.ImageDTO;\nimport com.loyauty.service.core.dto.OrdersDTO;\nimport com.loyauty.service.core.dto.ProductDTO;\nimport com.loyauty.service.core.dto.ProvinceDTO;\nimport com.loyauty.service.core.dto.QueryDTO;\nimport com.loyauty.service.core.dto.ProductModelDTO;\nimport com.loyauty.service.core.dto.SearchRequestDTO;\nimport com.loyauty.service.core.dto.SearchRequestDTO.SearchType;\nimport com.loyauty.service.core.dto.ShippingCityDTO;\nimport com.loyauty.service.core.dto.ShippingProvinceDTO;\nimport com.loyauty.service.core.dto.ShippingTotalDTO;\nimport com.loyauty.service.core.dto.SpecificationDTO;\nimport com.loyauty.service.core.dto.UserDTO;\nimport com.loyauty.service.core.dto.UserProductDTO;\nimport com.loyauty.service.core.dto.UserProductPriceDTO;\nimport com.loyauty.service.core.dto.UserProvincePopulationDTO;\nimport com.loyauty.service.image.ImageService;\nimport com.loyauty.service.image.ImageServiceImpl;\nimport com.loyauty.util.CommonUtils;\n\npublic class ProductServiceImpl extends ServiceImpl implements ProductService {\n\t\n\tprivate static final Logger log = Logger.getLogger(ProductServiceImpl.class);\n\t\n\t@Setter @Getter\n\n\tprotected DaoManager daoManager;\n\t\n\tpublic ProductServiceImpl() {\n\t\tsetDaoManager(DaoManagerFactory.getDaoManager());\n\t}\n\t \n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<SpecificationDTO> getMainSpecificationByCategory(final long categoryId)\n\t\t\tthrows ServiceException {\n\t\tList<Specification> list = null;\n\t\ttry {\n\t\t\tlist = (List<Specification>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\n\t\t\t\t\treturn daoManager.getSpecificationDao().getMainSpecificationByCategory(categoryId);\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException e) {\n\t\t\tthrow (new ServiceException(e));\n\t\t}\n\t\treturn DTOFactory.getSpecificationListDTO(list);\n\t}\n\t\n \t@Override\n\tpublic Long createProduct(final ProductDTO productDTO) throws ServiceException {\n\t\tProduct productResult = new Product();\n\t\t\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tproductResult = (Product) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t/* (non-Javadoc)\n\t\t\t\t * @see com.loyauty.dao.core.DaoCommand#execute(com.loyauty.dao.core.DaoManager)\n\t\t\t\t */\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\n\t\t\t\tthrows DaoException {\n\t\t\t\t\t\n\t\t\t\t\tProduct product = new Product();\n\t\t\t\t\t\n\t\t\t\t\t//Name\n\t\t\t\t\tTranslation translationName = new Translation();\n\t\t\t\t\tdaoManager.getTranslationDao().insertTranslation(translationName);\t\n\t\t\t\t\t//Eng Name\n\t\t\t\t\tTranslationEntry entryNameEng = new TranslationEntry(translationName.getId(), productDTO.getNameEng().getName() );\n\t\t\t\t\tentryNameEng.setLanguage(Language.ENGLISH);\n\t\t\t\t\tdaoManager.getTranslationDao().insertEntry(entryNameEng);\n\t\t\t\t\t//Fr Name\n\t\t\t\t\tTranslationEntry entryNameFr = new TranslationEntry(translationName.getId(), productDTO.getNameFr().getName());\n\t\t\t\t\tentryNameFr.setLanguage(Language.FRENCH);\n\t\t\t\t\tdaoManager.getTranslationDao().insertEntry(entryNameFr);\n\t\t\t\t\t\n\t\t\t\t\t//Description\n\t\t\t\t\tTranslation translationDescription = new Translation();\n\t\t\t\t\tdaoManager.getTranslationDao().insertTranslation(translationDescription);\n\t\t\t\t\t//Eng Description\n\t\t\t\t\tTranslationEntry entryDescriptionEng = new TranslationEntry(translationDescription.getId(), productDTO.getDescriptionEng().getName());\n\t\t\t\t\tentryDescriptionEng.setLanguage(Language.ENGLISH);\n\t\t\t\t\tdaoManager.getTranslationDao().insertEntry(entryDescriptionEng);\n\t\t\t\t\t//Fr Description\n\t\t\t\t\tTranslationEntry entryDescriptionFr = new TranslationEntry(translationDescription.getId(), productDTO.getDescriptionFr().getName());\n\t\t\t\t\tentryDescriptionFr.setLanguage(Language.FRENCH);\n\t\t\t\t\tdaoManager.getTranslationDao().insertEntry(entryDescriptionFr);\n\t\t\t\t\t\n\t\t\t\t\t//Specification\n\t\t\t\t\tTranslation translationSpecification = new Translation();\t\t\t\n\t\t\t\t\tdaoManager.getTranslationDao().insertTranslation(translationSpecification);\t\n\t\t\t\t\t//Eng Name\n\t\t\t\t\tTranslationEntry entrySpecificationEng = new TranslationEntry(translationSpecification.getId(), productDTO.getSpecificationEng().getName() );\n\t\t\t\t\tentrySpecificationEng.setLanguage(Language.ENGLISH);\n\t\t\t\t\tdaoManager.getTranslationDao().insertEntry(entrySpecificationEng);\n\t\t\t\t\t//Fr Name\n\t\t\t\t\tTranslationEntry entrySpecificationFr = new TranslationEntry(translationSpecification.getId(), productDTO.getSpecificationFr().getName());\n\t\t\t\t\tentrySpecificationFr.setLanguage(Language.FRENCH);\n\t\t\t\t\tdaoManager.getTranslationDao().insertEntry(entrySpecificationFr);\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t// Others\n\t\t\t\t\tTranslation translationOther = new Translation();\t\t\t\t\t\n\t\t\t\t\tdaoManager.getTranslationDao().insertTranslation(translationOther);\n\t\t\t\t\t// Eng Others\n\t\t\t\t\tTranslationEntry entryOtherEng = new TranslationEntry(translationOther.getId(), productDTO.getOtherEng().getName());\n\t\t\t\t\tentryOtherEng.setLanguage(Language.ENGLISH);\n\t\t\t\t\tdaoManager.getTranslationDao().insertEntry(entryOtherEng);\n\t\t\t\t\t// Fr Name\n\t\t\t\t\tTranslationEntry entryOtherFr = new TranslationEntry(translationOther.getId(), productDTO.getOtherFr().getName());\n\t\t\t\t\tentryOtherFr.setLanguage(Language.FRENCH);\n\t\t\t\t\tdaoManager.getTranslationDao().insertEntry(entryOtherFr);\n\t\t\t\t\t\n\t\t\t\t\t// Warranty\n\t\t\t\t\tTranslation translationWarranty = new Translation();\n\t\t\t\t\tdaoManager.getTranslationDao().insertTranslation(translationWarranty);\n\t\t\t\t\t// Eng Others\n\t\t\t\t\tTranslationEntry entryWarrantyEng = new TranslationEntry(translationWarranty.getId(), productDTO.getWarrantyEng().getName());\n\t\t\t\t\tentryWarrantyEng.setLanguage(Language.ENGLISH);\n\t\t\t\t\tdaoManager.getTranslationDao().insertEntry(entryWarrantyEng);\n\t\t\t\t\t// Fr Name\n\t\t\t\t\tTranslationEntry entryWarrantyFr = new TranslationEntry(translationWarranty.getId(), productDTO.getWarrantyFr().getName());\n\t\t\t\t\tentryWarrantyFr.setLanguage(Language.FRENCH);\n\t\t\t\t\tdaoManager.getTranslationDao().insertEntry(entryWarrantyFr);\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t//Insert Image product\n\t\t\t\t\tImage imageProduct = new Image();\n\t\t\t\t\tif(productDTO.getImage() != null) {\n\t\t\t\t\t\timageProduct.setName(productDTO.getImage().getName());\n\t\t\t\t\t\timageProduct.setRealNameImg(productDTO.getImage().getRealName());\n\t\t\t\t\t\timageProduct.setType(Type.PRODUCT);\n\t\t\t\t\t\timageProduct.setSize(productDTO.getImage().getSize());\n\t\t\t\t\t\timageProduct.setHeight(productDTO.getImage().getHeight());\n\t\t\t\t\t\timageProduct.setWidth(productDTO.getImage().getWidth());\n\t\t\t\t\t\timageProduct.setLarge(productDTO.getImage().isLarge());\n\t\t\t\t\t\timageProduct.setResolution(productDTO.getImage().getResolution());\n\t\t\t\t\t\timageProduct.setScore(productDTO.getImage().getScore());\n\t\t\t\t\t\tdaoManager.getImageDao().insertEntity(imageProduct);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t//Brand \n\t\t\t\t\tBrand brand = new Brand();\n\t\t\t\t\tbrand.setId(productDTO.getBrand().getId());\n\t\t\t\t\t//Category\n\t\t\t\t\tCategory category = new Category();\n\t\t\t\t\tcategory.setId(productDTO.getCategory().getId());\n\t\t\t\t\t\n\t\t\t\t\tproduct.setName(translationName);\n\t\t\t\t\tproduct.setDescription(translationDescription);\n\t\t\t\t\tproduct.setImage(imageProduct);\n\t\t\t\t\tproduct.setStatus(ProductStatus.AVAILABLE);\n\t\t\t\t\tproduct.setMsrp(productDTO.getMsrp());\n\t\t\t\t\tproduct.setCost(productDTO.getCost());\n\t\t\t\t\tproduct.setBrand(brand);\n\t\t\t\t\tproduct.setLoyaltySourceProductId(productDTO.getLoyaltyProductId());\n\t\t\t\t\tproduct.setProductHigh(productDTO.getHigh());\n\t\t\t\t\tproduct.setProductLong(productDTO.getLarge());\n\t\t\t\t\tproduct.setProductWidth(productDTO.getWidth());\n\t\t\t\t\tproduct.setWeight(productDTO.getWeight());\n\t\t\t\t\tproduct.setActualHeight(productDTO.getActualHeight());\n\t\t\t\t\tproduct.setActualLength(productDTO.getActualLength());\n\t\t\t\t\tproduct.setActualWidth(productDTO.getActualWidth());\n\t\t\t\t\tproduct.setActualWeight(productDTO.getActualWeight());\n\t\t\t\t\tproduct.setCategory(category);\n\t\t\t\t\tproduct.setSpecification(translationSpecification);\n\t\t\t\t\tproduct.setOther(translationOther);\n\t\t\t\t\tproduct.setNote(productDTO.getNote());\n\t\t\t\t\tproduct.setWereWgtDimChanged(productDTO.getWereWgtDimChanged());\n\t\t\t\t\tproduct.setConsideredForXML(productDTO.getConsideredForXML());\n\t\t\t\t\tproduct.setWarranty(translationWarranty);\n\t\t\t\t\tproduct.setUpc(productDTO.getUpc());\n\t\t\t\t\t//51 is N/A. To allow don't pick any option in edit product page in Admin\n\t\t\t\t\t//I do this trick\n\t\t\t\t\tif(productDTO.getMainFilterTypeId() != -1) {\n\t\t\t\t\t\tproduct.setTypeId(productDTO.getMainFilterTypeId());\n\t\t\t\t\t} else {\n\t\t\t\t\t\tproduct.setTypeId(new Long(51));\n\t\t\t\t\t}\n\t\t\t\t\tdaoManager.getProductDao().insertProduct(product);\n\t\t\t\t\t\n\t\t\t\t\t//Manufacture Product Id\n\t\t\t\t\tIterator<ProductModelDTO> stringIterator = productDTO.getManufactureProductList().iterator();\n\t\t\t\t\tProductModelNumber productModelNumber;\n\t\t\t\t\tProductModelDTO productModelDTO;\n\t\t\t\t\twhile(stringIterator.hasNext()) {\n\t\t\t\t\t\tproductModelNumber = new ProductModelNumber();\n\t\t\t\t\t\tproductModelDTO = (ProductModelDTO)stringIterator.next();\n\t\t\t\t\t\tproductModelNumber.setModelNumber(productModelDTO.getName());\n\t\t\t\t\t\tproductModelNumber.setQuantity(productModelDTO.getQuantity());\n\t\t\t\t\t\tproductModelNumber.setProductId(product.getId());\n\t\t\t\t\t\tproductModelNumber.setSupplier(productModelDTO.getSupplier());\n\t\t\t\t\t\tproductModelNumber.setPrice(productModelDTO.getPrice());\n\t\t\t\t\t\tproductModelNumber.setMsrp(productModelDTO.getMsrp());\n\t\t\t\t\t\tdaoManager.getProductDao().insertProductModelNumber(productModelNumber);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t//insert url link\n\t\t\t\t\tif(productDTO.getLinkList().size() > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tProductLink productLink = new ProductLink();\n\t\t\t\t\t\tproductLink.setProductId(product.getId());\n\t\t\t\t\t\tproductLink.setLink(productDTO.getLinkList().get(0).getLink());\n\t\t\t\t\t\tdaoManager.getProductDao().insertProductLink(productLink);\n\t\t\t\t\t}\n\t\t\t\t\treturn product;\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn(productResult.getId());\n\t\t} catch (DaoException e) {\n\t\t\tthrow (new ServiceException(e));\n\t\t}\n\t}\n\t\n\t@Override\n\tpublic ProductDTO getProductInformation(final Long productId, final Long userId) throws ServiceException {\n\n\t\tProduct productResult = new Product();\n\t\t\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tproductResult = (Product) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\n\t\t\t\t\t\tthrows DaoException {\n\t\t\t\t\tProduct product = new Product();\n\t\t\t\t\tSelect select = new Select();\n\t\t\t\t\tselect.setQuery(String.valueOf(productId));\n\t\t\t\t\tselect.setUserId(userId);\n\t\t\t\t\tproduct = daoManager.getProductDao().getProduct(select);\n\t\t\t\t\treturn product;\n\t\t\t\t}\n\t\t\t});\t\t\t\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn(DTOFactory.getProductDTO(productResult));\n\t}\n\t\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<UserProductDTO> getAllProdcutForProfit(final UserProductDTO userProducDTO) throws ServiceException{\n\n\t\tList <Product> productList = new ArrayList<Product>();\n\t\t\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tproductList = (List <Product>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\n\t\t\t\t\t\t\t\tthrows DaoException {\n\t\t\t\t\t\t\t//Brand\n\t\t\t\t\t\t\tBrand brand = null;\n\t\t\t\t\t\t\tif(userProducDTO.getBrandId() != null){\n\t\t\t\t\t\t\t\tbrand = new Brand();\n\t\t\t\t\t\t\t\tbrand.setId(userProducDTO.getBrandId());\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t//Category\n\t\t\t\t\t\t\tCategory category = null;\n\t\t\t\t\t\t\tif(userProducDTO.getCategoryId() != null){\n\t\t\t\t\t\t\t\tcategory = new Category();\n\t\t\t\t\t\t\t\tcategory.setId(userProducDTO.getCategoryId());\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tProduct product = new Product();\n\t\t\t\t\t\t\tproduct.setBrand(brand);\n\t\t\t\t\t\t\tproduct.setCategory(category);\t\n\t\t\t\t\t\t\tproduct.setUserProductStatus(userProducDTO.getUserProductStatus());\n\t\t\t\t\t\t\tproduct.setUserId(userProducDTO.getUserId());\n\t\t\t\t\t\t\tproduct.setLoyaltySourceProductId(userProducDTO.getLsProductId());\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\treturn daoManager.getProductDao().getAllProdcutForProfit(product);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\t\n\t\treturn(DTOFactory.getUserProductDTOList(productList));\n\t}\t\n\t\n\t@Override\n\tpublic ImageDTO addProductImage(File file, String fileName, String applicationPath, long uploaderId,\n\t\t\t int width, int height, int miniCoverWidth, boolean large) throws ServiceException, IOException {\n\t\n\t\tImageService ish = new ImageServiceImpl();\n\t\tLong tempId = new Long(0);\n\t\tImage image = new Image();\n\t\timage.setId(tempId);\n\t\timage.setUploaderId(uploaderId);\n\t\t\n\t\t// Validate if the name is already present in the DB\n\t\tString normalizedName= CommonUtils.getNormalizedProductImage(fileName);\n\t\t//TODO: we must create a validation in action //Validate if the image extension is JPEG or PNG\n\t\tint i = ish.isJPEGPNGImage(file);\n\t\tif (i==1) {\n\t\t\timage.addImageJps(file,normalizedName,fileName);\n\t\t}else if (i==2) {\n\t\t\timage.addImagePNG(file,normalizedName,fileName);\n\t\t}else{\n\t\t\tthrow new ServiceException(""Game Logo Image Format not supported "" + file.getName() );\n\t\t}\n\t\timage.setName(normalizedName);\n\t\timage.setRealNameImg(fileName);\n\t\t//Variables Initialization \n\t\timage.setType(Type.PRODUCT);\n\t\timage.setLarge(large);\n\t\t\n\t\t// Transfer the cover to the server cover/large/ directory\t\t\t\n\t\tif (!ish.transferProductImage(file, normalizedName, applicationPath, width, height, miniCoverWidth, large)){\n\t\t\tthrow new ServiceException(""Could not transfer the image"" + \n\t\t\t\t\t""\\nimageName:"" + file.getName() \n\t\t\t\t\t+ ""\\nNormalized image:"" + normalizedName);\n\t\t}\n\t\t\n\t\treturn DTOFactory.getImageDTO(image); \n\t}\t\t\n\t\n\t@Override\n\tpublic void updateProduct(final ProductDTO productDTO) throws ServiceException {\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t    daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\n\t\t\t\tthrows DaoException {\n\t\t\t\t\tProduct product = new Product();\n\t\t\t\t\tproduct.setUpc(productDTO.getUpc());\n\t\t\t\t\t//Eng Name\n\t\t\t\t\tdaoManager.getTranslationDao().updateEntry(new TranslationEntry(productDTO.getNameEng()));\n\t\t\t\t\t//Fr Name\n\t\t\t\t\tdaoManager.getTranslationDao().updateEntry(new TranslationEntry(productDTO.getNameFr()));\n\t\t\t\t\t\n\t\t\t\t\t//Eng Description\n\t\t\t\t\tdaoManager.getTranslationDao().updateEntry(new TranslationEntry(productDTO.getDescriptionEng()));\n\t\t\t\t\t//Fr Description\n\t\t\t\t\tdaoManager.getTranslationDao().updateEntry(new TranslationEntry(productDTO.getDescriptionFr()));\n\t\t\t\t\t\n\t\t\t\t\t//Eng Specification\n\t\t\t\t\tdaoManager.getTranslationDao().updateEntry(new TranslationEntry(productDTO.getSpecificationEng()));\n\t\t\t\t\t//Fr Specification\n\t\t\t\t\tdaoManager.getTranslationDao().updateEntry(new TranslationEntry(productDTO.getSpecificationFr()));\n\t\t\t\t\t\n\t\t\t\t\t//Eng Others\n\t\t\t\t\tif(productDTO.getOtherEng().getName() != null)\n\t\t\t\t\t\tdaoManager.getTranslationDao().updateEntry(new TranslationEntry(productDTO.getOtherEng()));\n\t\t\t\t\t//Fr Others\n\t\t\t\t\tif(productDTO.getOtherFr().getName() != null)\n\t\t\t\t\t\tdaoManager.getTranslationDao().updateEntry(new TranslationEntry(productDTO.getOtherFr()));\n\t\t\t\t\t\n\t\t\t\t\t//If the productDTO.getWarrantyEng is null that means that bothe warranty are null\n\t\t\t\t\t//So I have to insert the warranty instead of update them.\n\t\t\t\t\t// Warranty\n\t\t\t\t\tTranslation translationWarranty = new Translation();\n\t\t\t\t\tif(productDTO.getWarrantyEng().getId() != 0){\n\t\t\t\t\t\t//Eng Warranty\n\t\t\t\t\t\tdaoManager.getTranslationDao().updateEntry(new TranslationEntry(productDTO.getWarrantyEng()));\n\t\t\t\t\t\t//Fr Warranty\n\t\t\t\t\t\tdaoManager.getTranslationDao().updateEntry(new TranslationEntry(productDTO.getWarrantyFr()));\n\t\t\t\t\t\t\n\t\t\t\t\t\ttranslationWarranty.setId(productDTO.getWarrantyTranslationId());\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(productDTO.getWarrantyEng() != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tdaoManager.getTranslationDao().insertTranslation(translationWarranty);\n\t\t\t\t\t\t\t// Eng Others\n\t\t\t\t\t\t\tTranslationEntry entryWarrantyEng = new TranslationEntry(translationWarranty.getId(), productDTO.getWarrantyEng().getName());\n\t\t\t\t\t\t\tentryWarrantyEng.setLanguage(Language.ENGLISH);\n\t\t\t\t\t\t\tdaoManager.getTranslationDao().insertEntry(entryWarrantyEng);\n\t\t\t\t\t\t\t// Fr Name\n\t\t\t\t\t\t\tTranslationEntry entryWarrantyFr = new TranslationEntry(translationWarranty.getId(), productDTO.getWarrantyFr().getName());\n\t\t\t\t\t\t\tentryWarrantyFr.setLanguage(Language.FRENCH);\n\t\t\t\t\t\t\tdaoManager.getTranslationDao().insertEntry(entryWarrantyFr);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tproduct.setWarranty(translationWarranty);\t\n\t\t\t\t\t\n\t\t\t\t\t//Insert Image product\n\t\t\t\t\tImage imageProduct = new Image();\n\t\t\t\t\t//If the id image is null that means that the image is new.\n\t\t\t\t\t//So, Insert the image and update the product.\n\t\t\t\t\tif(productDTO.getImage() != null) {\n\t\t\t\t\t\tif (productDTO.getImage().getId() > 0L) {\t\t\t\t\t\t\n\t\t\t\t\t\t\timageProduct.setId(productDTO.getImage().getId());\n\t\t\t\t\t\t\timageProduct.setName(productDTO.getImage().getName());\n\t\t\t\t\t\t\timageProduct.setRealNameImg(productDTO.getImage().getRealName());\n\t\t\t\t\t\t\timageProduct.setType(Type.PRODUCT);\n\t\t\t\t\t\t\timageProduct.setSize(productDTO.getImage().getSize());\n\t\t\t\t\t\t\timageProduct.setHeight(productDTO.getImage().getHeight());\n\t\t\t\t\t\t\timageProduct.setWidth(productDTO.getImage().getWidth());\n\t\t\t\t\t\t\timageProduct.setLarge(productDTO.getImage().isLarge());\n\t\t\t\t\t\t\timageProduct.setResolution(productDTO.getImage().getResolution());\n\t\t\t\t\t\t\timageProduct.setScore(productDTO.getImage().getScore());\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t//For the image, I use the plugin and the insert or update of \n\t\t\t\t\t\t\t//the image is done in AjaxUploadFile So if I insert here the \n\t\t\t\t\t\t\t//image again, I'll get a duplicate key exception. \n\t\t\t\t\t\t\t//I update all the time.\n\t\t\t\t\t\t\t//daoManager.getImageDao().updateEntity(imageProduct);\t\t\n\t\t\t\t\t\t\t//I do nothing.\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t//Brand \n\t\t\t\t\tBrand brand = new Brand();\n\t\t\t\t\tbrand.setId(productDTO.getBrand().getId());\n\t\t\t\t\t\n\t\t\t\t\t//Category\n\t\t\t\t\tCategory category = new Category();\n\t\t\t\t\tcategory.setId(productDTO.getCategory().getId());\n\t\t\t\t\tproduct.setId(productDTO.getId());\n\t\t\t\t\t\t\n\t\t\t\t\t if (imageProduct != null) {\n\t\t\t\t\t\tproduct.setImage(imageProduct);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tproduct.setMsrp(productDTO.getMsrp());\n\t\t\t\t\tproduct.setCost(productDTO.getCost());\n\t\t\t\t\tproduct.setBrand(brand);\n\t\t\t\t\tproduct.setLoyaltySourceProductId(productDTO.getLoyaltyProductId());\n\t\t\t\t\tproduct.setProductHigh(productDTO.getHigh());\n\t\t\t\t\tproduct.setProductLong(productDTO.getLarge());\n\t\t\t\t\tproduct.setProductWidth(productDTO.getWidth());\n\t\t\t\t\tproduct.setWeight(productDTO.getWeight());\n\t\t\t\t\tproduct.setActualHeight(productDTO.getActualHeight());\n\t\t\t\t\tproduct.setActualLength(productDTO.getActualLength());\n\t\t\t\t\tproduct.setActualWidth(productDTO.getActualWidth());\n\t\t\t\t\tproduct.setActualWeight(productDTO.getActualWeight());\n\t\t\t\t\tproduct.setCategory(category);\n\t\t\t\t\tproduct.setStatus(productDTO.getStatus());\n\t\t\t\t\tproduct.setNote(productDTO.getNote());\n\t\t\t\t\tproduct.setWereWgtDimChanged(productDTO.getWereWgtDimChanged());\n\t\t\t\t\tproduct.setConsideredForXML(productDTO.getConsideredForXML());\n\n\t\t\t\t\tif (productDTO.getStatus() == ProductStatus.DISCONTINUED) {\n\t\t\t\t\t\tproduct.setDiscontinuedStartDate(productDTO.getDiscontinuedStartDate());\n\t\t\t\t\t\tString productSubstitute = productDTO.getLoyaltyProductIdSub();\n\t\t\t\t\t\tif (productSubstitute != null) {\n\t\t\t\t\t\t\tif (productSubstitute.length() > 0 && !productSubstitute.matches(""^\\\\s*$"")) {\n\t\t\t\t\t\t\t\tproduct.setLoyaltyProductIdSub(productDTO.getLoyaltyProductIdSub());\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (productDTO.getStatus() == ProductStatus.DISABLED) {\t\t\t\t\t\t\n\t\t\t\t\t\tDate discontinuedStartDate = productDTO.getDiscontinuedStartDate();\n\t\t\t\t\t\tif (discontinuedStartDate != null) {\n\t\t\t\t\t\t\tproduct.setDiscontinuedStartDate(discontinuedStartDate);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tString productSubstitute = productDTO.getLoyaltyProductIdSub();\n\t\t\t\t\t\tif (productSubstitute != null) {\n\t\t\t\t\t\t\tproduct.setLoyaltyProductIdSub(productDTO.getLoyaltyProductIdSub());\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t//51 is N/A. To allow don't pick any option in edit product page in Admin\n\t\t\t\t\t//I do this trick\n\t\t\t\t\tif(productDTO.getMainFilterTypeId() != -1)\n\t\t\t\t\t\tproduct.setTypeId(productDTO.getMainFilterTypeId());\n\t\t\t\t\telse\n\t\t\t\t\t\tproduct.setTypeId(new Long(51));\n\t\t\t\t\t\n\t\t\t\t\tdaoManager.getProductDao().updateProduct(product);\n\t\t\t\t\t\n\t\t\t\t\t//Manufacture Product Id\n\t\t\t\t\tIterator<ProductModelDTO> stringIterator = productDTO.getManufactureProductList().iterator();\n\t\t\t\t\tProductModelNumber productModelNumber;\n\t\t\t\t\tProductModelDTO productModelDTO;\n\t\t\t\t\twhile(stringIterator.hasNext()) {\n\t\t\t\t\t\tproductModelNumber = new ProductModelNumber();\n\t\t\t\t\t\tproductModelDTO = (ProductModelDTO)stringIterator.next();\n\t\t\t\t\t\tproductModelNumber.setModelNumber(productModelDTO.getName());\n\t\t\t\t\t\tproductModelNumber.setQuantity(productModelDTO.getQuantity());\n\t\t\t\t\t\tproductModelNumber.setSupplier(productModelDTO.getSupplier());\n\t\t\t\t\t\tproductModelNumber.setPrice(productModelDTO.getPrice());\n\t\t\t\t\t\tproductModelNumber.setMsrp(productModelDTO.getMsrp());\n\t\t\t\t\t\tproductModelNumber.setId(productModelDTO.getId());\n\t\t\t\t\t\tproductModelNumber.setProductId(product.getId());\n\t\t\t\t\t\tif(productModelNumber.getId() != 0) {\n\t\t\t\t\t\t    if(!productModelDTO.getName().trim().equals(""""))\n\t\t\t\t\t\t    \tdaoManager.getProductDao().updateProductModelNumber(productModelNumber);\n\t\t\t\t\t\t    else\n\t\t\t\t\t\t    \tdaoManager.getProductDao().deleteProductModelNumber(productModelNumber);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t    if(!productModelDTO.getName().trim().equals("""") )\n\t\t\t\t\t\t\t daoManager.getProductDao().insertProductModelNumber(productModelNumber);\n\t\t\t\t\t\t} \n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t//link url\n\t\t\t\t\tif(productDTO.getLinkList() != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tProductLink productLink = new ProductLink();\n\t\t\t\t\t\tproductLink.setId(productDTO.getLinkList().get(0).getId());\n\t\t\t\t\t\tproductLink.setLink(productDTO.getLinkList().get(0).getLink());\n\t\t\t\t\t\tproductLink.setProductId(productDTO.getLinkList().get(0).getProductId());\n\t\t\t\t\t\tif(productLink.getId() !=0 )\n\t\t\t\t\t\t\tdaoManager.getProductDao().updateProductLink(productLink);\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tdaoManager.getProductDao().insertProductLink(productLink);\n\t\t\t\t\t}\n\t\t\t\t\treturn product;\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException e) {\n\t\t\tthrow (new ServiceException(e));\n\t\t}\n\t}\n\t\n\t\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<ProductDTO> getAllProdcut() throws ServiceException{\n\n\t\tList <Product> productList = new ArrayList<Product>();\n\t\t\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tproductList = (List <Product>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\n\t\t\t\t\t\t\t\tthrows DaoException {\n\t\t\t\t\t\t\treturn daoManager.getProductDao().getAllProdcut();\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn(DTOFactory.getProductDTOList(productList));\n\t}\t\n\n\t@Override\n\tpublic void updateSellingPriceBrand(final UserProductDTO userProductDTO)\n\t\t\tthrows ServiceException {\n\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tdaoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\n\t\t\t\t\t\t\tthrows DaoException {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\tUserBrandDiscount userBrandDiscount = new UserBrandDiscount();\n\t\t\t\t\t\tuserBrandDiscount.setBrandId(userProductDTO.getBrandId());\n\t\t\t\t\t\tuserBrandDiscount.setDiscount(userProductDTO.getBrandDiscount());\n\t\t\t\t\t\tuserBrandDiscount.setUserId(userProductDTO.getUserId());\n\t\t\t\t\t\t//update selling price by brand\n\t\t\t\t\t\tdaoManager.getProductDao().updateSellingPriceBrand(userBrandDiscount);\n\t\t\t\t\t\t// insert user brand discount or category\n\t\t\t\t\t\tUserBrandDiscount ubd = daoManager.getUserBrandDiscountDao().getUserBrandDiscount(userBrandDiscount);\n\t\t\t\t\t\tif( ubd == null)\n\t\t\t\t\t\t\tdaoManager.getUserBrandDiscountDao().insertEntity(userBrandDiscount);\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tubd.setDiscount(userBrandDiscount.getDiscount());\n\t\t\t\t\t\t\tdaoManager.getUserBrandDiscountDao().updateEntity(ubd);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t}\n\t\n\t@Override\n\tpublic void updateSellingPriceCategory(final UserProductDTO userProductDTO)\n\t\t\tthrows ServiceException {\n\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tdaoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\n\t\t\t\t\t\t\tthrows DaoException {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\tUserCategoryDiscount userCatDiscount = new UserCategoryDiscount();\n\t\t\t\t\t\tuserCatDiscount.setCategoryId(userProductDTO.getCategoryId());\n\t\t\t\t\t\tuserCatDiscount.setDiscount(userProductDTO.getCategoryDiscount());\n\t\t\t\t\t\tuserCatDiscount.setUserId(userProductDTO.getUserId());\n\t\t\t\t\t\t//update selling price by brand\n\t\t\t\t\t\tdaoManager.getProductDao().updateSellingPriceCategory(userCatDiscount);\n\t\t\t\t\t\t// insert user brand discount or category\n\t\t\t\t\t\tUserCategoryDiscount  ucd = daoManager.getUserCategoryDiscountDao().getUserCategoryDiscount(userCatDiscount);\n\t\t\t\t\t\tif( ucd == null)\n\t\t\t\t\t\t\tdaoManager.getUserCategoryDiscountDao().insertEntity(userCatDiscount);\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tucd.setDiscount(userCatDiscount.getDiscount());\n\t\t\t\t\t\t\tdaoManager.getUserCategoryDiscountDao().updateEntity(ucd);\t\t\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t}\n\t\n\t@Override\n\tpublic CommonUserDiscountDTO getUserBrandDiscount(final CommonUserDiscountDTO userBrandDiscountDTO)\n\t\t\tthrows ServiceException {\n\t\tUserBrandDiscount discountResult = null;\n\t\ttry {\n\t\t\tdiscountResult = (UserBrandDiscount) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\n\t\t\t\t\t\n\t\t\t\t\tUserBrandDiscount userBrandDiscount = new UserBrandDiscount();\n\t\t\t\t\tuserBrandDiscount.setBrandId(userBrandDiscountDTO.getBrandId());\t\t\t\t\n\t\t\t\t\tuserBrandDiscount.setUserId(userBrandDiscountDTO.getUserId());\n\n\t\t\t\t\treturn daoManager.getUserBrandDiscountDao().getUserBrandDiscount(userBrandDiscount);\n\t\t\t\t}\n\t\t\t});\n\t\t}catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\t\n\t\tif(discountResult != null){\n\t\t\tCommonUserDiscountDTO udDTO = new CommonUserDiscountDTO();\n\t\t\tudDTO.setCategoryId(discountResult.getBrandId());\n\t\t\tudDTO.setUserId(discountResult.getUserId());\n\t\t\tudDTO.setDiscount(discountResult.getDiscount());\n\t\t\treturn udDTO;\t\t\t\t\t\t\t\t\t\n\t\t}\t\t\n\t\treturn null;\n\t}\n\n\t@Override\n\tpublic CommonUserDiscountDTO getUserCategoryDiscount(final CommonUserDiscountDTO userDiscountDTO) \n\t\t\tthrows ServiceException {\n\t\tUserCategoryDiscount discountResult = null;\n\t\ttry {\n\t\t\tdiscountResult = (UserCategoryDiscount) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\n\t\t\t\t\t\n\t\t\t\t\tUserCategoryDiscount userCatDiscount = new UserCategoryDiscount();\n\t\t\t\t\tuserCatDiscount.setCategoryId(userDiscountDTO.getCategoryId());\t\t\t\t\n\t\t\t\t\tuserCatDiscount.setUserId(userDiscountDTO.getUserId());\n\n\t\t\t\t\treturn daoManager.getUserCategoryDiscountDao().getUserCategoryDiscount(userCatDiscount);\n\t\t\t\t}\n\t\t\t});\n\t\t}catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\t\n\t\tif(discountResult != null){\n\t\t\tCommonUserDiscountDTO udDTO = new CommonUserDiscountDTO();\n\t\t\tudDTO.setCategoryId(discountResult.getCategoryId());\n\t\t\tudDTO.setUserId(discountResult.getUserId());\n\t\t\tudDTO.setDiscount(discountResult.getDiscount());\n\t\t\treturn udDTO;\t\t\t\t\t\t\t\t\t\n\t\t}\n\t\t\n\t\treturn null;\n\t}\n\n\t@Override\n\tpublic void updateSellingPriceProduct(final UserProductDTO producDTO)\n\t\t\tthrows ServiceException {\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tdaoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\n\t\t\t\t\t\t\tthrows DaoException {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\tProduct product = new Product();\n\t\t\t\t\t\tproduct.setUserId(producDTO.getUserId());\n\t\t\t\t\t\tproduct.setId(producDTO.getId());\n\t\t\t\t\t\tproduct.setUserPrice(producDTO.getUserPrice());\n\t\t\t\t\t\tproduct.setPriceType(PriceType.MANUEL_PRICE_SET.getValue());\n\t\t\t\t\t\t//update selling price by product\n\t\t\t\t\t\tdaoManager.getProductDao().updateSellingPriceProduct(product);\n\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\t\t\n\t}\n\t\n\t@Override\n\tpublic void updateUserProductStatus(final UserProductDTO producDTO)\n\t\t\tthrows ServiceException {\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tdaoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\n\t\t\t\t\t\t\tthrows DaoException {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\tProduct product = new Product();\n\t\t\t\t\t\tproduct.setUserId(producDTO.getUserId());\n\t\t\t\t\t\tproduct.setId(producDTO.getId());\n\t\t\t\t\t\tproduct.setUserProductStatus(producDTO.getUserProductStatus());\n\t\t\t\t\t\tdaoManager.getProductDao().updateUserProductStatus(product);\n\t\t\t\t\t\t\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\t\t\n\t}\n\t\n\t\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<CommonDTO> getAllMainSpecification(LoyaltyEnum language)\n\t\t\tthrows ServiceException {\n\t\tList<Specification> list = null;\n\t\ttry {\n\t\t\tlist = (List<Specification>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\n\t\t\t\t\treturn daoManager.getSpecificationDao().getAllMainSpecification();\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException e) {\n\t\t\tthrow (new ServiceException(e));\t\t\t\n\t\t} \n\t\t\n\t\treturn DTOFactory.getAllCommonDTOFromSpecification(list, language);\n\t}\n\t\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<ProductDTO> getAllProductQuery(final QueryDTO dto)\n\t\t\tthrows ServiceException {\n\t\tList <Product> productList = new ArrayList<Product>();\n\t\t\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tproductList = (List<Product>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\n\t\t\t\t\t\t\t\tthrows DaoException {\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tQuery qry = new Query();\n\t\t\t\t\t\t\tBrand brand = null;\n\t\t\t\t\t\t\tif(dto.getBrand().getId()>0){\n\t\t\t\t\t\t\t\tbrand = new Brand();\n\t\t\t\t\t\t\t\tbrand.setId(dto.getBrand().getId());\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tCategory cat = null;\n\t\t\t\t\t\t\tif(dto.getCategory().getId()>0){\n\t\t\t\t\t\t\t\tcat = new Category();\n\t\t\t\t\t\t\t\tcat.setId(dto.getCategory().getId());\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tqry.setBrand(brand);\n\t\t\t\t\t\t\tqry.setCategory(cat);\n\t\t\t\t\t\t\tqry.setTypeId(null);\n\t\t\t\t\t\t\tqry.setDiscontinued(dto.isDiscontinued());\n\t\t\t\t\t\t\tqry.setDisabled(dto.isDisabled());\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\treturn daoManager.getProductDao().getAllProductQuery(qry);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn(DTOFactory.getBasicProductDTOList(productList));\n\t}\n\n\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<ProductDTO> getProductList(final SearchRequestDTO searchRequest) throws ServiceException {\n\t\tList <Product> productList = new ArrayList<Product>();\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tproductList = (List <Product>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\n\t\t\t\t\t\t\t\tthrows DaoException {\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tSelect select = new Select();\n\t\t\t\t\t\t\tselect.setQuery(searchRequest.getQuery());\n\t\t\t\t\t\t\tselect.setUserId(searchRequest.getUserId());\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif(searchRequest.getSearchType() == SearchType.NAME.getValue()){\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\treturn daoManager.getProductDao().getProductByName(select);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(searchRequest.getSearchType() == SearchType.BRAND.getValue()){\n\t\t\t\t\t\t\t\treturn daoManager.getProductDao().getAllProdcutByBrand(select);\t\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(searchRequest.getSearchType() == SearchType.CATEGORY.getValue()){\n\t\t\t\t\t\t\t\treturn daoManager.getProductDao().getAllProdcutByCategory(select);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(searchRequest.getSearchType() == SearchType.MAIN_SPECIFICATION.getValue()){\n\t\t\t\t\t\t\t\treturn daoManager.getProductDao().getAllProdcutBySpecification(select);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(searchRequest.getSearchType() == SearchType.CATEGORY_GROUP.getValue()){\n\t\t\t\t\t\t\t\treturn daoManager.getProductDao().getAllProdcutByCategoryGroup(select);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn daoManager.getProductDao().getAllProdcut();\n\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\t\t\n\t\treturn DTOFactory.getProductDTOList(productList);\n \n\t}\n\t\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<UserDTO> getAllActiveClients(final Long productId) throws ServiceException {\n\n\t\tList<User> activeClientsList = new ArrayList<User>();\n\t\t\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tactiveClientsList = (List<User>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\n\t\t\t\t\t\tthrows DaoException {\n\t\t\t\t\tProduct product = new Product();\n\t\t\t\t\tSelect select = new Select();\n\t\t\t\t\tselect.setQuery(String.valueOf(productId));\n\t\t\t\t\tproduct = daoManager.getProductDao().getProduct(select);\n\t\t\t\t\treturn product.getActiveClientsList();\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn(DTOFactory.getActiveClients(activeClientsList));\n\t}\n\t\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<ProductDTO> getAllDiscontinuedProducts() throws ServiceException {\n\n\t\tList <Product> productList = new ArrayList<Product>();\n\t\t\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tproductList = (List <Product>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\n\t\t\t\t\t\t\t\tthrows DaoException {\n\t\t\t\t\t\t\treturn daoManager.getProductDao().getAllDiscontinuedProducts();\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn(DTOFactory.getProductDTOList(productList));\n\t}\n\t\n\t@Override\n\tpublic void updateStatusToDisabled(final ProductDTO productDTO) throws ServiceException {\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tdaoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\n\t\t\t\t\t\t\tthrows DaoException {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\tProduct product = new Product();\n\t\t\t\t\t\tproduct.setId(productDTO.getId());\n\t\t\t\t\t\tdaoManager.getProductDao().updateStatusToDisabled(product);\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\t\t\n\t}\n\t\n\t@Override\n\tpublic ProductDTO getProductIdFromLSProductId(final String lSProductId) throws ServiceException {\n\t\tProduct productResult = new Product();\n\t\t\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tproductResult = (Product) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\n\t\t\t\t\t\tthrows DaoException {\n\t\t\t\t\tProduct product = daoManager.getProductDao().getProductIdFromLSProductId(lSProductId);\n\t\t\t\t\treturn product;\n\t\t\t\t}\n\t\t\t});\t\t\t\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\t\t\n\t\tif(productResult == null) return (null);\n\t\treturn (DTOFactory.getProductDTO(productResult));\t\t\t\t\n\t}\n\t\n\t\n\t\n\t@Override\n\tpublic ProductDTO getProductByLsProductId(final String lSProductId) throws ServiceException {\n\t\tProduct productResult = new Product();\n\t\t\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tproductResult = (Product) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\n\t\t\t\t\t\tthrows DaoException {\n\t\t\t\t\tProduct product = daoManager.getProductDao().getProductByLsProductId(lSProductId);\n\t\t\t\t\treturn product;\n\t\t\t\t}\n\t\t\t});\t\t\t\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\t\t\n\t\tif(productResult == null) return (null);\n\t\treturn (DTOFactory.getProductDTO(productResult));\t\t\t\t\n\t}\n\t\n\t\n\t\n\t\n\t\n\t\n\t@Override \n\tpublic Long createUserProductPrice(final UserProductPriceDTO userProductPriceDTO) throws ServiceException {\n\t\tUserProductPrice userProductPriceResult = new UserProductPrice();\t\t\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tuserProductPriceResult = (UserProductPrice) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\t\t\t\t\t\n\t\t\t\t\tUserProductPrice userProductPrice = new UserProductPrice();\t\t\t\t\t\n\t\t\t\t\tuserProductPrice.setUserId(userProductPriceDTO.getUserId());\t\t\t\t\n\t\t\t\t\tuserProductPrice.setProductId(userProductPriceDTO.getProductId());\t\t\t\t\t\n\t\t\t\t\tuserProductPrice.setPrice(userProductPriceDTO.getPrice());\n\t\t\t\t\tuserProductPrice.setProfit(userProductPriceDTO.getProfit());\n\t\t\t\t\tuserProductPrice.setDiscount(userProductPriceDTO.getDiscount());\n\t\t\t\t\tuserProductPrice.setExcluded(userProductPriceDTO.getExcluded());\t\t\t\t\t\n\t\t\t\t\tuserProductPrice.setUserStatus(userProductPriceDTO.getUserStatus());\n\t\t\t\t\tuserProductPrice.setPriceType(userProductPriceDTO.getPriceType());\t\t\t\t\t\n\t\t\t\t\tdaoManager.getProductDao().insertUserProductPrice(userProductPrice);\t\t\t\t\t\n\t\t\t\t\treturn userProductPrice;\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn userProductPriceResult.getId();\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\t\t\n\t}\t\n\t\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<UserProductPriceDTO> getUserProductPriceList(final Long productId) throws ServiceException {\n\t\tList<UserProductPrice> userProductPriceList = new ArrayList<UserProductPrice>();\t\t\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tuserProductPriceList = (List<UserProductPrice>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\n\t\t\t\t\tList<UserProductPrice> userProductPriceListing = new ArrayList<UserProductPrice>();\n\t\t\t\t\tSelect select = new Select();\n\t\t\t\t\tselect.setProductId(productId);\n\t\t\t\t\tuserProductPriceListing = daoManager.getProductDao().getUserProductPriceList(select);\t\t\t\t\t\n\t\t\t\t\treturn userProductPriceListing;\n\t\t\t\t}\n\t\t\t});\t\t\t\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn(DTOFactory.getUserProductPriceDTOList(userProductPriceList));\n\t}\n\t\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<UserProductPriceDTO> getUserProductPriceForActiveUsersList(final Long productId) throws ServiceException {\n\t\tList<UserProductPrice> userProductPriceList = new ArrayList<UserProductPrice>();\t\t\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tuserProductPriceList = (List<UserProductPrice>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\n\t\t\t\t\tList<UserProductPrice> userProductPriceListing = new ArrayList<UserProductPrice>();\n\t\t\t\t\tSelect select = new Select();\n\t\t\t\t\tselect.setProductId(productId);\n\t\t\t\t\tuserProductPriceListing = daoManager.getProductDao().getUserProductPriceForActiveUsersList(select);\t\t\t\t\t\n\t\t\t\t\treturn userProductPriceListing;\n\t\t\t\t}\n\t\t\t});\t\t\t\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn(DTOFactory.getUserProductPriceDTOList(userProductPriceList));\n\t}\n\t\n\t\n\t@Override\n\tpublic void updateUserProductPrice(final UserProductPriceDTO userProductPriceDTO) throws ServiceException {\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tdaoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\t\n\t\t\t\t\t\tUserProductPrice userProductPrice = new UserProductPrice();\t\t\t\t\t\t\n\t\t\t\t\t\tuserProductPrice.setUserId(userProductPriceDTO.getUserId());\t\t\t\t\n\t\t\t\t\t\tuserProductPrice.setProductId(userProductPriceDTO.getProductId());\t\n\t\t\t\t\t\tuserProductPrice.setPrice(userProductPriceDTO.getPrice());\n\t\t\t\t\t\tuserProductPrice.setProfit(userProductPriceDTO.getProfit());\n\t\t\t\t\t\tuserProductPrice.setDiscount(userProductPriceDTO.getDiscount());\n\t\t\t\t\t\tuserProductPrice.setExcluded(userProductPriceDTO.getExcluded());\t\t\t\t\t\n\t\t\t\t\t\tuserProductPrice.setPriceType(userProductPriceDTO.getPriceType());\n\t\t\t\t\t\tdaoManager.getProductDao().updateUserProductPrice(userProductPrice);\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\t\t\n\t}\t\n\t\n\t@Override\n\tpublic UserProductPriceDTO getUserProductPriceInformation(final Long productId, final Long userId) throws ServiceException {\n\t\tUserProductPrice userProductPriceResult = new UserProductPrice();\t\t\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tuserProductPriceResult = (UserProductPrice) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\n\t\t\t\t\t\tthrows DaoException {\n\t\t\t\t\tUserProductPrice userProductPrice = new UserProductPrice();\n\t\t\t\t\tSelect select = new Select();\n\t\t\t\t\tselect.setProductId(productId);\n\t\t\t\t\tselect.setUserId(userId);\n\t\t\t\t\tuserProductPrice = daoManager.getProductDao().getUserProductPrice(select);\n\t\t\t\t\treturn userProductPrice;\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn (DTOFactory.getUserProductPriceDTO(userProductPriceResult));\n\t}\n\n\t@Override\n\tpublic UserProductPriceDTO getUsrPPriceByLsproductId(final Long userId, final String lsProductId) throws ServiceException {\n\t\tUserProductPrice userProductPriceResult = null;\t\n\t\ttry {\t\t\t\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tuserProductPriceResult = (UserProductPrice) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\n\t\t\t\t\t\tthrows DaoException {\n\t\t\t\t\treturn daoManager.getProductDao().getUsrPPriceByLsproductId(userId,lsProductId);\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn (DTOFactory.getUserProductPriceDTO(userProductPriceResult));\n\t}\n\n\t\n\t\n\t@Override\n\tpublic UserProductPriceDTO getUsrPPriceByProductId(final Long userId, final Long productId) throws ServiceException {\n\t\tUserProductPrice userProductPriceResult = null;\t\n\t\ttry {\t\t\t\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tuserProductPriceResult = (UserProductPrice) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\n\t\t\t\t\t\tthrows DaoException {\n\t\t\t\t\treturn daoManager.getProductDao().getUsrPPriceByProductId(userId,productId);\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn (DTOFactory.getUserProductPriceDTO(userProductPriceResult));\n\t}\n\n\t\n\t\n\t\n\t\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<ProvinceDTO> getAllProvinces() throws ServiceException {\n\t\tList<Province> provinceList = new ArrayList<Province>();\t\t\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tprovinceList = (List<Province>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\n\t\t\t\t\treturn daoManager.getProductDao().getAllProvinces();\n\t\t\t\t}\n\t\t\t});\t\t\t\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn(DTOFactory.getProvinceDTOList(provinceList));\n\t}\n\t\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<CityDTO> getAllCities(final Long provinceId) throws ServiceException {\n\t\tList<City> cityList = new ArrayList<City>();\t\t\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tcityList = (List<City>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\n\t\t\t\t\tList<City> userProductPriceListing = new ArrayList<City>();\n\t\t\t\t\tSelect select = new Select();\n\t\t\t\t\tselect.setProvinceId(provinceId);\n\t\t\t\t\tuserProductPriceListing = daoManager.getProductDao().getAllCities(select);\t\t\t\n\t\t\t\t\treturn userProductPriceListing;\n\t\t\t\t}\n\t\t\t});\t\t\t\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn(DTOFactory.getCityDTOList(cityList));\n\t}\n\t\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic CityDTO getMostPopularCitie(final Long provinceId) throws ServiceException {\n\t\tCity city = new City();\t\t\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tcity = (City) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\n\t\t\t\t\tCity userProductPrice= new City();\n\t\t\t\t\tSelect select = new Select();\n\t\t\t\t\tselect.setProvinceId(provinceId);\n\t\t\t\t\tuserProductPrice = daoManager.getProductDao().getMostPopularCitie(select);\t\t\t\n\t\t\t\t\treturn userProductPrice;\n\t\t\t\t}\n\t\t\t});\t\t\t\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn(DTOFactory.getCityDTO(city));\n\t}\n\t\n\t\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<CityDTO> getCities() throws ServiceException {\n\t\tList<City> cityList = new ArrayList<City>();\t\t\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tcityList = (List<City>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\n\t\t\t\t\treturn daoManager.getProductDao().getCities();\n\t\t\t\t}\n\t\t\t});\t\t\t\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn(DTOFactory.getCityDTOList(cityList));\n\t}\n\t\n\t\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<CityDTO> getMostPopularCitiesList() throws ServiceException {\n\t\tList<City> cityList = new ArrayList<City>();\t\t\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tcityList = (List<City>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\n\t\t\t\t\treturn daoManager.getProductDao().getMostPopularCitiesList();\n\t\t\t\t}\n\t\t\t});\t\t\t\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn(DTOFactory.getCityDTOList(cityList));\n\t}\n\t\n\t\n\t\n\t@Override\n\tpublic Long createShippingCity(final ShippingCityDTO shippingCityDTO) throws ServiceException {\n\t\tShippingCity shippingCityResult = new ShippingCity();\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tshippingCityResult = (ShippingCity) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\t\t\t\t\n\t\t\t\t\tShippingCity shippingCity = new ShippingCity();\n\t\t\t\t\tshippingCity.setProductId(shippingCityDTO.getProductId());\n\t\t\t\t\tshippingCity.setCityId(shippingCityDTO.getCityId());\n\t\t\t\t\tshippingCity.setExpeditedParcelPrice(shippingCityDTO.getExpeditedParcelPrice());\n\t\t\t\t\tdaoManager.getProductDao().insertShippingCity(shippingCity);\n\t\t\t\t\treturn shippingCity;\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn shippingCityResult.getId();\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t}\n\t\n\t@Override\n\tpublic Long createShippingProvince(final ShippingProvinceDTO shippingProvinceDTO) throws ServiceException {\n\t\tShippingProvince shippingProvinceResult = new ShippingProvince();\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tshippingProvinceResult = (ShippingProvince) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\t\t\t\t\t\n\t\t\t\t\tShippingProvince shippingProvince = new ShippingProvince();\n\t\t\t\t\tshippingProvince.setProductId(shippingProvinceDTO.getProductId());\n\t\t\t\t\tshippingProvince.setProvinceId(shippingProvinceDTO.getProvinceId());\n\t\t\t\t\tshippingProvince.setWeightedTotalProvince(shippingProvinceDTO.getWeightedTotalProvince());\n\t\t\t\t\tdaoManager.getProductDao().insertShippingProvince(shippingProvince);\n\t\t\t\t\treturn shippingProvince;\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn shippingProvinceResult.getId();\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t}\n\t\n\t@Override\n\tpublic Long createShippingTotal(final ShippingTotalDTO shippingTotalDTO) throws ServiceException {\n\t\tShippingTotal shippingTotalResult = new ShippingTotal();\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tshippingTotalResult = (ShippingTotal) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\t\t\t\t\t\n\t\t\t\t\tShippingTotal shippingTotal = new ShippingTotal();\n\t\t\t\t\tshippingTotal.setProductId(shippingTotalDTO.getProductId());\n\t\t\t\t\tshippingTotal.setProvinceId(shippingTotalDTO.getProvinceId());\n\t\t\t\t\tshippingTotal.setUserId(shippingTotalDTO.getUserId());\n\t\t\t\t\tshippingTotal.setWeightedProvinceTotalWithCoverage(shippingTotalDTO.getWeightedProvinceTotalWithCoverage());\n\t\t\t\t\tshippingTotal.setAverageShippingTotal(shippingTotalDTO.getAverageShippingTotal());\n\t\t\t\t\tdaoManager.getProductDao().insertShippingTotal(shippingTotal);\n\t\t\t\t\treturn shippingTotal;\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn shippingTotalResult.getId();\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t}\n\t\n\t@Override\n\tpublic void updateUPPShippingCoverage(final UserProductPriceDTO userProductPriceDTO) throws ServiceException {\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tdaoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\t\n\t\t\t\t\t\tUserProductPrice userProductPrice = new UserProductPrice();\n\t\t\t\t\t\tuserProductPrice.setUserId(userProductPriceDTO.getUserId());\t\t\t\t\n\t\t\t\t\t\tuserProductPrice.setProductId(userProductPriceDTO.getProductId());\n\t\t\t\t\t\tuserProductPrice.setShippingCoverage(userProductPriceDTO.getShippingCoverage());\n\t\t\t\t\t\tdaoManager.getProductDao().updateUPPShippingCoverage(userProductPrice);\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t}\n\t\n\t@Override\n\tpublic void updateUPPShippingTotalCanada(final UserProductPriceDTO userProductPriceDTO) throws ServiceException {\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tdaoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\t\n\t\t\t\t\t\tUserProductPrice userProductPrice = new UserProductPrice();\n\t\t\t\t\t\tuserProductPrice.setUserId(userProductPriceDTO.getUserId());\t\t\t\t\n\t\t\t\t\t\tuserProductPrice.setProductId(userProductPriceDTO.getProductId());\n\t\t\t\t\t\tuserProductPrice.setShippingTotalCanada(userProductPriceDTO.getShippingTotalCanada());\n\t\t\t\t\t\tdaoManager.getProductDao().updateUPPShippingTotalCanada(userProductPrice);\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t}\n\t\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<ProductDTO> getProductListByCategoryGroupId(final Long categoryGroupId) throws ServiceException {\n\t\tList<Product> productList = new ArrayList<Product>();\t\t\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tproductList = (List<Product>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\n\t\t\t\t\tList<Product> productListing = new ArrayList<Product>();\n\t\t\t\t\tSelect select = new Select();\n\t\t\t\t\tselect.setCategoryGoupeId(categoryGroupId);\n\t\t\t\t\tproductListing = daoManager.getProductDao().getProductListByCategoryGroupId(select);\t\t\t\n\t\t\t\t\treturn productListing;\n\t\t\t\t}\n\t\t\t});\t\t\t\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn(DTOFactory.getProductDTOList(productList));\n\t}\n\t\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<ProductDTO> getAllValidStatusProducts(final Long userId) throws ServiceException {\n\t\tList<Product> productList = new ArrayList<Product>();\t\t\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tproductList = (List<Product>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\n\t\t\t\t\tList<Product> productListing = new ArrayList<Product>();\n\t\t\t\t\tSelect select = new Select();\n\t\t\t\t\tselect.setUserId(userId);\n\t\t\t\t\tproductListing = daoManager.getProductDao().getAllValidStatusProducts(select);\t\t\t\n\t\t\t\t\treturn productListing;\n\t\t\t\t}\n\t\t\t});\t\t\t\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn(DTOFactory.getProductDTOList(productList));\t\t\n\t}\n\t\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<ProductDTO> getAllValidStatusProductsForAllUsers() throws ServiceException {\n\t\tList<Product> productList = new ArrayList<Product>();\t\t\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tproductList = (List<Product>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\n\t\t\t\t\treturn daoManager.getProductDao().getAllValidStatusProductsForAllUsers();\t\t\t\n\n\t\t\t\t}\n\t\t\t});\t\t\t\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn(DTOFactory.getProductDTOList(productList));\t\t\n\t}\n\t\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<ProductDTO> getAllValidStatusProductsG(final Long userId, \n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfinal Long categoryGroupId) throws ServiceException {\n\t\tList<Product> productList = new ArrayList<Product>();\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tproductList = (List<Product>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\n\t\t\t\t\tList<Product> productListing = new ArrayList<Product>();\n\t\t\t\t\tSelect select = new Select();\n\t\t\t\t\tselect.setUserId(userId);\n\t\t\t\t\tselect.setCategoryGoupeId(categoryGroupId);\n\t\t\t\t\tproductListing = daoManager.getProductDao().getAllValidStatusProductsG(select);\t\t\t\n\t\t\t\t\treturn productListing;\n\t\t\t\t}\n\t\t\t});\t\t\t\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn(DTOFactory.getProductDTOList(productList));\t\t\n\t}\n\t\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<ProductDTO> getAllValidStatusProductsGC(final Long userId, \n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfinal Long categoryGroupId, \n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfinal Long categoryId) throws ServiceException {\n\t\tList<Product> productList = new ArrayList<Product>();\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tproductList = (List<Product>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\n\t\t\t\t\tList<Product> productListing = new ArrayList<Product>();\n\t\t\t\t\tSelect select = new Select();\n\t\t\t\t\tselect.setUserId(userId);\n\t\t\t\t\tselect.setCategoryGoupeId(categoryGroupId);\n\t\t\t\t\tselect.setCategoryId(categoryId);\n\t\t\t\t\tproductListing = daoManager.getProductDao().getAllValidStatusProductsGC(select);\t\t\t\n\t\t\t\t\treturn productListing;\n\t\t\t\t}\n\t\t\t});\t\t\t\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn(DTOFactory.getProductDTOList(productList));\t\t\n\t}\n\t\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<ProductDTO> getAllValidStatusProductsGCT(final Long userId, \n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfinal Long categoryGroupId, \n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfinal Long categoryId, \n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfinal Long typeId) throws ServiceException {\n\t\tList<Product> productList = new ArrayList<Product>();\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tproductList = (List<Product>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\n\t\t\t\t\tList<Product> productListing = new ArrayList<Product>();\n\t\t\t\t\tSelect select = new Select();\n\t\t\t\t\tselect.setUserId(userId);\n\t\t\t\t\tselect.setCategoryGoupeId(categoryGroupId);\n\t\t\t\t\tselect.setCategoryId(categoryId);\n\t\t\t\t\tselect.setTypeId(typeId);\n\t\t\t\t\tproductListing = daoManager.getProductDao().getAllValidStatusProductsGCT(select);\t\t\t\n\t\t\t\t\treturn productListing;\n\t\t\t\t}\n\t\t\t});\t\t\t\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn(DTOFactory.getProductDTOList(productList));\t\t\n\t}\n\t\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<ProductDTO> getAllValidStatusProductsGCTB(final Long userId, \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfinal Long categoryGroupId, \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfinal Long categoryId, \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfinal Long typeId,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfinal Long brandId) throws ServiceException {\n\t\tList<Product> productList = new ArrayList<Product>();\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tproductList = (List<Product>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\n\t\t\t\t\tList<Product> productListing = new ArrayList<Product>();\n\t\t\t\t\tSelect select = new Select();\n\t\t\t\t\tselect.setUserId(userId);\n\t\t\t\t\tselect.setCategoryGoupeId(categoryGroupId);\n\t\t\t\t\tselect.setCategoryId(categoryId);\n\t\t\t\t\tselect.setTypeId(typeId);\n\t\t\t\t\tselect.setBrandId(brandId);\n\t\t\t\t\tproductListing = daoManager.getProductDao().getAllValidStatusProductsGCTB(select);\t\t\n\t\t\t\t\treturn productListing;\n\t\t\t\t}\n\t\t\t});\t\t\t\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn(DTOFactory.getProductDTOList(productList));\t\t\n\t}\t\n\t\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<ProductDTO> getAllValidStatusProductsGCB(final Long userId, \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfinal Long categoryGroupId, \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfinal Long categoryId,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfinal Long brandId) throws ServiceException {\n\t\tList<Product> productList = new ArrayList<Product>();\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tproductList = (List<Product>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\n\t\t\t\t\tList<Product> productListing = new ArrayList<Product>();\n\t\t\t\t\tSelect select = new Select();\n\t\t\t\t\tselect.setUserId(userId);\n\t\t\t\t\tselect.setCategoryGoupeId(categoryGroupId);\n\t\t\t\t\tselect.setCategoryId(categoryId);\n\t\t\t\t\tselect.setBrandId(brandId);\n\t\t\t\t\tproductListing = daoManager.getProductDao().getAllValidStatusProductsGCB(select);\n\t\t\t\t\treturn productListing;\n\t\t\t\t}\n\t\t\t});\t\t\t\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn(DTOFactory.getProductDTOList(productList));\t\t\n\t}\n\t/*\n\t@Override\n\tpublic ProductDTO getProductById(final Long productId) throws ServiceException {\n\t\tProduct productResult = new Product();\n\t\t\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tproductResult = (Product) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\n\t\t\t\t\t\tthrows DaoException {\n\t\t\t\t\tSelect select = new Select();\n\t\t\t\t\tselect.setProductId(productId);\n\t\t\t\t\tProduct product = daoManager.getProductDao().getProductById(select);\n\t\t\t\t\treturn product;\n\t\t\t\t}\n\t\t\t});\t\t\t\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\t\t\n\t\tif(productResult == null) return (null);\n\t\t\treturn (DTOFactory.getProductDTO(productResult));\t\t\t\t\n\t}\n\t*/\n\t\n\t@Override\n\tpublic ProductDTO getProductById(final Long productId) throws ServiceException {\n\t\tProduct productResult = new Product();\n\t\t\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tproductResult = (Product) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\n\t\t\t\t\t\tthrows DaoException {\n\t\t\t\t\tSelect select = new Select();\n\t\t\t\t\tselect.setProductId(productId);\n\t\t\t\t\tProduct product = daoManager.getProductDao().getProductById(productId);\n\t\t\t\t\treturn product;\n\t\t\t\t}\n\t\t\t});\t\t\t\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\t\t\n\t\tif(productResult == null) return (null);\n\t\t\treturn (DTOFactory.getProductDTO(productResult));\t\t\t\t\n\t}\n\t\n\t\n\t@Override\n\tpublic void updateShippingCityToExpeditedParcelPrice(final ShippingCityDTO shippingCityDTO) throws ServiceException {\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tdaoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\t\n\t\t\t\t\t\tShippingCity shippingCity = new ShippingCity();\n\t\t\t\t\t\tshippingCity.setProductId(shippingCityDTO.getProductId());\n\t\t\t\t\t\tshippingCity.setCityId(shippingCityDTO.getCityId());\n\t\t\t\t\t\tshippingCity.setExpeditedParcelPrice(shippingCityDTO.getExpeditedParcelPrice());\n\t\t\t\t\t\tdaoManager.getProductDao().updateShippingCityToExpeditedParcelPrice(shippingCity);\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t}\n\t\n\t@Override\n\tpublic ShippingCityDTO getShippingCity(final Long productId, final Long cityId) throws ServiceException {\n\t\tShippingCity shippingCityResult = new ShippingCity();\t\t\n\t\ttry {\t\t\t\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tshippingCityResult = (ShippingCity) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\n\t\t\t\t\t\tthrows DaoException {\n\t\t\t\t\tShippingCity shippingCity = new ShippingCity();\n\t\t\t\t\tSelect select = new Select();\n\t\t\t\t\tselect.setProductId(productId);\n\t\t\t\t\tselect.setCityId(cityId);\n\t\t\t\t\tshippingCity = daoManager.getProductDao().getShippingCity(select);\n\t\t\t\t\treturn shippingCity;\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn(DTOFactory.getShippingCityDTO(shippingCityResult));\n\t}\n\t\n\t@Override\n\tpublic void updateShippingProvince(final ShippingProvinceDTO shippingProvinceDTO) throws ServiceException {\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tdaoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\t\n\t\t\t\t\t\tShippingProvince shippingProvince = new ShippingProvince();\n\t\t\t\t\t\tshippingProvince.setProductId(shippingProvinceDTO.getProductId());\n\t\t\t\t\t\tshippingProvince.setProvinceId(shippingProvinceDTO.getProvinceId());\n\t\t\t\t\t\tshippingProvince.setWeightedTotalProvince(shippingProvinceDTO.getWeightedTotalProvince());\n\t\t\t\t\t\tdaoManager.getProductDao().updateShippingProvince(shippingProvince);\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t}\n\t\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<ProductDTO> getValidProductIdByDim(final ProductDTO productDTO) throws ServiceException {\n\t\tList<Product> productList = new ArrayList<Product>();\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tproductList = (List<Product>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\n\t\t\t\t\tProduct product = new Product();\n\t\t\t\t\tproduct.setId(productDTO.getId());\n\t\t\t\t\tproduct.setWeight(productDTO.getWeight());\n\t\t\t\t\tproduct.setLength(productDTO.getLarge());\n\t\t\t\t\tproduct.setWidth(productDTO.getWidth());\n\t\t\t\t\tproduct.setHeight(productDTO.getHigh());\n\t\t\t\t\treturn daoManager.getProductDao().getValidProductIdByDim(product);\n\t\t\t\t}\n\t\t\t});\t\t\t\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn(DTOFactory.getProductDTOList(productList));\t\t\n\t}\t\n\t\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<ShippingCityDTO> getShippingCityListWithZeroParcelPriceByCityId(final Long cityId) throws ServiceException {\n\t\tList<ShippingCity> shippingCityList = new ArrayList<ShippingCity>();\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tshippingCityList = (List<ShippingCity>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\n\t\t\t\t\tList<ShippingCity> shippingCityListing = new ArrayList<ShippingCity>();\n\t\t\t\t\tSelect select = new Select();\n\t\t\t\t\tselect.setCityId(cityId);\n\t\t\t\t\tshippingCityListing = daoManager.getProductDao().getShippingCityListWithZeroParcelPriceByCityId(select);\n\t\t\t\t\treturn shippingCityListing;\n\t\t\t\t}\n\t\t\t});\t\t\t\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn(DTOFactory.getShippingCityDTOList(shippingCityList));\n\t}\n\t\n\t@Override\n\tpublic CityDTO getCity(final Long cityId) throws ServiceException {\n\t\tCity cityResult = new City();\t\t\n\t\ttry {\t\t\t\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tcityResult = (City) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\n\t\t\t\t\t\tthrows DaoException {\n\t\t\t\t\tCity city = new City();\n\t\t\t\t\tSelect select = new Select();\n\t\t\t\t\tselect.setCityId(cityId);\n\t\t\t\t\tcity = daoManager.getProductDao().getCity(select);\n\t\t\t\t\treturn city;\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn(DTOFactory.getCityDTO(cityResult));\n\t}\n\t\n\t\n\t@Override\n\tpublic CityDTO getCityByName(final String nameCity) throws ServiceException {\t\n\t\tCity city=null;\n\t\ttry {\t\t\t\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tcity = (City) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\n\t\t\t\t\t\tthrows DaoException {\n\t\t\t\t\treturn daoManager.getProductDao().getCityByName(nameCity);\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\tCityDTO cityDTO=null;\n\t\tif(city!=null)cityDTO=DTOFactory.getCityDTO(city);\n\t\treturn cityDTO;\n\t}\n\t\n\t\n\t\n\t\n\t\n\t@Override\n\tpublic ProvinceDTO getProvince(final Long provinceId) throws ServiceException {\n\t\tProvince provinceResult = new Province();\t\t\n\t\ttry {\t\t\t\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tprovinceResult = (Province) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\n\t\t\t\t\t\tthrows DaoException {\n\t\t\t\t\tProvince province = new Province();\n\t\t\t\t\tSelect select = new Select();\n\t\t\t\t\tselect.setProvinceId(provinceId);\n\t\t\t\t\tprovince = daoManager.getProductDao().getProvince(select);\n\t\t\t\t\treturn province;\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn(DTOFactory.getProvinceDTO(provinceResult));\n\t}\t\n\n\t\n\t\n\t@Override\n\tpublic ProvinceDTO getProvinceByCode(final String code) throws ServiceException {\n\t\tProvince provinceResult = new Province();\t\t\n\t\ttry {\t\t\t\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tprovinceResult = (Province) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\n\t\t\t\t\tthrows DaoException {\n\t\t\t\t\treturn daoManager.getProductDao().getProvinceByCode(code);\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn(DTOFactory.getProvinceDTO(provinceResult));\n\t}\n\t\n\t\n\t@Override\n\tpublic ShippingProvinceDTO getWeightedTotalProvinceFromShippingProvince(final Long productId, final Long provinceId) throws ServiceException {\n\t\tShippingProvince shippingProvinceResult = new ShippingProvince();\t\t\n\t\ttry {\t\t\t\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tshippingProvinceResult = (ShippingProvince) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\n\t\t\t\t\t\tthrows DaoException {\n\t\t\t\t\tShippingProvince shippingProvince = new ShippingProvince();\n\t\t\t\t\tSelect select = new Select();\n\t\t\t\t\tselect.setProductId(productId);\n\t\t\t\t\tselect.setProvinceId(provinceId);\n\t\t\t\t\tshippingProvince = daoManager.getProductDao().getWeightedTotalProvinceFromShippingProvince(select);\n\t\t\t\t\treturn shippingProvince;\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn(DTOFactory.getShippingProvinceDTO(shippingProvinceResult));\n\t}\n\t\n\t@Override\n\tpublic void updateShippingTotal(final ShippingTotalDTO shippingTotalDTO) throws ServiceException {\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tdaoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\t\n\t\t\t\t\t\tShippingTotal shippingTotal = new ShippingTotal();\n\t\t\t\t\t\tshippingTotal.setProductId(shippingTotalDTO.getProductId());\n\t\t\t\t\t\tshippingTotal.setProvinceId(shippingTotalDTO.getProvinceId());\n\t\t\t\t\t\tshippingTotal.setUserId(shippingTotalDTO.getUserId());\n\t\t\t\t\t\tshippingTotal.setWeightedProvinceTotalWithCoverage(shippingTotalDTO.getWeightedProvinceTotalWithCoverage());\n\t\t\t\t\t\tshippingTotal.setAverageShippingTotal(shippingTotalDTO.getAverageShippingTotal());\n\t\t\t\t\t\tdaoManager.getProductDao().updateShippingTotal(shippingTotal);\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t}\n\t\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<ShippingTotalDTO> getShippingTotalList(final Long productId, final Long userId) throws ServiceException {\n\t\tList<ShippingTotal> shippingTotalList = new ArrayList<ShippingTotal>();\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tshippingTotalList = (List<ShippingTotal>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\n\t\t\t\t\tList<ShippingTotal> shippingTotalListing = new ArrayList<ShippingTotal>();\n\t\t\t\t\tSelect select = new Select();\n\t\t\t\t\tselect.setProductId(productId);\n\t\t\t\t\tselect.setUserId(userId);\n\t\t\t\t\tshippingTotalListing = daoManager.getProductDao().getShippingTotalList(select);\n\t\t\t\t\treturn shippingTotalListing;\n\t\t\t\t}\n\t\t\t});\t\t\t\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn(DTOFactory.getShippingTotalDTOList(shippingTotalList));\n\t}\n\t\n\t@Override\n\tpublic Long createUserProvincePopulation(final UserProvincePopulationDTO userProvincePopulationDTO) throws ServiceException {\n\t\tUserProvincePopulation userProvincePopulationResult = new UserProvincePopulation();\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tuserProvincePopulationResult = (UserProvincePopulation) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\t\t\t\t\t\n\t\t\t\t\tUserProvincePopulation userProvincePopulation = new UserProvincePopulation();\n\t\t\t\t\tuserProvincePopulation.setProvinceId(userProvincePopulationDTO.getProvinceId());\n\t\t\t\t\tuserProvincePopulation.setUserId(userProvincePopulationDTO.getUserId());\n\t\t\t\t\tuserProvincePopulation.setPopulationPercent(userProvincePopulationDTO.getPopulationPercent());\n\t\t\t\t\tdaoManager.getProductDao().insertUserProvincePopulation(userProvincePopulation);\n\t\t\t\t\treturn userProvincePopulation;\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn userProvincePopulationResult.getId();\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t}\n\t\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<UserProvincePopulationDTO> getUserProvincePopulationList(final Long userId) throws ServiceException {\n\t\tList<UserProvincePopulation> userProvincePopulationList = new ArrayList<UserProvincePopulation>();\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tuserProvincePopulationList = (List<UserProvincePopulation>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\n\t\t\t\t\tList<UserProvincePopulation> userProvincePopulationListing = new ArrayList<UserProvincePopulation>();\n\t\t\t\t\tSelect select = new Select();\n\t\t\t\t\tselect.setUserId(userId);\n\t\t\t\t\tuserProvincePopulationListing = daoManager.getProductDao().getUserProvincePopulationList(select);\n\t\t\t\t\treturn userProvincePopulationListing;\n\t\t\t\t}\n\t\t\t});\t\t\t\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn(DTOFactory.getUserProvincePopulationDTOList(userProvincePopulationList));\t\t\n\t}\t\n\t\n\t@Override\n\tpublic void updateUserProvincePopulation(final UserProvincePopulationDTO userProvincePopulationDTO) throws ServiceException {\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tdaoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\t\n\t\t\t\t\t\tUserProvincePopulation userProvincePopulation = new UserProvincePopulation();\n\t\t\t\t\t\tuserProvincePopulation.setUserId(userProvincePopulationDTO.getUserId());\n\t\t\t\t\t\tuserProvincePopulation.setProvinceId(userProvincePopulationDTO.getProvinceId());\n\t\t\t\t\t\tuserProvincePopulation.setPopulationPercent(userProvincePopulationDTO.getPopulationPercent());\n\t\t\t\t\t\tdaoManager.getProductDao().updateUserProvincePopulation(userProvincePopulation);\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t}\n\t\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<ShippingCityDTO> getAllShippingCity() throws ServiceException {\n\t\tList<ShippingCity> shippingCityList = new ArrayList<ShippingCity>();\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tshippingCityList = (List<ShippingCity>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\n\t\t\t\t\treturn daoManager.getProductDao().getAllShippingCity();\n\t\t\t\t}\n\t\t\t});\t\t\t\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn(DTOFactory.getShippingCityDTOList(shippingCityList));\n\t}\t\n\t\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<ShippingProvinceDTO> getAllShippingProvince() throws ServiceException {\n\t\tList<ShippingProvince> shippingProvinceList = new ArrayList<ShippingProvince>();\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tshippingProvinceList = (List<ShippingProvince>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\n\t\t\t\t\treturn daoManager.getProductDao().getAllShippingProvince();\n\t\t\t\t}\n\t\t\t});\t\t\t\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn(DTOFactory.getShippingProvinceDTOList(shippingProvinceList));\n\t}\n\t\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<ShippingTotalDTO> getAllShippingTotal() throws ServiceException {\n\t\tList<ShippingTotal> shippingTotalList = new ArrayList<ShippingTotal>();\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tshippingTotalList = (List<ShippingTotal>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\n\t\t\t\t\treturn daoManager.getProductDao().getAllShippingTotal();\n\t\t\t\t}\n\t\t\t});\t\t\t\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn(DTOFactory.getShippingTotalDTOList(shippingTotalList));\n\t}\n\t\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<UserProvincePopulationDTO> getAllUserProvincePopulation() throws ServiceException {\n\t\tList<UserProvincePopulation> userProvincePopulationList = new ArrayList<UserProvincePopulation>();\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tuserProvincePopulationList = (List<UserProvincePopulation>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\n\t\t\t\t\treturn daoManager.getProductDao().getAllUserProvincePopulation();\n\t\t\t\t}\n\t\t\t});\t\t\t\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn(DTOFactory.getUserProvincePopulationDTOList(userProvincePopulationList));\n\t}\n\t\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<UserProductPriceDTO> getAllUserProductPrice() throws ServiceException {\n\t\tList<UserProductPrice> userProductPriceList = new ArrayList<UserProductPrice>();\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tuserProductPriceList = (List<UserProductPrice>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\n\t\t\t\t\treturn daoManager.getProductDao().getAllUserProductPrice();\n\t\t\t\t}\n\t\t\t});\t\t\t\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn(DTOFactory.getUserProductPriceDTOList(userProductPriceList));\n\t}\t\n\t\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<ShippingTotalDTO> getShippingTotalListByUserId(final Long userId) throws ServiceException {\n\t\tList<ShippingTotal> shippingTotalList = new ArrayList<ShippingTotal>();\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tshippingTotalList = (List<ShippingTotal>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\n\t\t\t\t\tList<ShippingTotal> shippingTotalListing = new ArrayList<ShippingTotal>();\n\t\t\t\t\tSelect select = new Select();\n\t\t\t\t\tselect.setUserId(userId);\n\t\t\t\t\tshippingTotalListing = daoManager.getProductDao().getShippingTotalListByUserId(select);\n\t\t\t\t\treturn shippingTotalListing;\n\t\t\t\t}\n\t\t\t});\t\t\t\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn(DTOFactory.getShippingTotalDTOList(shippingTotalList));\t\n\t\t\n\t}\n\t\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<UserProductPriceDTO> getUserProductPriceByUserId(final Long userId) throws ServiceException {\n\t\tList<UserProductPrice> userProductPriceList = new ArrayList<UserProductPrice>();\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tuserProductPriceList = (List<UserProductPrice>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\n\t\t\t\t\tList<UserProductPrice> userProductPriceListing = new ArrayList<UserProductPrice>();\n\t\t\t\t\tSelect select = new Select();\n\t\t\t\t\tselect.setUserId(userId);\n\t\t\t\t\tuserProductPriceListing = daoManager.getProductDao().getUserProductPriceByUserId(select);\n\t\t\t\t\treturn userProductPriceListing;\n\t\t\t\t}\n\t\t\t});\t\t\t\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn(DTOFactory.getUserProductPriceDTOList(userProductPriceList));\n\t}\t\n\t\n\t@Override\n\tpublic UserProvincePopulationDTO getUserProvincePopulation(final Long userId, final Long provinceId) throws ServiceException {\n\t\tUserProvincePopulation userProvincePopulationResult = new UserProvincePopulation();\n\t\ttry {\t\t\t\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tuserProvincePopulationResult = (UserProvincePopulation) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\n\t\t\t\t\t\tthrows DaoException {\n\t\t\t\t\tUserProvincePopulation userProvincePopulation = new UserProvincePopulation();\n\t\t\t\t\tSelect select = new Select();\n\t\t\t\t\tselect.setUserId(userId);\n\t\t\t\t\tselect.setProvinceId(provinceId);\n\t\t\t\t\tuserProvincePopulation = daoManager.getProductDao().getUserProvincePopulation(select);\n\t\t\t\t\treturn userProvincePopulation;\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn(DTOFactory.getUserProvincePopulation(userProvincePopulationResult));\n\t}\n\t\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<ShippingCityDTO> getShippingCityByIDGreaterThan(final Long id) throws ServiceException {\n\t\tList<ShippingCity> shippingCityList = new ArrayList<ShippingCity>();\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tshippingCityList = (List<ShippingCity>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\n\t\t\t\t\treturn daoManager.getProductDao().getShippingCityByIDGreaterThan(id);\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn(DTOFactory.getShippingCityDTOList(shippingCityList));\n\t}\n\t\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<ShippingProvinceDTO> getShippingProvinceByIDGreaterThan(final Long id) throws ServiceException {\n\t\tList<ShippingProvince> shippingProvinceList = new ArrayList<ShippingProvince>();\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tshippingProvinceList = (List<ShippingProvince>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\n\t\t\t\t\treturn daoManager.getProductDao().getShippingProvinceByIDGreaterThan(id);\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn(DTOFactory.getShippingProvinceDTOList(shippingProvinceList));\n\t}\n\t\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<ShippingTotalDTO> getShippingTotalByIDGreaterThan(final Long id) throws ServiceException {\n\t\tList<ShippingTotal> shippingTotalList = new ArrayList<ShippingTotal>();\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tshippingTotalList = (List<ShippingTotal>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\n\t\t\t\t\treturn daoManager.getProductDao().getShippingTotalByIDGreaterThan(id);\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn(DTOFactory.getShippingTotalDTOList(shippingTotalList));\n\t}\t\n\t\t\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<Long> getAllValidProductIds() throws ServiceException {\n\t\tList<Product> productList = new ArrayList<Product>();\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tproductList = (List<Product>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\n\t\t\t\t\treturn daoManager.getProductDao().getAllValidProductIds();\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn(DTOFactory.getProductDTOLightList(productList));\t\n\t}\n\t\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<ProductDTO> getValidProductsByUserIdAndExcluded(final Long userId) throws ServiceException {\n\t\tList<Product> productList = new ArrayList<Product>();\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tproductList = (List<Product>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\n\t\t\t\t\tList<Product> productListing = new ArrayList<Product>();\n\t\t\t\t\tSelect select = new Select();\n\t\t\t\t\tselect.setUserId(userId);\n\t\t\t\t\tproductListing = daoManager.getProductDao().getValidProductsByUserIdAndExcluded(select);\n\t\t\t\t\treturn productListing;\n\t\t\t\t}\n\t\t\t});\t\t\t\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn(DTOFactory.getProductDTOList(productList));\n\t}\n\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<ProductDTO> getProductsClassification(final Long userId) throws ServiceException {\n\t\tList<Product> productList = new ArrayList<Product>();\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tproductList = (List<Product>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\n\t\t\t\t\tList<Product> ProductsClassificationList = new ArrayList<Product>();\n\t\t\t\t\tProductsClassificationList = daoManager.getProductDao().getProductsClassification(userId);\n\t\t\t\t\treturn ProductsClassificationList;\n\t\t\t\t}\n\t\t\t});\t\t\t\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));  \n\t\t}\n\t\treturn(DTOFactory.getProductDTOClassification(productList)); \n\t}\n\t\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<ProductDTO> getValidProductsGreaterThanId(final Long productId) throws ServiceException {\n\t\tList<Product> productList = new ArrayList<Product>();\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tproductList = (List<Product>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\n\t\t\t\t\tList<Product> productListing = new ArrayList<Product>();\n\t\t\t\t\tSelect select = new Select();\n\t\t\t\t\tselect.setProductId(productId);\n\t\t\t\t\tproductListing = daoManager.getProductDao().getValidProductsGreaterThanId(select);\n\t\t\t\t\treturn productListing;\n\t\t\t\t}\n\t\t\t});\t\t\t\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn(DTOFactory.getProductDTOList(productList));\n\t}\n\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<ShippingTotalDTO> getShippingTotalListByProductId(final Long productId) throws ServiceException {\n\t\tList<ShippingTotal> shippingTotalList = new ArrayList<ShippingTotal>();\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tshippingTotalList = (List<ShippingTotal>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\n\t\t\t\t\tSelect select = new Select();\n\t\t\t\t\tselect.setProductId(productId);\n\t\t\t\t\treturn daoManager.getProductDao().getShippingTotalListByProductId(select);\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn(DTOFactory.getShippingTotalDTOList(shippingTotalList));\n\t}\n\t\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<UserProductPriceDTO> getNullsShippingTotalCanadaOnUserProductPrice(final Long productId) throws ServiceException {\n\t\tList<UserProductPrice> userProductPriceList = new ArrayList<UserProductPrice>();\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tuserProductPriceList = (List<UserProductPrice>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\n\t\t\t\t\tList<UserProductPrice> userProductPriceListing = new ArrayList<UserProductPrice>();\n\t\t\t\t\tSelect select = new Select();\n\t\t\t\t\tselect.setProductId(productId);\n\t\t\t\t\tuserProductPriceListing = daoManager.getProductDao().getNullsShippingTotalCanadaOnUserProductPrice(select);\n\t\t\t\t\treturn userProductPriceListing;\n\t\t\t\t}\n\t\t\t});\t\t\t\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn(DTOFactory.getUserProductPriceDTOList(userProductPriceList));\t\n\t}\n\t\n\t@Override\n\tpublic void updateAmendingProduct(final ProductDTO productDTO) throws ServiceException {\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t    daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\n\t\t\t\tthrows DaoException {\n\t\t\t\t\tProduct product = new Product();\n\t\t\t\t\tproduct.setId(productDTO.getId());\n\t\t\t\t\tdaoManager.getTranslationDao().updateEntry(new TranslationEntry(productDTO.getNameEng()));\n\t\t\t\t\tdaoManager.getTranslationDao().updateEntry(new TranslationEntry(productDTO.getNameFr()));\n\t\t\t\t\tdaoManager.getTranslationDao().updateEntry(new TranslationEntry(productDTO.getDescriptionEng()));\n\t\t\t\t\tdaoManager.getTranslationDao().updateEntry(new TranslationEntry(productDTO.getDescriptionFr()));\n\t\t\t\t\tdaoManager.getTranslationDao().updateEntry(new TranslationEntry(productDTO.getSpecificationEng()));\n\t\t\t\t\tdaoManager.getTranslationDao().updateEntry(new TranslationEntry(productDTO.getSpecificationFr()));\n\t\t\t\t\tif(productDTO.getOtherEng().getName() != null) {\n\t\t\t\t\t\tdaoManager.getTranslationDao().updateEntry(new TranslationEntry(productDTO.getOtherEng()));\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif(productDTO.getOtherFr().getName() != null) {\n\t\t\t\t\t\tdaoManager.getTranslationDao().updateEntry(new TranslationEntry(productDTO.getOtherFr()));\n\t\t\t\t\t}\t\t\t\t\t\n\t\t\t\t\tproduct.setNote(productDTO.getNote());\n\t\t\t\t\tdaoManager.getProductDao().updateAmendingProduct(product);\n\t\t\t\t\treturn product;\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException e) {\n\t\t\tthrow (new ServiceException(e));\n\t\t}\n\t}\n\t\n\t@Override\n\tpublic Boolean existsOnAlterProductXML(final Long productId) throws ServiceException {\n\t\tBoolean outcome = false;\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\toutcome = (Boolean) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\n\t\t\t\t\tSelect select = new Select();\n\t\t\t\t\tselect.setProductId(productId);\n\t\t\t\t\treturn (daoManager.getProductDao().getAlterProductXMLByProductId(select) != null);\n\t\t\t\t}\n\t\t\t});\t\t\t\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn outcome;\n\t}\n\t\n\t@Override\n\tpublic Boolean existsOnAlterUserProductXML(final Long productId, final Long userId) throws ServiceException {\n\t\tBoolean outcome = false;\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\toutcome = (Boolean) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\n\t\t\t\t\tSelect select = new Select();\n\t\t\t\t\tselect.setUserId(userId);\n\t\t\t\t\tselect.setProductId(productId);\n\t\t\t\t\treturn (daoManager.getProductDao().getAlterUserProductXMLByProductIdAndUserId(select) != null);\n\t\t\t\t}\n\t\t\t});\t\t\t\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn outcome;\n\t}\n\t\n\t@Override\n\tpublic void updateAlterUserProductXML(final AlterUserProductXMLDTO alterUserProductXMLDTO) throws ServiceException {\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tdaoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\t\n\t\t\t\t\t\tAlterUserProductXML alterUserProductXML = new AlterUserProductXML();\n\t\t\t\t\t\talterUserProductXML.setUserId(alterUserProductXMLDTO.getUserId());\n\t\t\t\t\t\talterUserProductXML.setProductId(alterUserProductXMLDTO.getProductId());\n\t\t\t\t\t\talterUserProductXML.setPriceDiscount(alterUserProductXMLDTO.getPriceDiscount());\n\t\t\t\t\t\talterUserProductXML.setExcluded(alterUserProductXMLDTO.getExcluded());\n\t\t\t\t\t\talterUserProductXML.setShipping(alterUserProductXMLDTO.getShipping());\n\t\t\t\t\t\talterUserProductXML.setUserProductToBeExecuted(alterUserProductXMLDTO.getUserProductToBeExecuted());\n\t\t\t\t\t\talterUserProductXML.setExcludedMeaning(alterUserProductXMLDTO.getExcludedMeaning());\n\t\t\t\t\t\talterUserProductXML.setPrice(alterUserProductXMLDTO.getPrice());\n\t\t\t\t\t\tdaoManager.getProductDao().updateAlterUserProductXML(alterUserProductXML);\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t}\n\t\n\t@Override\n\tpublic void updateAlterProductXML(final AlterProductXMLDTO alterProductXMLDTO) throws ServiceException {\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tdaoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\t\n\t\t\t\t\t\tAlterProductXML alterProductXML = new AlterProductXML();\n\t\t\t\t\t\talterProductXML.setProductId(alterProductXMLDTO.getProductId());\n\t\t\t\t\t\talterProductXML.setBrandId(alterProductXMLDTO.getBrandId());\n\t\t\t\t\t\talterProductXML.setCategoryId(alterProductXMLDTO.getCategoryId());\n\t\t\t\t\t\talterProductXML.setTypeId(alterProductXMLDTO.getTypeId());\n\t\t\t\t\t\talterProductXML.setImageId(alterProductXMLDTO.getImageId());\n\t\t\t\t\t\talterProductXML.setStatusId(alterProductXMLDTO.getStatusId());\n\t\t\t\t\t\talterProductXML.setNameEn(alterProductXMLDTO.getNameEn());\n\t\t\t\t\t\talterProductXML.setNameFr(alterProductXMLDTO.getNameFr());\n\t\t\t\t\t\talterProductXML.setDescriptionEn(alterProductXMLDTO.getDescriptionEn());\n\t\t\t\t\t\talterProductXML.setDescriptionFr(alterProductXMLDTO.getDescriptionFr());\n\t\t\t\t\t\talterProductXML.setSpecificationEn(alterProductXMLDTO.getSpecificationEn());\n\t\t\t\t\t\talterProductXML.setSpecificationFr(alterProductXMLDTO.getSpecificationFr());\n\t\t\t\t\t\talterProductXML.setOtherEn(alterProductXMLDTO.getOtherEn());\n\t\t\t\t\t\talterProductXML.setOtherFr(alterProductXMLDTO.getOtherFr());\n\t\t\t\t\t\talterProductXML.setWarrantyEn(alterProductXMLDTO.getWarrantyEn());\n\t\t\t\t\t\talterProductXML.setWarrantyFr(alterProductXMLDTO.getWarrantyFr());\n\t\t\t\t\t\talterProductXML.setDimensions(alterProductXMLDTO.getDimensions());\n\t\t\t\t\t\talterProductXML.setWeight(alterProductXMLDTO.getWeight());\n\t\t\t\t\t\talterProductXML.setModelNumber(alterProductXMLDTO.getModelNumber());\n\t\t\t\t\t\talterProductXML.setMsrp(alterProductXMLDTO.getMsrp());\n\t\t\t\t\t\talterProductXML.setShipping(alterProductXMLDTO.getShipping());\n\t\t\t\t\t\talterProductXML.setShipment(alterProductXMLDTO.getShipment());\n\t\t\t\t\t\talterProductXML.setProductToBeExecuted(alterProductXMLDTO.getProductToBeExecuted());\n\t\t\t\t\t\tdaoManager.getProductDao().updateAlterProductXML(alterProductXML);\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\t\t\n\t}\t\n\t\n\t@Override\n\tpublic Long createAlterUserProductXML(final AlterUserProductXMLDTO alterUserProductXMLDTO) throws ServiceException {\n\t\tAlterUserProductXML alterUserProductXMLResult = new AlterUserProductXML();\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\talterUserProductXMLResult = (AlterUserProductXML) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\t\t\t\t\t\n\t\t\t\t\tAlterUserProductXML alterUserProductXML = new AlterUserProductXML();\n\t\t\t\t\talterUserProductXML.setUserId(alterUserProductXMLDTO.getUserId());\n\t\t\t\t\talterUserProductXML.setProductId(alterUserProductXMLDTO.getProductId());\n\t\t\t\t\talterUserProductXML.setPriceDiscount(alterUserProductXMLDTO.getPriceDiscount());\n\t\t\t\t\talterUserProductXML.setExcluded(alterUserProductXMLDTO.getExcluded());\n\t\t\t\t\talterUserProductXML.setShipping(alterUserProductXMLDTO.getShipping());\n\t\t\t\t\talterUserProductXML.setUserProductToBeExecuted(alterUserProductXMLDTO.getUserProductToBeExecuted());\n\t\t\t\t\talterUserProductXML.setExcludedMeaning(alterUserProductXMLDTO.getExcludedMeaning());\n\t\t\t\t\talterUserProductXML.setPrice(alterUserProductXMLDTO.getPrice());\n\t\t\t\t\tdaoManager.getProductDao().insertAlterUserProductXML(alterUserProductXML);\n\t\t\t\t\treturn alterUserProductXML;\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn alterUserProductXMLResult.getId();\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t}\n\n\t@Override\n\tpublic Long createAlterProductXML(final AlterProductXMLDTO alterProductXMLDTO) throws ServiceException {\n\t\tAlterProductXML alterProductXMLResult = new AlterProductXML();\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\talterProductXMLResult = (AlterProductXML) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\t\t\t\t\t\n\t\t\t\t\tAlterProductXML alterProductXML = new AlterProductXML();\n\t\t\t\t\talterProductXML.setProductId(alterProductXMLDTO.getProductId());\n\t\t\t\t\talterProductXML.setBrandId(alterProductXMLDTO.getBrandId());\n\t\t\t\t\talterProductXML.setCategoryId(alterProductXMLDTO.getCategoryId());\n\t\t\t\t\talterProductXML.setTypeId(alterProductXMLDTO.getTypeId());\n\t\t\t\t\talterProductXML.setImageId(alterProductXMLDTO.getImageId());\n\t\t\t\t\talterProductXML.setStatusId(alterProductXMLDTO.getStatusId());\n\t\t\t\t\talterProductXML.setNameEn(alterProductXMLDTO.getNameEn());\n\t\t\t\t\talterProductXML.setNameFr(alterProductXMLDTO.getNameFr());\n\t\t\t\t\talterProductXML.setDescriptionEn(alterProductXMLDTO.getDescriptionEn());\n\t\t\t\t\talterProductXML.setDescriptionFr(alterProductXMLDTO.getDescriptionFr());\n\t\t\t\t\talterProductXML.setSpecificationEn(alterProductXMLDTO.getSpecificationEn());\n\t\t\t\t\talterProductXML.setSpecificationFr(alterProductXMLDTO.getSpecificationFr());\n\t\t\t\t\talterProductXML.setOtherEn(alterProductXMLDTO.getOtherEn());\n\t\t\t\t\talterProductXML.setOtherFr(alterProductXMLDTO.getOtherFr());\n\t\t\t\t\talterProductXML.setWarrantyEn(alterProductXMLDTO.getWarrantyEn());\n\t\t\t\t\talterProductXML.setWarrantyFr(alterProductXMLDTO.getWarrantyFr());\n\t\t\t\t\talterProductXML.setDimensions(alterProductXMLDTO.getDimensions());\n\t\t\t\t\talterProductXML.setWeight(alterProductXMLDTO.getWeight());\n\t\t\t\t\talterProductXML.setModelNumber(alterProductXMLDTO.getModelNumber());\n\t\t\t\t\talterProductXML.setMsrp(alterProductXMLDTO.getMsrp());\n\t\t\t\t\talterProductXML.setShipping(alterProductXMLDTO.getShipping());\n\t\t\t\t\talterProductXML.setShipment(alterProductXMLDTO.getShipment());\n\t\t\t\t\talterProductXML.setProductToBeExecuted(alterProductXMLDTO.getProductToBeExecuted());\n\t\t\t\t\tdaoManager.getProductDao().insertAlterProductXML(alterProductXML);\n\t\t\t\t\treturn alterProductXML;\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn alterProductXMLResult.getId();\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t}\n\t\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<ProductDTO> getProductsAsOfConsideredForXML() throws ServiceException {\n\t\tList<Product> productList = new ArrayList<Product>();\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tproductList = (List<Product>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\n\t\t\t\t\treturn daoManager.getProductDao().getProductsAsOfConsideredForXML();\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn(DTOFactory.getProductDTOList(productList));\n\t}\n\t\t\n\t@Override\n\tpublic AlterUserProductXMLDTO getAlterUserProductXML(final Long userId, final Long productId) throws ServiceException {\n\t\tAlterUserProductXML alterUserProductXMLResult = new AlterUserProductXML();\n\t\ttry {\t\t\t\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\talterUserProductXMLResult = (AlterUserProductXML) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\n\t\t\t\t\t\tthrows DaoException {\n\t\t\t\t\tSelect select = new Select();\n\t\t\t\t\tselect.setUserId(userId);\n\t\t\t\t\tselect.setProductId(productId);\n\t\t\t\t\treturn daoManager.getProductDao().getAlterUserProductXMLByProductIdAndUserId(select);\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn(DTOFactory.getAlterUserProductXML(alterUserProductXMLResult));\n\t}\n\t\n\t@Override\n\tpublic AlterProductXMLDTO getAlterProductXML(final Long productId) throws ServiceException {\n\t\tAlterProductXML alterProductXMLResult = new AlterProductXML();\n\t\ttry {\t\t\t\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\talterProductXMLResult = (AlterProductXML) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\n\t\t\t\t\t\tthrows DaoException {\n\t\t\t\t\tSelect select = new Select();\n\t\t\t\t\tselect.setProductId(productId);\n\t\t\t\t\treturn daoManager.getProductDao().getAlterProductXMLByProductId(select);\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn(DTOFactory.getAlterProductXML(alterProductXMLResult));\n\t}\n\t\n\t@Override\n\tpublic void closeProductConsideredForXML(final Long productId) throws ServiceException {\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tdaoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) \n\t\t\t\t\t\tthrows DaoException {\n\t\t\t\t\t\tSelect select = new Select();\n\t\t\t\t\t\tselect.setProductId(productId);\n\t\t\t\t\t\tdaoManager.getProductDao().closeProductConsideredForXML(select);\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t}\n\n\t@Override\n\tpublic void closeAlterProductXML(final Long productId) throws ServiceException {\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tdaoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) \n\t\t\t\t\t\tthrows DaoException {\n\t\t\t\t\t\tSelect select = new Select();\n\t\t\t\t\t\tselect.setProductId(productId);\n\t\t\t\t\t\tdaoManager.getProductDao().closeAlterProductXML(select);\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t}\n\n\t@Override\n\tpublic void closeAlterUserProductXML(final Long userId, final Long productId) throws ServiceException {\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tdaoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) \n\t\t\t\t\t\tthrows DaoException {\n\t\t\t\t\t\tSelect select = new Select();\n\t\t\t\t\t\tselect.setUserId(userId);\n\t\t\t\t\t\tselect.setProductId(productId);\n\t\t\t\t\t\tdaoManager.getProductDao().closeAlterUserProductXML(select);\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t}\n\t\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<ProductDTO> getWereWgtDimChangedFromProduct() throws ServiceException {\n\t\tList<Product> productList = new ArrayList<Product>();\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tproductList = (List<Product>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\n\t\t\t\t\treturn daoManager.getProductDao().getWereWgtDimChangedFromProduct();\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn(DTOFactory.getProductDTOList(productList));\n\t}\n\t\n\t@Override\n\tpublic void closeProductWereWgtDimChanged(final Long productId) throws ServiceException {\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tdaoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) \n\t\t\t\tthrows DaoException {\n\t\t\t\t\tSelect select = new Select();\n\t\t\t\t\tselect.setProductId(productId);\n\t\t\t\t\tdaoManager.getProductDao().closeProductWereWgtDimChanged(select);\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t}\n\t\n\t@Override\n\tpublic Boolean existsShippingCity(final Long productId, final Long cityId) throws ServiceException {\n\t\treturn (getShippingCity(productId, cityId) != null);\n\t}\n\t\n\t@Override\n\tpublic ShippingProvinceDTO getShippingProvince(final Long productId, final Long provinceId) throws ServiceException {\n\t\tShippingProvince shippingProvinceResult = new ShippingProvince();\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tshippingProvinceResult = (ShippingProvince) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\n\t\t\t\t\t\tthrows DaoException {\n\t\t\t\t\tSelect select = new Select();\n\t\t\t\t\tselect.setProductId(productId);\n\t\t\t\t\tselect.setProvinceId(provinceId);\n\t\t\t\t\treturn daoManager.getProductDao().getShippingProvince(select);\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn(DTOFactory.getShippingProvinceDTO(shippingProvinceResult));\n\t}\n\t\n\t@Override\n\tpublic Boolean existsShippingProvince(final Long productId, final Long provinceId) throws ServiceException {\n\t\tShippingProvinceDTO shippingProvinceDTO = getShippingProvince(productId, provinceId);\n\t\treturn (shippingProvinceDTO != null);\n\t}\n\n\t@Override\n\tpublic ShippingTotalDTO getShippingTotal(final Long productId, final Long provinceId, final Long userId) throws ServiceException {\n\t\tShippingTotal shippingTotalResult = new ShippingTotal();\n\t\ttry {\t\t\t\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tshippingTotalResult = (ShippingTotal) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\n\t\t\t\t\t\tthrows DaoException {\n\t\t\t\t\tSelect select = new Select();\n\t\t\t\t\tselect.setProductId(productId);\n\t\t\t\t\tselect.setProvinceId(provinceId);\n\t\t\t\t\tselect.setUserId(userId);\n\t\t\t\t\treturn daoManager.getProductDao().getShippingTotal(select);\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn(DTOFactory.getShippingTotalDTO(shippingTotalResult));\n\t}\n\t\n\t@Override\n\tpublic Boolean existsShippingTotal(final Long productId, final Long provinceId, final Long userId) throws ServiceException {\n\t\tShippingTotalDTO shippingTotalDTO = getShippingTotal(productId, provinceId, userId);\n\t\treturn (shippingTotalDTO != null);\n\t}\n\t\n\t@Override\n\tpublic void saveOldImageIdBeforeUpdate(final Long productId) throws ServiceException {\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tdaoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) \n\t\t\t\tthrows DaoException {\n\t\t\t\t\tSelect select = new Select();\n\t\t\t\t\tselect.setProductId(productId);\n\t\t\t\t\tdaoManager.getProductDao().saveOldImageIdBeforeUpdate(select);\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t}\n\t\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<ProductDTO> getProductBetween(final Long lower, final Long upper) throws ServiceException {\n\t\tList<Product> productList = new ArrayList<Product>();\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tproductList = (List<Product>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\n\t\t\t\t\tList<Product> productListing = new ArrayList<Product>();\t\t\t\t\t\n\t\t\t\t\tSelect select = new Select();\n\t\t\t\t\tselect.setLower(lower);\n\t\t\t\t\tselect.setUpper(upper);\t\t\t\t\n\t\t\t\t\tproductListing = daoManager.getProductDao().getProductBetween(select);\n\t\t\t\t\treturn productListing;\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn(DTOFactory.getProductDTOList(productList));\n\t}\n\t\n\t@SuppressWarnings(""unchecked"")\t\n\t@Override\t\n\tpublic List<Long> getShippingRepeats(final ProductDTO productDTO) throws ServiceException {\n\t\tList<Product> productList = new ArrayList<Product>();\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tproductList = (List<Product>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) \n\t\t\t\t\tthrows DaoException {\n\t\t\t\t\t\tProduct product = new Product();\n\t\t\t\t\t\tproduct.setId(productDTO.getId());\n\t\t\t\t\t\tproduct.setWeight(productDTO.getWeight());\n\t\t\t\t\t\tproduct.setLength(productDTO.getLarge());\n\t\t\t\t\t\tproduct.setWidth(productDTO.getWidth());\n\t\t\t\t\t\tproduct.setHeight(productDTO.getHigh());\n\t\t\t\t\t\treturn daoManager.getProductDao().getShippingRepeats(product);\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn (DTOFactory.getProductDTOLightList(productList));\t\t\t\n\t}\n\t\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<Long> getWereWgtDimChanged() throws ServiceException {\n\t\tList<Product> productList = new ArrayList<Product>();\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tproductList = (List<Product>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\n\t\t\t\t\treturn daoManager.getProductDao().getWereWgtDimChanged();\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn(DTOFactory.getProductDTOLightList(productList));\t\n\t}\n\n\t@Override\n\tpublic boolean excludeProductsByBrandAndUser(final Long brandId, final Long userId,final Boolean exclude)\n\t\t\t\t   throws ServiceException {\n\t\tboolean result=false;\t\t\n\t\ttry{\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tresult = (Boolean) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\n\t\t\t\t\treturn daoManager.getProductDao().excludeProductsByBrandAndUser(brandId, userId,exclude);\n\t\t\t\t}\n\t\t\t});\n\t\t}catch (DaoException de) {\n\t\t\ttry {\n\t\t\t\tthrow new ServiceException(de);\n\t\t\t} catch (ServiceException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\t@Override\n\tpublic boolean isUserBrandExcluded(final Long brandId, final Long userId)throws ServiceException {\n\t\t\n\t\tBoolean result=false;\t\t\n\t\ttry{\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tresult = (Boolean) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\n\t\t\t\t\treturn daoManager.getProductDao().isUserBrandExcluded(brandId, userId);\n\t\t\t\t}\n\t\t\t});\n\t\t}catch (DaoException de) {\n\t\t\ttry {\n\t\t\t\tthrow new ServiceException(de);\n\t\t\t} catch (ServiceException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\t\n\t@Override\n\tpublic boolean generatProfitByBrand(final Long brandId, final Long userId, final String percentProfit)\n\t\t\tthrows ServiceException {\n\t\tboolean result=false;\t\t\n\t\ttry{\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tresult = (Boolean) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\n\t\t\t\t\treturn daoManager.getProductDao().generatProfitByBrand(brandId, userId, percentProfit);\n\t\t\t\t}\n\t\t\t});\n\t\t}catch (DaoException de) {\n\t\t\ttry {\n\t\t\t\tthrow new ServiceException(de);\n\t\t\t} catch (ServiceException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\t\n\t@Override\n\tpublic boolean generatProfitByCategory(final Long categoryId, final Long userId, final String percentProfit)\n\t\t\tthrows ServiceException {\n\t\tboolean result=false;\t\t\n\t\ttry{\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tresult = (Boolean) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\n\t\t\t\t\treturn daoManager.getProductDao().generatProfitByCategory(categoryId, userId,percentProfit);\n\t\t\t\t}\n\t\t\t});\n\t\t}catch (DaoException de) {\n\t\t\ttry {\n\t\t\t\tthrow new ServiceException(de);\n\t\t\t} catch (ServiceException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\t\n\t@Override\n\tpublic Long nbProductActiveByBrand(final Long brandId, final Long userId)\n\t\t\tthrows ServiceException {\n\t\tLong result=1L;\t\t\n\t\ttry{\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tresult = (Long) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\n\t\t\t\t\treturn daoManager.getProductDao().nbProductActiveByBrand(brandId, userId);\n\t\t\t\t}\n\t\t\t});\n\t\t}catch (DaoException de) {\n\t\t\ttry {\n\t\t\t\tthrow new ServiceException(de);\n\t\t\t} catch (ServiceException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\t\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<ProductDTO> getAllProdcutAnyStatus() throws ServiceException{\n\t\t\n\t\tList <Product> productList = new ArrayList<Product>();\n\t\t\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tproductList = (List <Product>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\n\t\t\t\t\t\t\t\tthrows DaoException {\n\t\t\t\t\t\t\treturn daoManager.getProductDao().getAllProdcutAnyStatus();\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn(DTOFactory.getProductDTOList(productList));\n\t}\n\t\n\t@Override\n\tpublic void transferToUser(final Long from, final Long to) throws ServiceException {\t\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tdaoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\n\t\t\t\t\t\t\tthrows DaoException {\n\t\t\t\t\t\t\n\t\t\t\t\t\tSelect selectFrom = new Select();\n\t\t\t\t\t\tselectFrom.setFrom(from);\n\t\t\t\t\t\tselectFrom.setTo(to);\n\t\t\t\t\t\tselectFrom.setUserId(from);\t\t\t\t\t\n\t\t\t\t\t\tSelect selectToUserProvincePopulation = new Select();\n\t\t\t\t\t\tselectToUserProvincePopulation.setFrom(from);\n\t\t\t\t\t\tselectToUserProvincePopulation.setTo(to);\n\t\t\t\t\t\tselectToUserProvincePopulation.setUserId(to);\t\t\t\t\n\t\t\t\t\t\tList<UserProvincePopulation> userProvincePopulationListFrom = daoManager.getProductDao().getUserProvincePopulationByUserId(selectFrom);\n\t\t\t\t\t\tUserProvincePopulation userProvincePopulationTo = null;\n\t\t\t\t\t\tif (userProvincePopulationListFrom != null && userProvincePopulationListFrom.size() > 0) {\n\t\t\t\t\t\t\tfor (UserProvincePopulation userProvincePopulationFrom : userProvincePopulationListFrom) { \n\t\t\t\t\t\t\t\tif (userProvincePopulationFrom != null) {\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tselectToUserProvincePopulation.setProvinceId(userProvincePopulationFrom.getProvinceId());\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tuserProvincePopulationTo = daoManager.getProductDao().getUserProvincePopulation(selectToUserProvincePopulation);\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tuserProvincePopulationFrom.setUserId(to);\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tif (userProvincePopulationTo != null) {\n\t\t\t\t\t\t\t\t\t\tuserProvincePopulationFrom.setId(userProvincePopulationTo.getId());\n\t\t\t\t\t\t\t\t\t\tdaoManager.getProductDao().updateUserProvincePopulation(userProvincePopulationFrom);\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tdaoManager.getProductDao().insertUserProvincePopulation(userProvincePopulationFrom);\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tuserProvincePopulationListFrom = null;\n\t\t\t\t\t\tuserProvincePopulationTo = null;\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\tSelect selectToShippingTotal = new Select();\n\t\t\t\t\t\tselectToShippingTotal.setFrom(from);\n\t\t\t\t\t\tselectToShippingTotal.setTo(to);\n\t\t\t\t\t\tselectToShippingTotal.setUserId(to);\t\t\t\t\t\t\n\t\t\t\t\t\tList<ShippingTotal> shippingTotalListFrom = daoManager.getProductDao().getShippingTotalListByUserId(selectFrom);\t\t\t\t\t\t\n\t\t\t\t\t\tShippingTotal shippingTotalTo = null;\t\t\t\t\t\t\n\t\t\t\t\t\tif (shippingTotalListFrom != null && shippingTotalListFrom.size() > 0) {\n\t\t\t\t\t\t\tfor (ShippingTotal shippingTotalFrom : shippingTotalListFrom) {\n\t\t\t\t\t\t\t\tif (shippingTotalFrom != null) {\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tselectToShippingTotal.setProductId(shippingTotalFrom.getProductId());\n\t\t\t\t\t\t\t\t\tselectToShippingTotal.setProvinceId(shippingTotalFrom.getProvinceId());\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tshippingTotalTo = daoManager.getProductDao().getShippingTotal(selectToShippingTotal);\n\t\t\t\t\t\t\t\t\tshippingTotalFrom.setUserId(to);\n\t\t\t\t\t\t\t\t\tif (shippingTotalTo != null) {\n\t\t\t\t\t\t\t\t\t\tshippingTotalFrom.setId(shippingTotalTo.getId());\n\t\t\t\t\t\t\t\t\t\tdaoManager.getProductDao().updateShippingTotal(shippingTotalFrom);\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tdaoManager.getProductDao().insertShippingTotal(shippingTotalFrom);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tshippingTotalListFrom = null;\n\t\t\t\t\t\tshippingTotalTo = null;\n\t\t\t\t\t\tSelect selectToUserProductPrice = new Select();\n\t\t\t\t\t\tselectToUserProductPrice.setFrom(from);\n\t\t\t\t\t\tselectToUserProductPrice.setTo(to);\n\t\t\t\t\t\tselectToUserProductPrice.setUserId(to);\t\t\t\n\t\t\t\t\t\tList<UserProductPrice> userProductPriceListFrom = daoManager.getProductDao().getUserProductPriceByUserId(selectFrom);\n\t\t\t\t\t\tUserProductPrice userProductPriceTo = null;\t\t\t\t\t\t\n\t\t\t\t\t\tif (userProductPriceListFrom != null && userProductPriceListFrom.size() > 0) {\n\t\t\t\t\t\t\tfor (UserProductPrice userProductPriceFrom : userProductPriceListFrom) { \n\t\t\t\t\t\t\t\tif (userProductPriceFrom != null) {\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tselectToUserProductPrice.setProductId(userProductPriceFrom.getProductId());\n\t\t\t\t\t\t\t\t\tuserProductPriceTo = daoManager.getProductDao().getUserProductPrice(selectToUserProductPrice);\n\t\t\t\t\t\t\t\t\tuserProductPriceFrom.setUserId(to);\n\t\t\t\t\t\t\t\t\tif (userProductPriceTo != null) {\n\t\t\t\t\t\t\t\t\t\tuserProductPriceFrom.setId(userProductPriceTo.getId());\n\t\t\t\t\t\t\t\t\t\tdaoManager.getProductDao().updateUserProductPrice(userProductPriceFrom);\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tdaoManager.getProductDao().insertUserProductPriceShipping(userProductPriceFrom);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tuserProductPriceListFrom = null;\n\t\t\t\t\t\tuserProductPriceTo = null;\n\t\t\t\t\t\tselectFrom = null;\n\t\t\t\t\t\tselectToUserProvincePopulation = null;\n\t\t\t\t\t\tselectToShippingTotal = null;\n\t\t\t\t\t\tselectToUserProductPrice = null;\t\t\t\t\t\t\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\t\t\n\t}\n/*\n\t@Override\n\tpublic void transferToUserByCreationDate(final Long from, final Long to, final Date updateDate) throws ServiceException {\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tdaoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\n\t\t\t\t\t\t\tthrows DaoException {\n\t\t\t\t\t\t\n\t\t\t\t\t\tSelect selectFrom = new Select();\n\t\t\t\t\t\tselectFrom.setFrom(from);\n\t\t\t\t\t\tselectFrom.setTo(to);\n\t\t\t\t\t\tselectFrom.setUserId(from);\n\t\t\t\t\t\tselectFrom.setUpdateDate(updateDate);\n\t\t\t\t\t\t\n\t\t\t\t\t\tSelect selectToShippingTotal = new Select();\n\t\t\t\t\t\tselectToShippingTotal.setFrom(from);\n\t\t\t\t\t\tselectToShippingTotal.setTo(to);\n\t\t\t\t\t\tselectToShippingTotal.setUserId(to);\n\t\t\t\t\t\tList<ShippingTotal> shippingTotalListFrom = daoManager.getProductDao().getShippingTotalListByUserId(selectFrom);\t\t\t\t\t\n\t\t\t\t\t\tShippingTotal shippingTotalTo = null;\t\t\t\t\t\t\n\t\t\t\t\t\tif (shippingTotalListFrom != null && shippingTotalListFrom.size() > 0) {\n\t\t\t\t\t\t\tfor (ShippingTotal shippingTotalFrom : shippingTotalListFrom) {\n\t\t\t\t\t\t\t\tif (shippingTotalFrom != null) {\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tselectToShippingTotal.setProductId(shippingTotalFrom.getProductId());\n\t\t\t\t\t\t\t\t\tselectToShippingTotal.setProvinceId(shippingTotalFrom.getProvinceId());\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tshippingTotalTo = daoManager.getProductDao().getShippingTotal(selectToShippingTotal);\n\t\t\t\t\t\t\t\t\tshippingTotalFrom.setUserId(to);\n\t\t\t\t\t\t\t\t\tif (shippingTotalTo != null) {\n\t\t\t\t\t\t\t\t\t\tshippingTotalFrom.setId(shippingTotalTo.getId());\n\t\t\t\t\t\t\t\t\t\tdaoManager.getProductDao().updateShippingTotal(shippingTotalFrom);\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tdaoManager.getProductDao().insertShippingTotal(shippingTotalFrom);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tshippingTotalListFrom = null;\n\t\t\t\t\t\tshippingTotalTo = null;\n\t\t\t\t\t\tSelect selectToUserProductPrice = new Select();\n\t\t\t\t\t\tselectToUserProductPrice.setFrom(from);\n\t\t\t\t\t\tselectToUserProductPrice.setTo(to);\n\t\t\t\t\t\tselectToUserProductPrice.setUserId(to);\n\t\t\t\t\t\tList<UserProductPrice> userProductPriceListFrom = daoManager.getProductDao().getUserProductPriceByUserId(selectFrom);\n\t\t\t\t\t\tUserProductPrice userProductPriceTo = null;\t\t\t\t\t\t\n\t\t\t\t\t\tif (userProductPriceListFrom != null && userProductPriceListFrom.size() > 0) {\n\t\t\t\t\t\t\tfor (UserProductPrice userProductPriceFrom : userProductPriceListFrom) { \n\t\t\t\t\t\t\t\tif (userProductPriceFrom != null) {\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tselectToUserProductPrice.setProductId(userProductPriceFrom.getProductId());\n\t\t\t\t\t\t\t\t\tuserProductPriceTo = daoManager.getProductDao().getUserProductPrice(selectToUserProductPrice);\n\t\t\t\t\t\t\t\t\tuserProductPriceFrom.setUserId(to);\n\t\t\t\t\t\t\t\t\tif (userProductPriceTo != null) {\n\t\t\t\t\t\t\t\t\t\tuserProductPriceFrom.setId(userProductPriceTo.getId());\n\t\t\t\t\t\t\t\t\t\tdaoManager.getProductDao().updateUserProductPrice(userProductPriceFrom);\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tdaoManager.getProductDao().insertUserProductPriceShipping(userProductPriceFrom);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tuserProductPriceListFrom = null;\n\t\t\t\t\t\tuserProductPriceTo = null;\n\t\t\t\t\t\tselectFrom = null;\n\t\t\t\t\t\tselectToShippingTotal = null;\n\t\t\t\t\t\tselectToUserProductPrice = null;\t\t\t\t\t\t\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t}\n\t\n\t*/\n\n\t@Override\n\tpublic void transferToUserByCreationDate(final Long from, final Long to,final Long managerId,final Date updateDate) throws ServiceException {\n\n\t\tboolean result=false;\n\t\ttry{\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tresult = (Boolean) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\n\t\t\t\t\treturn daoManager.getProductDao().transferToUserByCreationDate(from,to,managerId,updateDate);\n\t\t\t\t}\n\t\t\t});\n\t\t}catch (DaoException de) {\n\t\t\ttry {\n\t\t\t\tthrow new ServiceException(de);\n\t\t\t} catch (ServiceException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\n\t}\n\t\n\n\t@Override\n\tpublic void transferSQLtheUserToNewTemplate(final Long from, final Long to) throws ServiceException {\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tdaoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\n\t\t\t\t\t\t\tthrows DaoException {\n\t\t\t\t\t\tSelect select = new Select();\n\t\t\t\t\t\tselect.setFrom(from);\n\t\t\t\t\t\tselect.setTo(to);\n\t\t\t\t\t\tdaoManager.getProductDao().transferUserOnProfile(select);\n\t\t\t\t\t\tdaoManager.getProductDao().transferUserOnUserProvincePopulation(select);\n\t\t\t\t\t\tdaoManager.getProductDao().transferUserOnShippingTotal(select);\n\t\t\t\t\t\tdaoManager.getProductDao().transferUserOnUserProductPrice(select);\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t}\n\n\n\t@Override\n\tpublic Long isGroupProductID(final Long productId) throws ServiceException {\n\t\tLong count= 0L; \n\t\ttry{\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tcount = (Long) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\n\t\t\t\t\treturn daoManager.getProductDao().isGroupProductID(productId);\n\t\t\t\t}\n\t\t\t});\n\t\t}catch (DaoException de) {\n\t\t\ttry {\n\t\t\t\tthrow new ServiceException(de);\n\t\t\t} catch (ServiceException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\t\t\n\t\n\t/**----------------------------------------------------------\n\t *CREATE XLS FILE FROM THE LIST PRODUCT CLASSIFICATION*\n\t  -----------------------------------------------------------*/\n\t@Override\n\tpublic void generateAdminXLS(List<ProductDTO> ProductListDTO,String productAdminDataFolder){\n\t\tfinal String sheetName = ""Sheet1"";\n\t\tfinal int ROW_TO_BEGIN=1;\n\t\t//COLUMNS NUMBER\n\t\tfinal int COL_PRODUCT_ID=1;\n\t\tfinal int COL_LS_PRODUCT_ID=2;\n\t\tfinal int COL_CATEGORY_NAME=3;\n\t\tfinal int COL_BRAND_NAME=4;\n\t\tfinal int COL_MSRP=5;\n\t\tfinal int COL_OUT_COST=6;\n\t\tfinal int COL_PRICE=7;\n\t\tfinal int COL_PROFIT=8;\n\t\tfinal int COL_DISCOUNT=9;\n\t\tfinal int COL_QT_3MONTHS=10;\n\t\tfinal int COL_CLASSIFICATION=11;\n\t\tfinal int COL_TITLE=12;\n\t\t//COLUMNS Data\n\t\tLong PRODUCT_ID=null;\n\t\tString LS_PRODUCT_ID;\n\t\tString CATEGORY_NAME;\n\t\tString BRAND_NAME;\n\t\tString MSRP;\n\t\tString OUT_COST;\n\t\tString PRICE;\n\t\tDouble PROFIT;\n\t\tDouble DISCOUNT;\n\t\tDouble QT_3MONTHS;\n\t\tDouble CLASSIFICATION;\n\t\tString TITLE="""";\n\t\tint row = 0;\n\t\ttry {\n\t\t\tFile OldProductClassificat=new File(productAdminDataFolder+""productClassificat.xls"");\n\t\t\tif(OldProductClassificat.exists())OldProductClassificat.delete();\n\t\t\tWorkbook existingWorkbook = Workbook.getWorkbook(new File(productAdminDataFolder+""productClassificatTemplate.xls""));\n\t\t\tWritableWorkbook workbookCopy = Workbook.createWorkbook(new File(productAdminDataFolder+""productClassificat.xls""), existingWorkbook);\n\t\t\tWritableSheet sheetToEdit = workbookCopy.getSheet(sheetName);\n\n\t\t\tint heightInPoints = 27*27;\n\n\t\t\t// Create cell font and format\n\t\t\tWritableFont cellFont = new WritableFont(WritableFont.TIMES, 12);\n\t\t\tcellFont.setColour(Colour.BLACK);\n\n\t\t\tWritableCellFormat cellFormatNormal = new WritableCellFormat(cellFont);\n\t\t\t//cellFormatOrange.setBackground(Colour.ORANGE);\n\t\t\tcellFormatNormal.setBackground(Colour.LIGHT_TURQUOISE);\n\t\t\tcellFormatNormal.setVerticalAlignment(VerticalAlignment.CENTRE);\n\t\t\tcellFormatNormal.setAlignment(Alignment.CENTRE);\n\t\t\tcellFormatNormal.setWrap(true);\n\t\t\tcellFormatNormal.setBorder(Border.ALL, BorderLineStyle.THIN);\n\n\t\t\t//WritableFont cellFont = new WritableFont(WritableFont.TIMES, 12);\n\t\t\tcellFont.setColour(Colour.BLACK);\n\t\t\tWritableCellFormat cellFormatWhite = new WritableCellFormat(cellFont);\n\t\t\tcellFormatWhite.setBackground(Colour.WHITE);\n\t\t\tcellFormatWhite.setVerticalAlignment(VerticalAlignment.CENTRE);\n\t\t\tcellFormatWhite.setAlignment(Alignment.CENTRE);\n\t\t\tcellFormatWhite.setWrap(true);\n\t\t\tcellFormatWhite.setBorder(Border.ALL, BorderLineStyle.THIN);\n\t\t\tWritableCellFormat cellFormat=null;\n\t\t\t\n\t\t\t//CellS\n\t\t\tWritableCell cellPRODUCT_ID=null;\n\t\t\tWritableCell cellLS_PRODUCT_ID=null;\n\t\t\tWritableCell cellCATEGORY_NAME=null;\n\t\t\tWritableCell cellBRAND_NAME=null;\n\t\t\tWritableCell cellMSRP=null;\n\t\t\tWritableCell cellOUT_COST=null;\n\t\t\tWritableCell cellPRICE=null;\n\t\t\tWritableCell cellPROFIT=null;\n\t\t\tWritableCell cellDISCOUNT=null;\n\t\t\tWritableCell cellCLASSIFICATION=null;\n\t\t\tWritableCell cellTITLE=null;\n\t\t\tWritableCell cellQT_3MONTHS=null;\n\t\t\t\n\t\t\t//LABELS\n\t\t\tLabel labelPRODUCT_ID=null;\n\t\t\tLabel labelLS_PRODUCT_ID=null;\n\t\t\tLabel labelCATEGORY_NAME=null;\n\t\t\tLabel labelBRAND_NAME=null;\n\t\t\tLabel labelMSRP=null;\n\t\t\tLabel labelOUT_COST=null;\n\t\t\tLabel labelPRICE=null;\n\t\t\tLabel labelPROFIT=null;\n\t\t\tLabel labelDISCOUNT=null;\n\t\t\tLabel labelQT_3MONTHS=null;\n\t\t\tLabel labelCLASSIFICATION=null;\n\t\t\tLabel labelTITLE=null;\n\n\t\t\t//START FROM ROW_TO_BEGIN\n\t\t\trow = ROW_TO_BEGIN;\n\t\t\tint orderIndex=0;\n\t\t\tint pair=0;\n\t\t\tfor (ProductDTO productDTO : ProductListDTO) {\n\n\t\t\t\torderIndex++;\n\t\t\t\tpair=orderIndex%2;\n\t\t\t\tswitch (pair) {\n\t\t\t\tcase 0:\n\t\t\t\t\tcellFormat=cellFormatWhite;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 1:\n\t\t\t\t\tcellFormat=cellFormatNormal;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tPRODUCT_ID=null;\n\t\t\t\tLS_PRODUCT_ID="""";\n\t\t\t\tCATEGORY_NAME="""";\n\t\t\t\tBRAND_NAME="""";\n\t\t\t\tMSRP="""";\n\t\t\t\tOUT_COST="""";\n\t\t\t\tPRICE="""";\n\t\t\t\tPROFIT=0D;\n\t\t\t\tDISCOUNT=0D;\n\t\t\t\tQT_3MONTHS=0D;\n\t\t\t\tCLASSIFICATION=0D;\n\t\t\t\tTITLE="""";\n\n\t\t\t\t//1:  COL_PRODUCT_ID\n\t\t\t\tPRODUCT_ID = productDTO.getId();\n\t\t\t\tlabelPRODUCT_ID = new Label(COL_PRODUCT_ID-1, row, PRODUCT_ID.toString(),cellFormat);\n\t\t\t\tcellPRODUCT_ID = (WritableCell) labelPRODUCT_ID;\n\t\t\t\tsheetToEdit.addCell(cellPRODUCT_ID);\n\t\t\t\t\n\t\t\t\t//2:  COL_LS_PRODUCT_ID\n\t\t\t\tif (productDTO.getLoyaltyProductId() != null)LS_PRODUCT_ID = productDTO.getLoyaltyProductId();\n\t\t\t\tlabelLS_PRODUCT_ID = new Label(COL_LS_PRODUCT_ID-1, row, LS_PRODUCT_ID,cellFormat);\n\t\t\t\tcellLS_PRODUCT_ID = (WritableCell) labelLS_PRODUCT_ID;\n\t\t\t\tsheetToEdit.addCell(cellLS_PRODUCT_ID);\n\t\t\t\t\n\t\t\t\t//3:  COL_CATEGORY_NAME\n\t\t\t\tif (productDTO.getCategory()!=null && productDTO.getCategory().getName() != null)CATEGORY_NAME = productDTO.getCategory().getName();\n\t\t\t\tlabelCATEGORY_NAME = new Label(COL_CATEGORY_NAME-1, row, CATEGORY_NAME,cellFormat);\n\t\t\t\tcellCATEGORY_NAME = (WritableCell) labelCATEGORY_NAME;\n\t\t\t\tsheetToEdit.addCell(cellCATEGORY_NAME);\n\n\t\t\t\t//4:  COL_BRAND_NAME\n\t\t\t\tif (productDTO.getBrand()!=null && productDTO.getBrand().getName() != null)BRAND_NAME = productDTO.getBrand().getName();\n\t\t\t\tlabelBRAND_NAME = new Label(COL_BRAND_NAME-1, row, BRAND_NAME,cellFormat);\n\t\t\t\tcellBRAND_NAME = (WritableCell) labelBRAND_NAME;\n\t\t\t\tsheetToEdit.addCell(cellBRAND_NAME);\n\n\t\t\t\t//5:  COL_MSRP\n\t\t\t\tif (productDTO.getMsrp() != null)MSRP = productDTO.getMsrp();\n\t\t\t\tlabelMSRP= new Label(COL_MSRP-1, row, MSRP,cellFormat);\n\t\t\t\tcellMSRP = (WritableCell) labelMSRP;\n\t\t\t\tsheetToEdit.addCell(cellMSRP);\n\n\t\t\t\t//6:  COL_OUT_COST\n\t\t\t\tif (productDTO.getCost() != null)OUT_COST = productDTO.getCost();\n\t\t\t\tlabelOUT_COST= new Label(COL_OUT_COST-1, row, OUT_COST,cellFormat);\n\t\t\t\tcellOUT_COST = (WritableCell) labelOUT_COST;\n\t\t\t\tsheetToEdit.addCell(cellOUT_COST);\n\t\t\t\t\n\t\t\t\t//7:  COL_PRICE\n\t\t\t\tif (productDTO.getPriceProduct() != null)PRICE = productDTO.getPriceProduct();\n\t\t\t\tlabelPRICE= new Label(COL_PRICE-1, row, PRICE,cellFormat);\n\t\t\t\tcellPRICE = (WritableCell) labelPRICE;\n\t\t\t\tsheetToEdit.addCell(cellPRICE);\n\t\t\t\t\n\t\t\t\t//8:  COL_PROFIT\n\t\t\t\tif (productDTO.getProfit() != null)PROFIT = productDTO.getProfit();\n\t\t\t\tlabelPROFIT= new Label(COL_PROFIT-1, row, PROFIT.toString()+""%"",cellFormat);\n\t\t\t\tcellPROFIT = (WritableCell) labelPROFIT;\n\t\t\t\tsheetToEdit.addCell(cellPROFIT);\n\n\t\t\t\t//9:  COL_DISCOUNT\n\t\t\t\tif (productDTO.getDiscount() != null)DISCOUNT = productDTO.getDiscount();\n\t\t\t\tlabelDISCOUNT= new Label(COL_DISCOUNT-1, row, DISCOUNT.toString(),cellFormat);\n\t\t\t\tcellDISCOUNT = (WritableCell) labelDISCOUNT;\n\t\t\t\tsheetToEdit.addCell(cellDISCOUNT);\n\t\t\t\t\n\t\t\t\t//10:COL_QT_3MONTHS\n\t\t\t\tif (productDTO.getQtSold() != null)QT_3MONTHS = (double) Math.round(productDTO.getQtSold() * 100) / 100;;\n\t\t\t\tlabelQT_3MONTHS= new Label(COL_QT_3MONTHS-1, row, QT_3MONTHS.toString(),cellFormat);\n\t\t\t\tcellQT_3MONTHS = (WritableCell) labelQT_3MONTHS;\n\t\t\t\tsheetToEdit.addCell(cellQT_3MONTHS);\n\t\t\t\t\n\t\t\t\t//11:  COL_CLASSIFICATION\n\t\t\t\tif (productDTO.getClassification() != null)CLASSIFICATION = (double) Math.round(productDTO.getClassification() * 100) / 100;;\n\t\t\t\tlabelCLASSIFICATION= new Label(COL_CLASSIFICATION-1, row, CLASSIFICATION.toString(),cellFormat);\n\t\t\t\tcellCLASSIFICATION = (WritableCell) labelCLASSIFICATION;\n\t\t\t\tsheetToEdit.addCell(cellCLASSIFICATION);\n\t\t\t\t\n\t\t\t\t//12: COL_TITLE\n\t\t\t\tif (productDTO.getDescriptiProduct()!= null)TITLE = productDTO.getDescriptiProduct();\n\t\t\t\tlabelTITLE= new Label(COL_TITLE-1, row, TITLE,cellFormat);\n\t\t\t\tcellTITLE = (WritableCell) labelTITLE;\n\t\t\t\tsheetToEdit.addCell(cellTITLE);\n\t\t\t\t//change height row 32px\n\t\t\t\tsheetToEdit.setRowView(row,heightInPoints);\n\t\t\t\t++row;\n\t\t\t}\n\t\t\tworkbookCopy.write();\n\t\t\tworkbookCopy.close();\n\t\t\texistingWorkbook.close();\n\n\t\t} catch (Exception x) {\n\t\t\tx.printStackTrace();\n\t\t}\n\t}\n\t\n\t\n\t/**----------------------------------------------------------\n\t * getBoxByProductId*\n\t  -----------------------------------------------------------*/\n\t@Override\n\tpublic BoxDTO getBoxByProductId(final Long productId)\n\t\t\tthrows ServiceException {\n\t\tBox boxResult = new Box();\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tboxResult = (Box) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\n\t\t\t\t\t\tthrows DaoException {\n\t\t\t\t\tBox box = new Box();\n\t\t\t\t\tbox = daoManager.getProductDao().getBoxByProductId(productId);\n\t\t\t\t\treturn box;\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn (DTOFactory.getBoxDTO(boxResult));\n\t}\n\t\n\n\t\n\t/**----------------------------------------------------------\n\t * insertBoxAndProductBox*\n\t  -----------------------------------------------------------*/\t\n\t\t@Override\n\tpublic Long insertBoxAndProductBox(final BoxDTO boxDTO)\n\t\t\tthrows ServiceException {\n\t\tBox boxResult = new Box();\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tboxResult = (Box) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\n\t\t\t\t\t\tthrows DaoException {\n\n\t\t\t\t\tBox box = new Box();\n\t\t\t\t\tbox.setProductId(boxDTO.getProductId());\n\t\t\t\t\tbox.setLength(boxDTO.getLength());\n\t\t\t\t\tbox.setWidth(boxDTO.getWidth());\n\t\t\t\t\tbox.setHeight(boxDTO.getHeight());\n\t\t\t\t\tbox.setTotalWeight(boxDTO.getTotalWeight());\n\t\t\t\t\tbox.setStatusId(boxDTO.getStatusId());\n\n\t\t\t\t\tdaoManager.getProductDao().insertBoxAndProductBox(box);\n\n\t\t\t\t\treturn box;\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn (boxResult.getId());\n\n\t\t} catch (DaoException e) {\n\t\t\tthrow (new ServiceException(e));\n\t\t}\n\t}\n\t\n\t\t\n\t/**----------------------------------------------------------\n\t *updateProductBox*\n\t  -----------------------------------------------------------*/\t\n\t\t@Override\n\tpublic void updateProductBox(final BoxDTO boxDTO)\n\t\t\tthrows ServiceException {\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tdaoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\n\t\t\t\t\t\tthrows DaoException {\n\n\t\t\t\t\tBox box = new Box();\n\t\t\t\t\tbox.setId(boxDTO.getId());\n\t\t\t\t\tbox.setProductId(boxDTO.getProductId());\n\t\t\t\t\tbox.setLength(boxDTO.getLength());\n\t\t\t\t\tbox.setWidth(boxDTO.getWidth());\n\t\t\t\t\tbox.setHeight(boxDTO.getHeight());\n\t\t\t\t\tbox.setTotalWeight(boxDTO.getTotalWeight());\n\t\t\t\t\tbox.setCreationDate(boxDTO.getCreationDate());\n\t\t\t\t\tbox.setStatusId(boxDTO.getStatusId());\n\n\t\t\t\t\tdaoManager.getProductDao().updateProductBox(box);\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t}\n\t\t\t\n\t/**----------------------------------------------------------\n\t *updateProductBoxIfCpNotVerified*\n\t  -----------------------------------------------------------*/\t\n\t@Override\n\tpublic void updateProductBoxIfCpNotVerified(final BoxDTO boxDTO)\n\t\t\tthrows ServiceException {\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tdaoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\n\t\t\t\t\t\tthrows DaoException {\n\n\t\t\t\t\tBox box = new Box();\n\t\t\t\t\tbox.setId(boxDTO.getId());\n\t\t\t\t\tbox.setProductId(boxDTO.getProductId());\n\t\t\t\t\tbox.setLength(boxDTO.getLength());\n\t\t\t\t\tbox.setWidth(boxDTO.getWidth());\n\t\t\t\t\tbox.setHeight(boxDTO.getHeight());\n\t\t\t\t\tbox.setTotalWeight(boxDTO.getTotalWeight());\n\t\t\t\t\tbox.setCreationDate(boxDTO.getCreationDate());\n\t\t\t\t\tbox.setStatusId(boxDTO.getStatusId());\n\n\t\t\t\t\tdaoManager.getProductDao().updateProductBoxIfCpNotVerified(box);\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t}\n\t\n\t\n\t/**----------------------------------------------------------\n\t *UPDATE TABLE STOCK IN DATABASES FROM XLS FILE*\n\t  -----------------------------------------------------------*/\n\t@Override\n\tpublic List<ProductDTO> listStockFromXLS(String userAdminLogin,String destFileStockXLS)throws Exception{\n\t\tString errorReport="""";\n\t\t//variable indicating the numbers of columns in the XLS file\n\t\tint ROW_TO_START = 1;\n\t\tfinal int COL_LS_PRODUCT_ID=1;\n\t\tfinal int COL_STOCK=2;\n\n\t\tString  strSTOCK="""";\n\n\t\t//Values of cells\n\t\tString  LS_PRODUCT_ID="""";\n\t\tDouble STOCK = null;\n\n\t\t//Cells\n\t\tCell cellLS_PRODUCT_ID= null;\n\t\tCell cellSTOCK= null;\n\t\tWorkbook existingWorkbook = Workbook.getWorkbook(new File(destFileStockXLS+""stock.xls""));\n\t\tSheet sheetToRead=existingWorkbook.getSheet(0);\n\t\tint ROW_MAX = sheetToRead.getRows();\n\t\tList<ProductDTO> listStock = new ArrayList<ProductDTO>() ;\n\t\tProductDTO productDTO;\n\t\tfor(int row=ROW_TO_START; row< ROW_MAX;row++) {\n\n\t\t\t//--------------- 1: LS_PRODUCT_ID\n\t\t\tcellLS_PRODUCT_ID = sheetToRead.getCell(COL_LS_PRODUCT_ID-1, row);\t\t\t\n\t\t\tif(cellLS_PRODUCT_ID!=null)LS_PRODUCT_ID = cellLS_PRODUCT_ID.getContents();\n\t\t\tif(LS_PRODUCT_ID==null || LS_PRODUCT_ID.equals("""")){\n\t\t\t\terrorReport+="" ""+(row+1)+"" ,LS_PRODUCT_ID:""+LS_PRODUCT_ID+"" ,|---->dosen't exist \\n"";\n\t\t\t}else{\n\t\t\t\tint index=LS_PRODUCT_ID.indexOf(""/"");\n\t\t\t\tif(index>0)LS_PRODUCT_ID=LS_PRODUCT_ID.substring(0, index);\n\n\t\t\t}\n\t\t\t//--------------- 2:STOCK\n\t\t\tcellSTOCK = sheetToRead.getCell(COL_STOCK-1, row);\t\t\t\n\t\t\tif(cellSTOCK!=null){\n\t\t\t\tstrSTOCK = cellSTOCK.getContents();\n\t\t\t\tstrSTOCK=strSTOCK.replaceAll("" "", """");\n\t\t\t\tif(strSTOCK!=null && !strSTOCK.equals("""")){\n\t\t\t\t\tint index=strSTOCK.indexOf("","");\n\t\t\t\t\tif(index>=0){\n\t\t\t\t\t\tString strSTOCK1=strSTOCK.substring(0, index);\n\t\t\t\t\t\tString strSTOCK2= strSTOCK.substring(index+1, strSTOCK.length());\n\t\t\t\t\t\tstrSTOCK=strSTOCK1+"".""+strSTOCK2;\n\t\t\t\t\t}\n\t\t\t\t}else errorReport+="" ""+(row+1)+"" ,STOCK:""+strSTOCK+"" ,|---->is null \\n"";\n\t\t\t\tSTOCK=null;\n\t\t\t\ttry {\n\t\t\t\t\tSTOCK = Double.parseDouble(strSTOCK);\n\t\t\t\t}\n\t\t\t\tcatch (Exception pe) {\n\t\t\t\t\tSTOCK=null;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif((LS_PRODUCT_ID==null ||LS_PRODUCT_ID.equals("""")&&(strSTOCK==null ||strSTOCK.equals("""")))){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif(LS_PRODUCT_ID!=null){\n\t\t\t\t// Clean LS_PRODUCT_ID\n\t\t\t\tLS_PRODUCT_ID = LS_PRODUCT_ID.replaceAll("" SELECT "",""""); \n\t\t\t\tLS_PRODUCT_ID = LS_PRODUCT_ID.replaceAll(""\\\\s"","""");\n\t\t\t\tLS_PRODUCT_ID=LS_PRODUCT_ID.replaceAll(""\\'"","""");\n\t\t\t\tLS_PRODUCT_ID=LS_PRODUCT_ID.replaceAll(""\\"""","""");\n\t\t\t\tLS_PRODUCT_ID=LS_PRODUCT_ID.replaceAll("";"","""");\n\t\t\t\tLS_PRODUCT_ID=LS_PRODUCT_ID.replaceAll("","","""");\n\t\t\t}\n\t\t\tproductDTO = new ProductDTO();\n\t\t\tproductDTO.setLoyaltyProductId(LS_PRODUCT_ID);\n\t\t\tproductDTO.setStock(STOCK);\n\t\t\tlistStock.add(productDTO);\n\n\t\t}\n\t\treturn listStock;\n\n\t}\n\n\t// Update Stock\n\t@Override\n\tpublic boolean updateStock(final List<ProductDTO> listStock) throws ServiceException {\n\t\tboolean result=false;\n\t\tfinal List<Product>listProduct=DTOFactory.getProductListFromProductListDTO(listStock);\n\t\ttry{\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tresult = (Boolean) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\n\t\t\t\t\treturn daoManager.getProductDao().updateStock(listProduct);\n\t\t\t\t}\n\t\t\t});\n\t\t}catch (DaoException de) {\n\t\t\ttry {\n\t\t\t\tthrow new ServiceException(de);\n\t\t\t} catch (ServiceException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\t// calculate Shipping Rate using shipping_city\t\n\t@Override\n\tpublic boolean calculateShippingRate(final Long userId,final Long productId) throws ServiceException {\n\t\tboolean result=false;\n\t\ttry{\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tresult = (Boolean) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\n\t\t\t\t\treturn daoManager.getProductDao().calculateShippingRate(userId,productId) ; \n\t\t\t\t}\n\t\t\t});\n\t\t}catch (DaoException de) {\n\t\t\ttry {\n\t\t\t\tthrow new ServiceException(de);\n\t\t\t} catch (ServiceException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\t\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<ProductDTO> getProductNotFound(List<ProductDTO>listProductDTO) throws ServiceException{\n\t\tfinal List <Product> productList = DTOFactory.getProductListFromProductListDTO(listProductDTO);\n\t\tList <Product> productListResult;\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tproductListResult = (List <Product>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\n\t\t\t\t\t\t\t\tthrows DaoException {\n\t\t\t\t\t\t\treturn daoManager.getProductDao().getProductNotFound(productList);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn(DTOFactory.getProductListDTOFromProductList(productListResult));\n\t}\n\t\n\n\t/**----------------------------------------------------------\n\t *UPDATE STOCK IN TABLE STOCK BY LSPRODUCT*\n\t  -----------------------------------------------------------*/\n\t@Override\n\tpublic boolean updateStockByLsProductId(final ProductDTO productDTO){\n\t\tboolean result=false;\n\t\tfinal Product product=new Product();\n\t\tproduct.setLoyaltySourceProductId(productDTO.getLoyaltyProductId());\n\t\tproduct.setStock(productDTO.getStock());\n\t\ttry{\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tresult = (Boolean) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\n\t\t\t\t\treturn daoManager.getProductDao().updateStockByLsProductId(product);\n\t\t\t\t}\n\t\t\t});\n\t\t}catch (DaoException de) {\n\t\t\ttry { \n\t\t\t\tthrow new ServiceException(de);\n\t\t\t} catch (ServiceException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\treturn result;\t\n\t}\n\n\t/**----------------------------------------------------------\n\t * getCurrencySymbols*\n\t  -----------------------------------------------------------*/\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<CurrencyDTO> getCurrencySymbols() throws ServiceException{\n\t\tList <Currency> currencyList = new ArrayList<Currency>();\n\t\t\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tcurrencyList = (List <Currency>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\n\t\t\t\t\t\t\t\tthrows DaoException {\n\t\t\t\t\t\t\treturn daoManager.getProductDao().getCurrencySymbols();\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn(DTOFactory.getCurrencySymbolsDTO(currencyList));\n\t}\n\t\n\t/**----------------------------------------------------------\n\t * getCurrenciesButNotCAD*\n\t  -----------------------------------------------------------*/\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<CurrencyDTO> getCurrenciesButNotCAD() throws ServiceException{\n\t\tList <Currency> currencyList = new ArrayList<Currency>();\n\t\t\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tcurrencyList = (List <Currency>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\n\t\t\t\t\t\t\t\tthrows DaoException {\n\t\t\t\t\t\t\treturn daoManager.getProductDao().getCurrenciesButNotCAD();\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn(DTOFactory.getCurrencySymbolsDTO(currencyList));\n\t}\n\t\n\t/**----------------------------------------------------------\n\t * getCurrencyBySymbol*\n\t  -----------------------------------------------------------*/\n\t@Override\n\tpublic CurrencyDTO getCurrencyBySymbol(final CurrencyDTO currencyDTO) throws ServiceException {\n\t\tCurrency currencyResult = new Currency();\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tcurrencyResult = (Currency) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\n\t\t\t\t\t\tthrows DaoException {\n\t\t\t\t\tCurrency currency = new Currency();\n\t\t\t\t\tif(currencyDTO!=null && currencyDTO.getSymbol()!=null)\n\t\t\t\t\t\tcurrency.setSymbol(currencyDTO.getSymbol());\n\t\t\t\t\tcurrency = daoManager.getProductDao().getCurrencyBySymbol(currency);\n\t\t\t\t\treturn currency;\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn (DTOFactory.getCurrencyDTOBySymbol(currencyResult));\n\t}\n\n\t/**----------------------------------------------------------\n\t *updateCurrency*\n\t  -----------------------------------------------------------*/\t\n\t@Override\n\tpublic void updateCurrency(final CurrencyDTO currencyDTO) throws ServiceException {\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tdaoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\n\t\t\t\t\t\tthrows DaoException {\n\n\t\t\t\t\tCurrency currency = new Currency();\n\t\t\t\t\tcurrency.setId(currencyDTO.getId());\n\t\t\t\t\tcurrency.setRate(currencyDTO.getRate());\n\t\t\t\t\tcurrency.setSymbol(currencyDTO.getSymbol());\n\t\t\t\t\t//currency.setCreationDate(currencyDTO.getCreationDate());\n\t\t\t\t\t\n\t\t\t\t\tdaoManager.getProductDao().updateCurrency(currency);\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t}\n\t\n\t\n\t/**----------------------------------------------------------\n\t * calculateShippingRateForAllProducts*\n\t  -----------------------------------------------------------*/\n\t@Override\n\tpublic boolean calculateShippingRateForAllProducts(final Long userId) throws ServiceException{\n\t\tboolean result=false;\n\t\ttry{\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tresult = (Boolean) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\n\t\t\t\t\treturn daoManager.getProductDao().calculateShippingRateForAllProducts(userId) ; \n\t\t\t\t}\n\t\t\t});\n\t\t}catch (DaoException de) {\n\t\t\ttry {\n\t\t\t\tthrow new ServiceException(de);\n\t\t\t} catch (ServiceException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\t\n\t\n\t\n\t/**----------------------------------------------------------\n\t * isCurrencyExists*\n\t  -----------------------------------------------------------*/\n\t@Override\n\tpublic CurrencyDTO isCurrencyExists(final CurrencyDTO currencyDTO) throws ServiceException {\n\t\tCurrency currencyResult = new Currency();\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tcurrencyResult = (Currency) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\n\t\t\t\t\t\tthrows DaoException {\n\t\t\t\t\tCurrency currency = new Currency();\n\t\t\t\t\tif(currencyDTO!=null && currencyDTO.getSymbol()!=null)\n\t\t\t\t\t\tcurrency.setSymbol(currencyDTO.getSymbol());\n\t\t\t\t\tcurrency = daoManager.getProductDao().getCurrencyBySymbol(currency);\n\t\t\t\t\treturn currency;\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn (DTOFactory.getCurrencyDTOBySymbol(currencyResult));\n\t}\n\n\t/**----------------------------------------------------------\n\t * insertNewCurrency*\n\t  -----------------------------------------------------------*/\n\t@Override \n\tpublic Long insertNewCurrency(final CurrencyDTO currencyDTO) throws ServiceException {\n\t\tCurrency currencyResult = new Currency();\n\t\t//Long currencyId = 0L;\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tcurrencyResult = (Currency) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) throws DaoException {\t\t\t\t\t\n\t\t\t\t\tCurrency currency = new Currency();\n\t\t\t\t\tif(currencyDTO!=null && currencyDTO.getSymbol()!=null)\n\t\t\t\t\t\tcurrency.setSymbol(currencyDTO.getSymbol());\n\t\t\t\t\tif(currencyDTO!=null && currencyDTO.getRate()!=null)\n\t\t\t\t\t\tcurrency.setRate(currencyDTO.getRate());\n\t\t\t\t\t\n\t\t\t\t\tdaoManager.getProductDao().insertNewCurrency(currency);\t\t\t\t\t\n\t\t\t\t\treturn currency;\n\t\t\t\t}\n\t\t\t});\n\t\t\t//return currencyResult.getId();\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn currencyResult.getId();\n\t}\n\t\n\n\t/**----------------------------------------------------------\n\t \t\t\t\tgetSaleActiveByUserId\n\t  -----------------------------------------------------------*/\n\t@SuppressWarnings(""unchecked"")\n\t@Override \n\tpublic List<ProductDTO>getSaleActiveByUserId(final Long userId) throws ServiceException{\n\t\t\n\t\tList <Product> productList = new ArrayList<Product>();\n\t\t\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tproductList = (List <Product>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\n\t\t\t\t\t\t\t\tthrows DaoException {\n\t\t\t\t\t\t\treturn daoManager.getProductDao().getSaleActiveByUserId(userId);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn(DTOFactory.getProductDTOList(productList));\n\t}\n\t\n\t\n\n\t/**----------------------------------------------------------\n\t \t\t\t\tgetSaleActiveByUserId\n\t  -----------------------------------------------------------*/\n\t@SuppressWarnings(""unchecked"")\n\t@Override \n\tpublic ProductDTO getSaleActiveByProductIdAndUserId(final Long productId,final Long userId) throws ServiceException{\n\t\t\n\t\tProduct result;\n\t\t\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tresult = (Product) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\n\t\t\t\t\t\t\t\tthrows DaoException {\n\t\t\t\t\t\t\treturn daoManager.getProductDao().getSaleActiveByProductIdAndUserId(productId,userId);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn(DTOFactory.getProductDTO(result));\n\t}\n\t\n\t\n\n\t/**----------------------------------------------------------\n\t \t\t\t\tgetSaleActiveByUserId\n\t  -----------------------------------------------------------*/\n\t@SuppressWarnings(""unchecked"")\n\t@Override \n\tpublic ProductDTO getSaleByProductId(final Long productId) throws ServiceException{\n\t\t\n\t\tProduct product = new Product();\n\t\t\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tproduct = (Product) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\n\t\t\t\t\t\t\t\tthrows DaoException {\n\t\t\t\t\t\t\treturn daoManager.getProductDao().getSaleByProductId(productId);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn(DTOFactory.getProductDTO(product));\n\t}\n\t\n\n\t/**----------------------------------------------------------\n\t \t\tINSERT INTO ITEM INTO product_sale and user_sale\n\t  -----------------------------------------------------------*/\n\t@Override\n\tpublic void addProductSale(ProductDTO productDTO)throws ServiceException{ \n\t\tfinal Product product=DTOFactory.getProduct(productDTO);\n\t\ttry{\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tdaoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\n\t\t\t\t\tdaoManager.getProductDao().addProductSale(product);\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t});\n\t\t}catch (DaoException de) {\n\t\t\ttry {\n\t\t\t\tthrow new ServiceException(de);\n\t\t\t} catch (ServiceException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}\n\n\t\n\n\t/**----------------------------------------------------------\n\t \t\tINSERT INTO ITEM INTO product_sale and user_sale\n\t  -----------------------------------------------------------*/\n\t@Override\n\tpublic void addUserSale(ProductDTO productDTO)throws ServiceException{ \n\t\tfinal Product product=DTOFactory.getProduct(productDTO);\n\t\ttry{\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tdaoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\n\t\t\t\t\tdaoManager.getProductDao().addUserSale(product);\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t});\n\t\t}catch (DaoException de) {\n\t\t\ttry {\n\t\t\t\tthrow new ServiceException(de);\n\t\t\t} catch (ServiceException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}\n\n\t\n\t\n\t\n\t\n}\n\n----------------------------------- SOURCE END -------------------------------------",1426027289871
error,log,,,"Problems occurred when invoking code from plug-in: ""org.eclipse.jdt.ui"".",1426027289873
error,log,,,"Error in JDT Core during reconcile",1426027289873
