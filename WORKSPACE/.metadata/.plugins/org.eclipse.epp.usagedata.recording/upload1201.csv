what,kind,bundleId,bundleVersion,description,time
activated,editor,org.eclipse.jdt.ui,3.6.2.r362_v20110203,"org.eclipse.jdt.ui.CompilationUnitEditor",1411154571329
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.copy",1411154573173
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.copy",1411154573423
activated,view,org.eclipse.ui.ide,3.6.2.M20101201-0800,"org.eclipse.ui.views.ResourceNavigator",1411154574460
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1411154576904
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.paste",1411154583079
started,bundle,org.eclipse.wst.jsdt.manipulation,1.0.200.v201004150600,"org.eclipse.wst.jsdt.manipulation",1411154584627
started,bundle,org.eclipse.wst.jsdt.ui,1.1.4.v201102160540,"org.eclipse.wst.jsdt.ui",1411154584669
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1411154584850
executed,command,org.eclipse.ltk.ui.refactoring,3.5.0.v20100526-0800,"org.eclipse.ltk.ui.refactoring.commands.renameResource",1411154584854
activated,editor,org.eclipse.jdt.ui,3.6.2.r362_v20110203,"org.eclipse.jdt.ui.CompilationUnitEditor",1411154586236
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.file.save",1411154709798
executed,command,org.eclipse.jdt.debug.ui,3.5.2.v20100928a_r362,"org.eclipse.jdt.debug.ui.localJavaShortcut.run",1411154713778
activated,view,org.eclipse.ui.console,3.5.0.v20100526,"org.eclipse.ui.console.ConsoleView",1411154720428
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1411154723866
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1411154732585
activated,editor,org.eclipse.jdt.ui,3.6.2.r362_v20110203,"org.eclipse.jdt.ui.CompilationUnitEditor",1411154732613
executed,command,org.eclipse.jdt.debug.ui,3.5.2.v20100928a_r362,"org.eclipse.jdt.debug.ui.localJavaShortcut.debug",1411154737733
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1411154780007
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1411154810265
activated,view,org.eclipse.ui.console,3.5.0.v20100526,"org.eclipse.ui.console.ConsoleView",1411154810293
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.copy",1411154813991
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1411154816306
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1411154894151
activated,editor,org.eclipse.jdt.ui,3.6.2.r362_v20110203,"org.eclipse.jdt.ui.CompilationUnitEditor",1411154894169
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.file.save",1411154913830
executed,command,org.eclipse.jdt.debug.ui,3.5.2.v20100928a_r362,"org.eclipse.jdt.debug.ui.localJavaShortcut.run",1411154917889
activated,view,org.eclipse.ui.console,3.5.0.v20100526,"org.eclipse.ui.console.ConsoleView",1411154923014
activated,editor,org.eclipse.jdt.ui,3.6.2.r362_v20110203,"org.eclipse.jdt.ui.CompilationUnitEditor",1411154937406
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1411154942312
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1411154994799
activated,view,org.eclipse.ui.ide,3.6.2.M20101201-0800,"org.eclipse.ui.views.ResourceNavigator",1411154996879
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1411154999101
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1411155028921
activated,view,org.eclipse.ui.console,3.5.0.v20100526,"org.eclipse.ui.console.ConsoleView",1411155030178
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1411155033353
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1411155034705
executed,command,org.eclipse.ui.ide,3.6.2.M20101201-0800,"org.eclipse.ui.project.cleanAction",1411155034709
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1411155034971
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1411155035432
error,log,,,"Exception occurred during problem detection:\n----------------------------------- SOURCE BEGIN -------------------------------------\npackage com.loyauty.web.struts.action.orders;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.text.NumberFormat;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.List;\n\nimport javax.servlet.http.HttpSession;\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\nimport javax.xml.parsers.ParserConfigurationException;\nimport javax.xml.transform.OutputKeys;\nimport javax.xml.transform.Transformer;\nimport javax.xml.transform.TransformerConfigurationException;\nimport javax.xml.transform.TransformerException;\nimport javax.xml.transform.TransformerFactory;\nimport javax.xml.transform.dom.DOMSource;\nimport javax.xml.transform.stream.StreamResult;\n\nimport lombok.Getter;\nimport lombok.Setter;\n\nimport org.apache.commons.io.FileUtils;\nimport org.w3c.dom.Attr;\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Element;\nimport org.w3c.dom.Node;\nimport org.w3c.dom.NodeList;\nimport org.xml.sax.SAXException;\n\nimport com.loyauty.exception.ServiceException;\nimport com.loyauty.exception.ServiceLocatorException;\nimport com.loyauty.model.User;\nimport com.loyauty.service.core.dto.BasicUserDTO;\nimport com.loyauty.service.core.dto.OrdersDTO;\nimport com.loyauty.service.core.dto.UserConnectionDTO;\nimport com.loyauty.service.core.dto.UserFileRecoveryDTO;\nimport com.loyauty.service.core.dto.UserFilesDownloadedDTO;\nimport com.loyauty.service.core.dto.UserSessionDTO;\nimport com.loyauty.service.orders.OrdersService;\nimport com.loyauty.service.user.UserService;\nimport com.loyauty.web.struts.action.LoyautyAction;\n\n\npublic class GenerateInvoice extends LoyautyAction {\n\n\tprivate static final long serialVersionUID = -4124365186993131923L;\n\tprivate UserService userService;\n\tprivate static OrdersService orderService;\n\t@Getter @Setter\n\tprivate String userLogin;\n\t@Getter @Setter\n\tprivate List<User> usersList;\n\tprivate static int USER_TYPE = 2;\n\t@Getter @Setter\n\tprivate File qbInvoiceXmlFile;\n\t@Getter @Setter\n\tList<UserFilesDownloadedDTO>userFilelist;\n\t@Getter @Setter\n\tprivate UserConnectionDTO usrConnDTO;\n\t@Getter @Setter\n\tHashMap<String, String>fileNamesWithStatus;\n\t@Getter @Setter\n\tprivate Integer btGenerateInvoice;\n\t@Getter @Setter\n\tprivate String message;\n\t@Getter @Setter\n\tprivate String showConfirmGenerateFile;\n\t@Getter @Setter\n\tprivate Integer generateInvoiceConfirmed;\n\t@Getter @Setter\n\tprivate String qbInvoiceXmlFileFileName;\n\t@Getter @Setter\n\tprivate String originalFileName;\n\t@Getter @Setter\n\tprivate Integer uploadInvoiceXML;\n\t@Getter @Setter\n\tprivate Integer deleteInvoiceXML;\n\t@Getter @Setter\n\tprivate String fileToDelete; \t\n\n\tpublic  GenerateInvoice() throws ServiceLocatorException {\n\t\tsuper();\t\n\t\tuserService = getServiceLocator().getUserService();\n\t\torderService = getServiceLocator().getOrderService();\n\t}\n\n\t/*=========================================================================================\n\t \t\t\t\t\t\t\t\t\t\t\tmethod execute\n\t  =========================================================================================*/\n\t@SuppressWarnings({ ""rawtypes"", ""unchecked"" })\n\t@Override\n\tpublic String execute() throws Exception {\n\t\ttry{\n\t\t\tHttpSession session = request.getSession(true);\n\t\t\tshowConfirmGenerateFile=""visibility:hidden;display:none;"";\n\t\t\t//recovered all users\n\t\t\tList<User> usersListSession=(List<User>)session.getAttribute(""usersListSession"");\n\t\t\tfileNamesWithStatus=( HashMap<String, String>)session.getAttribute(""fileNamesWithStatus"");\n\t\t\tif(fileNamesWithStatus==null)fileNamesWithStatus = new HashMap<String, String>();\n\t\t\tif(usrConnDTO==null) usrConnDTO = new UserConnectionDTO();\n\t\t\tif(usersListSession==null){\n\t\t\t\tBasicUserDTO basicUserDTO = new BasicUserDTO();\n\t\t\t\tbasicUserDTO.setTypeId(USER_TYPE);\n\t\t\t\tList<UserSessionDTO> listAllUsers= userService.getAllUsers(basicUserDTO);\n\t\t\t\tusersList=new ArrayList<User>();\n\t\t\t\tfor(UserSessionDTO userDTO:listAllUsers){\n\t\t\t\t\tUser user=new User();\n\t\t\t\t\tuser.setId(userDTO.getId());\n\t\t\t\t\tuser.setLogin(userDTO.getLogin());\n\t\t\t\t\tusersList.add(user);\n\t\t\t\t}\n\t\t\t\tsession.setAttribute(""usersListSession"",usersList);\n\t\t\t}else usersList=usersListSession;\n\t\t\t\n\t\t\t/*---------------- Get just the file name without the path-------------------------*/\n\t\t\tString [] tokens=null;\n\t\t\tif(originalFileName!=null){\n\t\t\t\tString originalFileNameCopy=originalFileName.replaceAll(""\\\\\\\\"", ""/"");\n\t\t\t\ttokens = originalFileNameCopy.split(""/"");\n\t\t\t\tif(tokens!=null && tokens.length>1){\n\t\t\t\t\toriginalFileName =tokens[tokens.length-1];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t/*---------------- Check if the user is entered.-------------------------*/\n\t\t\tif(btGenerateInvoice != null && btGenerateInvoice == 1 && (userLogin==null || userLogin.equals(""""))){\n\t\t\t\taddActionError(""Please select the Client login."");\n\t\t\t\treturn ""input"";\n\t\t\t}\n\t\t\t/*---------------- Check if the user selected a file-------------------------*/\n\t\t\tif(btGenerateInvoice != null && btGenerateInvoice == 1 && (originalFileName==null || originalFileName.equals(""""))){\n\t\t\t\taddActionError(""Please browse and select a file."");\n\t\t\t\treturn ""input"";\n\t\t\t}\n\t\t\t/*---------------- retrieve customer information order -------------------------*/\n\t\t\tUserFileRecoveryDTO ufrDTO = null;\n\t\t\tufrDTO=orderService.getUserFileRecoveryByUser(userLogin);\n\t\t\tusrConnDTO = userService.getUserConnectionByLogin(userLogin);\n\t\t\tFile invoiceFilePermanent=null;\n\t\t\tString filePath = request.getSession().getServletContext().getRealPath(""/"");\n\t\t\tString dataPath = filePath + ""WEB-INF/jsp/orders/data/"";\n\t\t\tString nameFile="""";\n\t\t\tif(userLogin!=null && ufrDTO!=null)\tnameFile=dataPath+userLogin+"".""+ufrDTO.getFileType();\n\t\t\tinvoiceFilePermanent = new File(nameFile);\n\n\t\t\t/*---------------- When user clicks Generate Invoice - show  Generate Invoice confirmation pop up -------------------------*/\n\t\t\tif(qbInvoiceXmlFile!=null && btGenerateInvoice != null && btGenerateInvoice == 1 && generateInvoiceConfirmed!=null && generateInvoiceConfirmed==-1){\n\t\t\t\tif(invoiceFilePermanent.exists())invoiceFilePermanent.delete();\n\t\t\t\t//if(originalFileName.substring(originalFileName.lastIndexOf('.')+1).equalsIgnoreCase(ufrDTO.getFileType())){\n\t\t\t\tif(originalFileName.substring(originalFileName.lastIndexOf('.')+1).equalsIgnoreCase(""xml"")){\n\t\t\t\t\ttry {\n\t\t\t\t\t\tinvoiceFilePermanent = new File(nameFile);\n\t\t\t\t\t\tFileUtils.copyFile(qbInvoiceXmlFile, invoiceFilePermanent);\n\t\t\t\t\t} catch (IOException e) {\n\t\t\t\t\t\taddActionError(getText(""loyauty.error.common.CreateOrdersFromFiles""));\n\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\treturn ""input"";\n\t\t\t\t\t}\n\t\t\t\t\tmessage=""Are you sure, you want to generate invoice?"";\n\t\t\t\t\tshowConfirmGenerateFile=""display:block;visibility:visible;"";\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\taddActionError(""File format is not correct."");\n\t\t\t\t}\n\t\t\t}\n\t\t\t/*---------------- When user confirms to Generate Invoice confirmation pop up-------------------------*/\n\t\t\tif(btGenerateInvoice != null && btGenerateInvoice == 1 && generateInvoiceConfirmed!=null && generateInvoiceConfirmed==1){\n\t\t\t\t//destination of the generate file. \n\t\t\t\tString  location= new File(filePath).getParent()+""/"";\n\t\t\t\tFile fileRoot=new File(location+""invoice_confirm"");\n\t\t\t\tfileRoot.mkdir();\n\t\t\t\tFile clientFolder=null;\n\t\t\t\tclientFolder=new File(location+""invoice_confirm/""+userLogin);\n\t\t\t\tclientFolder.mkdir();\n\t\t\t\tFile generatedFile =null;\n\t\t\t\t// check if correct file format is selected.\n\t\t\t\tif(invoiceFilePermanent!=null && invoiceFilePermanent.exists()){\n\t\t\t\t\t//Parameters (destination folder,userDTO,source file)\n\t\t\t\t\tgeneratedFile = createInvoicedOrdersXML(location+""invoice_confirm/""+userLogin+""/"",ufrDTO,invoiceFilePermanent);\n\t\t\t\t\tif(generatedFile!=null){\n\t\t\t\t\t\tfileNamesWithStatus.put(originalFileName,generatedFile.getName());\n\t\t\t\t\t\tsession.setAttribute(""fileNamesWithStatus"", fileNamesWithStatus);\n\t\t\t\t\t\tif(invoiceFilePermanent.exists()) invoiceFilePermanent.delete();\n\t\t\t\t\t}else{\n\t\t\t\t\t\taddActionError(""XML is not well formed"");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t/*---------------- When user clicks the delete icon on the screen-------------------------*/\n\t\t\tif(deleteInvoiceXML != null && deleteInvoiceXML == 1){\n\t\t\t\tif(usrConnDTO!= null) usrConnDTO.getInvoiceConfirmFolder();\n\t\t\t\tFile fileToRemove = new File(usrConnDTO.getInvoiceConfirmFolder()+ fileToDelete);\n\t\t\t\tif(fileToRemove!=null && fileToRemove.exists()){\n\t\t\t\t\tfileToRemove.delete();\n\t\t\t\t\torderService.updateFileSequenceInvoice(ufrDTO.getUserId(),ufrDTO.getFileSeqInvoice()-1);\n\t\t\t\t\tfileNamesWithStatus.remove(originalFileName);\n\t\t\t\t\tsession.setAttribute(""fileNamesWithStatus"", fileNamesWithStatus);\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\treturn ""input"";\n\t\t}\n\t\treturn SUCCESS;\n\t}\n\n\t/*=================================================================================\n\t\t\t\t\tcreateInvoicedOrdersXML: Invoice generation for Rideau\n\t=================================================================================*/\n\tprivate File createInvoicedOrdersXML(String destination, UserFileRecoveryDTO ufrDTO, File sourceFile) throws ServiceException {\n\n\t\tFile xmlInvoiceFile=null;\n\n\t\t// Reading source xml file\n\t\tDocumentBuilder docBuilder =getDocumentBuilder();\n\t\tDocument docSrc = null;\n\t\ttry {\n\t\t\tdocSrc = docBuilder.parse (sourceFile);\n\t\t} catch (SAXException e1) {\n\t\t\te1.printStackTrace();\n\t\t\treturn null;\n\t\t} catch (IOException e1) {\n\t\t\te1.printStackTrace();\n\t\t\treturn null;\n\t\t}\n\n\t\t//----XML File Name for rideau  ID + FCN (always of size 6) + xml------------------------------------\n\t\tint sequenceNumber = ufrDTO.getFileSeqInvoice();\n\t\tint file_seq = sequenceNumber+1;\n\t\tString fileName = ""day_ID"" + (String.valueOf(file_seq).length() < 6 ? (""000000"".substring(String.valueOf(file_seq).length())+ String.valueOf(file_seq)):String.valueOf(file_seq)) +"".xml"" ;\n\t\txmlInvoiceFile=new File(destination+fileName);\n\n\t\t// normalize text representation\n\t\tif(docSrc!= null) docSrc.getDocumentElement ().normalize ();\n\n\t\t//----------------------------------- generate Inovice XML File ------------------------------------\n\t\tDocument doc = docBuilder.newDocument();\t\n\t\tElement rootElement = doc.createElement(""invoice_file"");\n\t\tdoc.appendChild(rootElement);\n\n\t\tString[] tokens=null;\n\t\t// create format_version under status_file (root tag)\n\t\tElement formatVersion = doc.createElement(""format_version"");\n\t\trootElement.appendChild(formatVersion);\n\n\t\t// create file_info under status_file (root tag)\n\t\tElement fileInfo = doc.createElement(""file_info"");\n\t\trootElement.appendChild(fileInfo);\n\n\t\t// create client_number under file_info \n\t\tElement client_number = doc.createElement(""client_number"");\n\t\tfileInfo.appendChild(client_number);\n\n\t\t// create client_name under file_info \n\t\tElement clientName = doc.createElement(""client_name"");\n\t\tfileInfo.appendChild(clientName);\n\n\t\t// create vendor_number under file_info \n\t\tElement vendorNumber = doc.createElement(""vendor_number"");\n\t\tfileInfo.appendChild(vendorNumber);\n\n\t\t// create vendor_name under file_info \n\t\tElement vendorName = doc.createElement(""vendor_name"");\n\t\tfileInfo.appendChild(vendorName);\n\n\t\t// create file_type under file_info \n\t\tElement fileType = doc.createElement(""file_type"");\n\t\tfileType.setTextContent(""ID"");\n\t\tfileInfo.appendChild(fileType);\n\n\t\t// create file_sequence under file_info \n\t\tElement fileSequence = doc.createElement(""file_sequence"");\n\t\tfileSequence.setTextContent(String.valueOf(file_seq));\n\t\tfileInfo.appendChild(fileSequence);\n\n\t\t//create file_date under file_info \n\t\tDate date = new Date();\n\t\tString today= new SimpleDateFormat(""yyyy-MM-dd"").format(date);\n\t\tElement fileDate = doc.createElement(""file_date"");\n\t\tfileDate.setTextContent(today.toString());\n\t\tfileInfo.appendChild(fileDate);\n\n\t\t// create Invoices Element\n\t\tElement invoice = doc.createElement(""invoices"");\n\t\trootElement.appendChild(invoice);\n\n\t\t// set num invoice attribute with no of invoices\n\t\tAttr numInvoices = doc.createAttribute(""num_invoices"");\n\t\tinvoice.setAttributeNode(numInvoices);\n\t\tint totalInvoices = docSrc.getElementsByTagName(""InvoiceRet"").getLength();\n\t\tnumInvoices.setTextContent(totalInvoices+"""");\n\t\tNodeList listOfInvoice = docSrc.getElementsByTagName(""InvoiceRet"");\n\t\tString orderFileInfo =null;\n\n\t\tfor(int i =0 ; i<totalInvoices ; i++){\n\t\t\tNode InvoiceRetNode = listOfInvoice.item(i);\n\t\t\tif(InvoiceRetNode.getNodeType() == Node.ELEMENT_NODE){\n\t\t\t\tElement firstInvoiceElement = (Element)InvoiceRetNode;\n\n\t\t\t\t//invoice_detail Element under invoice Element\n\t\t\t\tElement invoice_detail_Element = doc.createElement(""invoice_detail"");\n\t\t\t\tinvoice.appendChild(invoice_detail_Element);\n\n\t\t\t\t//invoice_date -  from quickbooks <TimeModified>\n\t\t\t\tElement invoice_date_Element = doc.createElement(""invoice_date"");\n\t\t\t\tString invoice_date=getValue(""TimeModified"", firstInvoiceElement, 0);\n\t\t\t\tif(invoice_date!=null)invoice_date_Element.setTextContent(invoice_date.substring(0,invoice_date.indexOf(""T"")));\n\t\t\t\tinvoice_detail_Element.appendChild(invoice_date_Element);\n\n\t\t\t\t//invoice_number -  from quickbooks <RefNumber>\n\t\t\t\tElement invoice_number_Element = doc.createElement(""invoice_number"");\n\t\t\t\tString invoice_number=getValue(""RefNumber"", firstInvoiceElement, 0);\n\t\t\t\tif(invoice_number!=null)invoice_number_Element.setTextContent(invoice_number);\n\t\t\t\tinvoice_detail_Element.appendChild(invoice_number_Element);\n\n\t\t\t\t//invoice_type -If we give a credit, the value is CR else DB in case of invoice.\n\t\t\t\tElement invoice_type_Element = doc.createElement(""invoice_type"");\n\t\t\t\tinvoice_type_Element.setTextContent(""DB"");\n\t\t\t\tinvoice_detail_Element.appendChild(invoice_type_Element);\n\n\t\t\t\t//split the PO number and set source, program_id, client_po\n\t\t\t\ttokens=null;\n\t\t\t\tString productOrderNumber="""";\n\n\t\t\t\tproductOrderNumber = getValue(""PONumber"", firstInvoiceElement, 0);\n\t\t\t\tif(productOrderNumber!=null && productOrderNumber.length()>0){\n\t\t\t\t\ttokens = productOrderNumber.split("" "");\n\t\t\t\t}\n\t\t\t\tif(tokens!=null && tokens.length==3){\n\t\t\t\t\t//program_id\n\t\t\t\t\tElement program_id_Element = doc.createElement(""program_id"");\n\t\t\t\t\tString program_id=tokens[1];\n\t\t\t\t\tif(program_id!=null)program_id_Element.setTextContent(program_id);\n\t\t\t\t\tinvoice_detail_Element.appendChild(program_id_Element);\n\n\t\t\t\t\t//client_po\n\t\t\t\t\tElement client_po_Element = doc.createElement(""client_po"");\t\n\t\t\t\t\tString client_po=tokens[2];\n\t\t\t\t\tif(client_po!=null)client_po_Element.setTextContent(client_po);\n\t\t\t\t\tinvoice_detail_Element.appendChild(client_po_Element);\n\n\t\t\t\t\t//source\n\t\t\t\t\tElement source_Element = doc.createElement(""source"");\t\n\t\t\t\t\tString source=tokens[0];\n\t\t\t\t\tif(source!=null)source_Element.setTextContent(source);\n\t\t\t\t\tinvoice_detail_Element.appendChild(source_Element);\n\t\t\t\t}\n\n\t\t\t\t//ship_to_name - from DB\n\t\t\t\tElement ship_to_name_Element = doc.createElement(""ship_to_name"");\t\n\t\t\t\tinvoice_detail_Element.appendChild(ship_to_name_Element);\n\n\t\t\t\t//ship_to_postal_code - from DB\n\t\t\t\tElement ship_to_postal_code_Element = doc.createElement(""ship_to_postal_code"");\t\n\t\t\t\tinvoice_detail_Element.appendChild(ship_to_postal_code_Element);\n\n\t\t\t\t//invoice_total - from quickbooks <BalanceRemaining>\n\t\t\t\tElement invoice_total_Element = doc.createElement(""invoice_total"");\t\n\t\t\t\tString invoice_total = getValue(""BalanceRemaining"", firstInvoiceElement, 0);\n\t\t\t\tif(invoice_total!=null)invoice_total_Element.setTextContent(invoice_total);\n\t\t\t\tinvoice_detail_Element.appendChild(invoice_total_Element);\n\n\t\t\t\t//invoice_freight \n\t\t\t\tElement invoice_freight_Element = doc.createElement(""invoice_freight"");\t\n\t\t\t\tNodeList rateList=   firstInvoiceElement.getElementsByTagName(""Rate"");\n\t\t\t\tString invoiceFreight = calculateFreight(rateList,firstInvoiceElement);\n\t\t\t\tif(invoiceFreight!=null)invoice_freight_Element.setTextContent(invoiceFreight);\n\t\t\t\tinvoice_detail_Element.appendChild(invoice_freight_Element);\n\n\t\t\t\t//invoice_other  Always 0  \n\t\t\t\tElement invoice_other_Element = doc.createElement(""invoice_other"");\t\n\t\t\t\tinvoice_other_Element.setTextContent(""0"");\n\t\t\t\tinvoice_detail_Element.appendChild(invoice_other_Element);\n\n\t\t\t\t//invoice_gst  (66.61% of SalesTaxTotal)\n\t\t\t\tDouble invoice_gst= new Double(0);\n\t\t\t\tString salesTaxTotal = getValue(""SalesTaxTotal"", firstInvoiceElement, 0);\n\t\t\t\tElement invoice_gst_Element = doc.createElement(""invoice_gst"");\t\n\t\t\t\tif(salesTaxTotal!=null)\tinvoice_gst = (double)Math.round(Double.parseDouble(salesTaxTotal)* 66.61) / (double) 100;\n\t\t\t\tinvoice_gst_Element.setTextContent(String.valueOf(invoice_gst));\n\t\t\t\tinvoice_detail_Element.appendChild(invoice_gst_Element);\n\n\t\t\t\t//invoice_pst  (33.39% of salesTaxTotal)\n\t\t\t\tDouble invoice_pst= new Double(0);\n\t\t\t\tElement invoice_pst_Element = doc.createElement(""invoice_pst"");\t\n\t\t\t\tif(salesTaxTotal!=null)\tinvoice_pst = (double)Math.round(Double.parseDouble(salesTaxTotal)* 33.39) / (double) 100;\n\t\t\t\tinvoice_pst_Element.setTextContent(String.valueOf(invoice_pst));\n\t\t\t\tinvoice_detail_Element.appendChild(invoice_pst_Element);\n\n\t\t\t\t//invoice_hst - Always 0 \n\t\t\t\tElement invoice_hst_Element = doc.createElement(""invoice_hst"");\t\n\t\t\t\tinvoice_hst_Element.setTextContent(""0"");\n\t\t\t\tinvoice_detail_Element.appendChild(invoice_hst_Element);\n\n\t\t\t\tint totalInvoiceItem = firstInvoiceElement.getElementsByTagName(""Other2"").getLength();\n\t\t\t\tint lineNumber = 1;\n\n\t\t\t\t// create Item under Invoice_detail\n\t\t\t\tElement items_Element = doc.createElement(""items"");\n\t\t\t\tinvoice_detail_Element.appendChild(items_Element);\n\t\t\t\t//Set num_item with no of item details present in xml\n\t\t\t\tAttr num_items = doc.createAttribute(""num_items"");\n\t\t\t\titems_Element.setAttributeNode(num_items);\n\t\t\t\tnum_items.setTextContent(String.valueOf(totalInvoiceItem));\n\n\t\t\t\tfor(int cnt=0 ; cnt < totalInvoiceItem ; cnt++){\n\t\t\t\t\tString lsOrderId=null;\n\t\t\t\t\tlsOrderId = getValue(""Other2"", firstInvoiceElement, cnt);\n\t\t\t\t\tOrdersDTO ordersDTO = orderService.getInvoiceOrderByLsOrderId(lsOrderId);\n\t\t\t\t\tSystem.out.println(""lsOrderId is "" + lsOrderId + ""   productOrderNumber is "" + productOrderNumber);\n\n\t\t\t\t\tNode invoiceLineRetNode =  ((Node)firstInvoiceElement.getElementsByTagName(""Other2"").item(cnt)).getParentNode();\n\t\t\t\t\tElement invoiceLineRetElement = (Element)invoiceLineRetNode;\n\n\t\t\t\t\t//ship_to_name - from DB\n\t\t\t\t\tif(ordersDTO.getClientFirstName()!=null)ship_to_name_Element.setTextContent(ordersDTO.getClientFirstName().trim()+"" ""+ ordersDTO.getClientLastName().trim());\n\n\t\t\t\t\t//ship_to_postal_code - from DB\n\t\t\t\t\tif(ordersDTO.getClientPostalCode()!=null)ship_to_postal_code_Element.setTextContent(ordersDTO.getClientPostalCode().trim());\n\t\t\t\t\torderFileInfo=ordersDTO.getOrderFileInfo();\n\n\t\t\t\t\t//item_detail\n\t\t\t\t\tElement item_detail_Element = doc.createElement(""item_detail"");\n\t\t\t\t\titems_Element.appendChild(item_detail_Element);\n\n\t\t\t\t\t//client_po_detail  - other1\n\t\t\t\t\tElement client_po_detail_Element = doc.createElement(""client_po_detail"");\n\t\t\t\t\tString client_po = getValue(""Other1"", firstInvoiceElement, cnt);\n\t\t\t\t\t//String client_po = getValue(""Other1"", invoiceLineRetElement, 0);\n\t\t\t\t\tif(client_po!=null && client_po.length()>0) client_po_detail_Element.setTextContent(client_po);\n\t\t\t\t\titem_detail_Element.appendChild(client_po_detail_Element);\n\n\t\t\t\t\t//line_number\n\t\t\t\t\tElement line_number_Element = doc.createElement(""line_number"");\n\t\t\t\t\tline_number_Element.setTextContent(String.valueOf(lineNumber));\n\t\t\t\t\tlineNumber++;\n\t\t\t\t\titem_detail_Element.appendChild(line_number_Element);\n\n\t\t\t\t\t//vendor_item_number - Ls product ID\n\t\t\t\t\tElement vendor_item_number_Element = doc.createElement(""vendor_item_number""); \n\t\t\t\t\tString vendor_item_number= getValue(""FullName"", invoiceLineRetElement, 0);\n\t\t\t\t\tif(vendor_item_number!=null)vendor_item_number_Element.setTextContent(vendor_item_number);\n\t\t\t\t\titem_detail_Element.appendChild(vendor_item_number_Element);\n\n\t\t\t\t\t//item_price\n\t\t\t\t\tElement item_price_Element = doc.createElement(""item_price""); \n\t\t\t\t\tString item_price=getValue(""Rate"", invoiceLineRetElement, 0);\n\t\t\t\t\tif(item_price!=null)item_price_Element.setTextContent(item_price);\n\t\t\t\t\titem_detail_Element.appendChild(item_price_Element);\n\n\t\t\t\t\t//ordered_qty - Ordered quantity would be null in case the ordered in already invoiced.\n\t\t\t\t\tint ordered_qty = 0;\n\t\t\t\t\tElement ordered_qty_Element = doc.createElement(""ordered_qty"");\n\t\t\t\t\tordered_qty = getOrderedQuantity(lsOrderId).intValue();\n\t\t\t\t\tordered_qty_Element.setTextContent(String.valueOf(ordered_qty));\n\t\t\t\t\titem_detail_Element.appendChild(ordered_qty_Element);\n\n\t\t\t\t\tElement shipped_qty_Element = doc.createElement(""shipped_qty""); \n\t\t\t\t\tString shipped_qty=getValue(""Quantity"", invoiceLineRetElement, 0);\n\t\t\t\t\t//String shipped_qty=ordersDTO.getQuantity()+"""";\n\t\t\t\t\tif(shipped_qty!=null)shipped_qty_Element.setTextContent(shipped_qty);\n\t\t\t\t\titem_detail_Element.appendChild(shipped_qty_Element);\n\n\t\t\t\t\t//backordered_qty\n\t\t\t\t\tElement backordered_qty_Element = doc.createElement(""backordered_qty""); \n\t\t\t\t\tint totalQuanityShippedTillDate= getTotalShippedQuantityForSplitOrders(lsOrderId).intValue();\n\t\t\t\t\tbackordered_qty_Element.setTextContent(String.valueOf(ordered_qty- totalQuanityShippedTillDate));\n\t\t\t\t\titem_detail_Element.appendChild(backordered_qty_Element);\n\t\t\t\t}\n\t\t\t} // if end.\n\t\t} // for totalInvoices end\n\t\ttokens = null;\n\t\tif(orderFileInfo!=null){\n\t\t\ttokens = orderFileInfo.split(""?"");\n\t\t}\n\t\tif(tokens!=null && tokens[0]!=null)formatVersion.setTextContent(tokens[0]);\n\t\tif(tokens!=null && tokens[1]!=null)client_number.setTextContent(tokens[1]);\n\t\tif(tokens!=null && tokens[2]!=null)clientName.setTextContent(tokens[2]);\n\t\tif(tokens!=null && tokens[3]!=null)vendorNumber.setTextContent(tokens[3]);\n\t\tif(tokens!=null && tokens[4]!=null)vendorName.setTextContent(tokens[4]);\t\t\n\n\t\t//Create XML File\n\t\tTransformerFactory transformerFactory = TransformerFactory.newInstance();\n\t\tTransformer transformer = null;\n\t\ttry {\n\t\t\ttransformer = transformerFactory.newTransformer();\n\t\t\ttransformer.setOutputProperty(OutputKeys.INDENT, ""yes"");\n\t\t\ttransformer.setOutputProperty(""{http://xml.apache.org/xslt}indent-amount"", ""4"");\n\t\t} catch (TransformerConfigurationException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\tDOMSource source = new DOMSource(doc);\n\t\tStreamResult result = new StreamResult(xmlInvoiceFile);\n\t\ttry {\n\t\t\ttransformer.transform(source, result);\n\t\t\tboolean res = orderService.updateFileSequenceInvoice(ufrDTO.getUserId(),file_seq); \n\t\t} catch (TransformerException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn xmlInvoiceFile;\n\t}\n\n\tprivate static String calculateFreight(NodeList rateList,Element docElement) {\n\t\tNumberFormat nf = NumberFormat.getInstance();\n\t\tDouble frieght = (double)0;\n\t\tfor(int i =0 ; i < rateList.getLength() ; i++){\n\t\t\tElement parent = (Element)rateList.item(i).getParentNode();\n\t\t\tif(getValue(""Desc"", parent, 0).equalsIgnoreCase(""Shipping"")){\n\t\t\t\ttry {\n\t\t\t\t\tfrieght = (double) Math.round( (frieght + nf.parse(getValue(""Rate"", docElement, i)).doubleValue())*100)/100;\n\t\t\t\t} catch (ParseException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn frieght+"""";\n\t}\n\n\t/*======================================================================================================\n\t\t\tMethod to return the Document builder for the xml file.\n\t=========================================================================================================*/\n\tprivate static DocumentBuilder getDocumentBuilder(){\n\t\tDocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();\n\t\tDocumentBuilder docBuilder =null;\n\t\ttry {\n\t\t\tdocBuilder = docBuilderFactory.newDocumentBuilder();\n\t\t} catch (ParserConfigurationException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn docBuilder;\n\t}\n\t/*======================================================================================================\n\t\t\tMethod to return the Element value of any xml tag.\n\t=========================================================================================================*/\n\tprivate static String getValue(String tag, Element element , int i) {\n\t\tString nodeValue="""";\n\t\tNodeList nodeList = element.getElementsByTagName(tag);\n\t\tif(nodeList!=null && nodeList.getLength()> 0){\n\t\t\tElement nodeElement = (Element)nodeList.item(i);\n\t\t\tif(nodeElement!=null){\n\t\t\t\tNodeList nodes = nodeElement.getChildNodes();\n\t\t\t\tif(nodes!=null && nodes.getLength()>0){\n\t\t\t\t\tnodeValue =((Node)nodes.item(0)).getNodeValue().trim(); \n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn nodeValue;\n\t}\n\t/*======================================================================================================\n\t \t\tMethod to return list of all invoiced orders xml files in a given folder.\n\t=========================================================================================================*/\n\tpublic static File[] getInvoicedOrdersXMLFiles(File folder) {\n\t\tList<File> aList = new ArrayList<File>();\n\t\tFile[] files = folder.listFiles();\n\t\tif(files != null &&  files.length>=1){\n\t\t\tfor (File pf : files) {\n\t\t\t\tif (pf.isFile() && getFileExtensionName(pf).indexOf(""xml"") != -1) {\n\t\t\t\t\taList.add(pf);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn aList.toArray(new File[aList.size()]);\n\t}\n\t/*======================================================================================================\n\t\t\t\tGet file extension \n\t=========================================================================================================*/\n\tpublic static String getFileExtensionName(File f) {\n\t\tString fileToDownload=f.getName();\n\t\tint index=fileToDownload.lastIndexOf(""."");\n\t\tString ext="""";\n\t\tif(index>0)ext=fileToDownload.substring(index+1);\n\t\tif (!fileToDownload.equals(""."") && !fileToDownload.equals("".."") && !f.isDirectory() &&\n\t\t\t\tfileToDownload.indexOf(""."")>0 && !fileToDownload.endsWith(""."")&& ext.length()==3) {\n\t\t\treturn fileToDownload.substring(fileToDownload.length() - 3, fileToDownload.length());\n\t\t}\n\t\telse\n\t\t\treturn """";\n\t}\n\n\t/*======================================================================================================\n\t\tMethod to return the ordered quantity for any split order. \n\t=========================================================================================================*/\n\tprivate static Double getOrderedQuantity(String lsOrderId) {\n\t\tDouble count = (double) 0;\n\t\tif(lsOrderId!=null){\n\t\t\tif(lsOrderId.contains(""_"")) lsOrderId = lsOrderId.substring(0,lsOrderId.indexOf('_'));\n\t\t\ttry {\n\t\t\t\tcount = orderService.getOrderedQuantity(lsOrderId);\n\t\t\t} catch (ServiceException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n\t/*======================================================================================================\n\t\t\tMethod to return the Total shipped quantity for any split order. \n\t=========================================================================================================*/\n\tprivate static Double getTotalShippedQuantityForSplitOrders(String lsOrderId) {\n\t\tDouble count = (double) 0;\n\t\tif(lsOrderId!=null){\n\t\t\tif(lsOrderId.contains(""_"")) lsOrderId = lsOrderId.substring(0,lsOrderId.indexOf('_'));\n\t\t\ttry {\n\t\t\t\tcount = orderService.getTotalShippedQuantityForSplitOrders(lsOrderId);\n\t\t\t} catch (ServiceException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n\t/*====================================================================================================\n\t\t<<- SFTP ->> sftpUpload: upload all remoteFolder files in LocalFolder using SFTP protocol\n\t====================================================================================================*/\n\t/*public static void sftpUpload(UserConnectionDTO usrConnDTO){  \n\t\tString host=usrConnDTO.getHost();\n\t\tint port=usrConnDTO.getPort();\n\t\tString userName=usrConnDTO.getUserName();\n\t\tString password=usrConnDTO.getPassword();\n\t\tString remoteFolderName=usrConnDTO.getRemoteClientInvoiceFolder(); // destination\n\t\tString[] tabFileExt=getInvoiceFileConfirm(usrConnDTO.getInvoiceConfirmFolder()); \n\t\tif(tabFileExt==null) return;\n\t\ttry {\n\t\t\tJSch jsch = new JSch();\n\t\t\tSession session = null;\n\t\t\tChannel channel = null;\n\t\t\tChannelSftp sftpChannel = null;\n\t\t\ttry {\n\t\t\t\tsession = jsch.getSession(userName, host,port);\n\t\t\t\tsession.setPassword(password);\n\t\t\t\tjava.util.Properties config = new java.util.Properties();\n\t\t\t\tconfig.put(""StrictHostKeyChecking"", ""no"");\n\t\t\t\tsession.setConfig(config);\n\t\t\t\tsession.connect();\n\t\t\t\tchannel = session.openChannel(""sftp"");\n\t\t\t\tchannel.connect();\n\t\t\t\tsftpChannel = (ChannelSftp)channel;\n\t\t\t} catch (Exception e) {\n\t\t\t\tSystem.err.println(""Unable to connect to FTP server.""+e.toString());\n\t\t\t\tthrow e;\n\t\t\t}              \n\n\t\t\tString uploadFileNameWithoutExt=tabFileExt[0];\n\t\t\tString ext=tabFileExt[1];\n\t\t\tif(uploadFileNameWithoutExt==null || ext==null)return;\n\t\t\tInputStream intputStream = new BufferedInputStream(new FileInputStream(uploadFileNameWithoutExt+"".""+ext));\n\t\t\ttry {\n\t\t\t\tsftpChannel.cd(remoteFolderName);\n\t\t\t}\n\t\t\tcatch ( Exception e ) {\n\t\t\t\tsftpChannel.mkdir(remoteFolderName);\n\t\t\t\tsftpChannel.cd(remoteFolderName);\n\t\t\t}\n\t\t\tString tabPathFile[]=uploadFileNameWithoutExt.split(""/"");\n\t\t\tString nameFileToUpload=tabPathFile[tabPathFile.length-1].replaceAll(""day_"", """")+"".""+ext;\n\t\t\t// String nameFileToUpload=""Shipping_Confirmation_""+strDate+"".""+ext;\n\t\t\tFile fileToSend=new File(uploadFileNameWithoutExt+"".""+ext);\n\t\t\tLong fileToSendSize=fileToSend.length();\n\t\t\t//upload File it not empty\n\t\t\tif((fileToSendSize>20480L && ext.equals(""xls""))||\n\t\t\t\t\t(fileToSendSize>75L && ext.equals(""xml"")) ||\n\t\t\t\t\t(fileToSendSize>263L && ext.equals(""csv""))){\n\t\t\t\tsftpChannel.put(intputStream, remoteFolderName+nameFileToUpload); \n\t\t\t\tSystem.out.println(""Uploading the file:""+nameFileToUpload+"" UserLogin: ""+usrConnDTO.getUserLogin());\n\t\t\t\t// to copy the file in invoice_sent folder and delete the send file.\n\t\t\t\tFile srcFile = new File(uploadFileNameWithoutExt+"".""+ext);\n\t\t\t\tFile destFile = new File(usrConnDTO.getInvoiceConfirmFolder()+""invoice_sent/""+nameFileToUpload);\n\t\t\t\tFileUtils.copyFile(srcFile, destFile);\n\t\t\t\tintputStream.close();\n\t\t\t\tintputStream = null;\n\t\t\t\tSystem.gc();\n\t\t\t\tsrcFile.delete();\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\tSystem.err.println(""Error: ""+e.toString());\n\t\t}\n\t}*/\n\n\n\t/*====================================================================================================\n    <<- FTP ->> ftpUpload: Upload all localFolder files in remoteFolder using FTP protocol\n  \t====================================================================================================*/\n\t/*\tpublic static void ftpUpload(UserConnectionDTO usrConnDTO){\n\t\tString host=usrConnDTO.getHost();\n\t\tint port=usrConnDTO.getPort();\n\t\tString userName=usrConnDTO.getUserName();\n\t\tString password=usrConnDTO.getPassword();\n\t\tString remoteFolderName=usrConnDTO.getRemoteClientInvoiceFolder();\n\t\tFTPClient ftpClient = new FTPClient();\n\t\tBufferedInputStream bis=null;\n\n\t\ttry {\n\t\t\tftpClient.connect(host, port);\n\t\t\tftpClient.login(userName, password);\n\t\t\tftpClient.enterLocalPassiveMode();\n\t\t\tftpClient.setFileType(FTP.BINARY_FILE_TYPE);\n\t\t\tString[] tabFileExt=getInvoiceFileConfirm(usrConnDTO.getOrdersConfirmFolder());\n\t\t\tString uploadFileNameWithoutExt=tabFileExt[0];\n\t\t\tString ext=tabFileExt[1];\n\t\t\tif(uploadFileNameWithoutExt==null || ext==null)return;\n\t\t\tFile localFile = new File(uploadFileNameWithoutExt+"".""+ext);\n\t\t\tbis = new BufferedInputStream(new FileInputStream(localFile));\n\t\t\tftpClient.makeDirectory(remoteFolderName);\n\t\t\tString tabPathFile[]=uploadFileNameWithoutExt.split(""/"");\n\t\t\tString nameFileToUpload=tabPathFile[tabPathFile.length-1].replaceAll(""day_"", """")+"".""+ext;\n\t\t\t//String nameFileToUpload=""Shipping_Confirmation_""+strDate+"".""+ext;\n\t\t\tFile fileToSend=new File(uploadFileNameWithoutExt+"".""+ext);\n\t\t\tLong fileToSendSize=fileToSend.length();\n\t\t\t//upload File it not empty\n\t\t\tif((fileToSendSize>20480L && ext.equals(""xls""))||\n\t\t\t\t\t(fileToSendSize>75L && ext.equals(""xml"")) ||\n\t\t\t\t\t(fileToSendSize>263L && ext.equals(""csv""))){\n\t\t\t\tboolean res = ftpClient.storeFile(remoteFolderName+nameFileToUpload, bis); \n\t\t\t\tSystem.out.println(""Uploading the file:""+nameFileToUpload+"" UserLogin: ""+usrConnDTO.getUserLogin());\n\n\t\t\t\t// to copy the file in invoice_sent folder and delete the send file.\n\t\t\t\tFile srcFile = new File(uploadFileNameWithoutExt+"".""+ext);\n\t\t\t\tFile destFile = new File(usrConnDTO.getInvoiceConfirmFolder()+""invoice_sent/""+nameFileToUpload);\n\t\t\t\tFileUtils.copyFile(srcFile, destFile);\n\t\t\t\tbis.close();\n\t\t\t\tbis = null;\n\t\t\t\tSystem.gc();\n\t\t\t\tsrcFile.delete();\n\t\t\t}\n\t\t} catch (IOException ex) {\n\t\t\tSystem.out.println(""Error: "" + ex.getMessage());\n\t\t\tex.printStackTrace();\n\t\t} finally {\n\t\t\ttry {\n\t\t\t\tif (ftpClient.isConnected()) {\n\t\t\t\t\tif(bis!=null)bis.close();\n\t\t\t\t\tftpClient.logout();\n\t\t\t\t}\n\t\t\t} catch (IOException ex) {\n\t\t\t\tex.printStackTrace();\n\t\t\t}\n\t\t}\n\t}*/\n\n\t/*=================================================================================\n\t\t\tgetInvoiceFileConfirm: Get File Name with his Extension\n\t=================================================================================*/\n\t/*\tstatic String[] getInvoiceFileConfirm(String path){\n\t\tString[] result=new String[2];\n\t\tFile localFilesList=new File(path);\n\t\tFile[] files = localFilesList.listFiles();\n\t\tif(files==null)files=new File[0];\n\t\tfor (File file : files) {\n\t\t\tString uploadFileName=file.getName();\n\t\t\tif (!""."".equals(uploadFileName) && !"".."".equals(uploadFileName) && !file.isDirectory()) {\n\t\t\t\tint index =uploadFileName.lastIndexOf(""."");\n\t\t\t\tString ext= uploadFileName.substring(index+1); \n\t\t\t\tString uploadFileNameWithoutExt=uploadFileName.substring(0,index); \n\t\t\t\tif(uploadFileNameWithoutExt.contains(""day_"")){\n\t\t\t\t\tresult[0]=path+uploadFileNameWithoutExt;\n\t\t\t\t\tresult[1]=ext;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\t*/\n}\n\n----------------------------------- SOURCE END -------------------------------------",1411155036091
error,log,,,"Problems occurred when invoking code from plug-in: ""org.eclipse.jdt.ui"".",1411155036092
error,log,,,"Error in JDT Core during reconcile",1411155036093
error,log,,,"Problems occurred when invoking code from plug-in: ""org.eclipse.core.resources"".",1411155036868
error,log,,,"Errors occurred during the build.",1411155036922
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1411155036930
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1411155039056
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1411155043494
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1411155044892
executed,command,org.eclipse.ui.ide,3.6.2.M20101201-0800,"org.eclipse.ui.project.cleanAction",1411155044901
