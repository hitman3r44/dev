what,kind,bundleId,bundleVersion,description,time
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1397000920285
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1397000920522
error,log,,,"Exception occurred during problem detection:\n----------------------------------- SOURCE BEGIN -------------------------------------\npackage com.loyauty.service.user;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.security.MessageDigest;\nimport java.util.ArrayList;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.List;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\nimport lombok.Getter;\nimport lombok.Setter;\nimport org.apache.log4j.Logger;\n\nimport com.Ostermiller.util.Base64;\nimport com.loyauty.dao.core.DaoCommand;\nimport com.loyauty.dao.core.DaoManager;\nimport com.loyauty.dao.core.DaoManagerFactory;\nimport com.loyauty.enums.Language;\nimport com.loyauty.enums.Type;\nimport com.loyauty.enums.UserType;\nimport com.loyauty.exception.DaoException;\nimport com.loyauty.exception.InvalidUserException;\nimport com.loyauty.exception.ServiceException;\nimport com.loyauty.model.ClientCategory;\nimport com.loyauty.model.Image;\nimport com.loyauty.model.Select;\nimport com.loyauty.model.User;\nimport com.loyauty.model.UserConnection;\nimport com.loyauty.service.ServiceImpl;\nimport com.loyauty.service.core.DTOFactory;\nimport com.loyauty.service.core.dto.BasicUserDTO;\nimport com.loyauty.service.core.dto.ClientCategoryDTO;\nimport com.loyauty.service.core.dto.ImageDTO;\nimport com.loyauty.service.core.dto.UserConnectionDTO;\nimport com.loyauty.service.core.dto.UserDTO;\nimport com.loyauty.service.core.dto.UserSessionDTO;\nimport com.loyauty.service.image.ImageService;\nimport com.loyauty.service.image.ImageServiceImpl;\nimport com.loyauty.util.CommonUtils;\nimport com.loyauty.util.communication.Receipt;\n\n/**\n * Provides all users related logic in the system.\n * \n *\n */\npublic class UserServiceImpl extends ServiceImpl implements UserService {\n \n\tprivate static final Logger log = Logger.getLogger(UserServiceImpl.class);\n\t\n\t@Setter @Getter\n\tprotected DaoManager daoManager;\n\t\n\t private SecretKeySpec skeySpec;\n\t private Cipher cipher;\n\t\n\t\n\tpublic UserServiceImpl() {\n\t\tsetDaoManager(DaoManagerFactory.getDaoManager());\n\t}\n\t\n\t@Override\n\tpublic UserSessionDTO authenticate(final String login, final String password) throws ServiceException, InvalidUserException{\n\t\treturn authenticate(login, password, false);\n\t}\n\t\n\t@Override\n\tpublic UserDTO authenticateByURL(final String login) throws ServiceException, InvalidUserException {\n\t\tUser user = null;\t\t\n\t\ttry {\n\t\t\tuser = (User) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\t\n\t\t\t\t\treturn daoManager.getUserDao().getUser(login);\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow new ServiceException(de);\n\t\t}\t\t\n\t\tUserDTO userDTO = DTOFactory.getUserDTOWithUserID(user);\n\t\treturn userDTO;\n\t}\n\t\n\n\t@Override\n\tpublic UserSessionDTO authenticate(final String login, final String password,\n\t\t\tfinal boolean encryptedPassword) throws ServiceException, InvalidUserException{\n\n\t\tif(!CommonUtils.isValidString(login) || !CommonUtils.isValidString(password)){\n\t\t\tthrow new IllegalArgumentException(""Can't authenticate null or empty user and/or password.\\n login-password="" +\n\t\t\t\t\tlogin + ""-"" + password);\n\t\t}\n\t\t\n\t\tUser user;\n\t\t\n\t\ttry {\n\t\t\tuser = (User) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\t\n\t\t\t\t\treturn daoManager.getUserDao().getUser(login);\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow new ServiceException(de);\n\t\t}\n\t\t\n\t\tUserSessionDTO userSessionDTO;\n\t\t\n\t\tif(user != null) {\t\t\t\t\t\n\t\t\t\t// Get the password\t\t\t\n\t\t\t\tString passwordToBeChecked = (encryptedPassword)?password:password; // TODO encryption issues\t\t\t\t\n\t\t\t\tif(passwordToBeChecked.equals(user.getPassword())){\n\t\t\t\t\tif(! user.isActive() ) {\n\t\t\t\t\t\tthrow new InvalidUserException(""Your account is disabled."");\n\t\t\t\t\t}\n\t\t\t\t\tuserSessionDTO = DTOFactory.getUserSessionDTO(user);\n\t\t\t\t}else{\n\t\t\t\t\tthrow new InvalidUserException(""bad login / password. Try again."");\n\t\t\t\t}\t\t\t\t\t\t\t\n\t\t} else{\n\t\t\tthrow new InvalidUserException(""bad login / password. Try again."");\n\t\t}\n\t\t\n\t\t\n\t\treturn userSessionDTO; \n\t}\t\n\n\t@Override\n\tpublic UserSessionDTO authenticateAdmin(final String login, final String password,\n\t\t\tfinal boolean encryptedPassword) throws ServiceException, InvalidUserException{\n\n\t\tUserSessionDTO result=null;\n\t\tUser user;\n\t\ttry {\n\t\t\tuser = (User) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\t\n\t\t\t\t\treturn daoManager.getUserDao().getAdmin(login, password);\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow new ServiceException(de);\n\t\t}\n\t\t\n\t\tif(user != null) {\t\n\t\t\tif(user.isActive() ) {\n\t\t\t\tresult = DTOFactory.getUserSessionDTO(user);\n\t\t\t}\t\t\t\t\t\n\t\t}\n\t\treturn result;\n\t}\t\n\t\t\n\t@Override\n\tpublic UserSessionDTO createAccount(final String login, final String password,\n\t\t\tfinal String email,long country, int primaryLang) throws ServiceException, InvalidUserException{\n\n\t\tif(!CommonUtils.isValidString(login) || !CommonUtils.isValidString(password) ||\n\t\t\t\t!CommonUtils.isValidString(email)){\n\t\t\tthrow new IllegalArgumentException(""Can't create a new account with invalid login-password-email="" +\n\t\t\t\t\tlogin + ""-"" + password + ""-"" + email);\n\t\t}\n\t\treturn authenticate(login, password);\n\t}\t\n\n\t@Override\n\tpublic boolean emailExists(final String email) throws ServiceException {\n\t\tboolean result = false;\n\t\ttry {\n\t\t\tresult = (Boolean) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\n\t\t\t\t\treturn daoManager.getUserDao().emailExists(email);\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException e) {\n\t\t\tthrow (new ServiceException(e));\n\t\t}\n\t\treturn result;\n\t}\n\n\t@Override\n\tpublic boolean usernameExists(final String username) throws ServiceException {\n\t\tboolean result;\n\t\ttry {\n\t\t\tresult = (Boolean) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\n\t\t\t\t\treturn daoManager.getUserDao().usernameExists(username);\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException e) {\n\t\t\tthrow (new ServiceException(e));\n\t\t}\n\t\treturn result;\n\t}\t\n\t\t\n\t@Override\n\tpublic boolean sendUserPassword(final String email) {\n\t\tfinal String requestFor = ""You request for Losting Email"";\n\t\ttry {\n\t\t\tfinal User user= (User)daoManager.executeAndHandle(new DaoCommand() {\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\t\t\n\t\t\t\t\treturn daoManager.getUserDao().getUserByEmail(email);\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t\tString login = user.getLogin();\t\t\t\n\t\t\tString passwd = user.getPassword();\t\t\t\n\t\t\tString body = ""Login: "" + login + ""\\nPass word: "" + passwd; \n\t\t\t\n\t\t\tReceipt.passwordRequest(user);\n\t\t\t\n\t\t\tif(log.isDebugEnabled()){\n\t\t\t\tlog.debug(user.getPassword());\n\t\t\t}\n\t\t} catch (DaoException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn false;\n\t}\n\n\t@Override\n\tpublic boolean updateLogin(long userId,  String login)\n\t\t\tthrows ServiceException {\n\t\tboolean reponse = false;\n\t\tfinal User user = new User();\n\t\tuser.setId(userId);\n\t\tuser.setLogin(login);\t\t\n\t\ttry{\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\treponse = (Boolean) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\n\t\t\t\t\t//here the database access\n\t\t\t\t\tdaoManager.getUserDao().updateLogin(user);\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}) ;\n\t\t}catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn reponse;\t\t\n\t}\n\t\n\t@Override\n\tpublic boolean updatePassword(long userId,  String newPassord)\n\t\t\tthrows ServiceException {\n\t\tboolean reponse = false;\n\t\tfinal User user = new User();\n\t\tuser.setId(userId);\n\t\tuser.setPassword(newPassord);\t\t\n\t\ttry{\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\treponse = (Boolean) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\n\t\t\t\t\t//here the database access\n\t\t\t\t\tdaoManager.getUserDao().updatePassword(user);\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}) ;\n\t\t}catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn reponse;\t\t\n\t}\t\n\n\t@Override\n\tpublic UserSessionDTO adminAuthenticate(String login, String password)\n\t\t\tthrows ServiceException, InvalidUserException {\n\t\tUserSessionDTO userSessionDTO = authenticate(login, password, false);\n\n\t\treturn userSessionDTO;\n\t}\t\n\n\n\t@Override\n\tpublic UserSessionDTO authenticateAdmin(String login, String password)\n\t\t\tthrows ServiceException, InvalidUserException {\n\t\tUserSessionDTO userSessionDTO = authenticateAdmin(login, password, false);\n\n\t\treturn userSessionDTO;\n\t}\t\n\n\t\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<UserSessionDTO> getAllUserAccounts(BasicUserDTO basicUserDTO)\n\t\t\tthrows ServiceException {\n\t\tfinal User user = new User();\n\t\tuser.setActive(basicUserDTO.isActive());\n\t\tuser.setTypeId(basicUserDTO.getTypeId());\n\t\tList<User> userList = null;\n\t\ttry {\t\t\t\n\t\t\tuserList = (List<User>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\n\t\t\t\t\t//here the database access\n\t\t\t\t\treturn daoManager.getUserDao().getAllUserAccounts(user);\n\t\t\t\t}\n\t\t\t}) ;\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\t\t\n\t\treturn DTOFactory.getAllUsersAccountsDTO(userList);\n\t}\n\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<UserSessionDTO> getAllUsers(BasicUserDTO basicUserDTO)\n\t\t\tthrows ServiceException {\n\t\tfinal User user = new User();\n\t\tuser.setTypeId(basicUserDTO.getTypeId());\t\n\t\tList<User> userList = null;\n\t\ttry {\t\t\t\n\t\t\tuserList = (List<User>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\n\t\t\t\t\t//here the database access\n\t\t\t\t\treturn daoManager.getUserDao().getAllUsers(user);\t\t\t\t\n\t\t\t\t}\n\t\t\t}) ;\n\t\t}catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn DTOFactory.getAllUsersAccountsDTO(userList);\n\t}\t\n\t\n\t@Override\n\tpublic ImageDTO transferProfileImage(final long userId, String imageName, File fileImage, String applicationPath,long uploaderId, String login)\n\t\t\tthrows ServiceException {\n\t\tlong temp = 0; \n\t\tImageService ish = new ImageServiceImpl();\n\t\tfinal Image image = new Image();\n\t\timage.setUploaderId(uploaderId);\n\t\ttry {\n\t\t\t// Validate if the name is already present in the DB\n\t\t\tString normalizedName= CommonUtils.getNormalizedProfile(imageName, login, userId);\n\t\t\t//Validate if the image extension is JPEG or PNG\n\t\t\tint i = ish.isJPEGPNGImage1(fileImage);\n\t\t\tif (i==1) {\n\t\t\t\timage.addImageJps(fileImage,normalizedName,imageName);\n\t\t\t}else{\n\t\t\t\tthrow new ServiceException(""Game Logo Image Format not supported "" + fileImage.getName() );\n\t\t\t}\n\t\t\timage.setName(normalizedName);\n\t\t\timage.setRealNameImg(imageName);\n\t\t\t//Variables Initialization \n\t\t\timage.setType(Type.PRODUCT);\n\t\t\timage.setId(temp);\n\t\t\t// Transfer the logo to the server logo directory\n\t\t\t/*if (!ish.transferProfileImage(fileImage, imageName, login, uploaderId, applicationPath)){\n\t\t\t\tthrow new ServiceException(""Could not transfer the image"" + \n\t\t\t\t\t\t""\\nimageName:"" + fileImage.getName() \n\t\t\t\t\t\t+ ""\\nNormalized image Logo:"" + normalizedName);\n\t\t\t}*/\n\t\t} catch (IOException e) {\n\t\t\tthrow new ServiceException(e);\n\t\t}\n\t\treturn DTOFactory.getImageDTO(image); \n\t}\n\t\n\t@Override\n\tpublic long createUser(UserDTO userDTO) throws ServiceException, InvalidUserException {\n\t\tlong userId = 0;\n\t\tfinal User user = new User();\n\t\tuser.setLogin(userDTO.getLogin());\n\t\tuser.setMultiplier(userDTO.getMultiplier());\n\t\tuser.setPassword(userDTO.getPassword());\n\t\tuser.setCode(userDTO.getCode());\n\t\tuser.setTypeId(userDTO.getTypeId());\n\t\tuser.setEmail(userDTO.getEmail());\n\t\tuser.setActive(userDTO.isActive());\n\t\tuser.setRealName(userDTO.getRealName());\n\t\t// user.setAge(userDTO.getAge());\n\t\tuser.setAddress(userDTO.getAddress());\n\t\tuser.setPostalCode(userDTO.getPostalCode());\n\t\tuser.setPhone(userDTO.getPhone());\n\t\tuser.setClientCategoryId(userDTO.getClientCategoryId());\n\t\tuser.setManagerId(userDTO.getManagerId());\n\t\tif(userDTO.getImageDTO() != null)\n\t\t\tuser.setImageId(userDTO.getImageDTO().getId());\n\t\tuser.setPrimaryLanguage((Language)CommonUtils.enumFromValue(Language.values(), userDTO.getPrimaryLanguage()));\n\t\tuser.setSecondaryLanguage((Language)CommonUtils.enumFromValue(Language.values(), userDTO.getSecondaryLanguage()));\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tuserId = (Long) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\n\t\t\t\t\tdaoManager.getUserDao().insertUserAccount(user);\n\t\t\t\t\tdaoManager.getUserDao().insertUserProfil(user);\n\t\t\t\t\t//Just in user case, I insert all the products to the user\n\t\t\t\t\tif(user.getTypeId() == UserType.USER.getValue()) {\n\t\t\t\t\t\tdaoManager.getUserDao().insertProductToUsers(user);\n\t\t\t\t\t}\n\t\t\t\t\treturn user.getId();\n\t\t\t\t}\n\t\t\t});\n\t\t}catch (DaoException de) {\n\t\t\tthrow new ServiceException(de);\n\t\t}\t\t\n\t\treturn userId;\n\t}\t\n\t\t\n\t@Override\n\tpublic UserDTO getUserInformation(final Long userId) throws ServiceException {\n\t\tUser userResult = new User();\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tuserResult = (User) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) \n\t\t\t\t\t\tthrows DaoException {\n\t\t\t\t\tUser usr = daoManager.getUserDao().getUser(userId);\n\t\t\t\t\treturn usr;\n\t\t\t\t}\n\t\t\t});\t\t\t\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn (DTOFactory.getUserDTO(userResult));\t\n\t}\n\t\n\t@Override\n\tpublic UserDTO getAnyUserFromId(final Long userId) throws ServiceException {\n\t\tUser userResult = new User();\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tuserResult = (User) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) \n\t\t\t\t\t\tthrows DaoException {\n\t\t\t\t\tUser usr = daoManager.getUserDao().getAnyUserFromId(userId);\n\t\t\t\t\treturn usr;\n\t\t\t\t}\n\t\t\t});\t\t\t\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn (DTOFactory.getUserDTO(userResult));\t\n\t}\n\t\n\t@Override\n\tpublic void updateUser(final UserDTO userDTO) throws ServiceException {\t\n\t\ttry \n\t\t{\n\t\t    daoManager.setCommitTransaction(true);\n\t\t    daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager)\n\t\t\t\tthrows DaoException {\t\t\t\t\t\n\t\t\t\t\tUser user = buildUser(userDTO);\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\tdaoManager.getUserDao().updateUserById(user);\t\t\t\t\t\n\t\t\t\t\treturn user;\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException e) {\n\t\t\tthrow (new ServiceException(e));\n\t\t}\n\t}\n\t\n\tprivate Language getLanguage(int value) {\n\t\tLanguage lang = null;\n\t\tif (value == 1) lang = Language.ENGLISH;\n\t\tif (value == 2) lang = Language.FRENCH;\n\t\treturn lang;\n\t}\n\t\n\tprivate User buildUser(final UserDTO userDTO) {\n\t\tUser user = new User();\n\t\tint lang = 0;\n\t\tLanguage primary=null, secondary=null;\t\t\n\t\tuser.setId(userDTO.getId());\n\t\tuser.setLogin(userDTO.getLogin());\n\t\tuser.setCode(userDTO.getCode());\n\t\tuser.setTypeId(userDTO.getTypeId());\n\t\tuser.setPassword(userDTO.getPassword());\n\t\tuser.setEmail(userDTO.getEmail());\n\t\tuser.setActive(userDTO.isActive());\n\t\tuser.setRealName(userDTO.getRealName());\n\t\tuser.setManagerId(userDTO.getManagerId());\n\t\t// user.setAge(userDTO.getAge());\n\t\tuser.setAddress(userDTO.getAddress());\n\t\tuser.setPostalCode(userDTO.getPostalCode());\n\t\tuser.setPhone(userDTO.getPhone());\n\t\tuser.setNote(userDTO.getNote());\n\t\tlang = userDTO.getPrimaryLanguage();\n\t\tprimary = getLanguage(lang);\t\t\t\t\t\n\t\tuser.setPrimaryLanguage(primary);\n\t\t\n\t\tlang = userDTO.getSecondaryLanguage();\n\t\tsecondary = getLanguage(lang);\n\t\tuser.setSecondaryLanguage(secondary);\n\t\tuser.setMultiplier(userDTO.getMultiplier());\n\t\tuser.setClientCategoryId(userDTO.getClientCategoryId());\n\t\tuser.setUpdateDate(userDTO.getUpdateDate());\n\t\treturn user;\n\t}\n\n\tprivate User buildNoteAdminUser(final UserDTO userDTO) {\n\t\tUser user = new User();\t\t\n\t\tuser.setId(userDTO.getId());\n\t\tuser.setNote(userDTO.getNote());\n\t\treturn user;\n\t}\n\t\n\t@Override\n\tpublic void updateClientCategoryID(final Long clientCategoryId, final Long userId) throws ServiceException {\t\t\n\t\ttry{\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tdaoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\n\t\t\t\t\tSelect select = new Select();\n\t\t\t\t\tselect.setClientCategoryId(clientCategoryId);\n\t\t\t\t\tselect.setUserId(userId);\n\t\t\t\t\tdaoManager.getUserDao().updateClientCategoryID(select);\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t});\n\t\t}  catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t}\n\t\n\t@Override\n\tpublic User getUserByLogin(final String login) {\n\t\t// TODO Auto-generated method stub\n\t\t\n\t\tUser result=null;\t\t\n\t\ttry{\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tresult = (User) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\n\t\t\t\t\treturn daoManager.getUserDao().getUserByLogin(login);\n\t\t\t\t}\n\t\t\t});\n\t\t}catch (DaoException de) {\n\t\t\ttry {\n\t\t\t\tthrow new ServiceException(de);\n\t\t\t} catch (ServiceException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\t\n\t@Override\n\tpublic User getCountUserShippingTotal(final User user) {\n\t\t\n\t\tUser result=null;\t\t\n\t\ttry{\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tresult = (User) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\n\t\t\t\t\treturn daoManager.getUserDao(). getCountUserShippingTotal(user);\n\t\t\t\t}\n\t\t\t});\n\t\t}catch (DaoException de) {\n\t\t\ttry {\n\t\t\t\tthrow new ServiceException(de);\n\t\t\t} catch (ServiceException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\t\n\t@Override\n\tpublic User getCountUserProductPrice(final User user) {\n\t\t// TODO Auto-generated method stub\n\t\t\n\t\tUser result=null;\t\t\n\t\ttry{\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tresult = (User) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\n\t\t\t\t\treturn daoManager.getUserDao(). getCountUserProductPrice(user);\n\t\t\t\t}\n\t\t\t});\n\t\t}catch (DaoException de) {\n\t\t\ttry {\n\t\t\t\tthrow new ServiceException(de);\n\t\t\t} catch (ServiceException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\t\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<ClientCategoryDTO> getAllClientCategory() throws ServiceException {\n\t\t// TODO Auto-generated method stub\n\t\tList<ClientCategory> userList = null;\n\t\ttry {\t\t\t\n\t\t\tuserList = (List<ClientCategory>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\n\t\t\t\t\t//here the database access\n\t\t\t\t\treturn daoManager.getUserDao().getAllClientCategory();\n\t\t\t\t}\n\t\t\t}) ;\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\t\n\t\treturn DTOFactory.getAllClientCategoryDTO(userList);\n\t}\n\t\n\t@Override\n\tpublic ClientCategoryDTO getClientCategoryById(final Long clientCategoryId) {\n\t\tClientCategory result=null;\t\t\n\t\ttry{\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tresult = (ClientCategory) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\n\t\t\t\t\treturn daoManager.getUserDao().getClientCategoryById(clientCategoryId);\n\t\t\t\t}\n\t\t\t});\n\t\t}catch (DaoException de) {\n\t\t\ttry {\n\t\t\t\tthrow new ServiceException(de);\n\t\t\t} catch (ServiceException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\treturn DTOFactory.getCategoryDTO(result);\n\t}\n\t\t\n\t@Override\n\tpublic ClientCategoryDTO getClientCategoryByName(final String clientCategoryName) {\n\t\tClientCategory result=null;\t\t\n\t\ttry{\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tresult = (ClientCategory) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\n\t\t\t\t\treturn daoManager.getUserDao().getClientCategoryByName(clientCategoryName);\n\t\t\t\t}\n\t\t\t});\n\t\t}catch (DaoException de) {\n\t\t\ttry {\n\t\t\t\tthrow new ServiceException(de);\n\t\t\t} catch (ServiceException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\treturn DTOFactory.getCategoryDTO(result);\n\t}\n\t\n\t@Override\n\tpublic boolean updateUserAdmin(final UserDTO userDTO) {\n\t\t\n\t\tboolean result=false;\t\t\n\t\ttry{\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tresult = (Boolean) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\n\t\t\t\t\tUser user = buildUser(userDTO);\n\t\t\t\t\treturn daoManager.getUserDao().updateUserAdmin(user);\n\t\t\t\t}\n\t\t\t});\n\t\t}catch (DaoException de) {\n\t\t\ttry {\n\t\t\t\tthrow new ServiceException(de);\n\t\t\t} catch (ServiceException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\treturn result;\t\t\n\t}\n\n\t@Override\n\tpublic boolean updateNoteAdmin(final UserDTO userDTO) {\n\t\tboolean result=false;\t\t\n\t\ttry{\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tresult = (Boolean) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\n\t\t\t\t\tUser user = buildNoteAdminUser(userDTO);\n\t\t\t\t\treturn daoManager.getUserDao().updateNoteAdmin(user);\n\t\t\t\t}\n\t\t\t});\n\t\t}catch (DaoException de) {\n\t\t\ttry {\n\t\t\t\tthrow new ServiceException(de);\n\t\t\t} catch (ServiceException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\treturn result;\t\n\t}\n\n\t@Override\n\tpublic UserDTO getUserOrTemplateById(final Long userId) {\n\t\tUser result=null;\t\t\n\t\ttry{\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tresult = (User) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\n\t\t\t\t\treturn daoManager.getUserDao().getUserOrTemplateById(userId);\n\t\t\t\t}\n\t\t\t});\n\t\t}catch (DaoException de) {\n\t\t\ttry {\n\t\t\t\tthrow new ServiceException(de);\n\t\t\t} catch (ServiceException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\treturn (DTOFactory.getUserDTO(result));\n\t}\n\t\n\t@Override\n\tpublic Long insertTemplate(final UserDTO userDTO) throws ServiceException {\n\t\tLong userID = 0L;\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tuserID = (Long) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\n\t\t\t\t\tUser user = new User();\n\t\t\t\t\tuser.setLogin(userDTO.getClientCategoryName());\n\t\t\t\t\tuser.setCode("""");\n\t\t\t\t\tuser.setTypeId(2);\n\t\t\t\t\tuser.setPassword("""");\n\t\t\t\t\tuser.setEmail(userDTO.getClientCategoryName());\n\t\t\t\t\tuser.setLastLoginDate(null);\n\t\t\t\t\tuser.setActive(false);\n\t\t\t\t\tuser.setTemplate(true);\n\t\t\t\t\tuser.setUpdateDate(null);\n\t\t\t\t\tuser.setRealName(userDTO.getClientCategoryName());\n\t\t\t\t\tuser.setAddress(null);\n\t\t\t\t\tuser.setPostalCode(null);\n\t\t\t\t\tuser.setPhone(null);\n\t\t\t\t\tuser.setImageId(null);\n\t\t\t\t\tuser.setPrimaryLanguage(null);\n\t\t\t\t\tuser.setSecondaryLanguage(null);\n\t\t\t\t\tuser.setMultiplier(null);\n\t\t\t\t\tuser.setClientCategoryName(userDTO.getClientCategoryName());\n\t\t\t\t\tuser.setClientCategoryId(userDTO.getClientCategoryId());\n\t\t\t\t\tuser.setManagerId(userDTO.getManagerId());\n\t\t\t\t\tuser.setNote("""");\n\t\t\t\t\tdaoManager.getUserDao().insertTemplateOnUserAccount(user);\n\t\t\t\t\tdaoManager.getUserDao().insertTemplateOnUserProfile(user);\n\t\t\t\t\treturn user.getId();\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn userID;\n\t}\n\t\n\t@Override\n\tpublic void deleteTemplate(final Long userId) throws ServiceException {\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tdaoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\n\t\t\t\t\tSelect select = new Select();\n\t\t\t\t\tselect.setUserId(userId);\n\t\t\t\t\tdaoManager.getUserDao().deleteUserProfile(select);\n\t\t\t\t\tdaoManager.getProductDao().deleteShippingTotalByUserId(select);\n\t\t\t\t\tdaoManager.getProductDao().deleteUserProductPriceByUserId(select);\n\t\t\t\t\tdaoManager.getProductDao().deleteAlterUserProductXMLByUserId(select);\n\t\t\t\t\tdaoManager.getProductDao().deleteUserProvincePopulationByUserId(select);\n\t\t\t\t\tdaoManager.getUserDao().deleteUserAccount(select);\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t}\n\t\n\t@Override\n\tpublic UserDTO getAdmin(final String login, final String password)throws ServiceException {\n\t\tUser userResult = new User();\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tuserResult = (User) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) \n\t\t\t\t\t\tthrows DaoException {\n\t\t\t\t\tUser usr = daoManager.getUserDao().getAdmin(login, password);\n\t\t\t\t\treturn usr;\n\t\t\t\t}\n\t\t\t});\t\t\t\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn (DTOFactory.getUserDTO(userResult));\t\n\t}\n\n\t\n\t@Override\n\tpublic UserDTO getSuperAdmin(final String login, final String password)throws ServiceException {\n\t\tUser userResult = new User();\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tuserResult = (User) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(com.loyauty.dao.core.DaoManager daoManager) \n\t\t\t\t\t\tthrows DaoException {\n\t\t\t\t\tUser usr = daoManager.getUserDao().getSuperAdmin(login, password);\n\t\t\t\t\treturn usr;\n\t\t\t\t}\n\t\t\t});\t\t\t\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn (DTOFactory.getUserDTO(userResult));\t\n\t}\n\n\t\n\t@Override\n\tpublic boolean insertUserConnection(UserConnectionDTO userConnectionDTO) throws ServiceException {\n\t\tfinal UserConnection userConnection = DTOFactory.getUserConnectionFromUserConnectionDTO(userConnectionDTO) ;\n\t\tboolean result=false;\n\t\ttry{\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tresult = (Boolean)daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager) throws DaoException {\t\t\t\n\t\t\t\t\treturn daoManager.getUserDao().insertUserConnection(userConnection);\n\t\t\t\t}\n\t\t\t});\n\t\t}catch (DaoException de) {\n\t\t\ttry {\n\t\t\t\tthrow new ServiceException(de);\n\t\t\t} catch (ServiceException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\t\n\t\n\t@Override\n\tpublic UserConnectionDTO getUserConnectionByUserId(final Long userId)\tthrows ServiceException { \n\t\tUserConnection UserConnectionResult = new UserConnection();\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tUserConnectionResult = (UserConnection) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager)  \n\t\t\t\t\t\tthrows DaoException {\n\t\t\t\t\tUserConnection usr = daoManager.getUserDao().getUserConnectionByUserId(userId);\n\t\t\t\t\treturn usr;\n\t\t\t\t}\n\t\t\t});\t\t\t\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de));\n\t\t}\n\t\treturn (DTOFactory.getUserConnectionDTOFromUserConnection(UserConnectionResult));\n\t}\n\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic List<UserConnectionDTO> getAllUsersConnections()throws ServiceException { \n\t\tList<UserConnection> userConnList = new ArrayList<UserConnection>();\n\t\ttry {\n\t\t\tdaoManager.setCommitTransaction(true);\n\t\t\tuserConnList = (List<UserConnection>) daoManager.executeAndHandle(new DaoCommand() {\n\t\t\t\t@Override\n\t\t\t\tpublic Object execute(DaoManager daoManager)  \n\t\t\t\t\t\tthrows DaoException {\n\t\t\t\t\tList<UserConnection> result = daoManager.getUserDao().getAllUsersConnections();\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\t\t\t});\t\t\t\n\t\t} catch (DaoException de) {\n\t\t\tthrow (new ServiceException(de)); \n\t\t}\n\t\treturn (DTOFactory.getUserConnListDTOFromUserConnList(userConnList));\n\t}\n\t\t\n\t\n\t\n\t\n\t// Method to encrypt the String\n\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic String encrypt (String toEncode) throws Exception{\n\t\ttry{\n\t\t\tbyte[] bytesOfMessage = ""KLFMEDIA2005"".getBytes(""UTF-8"");\n\t\t\tMessageDigest md = MessageDigest.getInstance(""MD5"");\n\t\t\tbyte[] thedigest = md.digest(bytesOfMessage);\n\t\t\tskeySpec = new SecretKeySpec(thedigest, ""AES"");\n\t\t\t    \n\t\t\tskeySpec = new SecretKeySpec(new byte[16], ""AES"");\n\t\t\tcipher = Cipher.getInstance(""AES/ECB/PKCS5Padding"");\n\t\t}catch(Exception e){\n\t\t\te.printStackTrace();\n\t\t}\n\t    //returns byte array encrypted with key\n\t\tbyte[] input = toEncode.getBytes(""UTF-8"");\n\t    cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n\t    byte[] ciphertext =  cipher.doFinal(input);\n\t    return  new String(Base64.encode(ciphertext));\n\t}\t\n\t// Method to decrypt the encoded String.\n\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic String decrypt (String toDecrypt) throws Exception{\n\t\ttry{\n\t\t\tbyte[] bytesOfMessage = ""KLFMEDIA2005"".getBytes(""UTF-8"");\n\t\t\tMessageDigest md = MessageDigest.getInstance(""MD5"");\n\t\t\tbyte[] thedigest = md.digest(bytesOfMessage);\n\t\t\tskeySpec = new SecretKeySpec(thedigest, ""AES"");\n\t\t\t    \n\t\t\tskeySpec = new SecretKeySpec(new byte[16], ""AES"");\n\t\t\tcipher = Cipher.getInstance(""AES/ECB/PKCS5Padding"");\n\t\t}catch(Exception e){\n\t\t\te.printStackTrace();\n\t\t}\n\t\tbyte[] decrypted = Base64.decode(toDecrypt.getBytes());\n\t    cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n\t    byte[] ciphertext = cipher.doFinal(decrypted);\n\t    return\tnew String (ciphertext, ""UTF-8"");\n\t}\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n}\n\n----------------------------------- SOURCE END -------------------------------------",1397000921217
error,log,,,"Problems occurred when invoking code from plug-in: ""org.eclipse.jdt.ui"".",1397000921218
error,log,,,"Error in JDT Core during reconcile",1397000921219
error,log,,,"Exception occurred during problem detection:\n----------------------------------- SOURCE BEGIN -------------------------------------\npackage com.loyauty.web.struts.action.user;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.security.MessageDigest;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\nimport javax.servlet.http.HttpSession;\n\n\nimport com.loyauty.exception.ServiceLocatorException;\nimport com.loyauty.model.User;\nimport com.loyauty.service.ServiceLocator;\nimport com.loyauty.service.core.dto.BasicUserDTO;\nimport com.loyauty.service.core.dto.UserConnectionDTO;\nimport com.loyauty.service.core.dto.UserDTO;\nimport com.loyauty.service.core.dto.UserSessionDTO;\nimport com.loyauty.service.user.UserService;\nimport com.loyauty.web.struts.action.LoyautyAction;\n\n\nimport lombok.Getter;\nimport lombok.Setter;\n\nimport javax.crypto.*;\nimport javax.crypto.spec.*;\nimport com.Ostermiller.util.Base64;\nimport java.security.MessageDigest;\n\npublic class UserConnection extends LoyautyAction {\n\t\n\tprivate static final long serialVersionUID = -456834673L;\n\n\tprivate ServiceLocator serviceLocator;\n\tprivate UserService userService;\n\t\n\t@Getter @Setter\n\tprivate UserConnectionDTO userConnectionDTO;\n\t@Getter @Setter\n\tprivate List<User> usersList;\n\tprivate static int USER_TYPE = 2;\n\t@Getter @Setter\n\tprivate String userLogo;\n\t@Getter @Setter\n\tprivate Long userId;\n\t@Getter @Setter\n\tprivate Long userIdFindedSignal;\n\t@Getter @Setter\n\tprivate Long saveUser;\n\t@Getter @Setter\n\tprivate String host;\n\t@Getter @Setter\n\tprivate Integer port;\n\t@Getter @Setter\n\tprivate String userLogin;\n\t@Getter @Setter\n\tprivate String userName;\n\t@Getter @Setter\n\tprivate String password;\n\t@Getter @Setter\n\tprivate String remoteFolder;\n\t@Getter @Setter\n\tprivate String protocol;\n\t@Getter @Setter\n\tprivate String ordersFolder;\n\t@Getter @Setter\n\tprivate String ordersConfirmFolder;\n\t@Getter @Setter\n\tprivate String message;\n\t@Getter @Setter\n\tprivate String showConfirmSaveUserConnectionPop;\n\t@Getter @Setter\n\tprivate String showSaveSuccessPop;\n\t@Getter @Setter\n\tprivate String showNotificationMissingFieldsPop;\n\t@Getter @Setter\n\tprivate Integer saveUserConnectionConfirmed;\n\t\n\t private SecretKeySpec skeySpec;\n\t private Cipher cipher;\t\n\t \n\tpublic UserConnection() throws ServiceLocatorException{\n\t\tsuper();\n\t\tuserService = getServiceLocator().getUserService();\n\t\tuserConnectionDTO=new UserConnectionDTO();\n\t\ttry{\n\t\t\tbyte[] bytesOfMessage = ""KLFMEDIA2005"".getBytes(""UTF-8"");\n\t\t\tMessageDigest md = MessageDigest.getInstance(""MD5"");\n\t\t\tbyte[] thedigest = md.digest(bytesOfMessage);\n\t\t\tskeySpec = new SecretKeySpec(thedigest, ""AES"");\n\t\t\t    \n\t\t\tskeySpec = new SecretKeySpec(new byte[16], ""AES"");\n\t\t\tcipher = Cipher.getInstance(""AES/ECB/PKCS5Padding"");\n\t\t}catch(Exception e){\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\t\n\t@SuppressWarnings(""unchecked"")\n\t@Override\n\tpublic String execute() throws Exception {\n\ttry{\n\t\tHttpSession session = request.getSession(true);\n\t\tshowConfirmSaveUserConnectionPop=""visibility:hidden;display:none;"";\n\t\tshowSaveSuccessPop=""visibility:hidden;display:none;"";\n\t\tshowNotificationMissingFieldsPop=""visibility:hidden;display:none;"";\n\t\tuserLogo=(String)session.getAttribute(""userLogo"");\n\t\tBasicUserDTO basicUserDTO = new BasicUserDTO();\n\t\tbasicUserDTO.setTypeId(USER_TYPE);\n\t\tList<User> usersListSession=(List<User>)session.getAttribute(""usersListSession"");\n\t\tif(usersListSession==null){\n\t\t\tList<UserSessionDTO> listAllUsers= userService.getAllUsers(basicUserDTO);\n\t\t\tusersList=new ArrayList<User>();\n\t\t\t\tfor(UserSessionDTO userDTO:listAllUsers){\n\t\t\t\t\tUser user=new User();\n\t\t\t\t\tuser.setId(userDTO.getId());\n\t\t\t\t\tuser.setLogin(userDTO.getLogin());\n\t\t\t\t\tusersList.add(user);\n\t\t\t\t}\n\t\t\t\tsession.setAttribute(""usersListSession"",usersList);\n\t\t\t}else usersList=usersListSession;\n\t\t\t\n\t\t\tif(userIdFindedSignal==null || userIdFindedSignal==0L){\n\t\t\t\tuserId=(Long)session.getAttribute(""userId"");\n\t\t\t\tif(userId!=null){\n\t\t\t\t\tUserDTO userFind=userService.getUserInformation(userId);\n\t\t\t\t\tuserLogin=userFind.getLogin();\n\t\t\t\t}\n\t\t\t}\n\t\t\t/*-------------------- When Admin Find User Login ---------------------------*/\n\t\t\tif(userIdFindedSignal!=null && userIdFindedSignal!=0L){\n\t\t\t\tUser user=userService.getUserByLogin(userLogin);\n\t\t\t\t//userSelected=userService.getUserByLogin(userLogin);\n\t\t\t\tuserLogo=null;\n\t\t\t\tuserId=null;\n\t\t\t\tif(user!=null){\n\t\t\t\t\tuserId=user.getId();\n\t    \t\t\t//show user logo\n\t    \t\t\tuserLogo=""./images/orders/usersLogos/""+userLogin+"".png"";\n\t\t\t\t}else userLogin=null;\n\n\t\t\t\tString filePath = session.getServletContext().getRealPath(""/"");\n    \t\t\t//if userLogo dosn't exist give him a blank logo\n    \t\t\tcreateUserLogo(filePath +""images/orders/usersLogos/BLANK.png"", filePath +""images/orders/usersLogos/""+userLogin+"".png"");\n    \t\t\tsession.setAttribute(""userLogo"",userLogo);\n\t\t\t\tsession.setAttribute(""userId"",userId);\n\t\t\t\t//Get the user connection details if they already exists.\n\t\t\t\tuserConnectionDTO=userService.getUserConnectionByUserId(userId);\n\t\t\t\tif(userConnectionDTO!= null){\n\t\t\t\t\tuserName=decrypt(userConnectionDTO.getUserName());\n\t\t\t\t\thost=decrypt(userConnectionDTO.getHost());\n\t\t\t\t\tport=(userConnectionDTO.getPort()- 255);\n\t\t\t\t\tpassword=decrypt(userConnectionDTO.getPassword());\n\t\t\t\t\tremoteFolder = userConnectionDTO.getRemoteFolder();\n\t\t\t\t\tprotocol = userConnectionDTO.getProtocol();\n\t\t\t\t\tordersFolder=userConnectionDTO.getOrdersFolder();\n\t\t\t\t\tordersConfirmFolder=userConnectionDTO.getOrdersConfirmFolder();\n\t\t\t\t}else{\n\t\t\t\t\tuserName="""";\n\t\t\t\t\thost="""";\n\t\t\t\t\tport=0;\n\t\t\t\t\tpassword= """";\n\t\t\t\t\tremoteFolder ="""";\n\t\t\t\t\tprotocol ="""";\t\t\n\t\t\t\t\tordersFolder="""";\n\t\t\t\t\tordersConfirmFolder="""";\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(userId==null)userLogin="""";\n\t\t\t\n\t\t\t// create UserConnectionDTO to insert.\n\t\t\tif(userConnectionDTO!= null && saveUser!=null && saveUser!=0L){\n\t\t\t\tUserConnectionDTO validateUserConnectionDTO = new UserConnectionDTO();\n\t\t\t\tuserConnectionDTO.setHost(host);\n\t\t\t\tuserConnectionDTO.setPort(port);\n\t\t\t\tuserConnectionDTO.setUserName(userName);\n\t\t\t\tuserConnectionDTO.setPassword(password);\n\t\t\t\tuserConnectionDTO.setRemoteFolder(remoteFolder);\n\t\t\t\tuserConnectionDTO.setUserId(userId);\n\t\t\t\tuserConnectionDTO.setProtocol(protocol);\n\t\t\t\tuserConnectionDTO.setOrdersFolder(ordersFolder);\n\t\t\t\tuserConnectionDTO.setOrdersConfirmFolder(ordersConfirmFolder);\n\t\t\t\t//check all fields are entered.\n\t\t\t\tvalidateUserConnectionDTO = validateUserConnectionDTO(userConnectionDTO);\n\t\t\t\tif(validateUserConnectionDTO!= null){\n\t\t\t\t\tshowConfirmSaveUserConnectionPop=""display:block;visibility:visible;"";\n\t\t\t\t\tmessage="""";\n\t\t\t\t\tif(saveUserConnectionConfirmed!=null && saveUserConnectionConfirmed==1){\n\t\t\t\t\t\tuserConnectionDTO.setHost(encrypt(host));\n\t\t\t\t\t\tuserConnectionDTO.setPassword(encrypt(password));\n\t\t\t\t\t\tuserConnectionDTO.setUserName(encrypt(userName));\n\t\t\t\t\t\tuserConnectionDTO.setPort(port+255);\n\t\t\t\t\t\tboolean result = userService.insertUserConnection(userConnectionDTO);\n\t\t\t\t\t\tif(result==true){\n\t\t\t\t\t\t\tmessage=""User Connection information was succesfully added."";\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\tmessage=""The system encountered a problem and can not save this user connection details."";\n\t\t\t\t\t\t}\n\t\t\t\t\t\tshowSaveSuccessPop=""display:block;visibility:visible;"";\n\t\t\t\t\t\treturn SUCCESS;\t\n\t\t\t\t\t}\n\t\t\t\t}else{\n\t\t\t\t\tmessage=""Please fill all fields."";\n\t\t\t\t\tshowNotificationMissingFieldsPop=""display:block;visibility:visible;"";\n\t\t\t\t\treturn SUCCESS;\t\n\t\t\t\t}\n\t\t\t\tmessage=""Are you sure, you want to save the user connection details?"";\n\t\t\t\tshowConfirmSaveUserConnectionPop=""display:block;visibility:visible;"";\n\t\t\t}\n\t}catch (Exception e) {\n\t\te.printStackTrace();\n\t\treturn ""input"";\n\t}\n\t\treturn SUCCESS;\n\t}\n\n\t/*=========================  createUserLogo =========================================\n\t \t\t\t\tCreate  Blank User Logo if not Exist\n\t=====================================================================================*/\n\tpublic void createUserLogo(String source, String destination) throws IOException{\n\t\tFile fileLogo=new File(destination);\n\t\tif(!fileLogo.exists()){\n\t\t\tInputStream in = new FileInputStream(source);\n\t\t\tOutputStream out = new FileOutputStream(destination);\n\t\t\tbyte[] buf = new byte[1024];\n\t\t\tint len;\n\t\t\twhile ((len = in.read(buf)) > 0) {\n\t\t\t\tout.write(buf, 0, len);\n\t\t\t}\n\t\t\tin.close();\n\t\t\tout.close();\t\n\t\t}\n\t}\n\t\n\t/*=========================  Validate the DTO ===========================================\n\t\t\tMethod used to validate that all the required filed are present\n\t=========================================================================================*/\n\tpublic UserConnectionDTO validateUserConnectionDTO(UserConnectionDTO validateUserConnectionDTO) {\n\t\tif( validateUserConnectionDTO.getHost()== null || validateUserConnectionDTO.getHost().equals("""")||\n\t\t\tvalidateUserConnectionDTO.getPort()== null || validateUserConnectionDTO.getPort().equals("""") || validateUserConnectionDTO.getPort()==0L ||\n\t\t\tvalidateUserConnectionDTO.getUserId()== null || validateUserConnectionDTO.getUserId().equals("""") ||\n\t\t\tvalidateUserConnectionDTO.getUserName()== null || validateUserConnectionDTO.getUserName().equals("""") ||\n\t\t\tvalidateUserConnectionDTO.getPassword()== null || validateUserConnectionDTO.getPassword().equals("""") ||\n\t\t\tvalidateUserConnectionDTO.getRemoteFolder()== null || validateUserConnectionDTO.getRemoteFolder().equals("""") ||\n\t\t\tvalidateUserConnectionDTO.getProtocol()== null || validateUserConnectionDTO.getProtocol().equals("""")||\n\t\t\tvalidateUserConnectionDTO.getOrdersFolder()== null || validateUserConnectionDTO.getOrdersFolder().equals("""") ||\n\t\t\tvalidateUserConnectionDTO.getOrdersConfirmFolder()== null || validateUserConnectionDTO.getOrdersConfirmFolder().equals(""""))\n\t\t{\n\t\treturn null;\n\t\t}\n\t\treturn validateUserConnectionDTO;\n\t}\n\t// Method to encrypt the String\n\tpublic String encrypt (String toEncode) throws Exception{\n\t    //returns byte array encrypted with key\n\t\tbyte[] input = toEncode.getBytes(""UTF-8"");\n\t    cipher.init(Cipher.ENCRYPT_MODE, skeySpec);\n\t    byte[] ciphertext =  cipher.doFinal(input);\n\t    return  new String(Base64.encode(ciphertext));\n\t}\t\n\t// Method to decrypt the encoded String.\n\tpublic String decrypt (String toDecrypt) throws Exception{\n\t\tbyte[] decrypted = Base64.decode(toDecrypt.getBytes());\n\t    cipher.init(Cipher.DECRYPT_MODE, skeySpec);\n\t    byte[] ciphertext = cipher.doFinal(decrypted);\n\t    return\tnew String (ciphertext, ""UTF-8"");\n\t}\t\n}\n\n----------------------------------- SOURCE END -------------------------------------",1397000921298
error,log,,,"Problems occurred when invoking code from plug-in: ""org.eclipse.jdt.ui"".",1397000921300
error,log,,,"Error in JDT Core during reconcile",1397000921300
error,log,,,"Problems occurred when invoking code from plug-in: ""org.eclipse.jdt.ui"".",1397000921328
error,log,,,"Error in JDT Core during AST creation",1397000921328
activated,view,org.eclipse.wst.server.ui,1.1.207.v20110119,"org.eclipse.wst.server.ui.ServersView",1397000933135
activated,editor,org.eclipse.jdt.ui,3.6.2.r362_v20110203,"org.eclipse.jdt.ui.CompilationUnitEditor",1397000935635
activated,editor,org.eclipse.jst.jsp.ui,1.1.503.v201101262228,"org.eclipse.jst.jsp.core.jspsource.source",1397000938570
activated,editor,org.eclipse.jdt.ui,3.6.2.r362_v20110203,"org.eclipse.jdt.ui.CompilationUnitEditor",1397000941655
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.text.contentAssist.proposals",1397000982151
deactivated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1397000985146
activated,workbench,org.eclipse.ui.workbench,3.6.2.M20110210-1200,"",1397000985347
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.copy",1397000991867
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.paste",1397000994252
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.paste",1397000996284
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.paste",1397001001395
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.paste",1397001003451
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.edit.paste",1397001006100
executed,command,org.eclipse.ui,3.6.2.M20110203-1100,"org.eclipse.ui.file.save",1397001011622
activated,view,org.eclipse.wst.server.ui,1.1.207.v20110119,"org.eclipse.wst.server.ui.ServersView",1397001013210
